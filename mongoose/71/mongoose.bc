; ModuleID = 'mongoose.c'
source_filename = "mongoose.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

%struct.__sFILE = type { i8*, i32, i32, i16, i16, %struct.__sbuf, i32, i8*, i32 (i8*)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i32 (i8*, i8*, i32)*, %struct.__sbuf, %struct.__sFILEX*, i32, [3 x i8], [1 x i8], %struct.__sbuf, i32, i64 }
%struct.__sFILEX = type opaque
%struct.__sbuf = type { i8*, i32 }
%struct.mg_iface_vtable = type { void (%struct.mg_iface*)*, void (%struct.mg_iface*)*, void (%struct.mg_connection*)*, void (%struct.mg_connection*)*, i64 (%struct.mg_iface*, i32)*, i32 (%struct.mg_connection*, %union.socket_address*)*, i32 (%struct.mg_connection*, %union.socket_address*)*, void (%struct.mg_connection*, %union.socket_address*)*, void (%struct.mg_connection*)*, i32 (%struct.mg_connection*, i8*, i64)*, i32 (%struct.mg_connection*, i8*, i64)*, i32 (%struct.mg_connection*, i8*, i64)*, i32 (%struct.mg_connection*, i8*, i64, %union.socket_address*, i64*)*, i32 (%struct.mg_connection*)*, void (%struct.mg_connection*)*, void (%struct.mg_connection*, i32)*, void (%struct.mg_connection*, i32, %union.socket_address*)* }
%struct.mg_iface = type { %struct.mg_mgr*, i8*, %struct.mg_iface_vtable* }
%struct.mg_mgr = type { %struct.mg_connection*, i8*, [2 x i32], i8*, i32, i32, %struct.mg_iface**, i8* }
%struct.mg_connection = type { %struct.mg_connection*, %struct.mg_connection*, %struct.mg_connection*, %struct.mg_mgr*, i32, i32, %union.socket_address, i64, %struct.mbuf, %struct.mbuf, i64, double, void (%struct.mg_connection*, i32, i8*)*, i8*, void (i8*)*, void (%struct.mg_connection*, i32, i8*)*, i8*, %union.anon, i8*, i8*, %struct.mg_iface*, i64, i8* }
%union.socket_address = type { %struct.sockaddr_in }
%struct.sockaddr_in = type { i8, i8, i16, %struct.in_addr, [8 x i8] }
%struct.in_addr = type { i32 }
%struct.mbuf = type { i8*, i64, i64 }
%union.anon = type { i8* }
%struct.mg_send_mqtt_handshake_opts = type { i8, i16, i8*, i8*, i8*, i8* }
%struct._RuneLocale = type { [8 x i8], [32 x i8], i32 (i8*, i64, i8**)*, i32 (i32, i8*, i64, i8**)*, i32, [256 x i32], [256 x i32], [256 x i32], %struct._RuneRange, %struct._RuneRange, %struct._RuneRange, i8*, i32, i32, %struct._RuneCharClass* }
%struct._RuneRange = type { i32, %struct._RuneEntry* }
%struct._RuneEntry = type { i32, i32, i32, i32* }
%struct._RuneCharClass = type { [14 x i8], i32 }
%struct.mg_str = type { i8*, i64 }
%struct.anon = type { i8*, i64, i8* }
%struct.cs_base64_ctx = type { void (i8, i8*)*, [3 x i8], i32, i8* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.timeval = type { i64, i32 }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.cs_md5_ctx = type { [4 x i32], [2 x i32], [64 x i8] }
%union.char64long16 = type { [16 x i32] }
%struct.cs_sha1_ctx = type { [5 x i32], [2 x i32], [64 x i8] }
%struct.mg_mgr_init_opts = type { %struct.mg_iface_vtable*, i32, %struct.mg_iface_vtable**, i8* }
%struct.mg_add_sock_opts = type { i8*, i32, i8**, %struct.mg_iface* }
%struct.mg_connect_opts = type { i8*, i32, i8**, %struct.mg_iface*, i8* }
%struct.mg_resolve_async_opts = type { i8*, i32, i32, i32, i32, %struct.mg_connection** }
%struct.mg_dns_message = type { %struct.mg_str, i16, i16, i32, i32, [32 x %struct.mg_dns_resource_record], [32 x %struct.mg_dns_resource_record] }
%struct.mg_dns_resource_record = type { %struct.mg_str, i32, i32, i32, i32, %struct.mg_str }
%struct.mg_resolve_async_request = type { [1024 x i8], i32, void (%struct.mg_dns_message*, i8*, i32)*, i8*, i64, i32, i32, i64, i32 }
%struct.mg_bind_opts = type { i8*, i32, i8**, %struct.mg_iface* }
%struct.ctl_msg = type { void (%struct.mg_connection*, i32, i8*)*, [8192 x i8] }
%struct.sockaddr = type { i8, i8, [14 x i8] }
%struct.fd_set = type { [32 x i32] }
%struct.http_message = type { %struct.mg_str, %struct.mg_str, %struct.mg_str, %struct.mg_str, %struct.mg_str, i32, %struct.mg_str, %struct.mg_str, [40 x %struct.mg_str], [40 x %struct.mg_str], i64 }
%struct.mg_http_endpoint = type { %struct.mg_http_endpoint*, %struct.mg_str, i8*, i8*, void (%struct.mg_connection*, i32, i8*)* }
%struct.mg_http_proto_data = type { %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_cgi, %struct.mg_ws_proto_data, %struct.mg_http_proto_data_chuncked, %struct.mg_http_endpoint*, void (%struct.mg_connection*, i32, i8*)*, %struct.mg_reverse_proxy_data, i64, i64, i64, i32 }
%struct.mg_http_proto_data_file = type { %struct.__sFILE*, i64, i64, i32, i32 }
%struct.mg_http_proto_data_cgi = type { %struct.mg_connection* }
%struct.mg_ws_proto_data = type { i64 }
%struct.mg_http_proto_data_chuncked = type { i64 }
%struct.mg_reverse_proxy_data = type { %struct.mg_connection* }
%struct.stat = type { i32, i16, i16, i64, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, [2 x i64] }
%struct.altbuf = type { %struct.mbuf, i8*, i64, i64 }
%struct.mg_serve_http_opts = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8* }
%struct.mg_http_endpoint_opts = type { i8*, i8*, i8* }
%struct.ws_mask_ctx = type { i64, i32 }
%struct.mg_mqtt_message = type { i32, i32, i32, %struct.mg_str, %struct.mg_str, i8, i16, i8, i8, i16, %struct.mg_str, %struct.mg_str, %struct.mg_str, %struct.mg_str, %struct.mg_str, %struct.mg_str }
%struct.mg_mqtt_proto_data = type { i16, double }
%struct.mg_mqtt_topic_expression = type { i8*, i8 }
%struct.mg_dns_header = type { i16, i16, i16, i16, i16, i16 }
%struct.mg_cgi_env_block = type { %struct.mg_connection*, [8192 x i8], [64 x i8*], i32, i32 }
%struct.sigaction = type { %union.__sigaction_u, i32, i32 }
%union.__sigaction_u = type { void (i32)* }
%struct.dirent = type { i64, i64, i16, i16, i8, [1024 x i8] }
%struct.DIR = type { i32, i64, i64, i8*, i32, i64, i64, i32, %struct._opaque_pthread_mutex_t, %struct._telldir* }
%struct._opaque_pthread_mutex_t = type { i64, [56 x i8] }
%struct._telldir = type opaque
%struct.mg_ssi_call_ctx = type { %struct.http_message*, %struct.mg_str, %struct.mg_str }
%struct.websocket_message = type { i8*, i64, i8 }

@cs_base64_encode.b64 = internal global i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), align 8
@.str = private unnamed_addr constant [65 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\00", align 1
@cs_fprint_base64.b64 = internal global i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), align 8
@.str.1 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@cs_log_level = weak global i32 0, align 4
@cs_log_file = weak global %struct.__sFILE* null, align 8
@cs_log_cur_msg_level = weak global i32 -1, align 4
@s_file_level = internal global i8* null, align 8
@__stderrp = external global %struct.__sFILE*, align 8
@cs_timegm.month_day = internal constant [12 x i32] [i32 0, i32 31, i32 59, i32 90, i32 120, i32 151, i32 181, i32 212, i32 243, i32 273, i32 304, i32 334], align 16
@__func__.mbuf_insert = private unnamed_addr constant [12 x i8] c"mbuf_insert\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"mongoose.c\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"a != NULL\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"a->len <= a->size\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"off <= a->len\00", align 1
@cs_to_hex.hex = internal global i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i32 0, i32 0), align 8
@.str.6 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.7 = private unnamed_addr constant [12 x i8] c"%p 0x%lx %d\00", align 1
@mg_num_ifaces = global i32 1, align 4
@.str.8 = private unnamed_addr constant [35 x i8] c"==================================\00", align 1
@.str.9 = private unnamed_addr constant [12 x i8] c"init mgr=%p\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"%p\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"%p %p %d %#x\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"%p %s://%s:%hu\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"udp\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"tcp\00", align 1
@.str.15 = private unnamed_addr constant [15 x i8] c"%p -> %d bytes\00", align 1
@.str.16 = private unnamed_addr constant [21 x i8] c"%p %s://%s:%hu -> %d\00", align 1
@.str.17 = private unnamed_addr constant [21 x i8] c"cannot parse address\00", align 1
@.str.18 = private unnamed_addr constant [27 x i8] c"cannot schedule DNS lookup\00", align 1
@.str.19 = private unnamed_addr constant [28 x i8] c"Failed to open listener: %d\00", align 1
@.str.20 = private unnamed_addr constant [24 x i8] c"failed to open listener\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"%08x %c\00", align 1
@.str.22 = private unnamed_addr constant [16 x i8] c"%p %p %d -> %lu\00", align 1
@mg_default_iface_vtable = constant %struct.mg_iface_vtable { void (%struct.mg_iface*)* @mg_socket_if_init, void (%struct.mg_iface*)* @mg_socket_if_free, void (%struct.mg_connection*)* @mg_socket_if_add_conn, void (%struct.mg_connection*)* @mg_socket_if_remove_conn, i64 (%struct.mg_iface*, i32)* @mg_socket_if_poll, i32 (%struct.mg_connection*, %union.socket_address*)* @mg_socket_if_listen_tcp, i32 (%struct.mg_connection*, %union.socket_address*)* @mg_socket_if_listen_udp, void (%struct.mg_connection*, %union.socket_address*)* @mg_socket_if_connect_tcp, void (%struct.mg_connection*)* @mg_socket_if_connect_udp, i32 (%struct.mg_connection*, i8*, i64)* @mg_socket_if_tcp_send, i32 (%struct.mg_connection*, i8*, i64)* @mg_socket_if_udp_send, i32 (%struct.mg_connection*, i8*, i64)* @mg_socket_if_tcp_recv, i32 (%struct.mg_connection*, i8*, i64, %union.socket_address*, i64*)* @mg_socket_if_udp_recv, i32 (%struct.mg_connection*)* @mg_socket_if_create_conn, void (%struct.mg_connection*)* @mg_socket_if_destroy_conn, void (%struct.mg_connection*, i32)* @mg_socket_if_sock_set, void (%struct.mg_connection*, i32, %union.socket_address*)* @mg_socket_if_get_conn_addr }, align 8
@mg_ifaces = global [1 x %struct.mg_iface_vtable*] [%struct.mg_iface_vtable* @mg_default_iface_vtable], align 8
@mg_null_iface_vtable = constant %struct.mg_iface_vtable { void (%struct.mg_iface*)* @mg_null_if_init, void (%struct.mg_iface*)* @mg_null_if_free, void (%struct.mg_connection*)* @mg_null_if_add_conn, void (%struct.mg_connection*)* @mg_null_if_remove_conn, i64 (%struct.mg_iface*, i32)* @mg_null_if_poll, i32 (%struct.mg_connection*, %union.socket_address*)* @mg_null_if_listen_tcp, i32 (%struct.mg_connection*, %union.socket_address*)* @mg_null_if_listen_udp, void (%struct.mg_connection*, %union.socket_address*)* @mg_null_if_connect_tcp, void (%struct.mg_connection*)* @mg_null_if_connect_udp, i32 (%struct.mg_connection*, i8*, i64)* @mg_null_if_tcp_send, i32 (%struct.mg_connection*, i8*, i64)* @mg_null_if_udp_send, i32 (%struct.mg_connection*, i8*, i64)* @mg_null_if_tcp_recv, i32 (%struct.mg_connection*, i8*, i64, %union.socket_address*, i64*)* @mg_null_if_udp_recv, i32 (%struct.mg_connection*)* @mg_null_if_create_conn, void (%struct.mg_connection*)* @mg_null_if_destroy_conn, void (%struct.mg_connection*, i32)* @mg_null_if_sock_set, void (%struct.mg_connection*, i32, %union.socket_address*)* @mg_null_if_get_conn_addr }, align 8
@.str.24 = private unnamed_addr constant [33 x i8] c"%p sock %d rc %d errno %d err %d\00", align 1
@.str.25 = private unnamed_addr constant [52 x i8] c"%p fd=%d fd_flags=%d nc_flags=0x%lx rmbl=%d smbl=%d\00", align 1
@.str.26 = private unnamed_addr constant [46 x i8] c"%p after fd=%d nc_flags=0x%lx rmbl=%d smbl=%d\00", align 1
@.str.27 = private unnamed_addr constant [6 x i8] c"%p %d\00", align 1
@.str.28 = private unnamed_addr constant [18 x i8] c"%p using select()\00", align 1
@mg_socket_iface_vtable = constant %struct.mg_iface_vtable { void (%struct.mg_iface*)* @mg_socket_if_init, void (%struct.mg_iface*)* @mg_socket_if_free, void (%struct.mg_connection*)* @mg_socket_if_add_conn, void (%struct.mg_connection*)* @mg_socket_if_remove_conn, i64 (%struct.mg_iface*, i32)* @mg_socket_if_poll, i32 (%struct.mg_connection*, %union.socket_address*)* @mg_socket_if_listen_tcp, i32 (%struct.mg_connection*, %union.socket_address*)* @mg_socket_if_listen_udp, void (%struct.mg_connection*, %union.socket_address*)* @mg_socket_if_connect_tcp, void (%struct.mg_connection*)* @mg_socket_if_connect_udp, i32 (%struct.mg_connection*, i8*, i64)* @mg_socket_if_tcp_send, i32 (%struct.mg_connection*, i8*, i64)* @mg_socket_if_udp_send, i32 (%struct.mg_connection*, i8*, i64)* @mg_socket_if_tcp_recv, i32 (%struct.mg_connection*, i8*, i64, %union.socket_address*, i64*)* @mg_socket_if_udp_recv, i32 (%struct.mg_connection*)* @mg_socket_if_create_conn, void (%struct.mg_connection*)* @mg_socket_if_destroy_conn, void (%struct.mg_connection*, i32)* @mg_socket_if_sock_set, void (%struct.mg_connection*, i32, %union.socket_address*)* @mg_socket_if_get_conn_addr }, align 8
@.str.29 = private unnamed_addr constant [4 x i8] c"://\00", align 1
@.str.30 = private unnamed_addr constant [3 x i8] c"?#\00", align 1
@.str.31 = private unnamed_addr constant [2 x i8] c"#\00", align 1
@.str.32 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.33 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.34 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.35 = private unnamed_addr constant [3 x i8] c"..\00", align 1
@.str.36 = private unnamed_addr constant [2 x i8] c"@\00", align 1
@.str.37 = private unnamed_addr constant [4 x i8] c":%u\00", align 1
@.str.38 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.39 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.40 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@.str.41 = private unnamed_addr constant [4 x i8] c"PUT\00", align 1
@.str.42 = private unnamed_addr constant [5 x i8] c"POST\00", align 1
@.str.43 = private unnamed_addr constant [18 x i8] c"Transfer-Encoding\00", align 1
@.str.44 = private unnamed_addr constant [8 x i8] c"chunked\00", align 1
@.str.45 = private unnamed_addr constant [16 x i8] c"invalid request\00", align 1
@.str.46 = private unnamed_addr constant [29 x i8] c"%p WebSocket upgrade code %d\00", align 1
@.str.47 = private unnamed_addr constant [21 x i8] c"Sec-WebSocket-Accept\00", align 1
@.str.48 = private unnamed_addr constant [18 x i8] c"Sec-WebSocket-Key\00", align 1
@.str.49 = private unnamed_addr constant [81 x i8] c"%p recv buffer (%lu bytes) exceeds the limit %lu bytes, and not drained, closing\00", align 1
@.str.50 = private unnamed_addr constant [16 x i8] c"%p %s %.*s %.*s\00", align 1
@.str.51 = private unnamed_addr constant [27 x i8] c"%p finished %d ml %d bl %d\00", align 1
@.str.52 = private unnamed_addr constant [16 x i8] c"Partial Content\00", align 1
@.str.53 = private unnamed_addr constant [6 x i8] c"Moved\00", align 1
@.str.54 = private unnamed_addr constant [6 x i8] c"Found\00", align 1
@.str.55 = private unnamed_addr constant [12 x i8] c"Bad Request\00", align 1
@.str.56 = private unnamed_addr constant [13 x i8] c"Unauthorized\00", align 1
@.str.57 = private unnamed_addr constant [10 x i8] c"Forbidden\00", align 1
@.str.58 = private unnamed_addr constant [10 x i8] c"Not Found\00", align 1
@.str.59 = private unnamed_addr constant [32 x i8] c"Requested Range Not Satisfiable\00", align 1
@.str.60 = private unnamed_addr constant [13 x i8] c"I'm a teapot\00", align 1
@.str.61 = private unnamed_addr constant [22 x i8] c"Internal Server Error\00", align 1
@.str.62 = private unnamed_addr constant [12 x i8] c"Bad Gateway\00", align 1
@.str.63 = private unnamed_addr constant [20 x i8] c"Service Unavailable\00", align 1
@.str.64 = private unnamed_addr constant [3 x i8] c"OK\00", align 1
@.str.65 = private unnamed_addr constant [17 x i8] c"HTTP/1.1 %d %s\0D\0A\00", align 1
@.str.66 = private unnamed_addr constant [13 x i8] c"Server: %s\0D\0A\00", align 1
@mg_version_header = internal global i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.195, i32 0, i32 0), align 8
@.str.67 = private unnamed_addr constant [7 x i8] c"%.*s\0D\0A\00", align 1
@.str.68 = private unnamed_addr constant [36 x i8] c"<p>Moved <a href='%.*s'>here</a>.\0D\0A\00", align 1
@.str.69 = private unnamed_addr constant [93 x i8] c"Location: %.*s\0D\0AContent-Type: text/html\0D\0AContent-Length: %d\0D\0ACache-Control: no-cache\0D\0A%.*s%s\00", align 1
@.str.70 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.71 = private unnamed_addr constant [29 x i8] c"Transfer-Encoding: chunked\0D\0A\00", align 1
@.str.72 = private unnamed_addr constant [23 x i8] c"Content-Length: %lld\0D\0A\00", align 1
@.str.73 = private unnamed_addr constant [9 x i8] c"%p %d %s\00", align 1
@.str.74 = private unnamed_addr constant [44 x i8] c"Content-Type: text/plain\0D\0AConnection: close\00", align 1
@.str.75 = private unnamed_addr constant [18 x i8] c"%p [%s] %.*s %.*s\00", align 1
@.str.76 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.77 = private unnamed_addr constant [12 x i8] c"Open failed\00", align 1
@.str.78 = private unnamed_addr constant [6 x i8] c"Range\00", align 1
@.str.79 = private unnamed_addr constant [30 x i8] c"Content-Range: bytes */%lld\0D\0A\00", align 1
@.str.80 = private unnamed_addr constant [38 x i8] c"Content-Range: bytes %lld-%lld/%lld\0D\0A\00", align 1
@.str.81 = private unnamed_addr constant [11 x i8] c"Connection\00", align 1
@.str.82 = private unnamed_addr constant [11 x i8] c"keep-alive\00", align 1
@.str.83 = private unnamed_addr constant [9 x i8] c"HTTP/1.1\00", align 1
@.str.84 = private unnamed_addr constant [121 x i8] c"Date: %s\0D\0ALast-Modified: %s\0D\0AAccept-Ranges: bytes\0D\0AContent-Type: %.*s\0D\0AConnection: %s\0D\0AContent-Length: %zu\0D\0A%sEtag: %s\0D\0A\00", align 1
@.str.85 = private unnamed_addr constant [6 x i8] c"close\00", align 1
@.str.86 = private unnamed_addr constant [25 x i8] c"Content-Encoding: %.*s\0D\0A\00", align 1
@.str.87 = private unnamed_addr constant [6 x i8] c"%lX\0D\0A\00", align 1
@.str.88 = private unnamed_addr constant [5 x i8] c"&lt;\00", align 1
@.str.89 = private unnamed_addr constant [5 x i8] c"&gt;\00", align 1
@.str.90 = private unnamed_addr constant [14 x i8] c"Authorization\00", align 1
@.str.91 = private unnamed_addr constant [7 x i8] c"Basic \00", align 1
@.str.92 = private unnamed_addr constant [20 x i8] c"%%%zu[^:]:%%%zu[^\0A]\00", align 1
@mg_http_create_digest_auth_header.colon = internal constant [2 x i8] c":\00", align 1
@mg_http_create_digest_auth_header.qop = internal constant [5 x i8] c"auth\00", align 1
@mg_http_create_digest_auth_header.one = internal constant i64 1, align 8
@.str.93 = private unnamed_addr constant [4 x i8] c"%lx\00", align 1
@.str.94 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.95 = private unnamed_addr constant [101 x i8] c"Authorization: Digest username=\22%s\22,realm=\22%s\22,uri=\22%s\22,qop=%s,nc=1,cnonce=%s,nonce=%s,response=%s\0D\0A\00", align 1
@.str.96 = private unnamed_addr constant [9 x i8] c"username\00", align 1
@.str.97 = private unnamed_addr constant [7 x i8] c"cnonce\00", align 1
@.str.98 = private unnamed_addr constant [9 x i8] c"response\00", align 1
@.str.99 = private unnamed_addr constant [4 x i8] c"uri\00", align 1
@.str.100 = private unnamed_addr constant [4 x i8] c"qop\00", align 1
@.str.101 = private unnamed_addr constant [3 x i8] c"nc\00", align 1
@.str.102 = private unnamed_addr constant [6 x i8] c"nonce\00", align 1
@.str.103 = private unnamed_addr constant [15 x i8] c"%[^:]:%[^:]:%s\00", align 1
@.str.104 = private unnamed_addr constant [16 x i8] c"%.*s %s %.*s %s\00", align 1
@.str.105 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.106 = private unnamed_addr constant [9 x i8] c"%.*s%c%s\00", align 1
@.str.107 = private unnamed_addr constant [14 x i8] c"%.*s %s %x %d\00", align 1
@.str.108 = private unnamed_addr constant [9 x i8] c"%.*s%.*s\00", align 1
@.str.109 = private unnamed_addr constant [5 x i8] c"http\00", align 1
@.str.110 = private unnamed_addr constant [6 x i8] c"https\00", align 1
@.str.111 = private unnamed_addr constant [33 x i8] c"Proxying %.*s to %s (rule: %.*s)\00", align 1
@.str.112 = private unnamed_addr constant [27 x i8] c"Error connecting to %s: %s\00", align 1
@.str.113 = private unnamed_addr constant [21 x i8] c"%.*s %.*s HTTP/1.1\0D\0A\00", align 1
@.str.114 = private unnamed_addr constant [13 x i8] c"Host: %.*s\0D\0A\00", align 1
@.str.115 = private unnamed_addr constant [5 x i8] c"Host\00", align 1
@.str.116 = private unnamed_addr constant [18 x i8] c"Transfer-encoding\00", align 1
@.str.117 = private unnamed_addr constant [22 x i8] c"Content-Length: %zu\0D\0A\00", align 1
@.str.118 = private unnamed_addr constant [7 x i8] c"Expect\00", align 1
@.str.119 = private unnamed_addr constant [13 x i8] c"100-continue\00", align 1
@.str.120 = private unnamed_addr constant [13 x i8] c"%.*s: %.*s\0D\0A\00", align 1
@.str.121 = private unnamed_addr constant [111 x i8] c"HTTP/1.1 401 Unauthorized\0D\0AWWW-Authenticate: Digest qop=\22auth\22, realm=\22%s\22, nonce=\22%lx\22\0D\0AContent-Length: 0\0D\0A\0D\0A\00", align 1
@.str.122 = private unnamed_addr constant [10 x i8] c".htpasswd\00", align 1
@.str.123 = private unnamed_addr constant [4 x i8] c"yes\00", align 1
@.str.124 = private unnamed_addr constant [16 x i8] c"**.cgi$|**.php$\00", align 1
@.str.125 = private unnamed_addr constant [19 x i8] c"**.shtml$|**.shtm$\00", align 1
@.str.126 = private unnamed_addr constant [53 x i8] c"index.html,index.htm,index.shtml,index.cgi,index.php\00", align 1
@.str.127 = private unnamed_addr constant [17 x i8] c"cannot parse url\00", align 1
@.str.128 = private unnamed_addr constant [14 x i8] c"tcp://%.*s:%u\00", align 1
@.str.129 = private unnamed_addr constant [18 x i8] c"%s use_ssl? %d %s\00", align 1
@.str.130 = private unnamed_addr constant [16 x i8] c"ssl is disabled\00", align 1
@.str.131 = private unnamed_addr constant [62 x i8] c"%s %.*s HTTP/1.1\0D\0AHost: %.*s\0D\0AContent-Length: %zu\0D\0A%.*s%s\0D\0A%s\00", align 1
@.str.132 = private unnamed_addr constant [4 x i8] c"GET\00", align 1
@mg_parse_multipart.cd = internal constant [22 x i8] c"Content-Disposition: \00", align 16
@.str.133 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.134 = private unnamed_addr constant [9 x i8] c"filename\00", align 1
@.str.135 = private unnamed_addr constant [9 x i8] c"%p %d %d\00", align 1
@.str.136 = private unnamed_addr constant [115 x i8] c"GET %.*s HTTP/1.1\0D\0AUpgrade: websocket\0D\0AConnection: Upgrade\0D\0A%.*sSec-WebSocket-Version: 13\0D\0ASec-WebSocket-Key: %s\0D\0A\00", align 1
@.str.137 = private unnamed_addr constant [31 x i8] c"Sec-WebSocket-Protocol: %.*s\0D\0A\00", align 1
@.str.138 = private unnamed_addr constant [5 x i8] c"%.*s\00", align 1
@.str.139 = private unnamed_addr constant [3 x i8] c"ws\00", align 1
@.str.140 = private unnamed_addr constant [4 x i8] c"wss\00", align 1
@.str.141 = private unnamed_addr constant [6 x i8] c"%s:%d\00", align 1
@.str.142 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@.str.143 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.144 = private unnamed_addr constant [3 x i8] c"<-\00", align 1
@.str.145 = private unnamed_addr constant [3 x i8] c"->\00", align 1
@.str.146 = private unnamed_addr constant [3 x i8] c"<A\00", align 1
@.str.147 = private unnamed_addr constant [3 x i8] c"C>\00", align 1
@.str.148 = private unnamed_addr constant [3 x i8] c"XX\00", align 1
@.str.149 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@__stdoutp = external global %struct.__sFILE*, align 8
@.str.150 = private unnamed_addr constant [3 x i8] c"--\00", align 1
@.str.151 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.152 = private unnamed_addr constant [20 x i8] c"%lu %p %s %s %s %d\0A\00", align 1
@mg_is_big_endian.n = internal constant i32 1, align 4
@.str.153 = private unnamed_addr constant [22 x i8] c"Authorization: Basic \00", align 1
@.str.154 = private unnamed_addr constant [2 x i8] c":\00", align 1
@.str.155 = private unnamed_addr constant [17 x i8] c"0123456789ABCDEF\00", align 1
@.str.156 = private unnamed_addr constant [2 x i8] c"+\00", align 1
@.str.157 = private unnamed_addr constant [2 x i8] c"%\00", align 1
@.str.158 = private unnamed_addr constant [11 x i8] c"._-$,;~()/\00", align 1
@mg_send_mqtt_handshake.opts = internal global %struct.mg_send_mqtt_handshake_opts zeroinitializer, align 8
@.str.159 = private unnamed_addr constant [8 x i8] c"\00\04MQTT\04\00", align 1
@.str.160 = private unnamed_addr constant [2 x i8] zeroinitializer, align 1
@.str.161 = private unnamed_addr constant [6 x i8] c"%s %d\00", align 1
@mg_dns_tid = internal global i32 160, align 4
@.str.162 = private unnamed_addr constant [11 x i8] c"/etc/hosts\00", align 1
@.str.163 = private unnamed_addr constant [14 x i8] c"%u.%u.%u.%u%n\00", align 1
@.str.164 = private unnamed_addr constant [5 x i8] c"%s%n\00", align 1
@.str.165 = private unnamed_addr constant [9 x i8] c"%s %d %p\00", align 1
@.str.166 = private unnamed_addr constant [8 x i8] c"8.8.8.8\00", align 1
@.str.167 = private unnamed_addr constant [12 x i8] c"udp://%s:53\00", align 1
@from_b64.tab = internal constant [128 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF>\FF\FF\FF?456789:;<=\FF\FF\FF\C8\FF\FF\FF\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D\0E\0F\10\11\12\13\14\15\16\17\18\19\FF\FF\FF\FF\FF\FF\1A\1B\1C\1D\1E\1F !\22#$%&'()*+,-./0123\FF\FF\FF\FF\FF", align 16
@_DefaultRuneLocale = external global %struct._RuneLocale, align 8
@.str.168 = private unnamed_addr constant [51 x i8] c"%p %s ev=%d ev_data=%p flags=0x%lx rmbl=%d smbl=%d\00", align 1
@.str.169 = private unnamed_addr constant [5 x i8] c"user\00", align 1
@.str.170 = private unnamed_addr constant [6 x i8] c"proto\00", align 1
@.str.171 = private unnamed_addr constant [40 x i8] c"%p after %s flags=0x%lx rmbl=%d smbl=%d\00", align 1
@.str.172 = private unnamed_addr constant [26 x i8] c"failed to init connection\00", align 1
@.str.173 = private unnamed_addr constant [6 x i8] c"%p %p\00", align 1
@.str.174 = private unnamed_addr constant [26 x i8] c"%p <- %d bytes from %s:%d\00", align 1
@.str.175 = private unnamed_addr constant [15 x i8] c"%p <- %d bytes\00", align 1
@.str.176 = private unnamed_addr constant [7 x i8] c"udp://\00", align 1
@.str.177 = private unnamed_addr constant [7 x i8] c"tcp://\00", align 1
@.str.178 = private unnamed_addr constant [17 x i8] c"%u.%u.%u.%u:%u%n\00", align 1
@.str.179 = private unnamed_addr constant [12 x i8] c"%[^ :]:%u%n\00", align 1
@.str.180 = private unnamed_addr constant [10 x i8] c"localhost\00", align 1
@.str.181 = private unnamed_addr constant [6 x i8] c":%u%n\00", align 1
@.str.182 = private unnamed_addr constant [5 x i8] c"%u%n\00", align 1
@.str.183 = private unnamed_addr constant [17 x i8] c"%d.%d.%d.%d/%d%n\00", align 1
@.str.184 = private unnamed_addr constant [14 x i8] c"%d.%d.%d.%d%n\00", align 1
@.str.185 = private unnamed_addr constant [28 x i8] c"failed to create connection\00", align 1
@.str.186 = private unnamed_addr constant [25 x i8] c"%p: failed to accept: %d\00", align 1
@.str.187 = private unnamed_addr constant [19 x i8] c"%p conn from %s:%d\00", align 1
@.str.188 = private unnamed_addr constant [24 x i8] c"read %d from ctl socket\00", align 1
@.str.189 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.190 = private unnamed_addr constant [15 x i8] c"Content-Length\00", align 1
@.str.191 = private unnamed_addr constant [22 x i8] c"%p sent %d (total %d)\00", align 1
@.str.192 = private unnamed_addr constant [25 x i8] c"%p done, %d bytes, ka %d\00", align 1
@__func__.mg_handle_chunked = private unnamed_addr constant [18 x i8] c"mg_handle_chunked\00", align 1
@.str.193 = private unnamed_addr constant [17 x i8] c"blen >= body_len\00", align 1
@.str.194 = private unnamed_addr constant [10 x i8] c"i <= blen\00", align 1
@.str.195 = private unnamed_addr constant [14 x i8] c"Mongoose/6.18\00", align 1
@.str.196 = private unnamed_addr constant [16 x i8] c"bytes=%lld-%lld\00", align 1
@.str.197 = private unnamed_addr constant [11 x i8] c"\22%lx.%lld\22\00", align 1
@.str.198 = private unnamed_addr constant [26 x i8] c"%a, %d %b %Y %H:%M:%S GMT\00", align 1
@mg_mkmd5resp.colon = internal constant [2 x i8] c":\00", align 1
@mg_mkmd5resp.one = internal constant i64 1, align 8
@.str.199 = private unnamed_addr constant [20 x i8] c"%p: upstream closed\00", align 1
@.str.200 = private unnamed_addr constant [8 x i8] c"http://\00", align 1
@mg_http_handle_forwarding.p1 = private unnamed_addr constant %struct.mg_str { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.200, i32 0, i32 0), i64 7 }, align 8
@.str.201 = private unnamed_addr constant [9 x i8] c"https://\00", align 1
@mg_http_handle_forwarding.p2 = private unnamed_addr constant %struct.mg_str { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.201, i32 0, i32 0), i64 8 }, align 8
@mg_http_send_port_based_redirect.local_port = private unnamed_addr constant <{ i8, [19 x i8] }> <{ i8 37, [19 x i8] zeroinitializer }>, align 16
@.str.202 = private unnamed_addr constant [42 x i8] c"Content-Length: 0\0D\0ALocation: %.*s%.*s\0D\0A\0D\0A\00", align 1
@__func__.mg_uri_to_local_path = private unnamed_addr constant [21 x i8] c"mg_uri_to_local_path\00", align 1
@.str.203 = private unnamed_addr constant [31 x i8] c"root.p != NULL && root.len > 0\00", align 1
@.str.204 = private unnamed_addr constant [24 x i8] c"'%.*s' -> '%s' + '%.*s'\00", align 1
@.str.205 = private unnamed_addr constant [62 x i8] c"%p %.*s [%s] exists=%d is_dir=%d is_dav=%d is_cgi=%d index=%s\00", align 1
@.str.206 = private unnamed_addr constant [59 x i8] c"HTTP/1.1 301 Moved\0D\0ALocation: %.*s/\0D\0AContent-Length: 0\0D\0A\0D\0A\00", align 1
@.str.207 = private unnamed_addr constant [8 x i8] c"OPTIONS\00", align 1
@.str.208 = private unnamed_addr constant [9 x i8] c"%s%c%.*s\00", align 1
@.str.209 = private unnamed_addr constant [10 x i8] c"[%s] [%s]\00", align 1
@.str.210 = private unnamed_addr constant [8 x i8] c"%p [%s]\00", align 1
@.str.211 = private unnamed_addr constant [12 x i8] c"CGI failure\00", align 1
@.str.212 = private unnamed_addr constant [12 x i8] c"SERVER_NAME\00", align 1
@.str.213 = private unnamed_addr constant [15 x i8] c"SERVER_NAME=%s\00", align 1
@.str.214 = private unnamed_addr constant [15 x i8] c"SERVER_ROOT=%s\00", align 1
@.str.215 = private unnamed_addr constant [17 x i8] c"DOCUMENT_ROOT=%s\00", align 1
@.str.216 = private unnamed_addr constant [22 x i8] c"SERVER_SOFTWARE=%s/%s\00", align 1
@.str.217 = private unnamed_addr constant [9 x i8] c"Mongoose\00", align 1
@.str.218 = private unnamed_addr constant [5 x i8] c"6.18\00", align 1
@.str.219 = private unnamed_addr constant [26 x i8] c"GATEWAY_INTERFACE=CGI/1.1\00", align 1
@.str.220 = private unnamed_addr constant [25 x i8] c"SERVER_PROTOCOL=HTTP/1.1\00", align 1
@.str.221 = private unnamed_addr constant [20 x i8] c"REDIRECT_STATUS=200\00", align 1
@.str.222 = private unnamed_addr constant [20 x i8] c"REQUEST_METHOD=%.*s\00", align 1
@.str.223 = private unnamed_addr constant [23 x i8] c"REQUEST_URI=%.*s%s%.*s\00", align 1
@.str.224 = private unnamed_addr constant [15 x i8] c"REMOTE_ADDR=%s\00", align 1
@.str.225 = private unnamed_addr constant [15 x i8] c"SERVER_PORT=%s\00", align 1
@.str.226 = private unnamed_addr constant [20 x i8] c"SCRIPT_NAME=%.*s/%s\00", align 1
@.str.227 = private unnamed_addr constant [17 x i8] c"SCRIPT_NAME=%.*s\00", align 1
@.str.228 = private unnamed_addr constant [19 x i8] c"SCRIPT_FILENAME=%s\00", align 1
@.str.229 = private unnamed_addr constant [15 x i8] c"PATH_INFO=%.*s\00", align 1
@.str.230 = private unnamed_addr constant [21 x i8] c"PATH_TRANSLATED=%.*s\00", align 1
@.str.231 = private unnamed_addr constant [10 x i8] c"HTTPS=off\00", align 1
@.str.232 = private unnamed_addr constant [13 x i8] c"Content-Type\00", align 1
@.str.233 = private unnamed_addr constant [18 x i8] c"CONTENT_TYPE=%.*s\00", align 1
@.str.234 = private unnamed_addr constant [18 x i8] c"QUERY_STRING=%.*s\00", align 1
@.str.235 = private unnamed_addr constant [20 x i8] c"CONTENT_LENGTH=%.*s\00", align 1
@.str.236 = private unnamed_addr constant [5 x i8] c"PATH\00", align 1
@.str.237 = private unnamed_addr constant [4 x i8] c"TMP\00", align 1
@.str.238 = private unnamed_addr constant [5 x i8] c"TEMP\00", align 1
@.str.239 = private unnamed_addr constant [7 x i8] c"TMPDIR\00", align 1
@.str.240 = private unnamed_addr constant [8 x i8] c"PERLLIB\00", align 1
@.str.241 = private unnamed_addr constant [13 x i8] c"MONGOOSE_CGI\00", align 1
@.str.242 = private unnamed_addr constant [16 x i8] c"LD_LIBRARY_PATH\00", align 1
@.str.243 = private unnamed_addr constant [15 x i8] c"HTTP_%.*s=%.*s\00", align 1
@.str.244 = private unnamed_addr constant [6 x i8] c"%s=%s\00", align 1
@.str.245 = private unnamed_addr constant [44 x i8] c"Status: 500\0D\0A\0D\0A500 Server Error: %s%s%s: %s\00", align 1
@.str.246 = private unnamed_addr constant [12 x i8] c"Bad headers\00", align 1
@.str.247 = private unnamed_addr constant [9 x i8] c"Location\00", align 1
@.str.248 = private unnamed_addr constant [21 x i8] c"HTTP/1.1 302 Moved\0D\0A\00", align 1
@.str.249 = private unnamed_addr constant [7 x i8] c"Status\00", align 1
@.str.250 = private unnamed_addr constant [16 x i8] c"HTTP/1.1 %.*s\0D\0A\00", align 1
@.str.251 = private unnamed_addr constant [18 x i8] c"HTTP/1.1 200 OK\0D\0A\00", align 1
@.str.252 = private unnamed_addr constant [9 x i8] c"%p CLOSE\00", align 1
@.str.253 = private unnamed_addr constant [6 x i8] c"MKCOL\00", align 1
@.str.254 = private unnamed_addr constant [45 x i8] c"Allow: GET, POST, HEAD, CONNECT, OPTIONS\0D\0A\0D\0A\00", align 1
@mg_send_directory_listing.sort_js_code = internal global i8* getelementptr inbounds ([453 x i8], [453 x i8]* @.str.255, i32 0, i32 0), align 8
@.str.255 = private unnamed_addr constant [453 x i8] c"<script>function srt(tb, sc, so, d) {var tr = Array.prototype.slice.call(tb.rows, 0),tr = tr.sort(function (a, b) { var c1 = a.cells[sc], c2 = b.cells[sc],n1 = c1.getAttribute('name'), n2 = c2.getAttribute('name'), t1 = a.cells[2].getAttribute('name'), t2 = b.cells[2].getAttribute('name'); return so * (t1 < 0 && t2 >= 0 ? -1 : t2 < 0 && t1 >= 0 ? 1 : n1 ? parseInt(n2) - parseInt(n1) : c1.textContent.trim().localeCompare(c2.textContent.trim())); });\00", align 1
@mg_send_directory_listing.sort_js_code2 = internal global i8* getelementptr inbounds ([452 x i8], [452 x i8]* @.str.256, i32 0, i32 0), align 8
@.str.256 = private unnamed_addr constant [452 x i8] c"for (var i = 0; i < tr.length; i++) tb.appendChild(tr[i]); if (!d) window.location.hash = ('sc=' + sc + '&so=' + so); };window.onload = function() {var tb = document.getElementById('tb');var m = /sc=([012]).so=(1|-1)/.exec(window.location.hash) || [0, 2, 1];var sc = m[1], so = m[2]; document.onclick = function(ev) { var c = ev.target.rel; if (c) {if (c == sc) so *= -1; srt(tb, c, so); sc = c; ev.preventDefault();}};srt(tb, sc, so, true);}</script>\00", align 1
@.str.257 = private unnamed_addr constant [19 x i8] c"%s: %s\0D\0A%s: %s\0D\0A\0D\0A\00", align 1
@.str.258 = private unnamed_addr constant [25 x i8] c"text/html; charset=utf-8\00", align 1
@.str.259 = private unnamed_addr constant [391 x i8] c"<!DOCTYPE html><html><head><title>Index of %.*s</title>%s%s<style>th,td {text-align: left; padding-right: 1em; font-family: monospace; }</style></head><body><h1>Index of %.*s</h1><table cellpadding=\220\22><thead><tr><th><a href=\22#\22 rel=\220\22>Name</a></th><th><a href=\22#\22 rel=\221\22>Modified</a></th><th><a href=\22#\22 rel=\222\22>Size</a></th></tr><tr><td colspan=\223\22><hr></td></tr></thead><tbody id=\22tb\22>\00", align 1
@.str.260 = private unnamed_addr constant [101 x i8] c"</tbody><tfoot><tr><td colspan=\223\22><hr></td></tr></tfoot></table><address>%s</address></body></html>\00", align 1
@.str.261 = private unnamed_addr constant [6 x i8] c"%s/%s\00", align 1
@.str.262 = private unnamed_addr constant [21 x i8] c"%p opendir(%s) -> %d\00", align 1
@.str.263 = private unnamed_addr constant [12 x i8] c"[DIRECTORY]\00", align 1
@.str.264 = private unnamed_addr constant [6 x i8] c"%.1fk\00", align 1
@.str.265 = private unnamed_addr constant [6 x i8] c"%.1fM\00", align 1
@.str.266 = private unnamed_addr constant [6 x i8] c"%.1fG\00", align 1
@.str.267 = private unnamed_addr constant [15 x i8] c"%d-%b-%Y %H:%M\00", align 1
@.str.268 = private unnamed_addr constant [76 x i8] c"<tr><td><a href=\22%s%s\22>%s%s</a></td><td>%s</td><td name=\22%lld\22>%s</td></tr>\00", align 1
@.str.269 = private unnamed_addr constant [14 x i8] c"If-None-Match\00", align 1
@.str.270 = private unnamed_addr constant [18 x i8] c"If-Modified-Since\00", align 1
@mg_parse_date_string.days_before_month = internal constant [12 x i16] [i16 0, i16 31, i16 59, i16 90, i16 120, i16 151, i16 181, i16 212, i16 243, i16 273, i16 304, i16 334], align 16
@.str.271 = private unnamed_addr constant [19 x i8] c"%d/%3s/%d %d:%d:%d\00", align 1
@.str.272 = private unnamed_addr constant [19 x i8] c"%d %3s %d %d:%d:%d\00", align 1
@.str.273 = private unnamed_addr constant [25 x i8] c"%*3s, %d %3s %d %d:%d:%d\00", align 1
@.str.274 = private unnamed_addr constant [19 x i8] c"%d-%3s-%d %d:%d:%d\00", align 1
@mg_get_month_index.month_names = internal global [12 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.275, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.276, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.277, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.278, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.279, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.280, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.281, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.282, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.283, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.284, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.285, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.286, i32 0, i32 0)], align 16
@.str.275 = private unnamed_addr constant [4 x i8] c"Jan\00", align 1
@.str.276 = private unnamed_addr constant [4 x i8] c"Feb\00", align 1
@.str.277 = private unnamed_addr constant [4 x i8] c"Mar\00", align 1
@.str.278 = private unnamed_addr constant [4 x i8] c"Apr\00", align 1
@.str.279 = private unnamed_addr constant [4 x i8] c"May\00", align 1
@.str.280 = private unnamed_addr constant [4 x i8] c"Jun\00", align 1
@.str.281 = private unnamed_addr constant [4 x i8] c"Jul\00", align 1
@.str.282 = private unnamed_addr constant [4 x i8] c"Aug\00", align 1
@.str.283 = private unnamed_addr constant [4 x i8] c"Sep\00", align 1
@.str.284 = private unnamed_addr constant [4 x i8] c"Oct\00", align 1
@.str.285 = private unnamed_addr constant [4 x i8] c"Nov\00", align 1
@.str.286 = private unnamed_addr constant [4 x i8] c"Dec\00", align 1
@.str.287 = private unnamed_addr constant [11 x i8] c"text/plain\00", align 1
@.str.288 = private unnamed_addr constant [6 x i8] c"%p %s\00", align 1
@.str.289 = private unnamed_addr constant [40 x i8] c"Content-Type: %.*s\0D\0AConnection: close\0D\0A\00", align 1
@mg_send_ssi_file.btag = internal constant %struct.mg_str { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.290, i32 0, i32 0), i64 5 }, align 8
@.str.290 = private unnamed_addr constant [6 x i8] c"<!--#\00", align 1
@mg_send_ssi_file.d_include = internal constant %struct.mg_str { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.291, i32 0, i32 0), i64 7 }, align 8
@.str.291 = private unnamed_addr constant [8 x i8] c"include\00", align 1
@mg_send_ssi_file.d_call = internal constant %struct.mg_str { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.292, i32 0, i32 0), i64 4 }, align 8
@.str.292 = private unnamed_addr constant [5 x i8] c"call\00", align 1
@.str.293 = private unnamed_addr constant [36 x i8] c"SSI #include level is too deep (%s)\00", align 1
@.str.294 = private unnamed_addr constant [25 x i8] c"%s: SSI tag is too large\00", align 1
@.str.295 = private unnamed_addr constant [17 x i8] c" virtual=\22%[^\22]\22\00", align 1
@.str.296 = private unnamed_addr constant [17 x i8] c" abspath=\22%[^\22]\22\00", align 1
@.str.297 = private unnamed_addr constant [14 x i8] c" file=\22%[^\22]\22\00", align 1
@.str.298 = private unnamed_addr constant [9 x i8] c" \22%[^\22]\22\00", align 1
@.str.299 = private unnamed_addr constant [23 x i8] c"Bad SSI #include: [%s]\00", align 1
@.str.300 = private unnamed_addr constant [36 x i8] c"SSI include error: mg_fopen(%s): %s\00", align 1
@.str.301 = private unnamed_addr constant [21 x i8] c"application/x-gunzip\00", align 1
@.str.302 = private unnamed_addr constant [21 x i8] c"'%.*s' '%.*s' '%.*s'\00", align 1
@.str.303 = private unnamed_addr constant [5 x i8] c"gzip\00", align 1
@mg_static_builtin_mime_types = internal constant [49 x %struct.anon] [%struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.304, i32 0, i32 0), i64 4, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.305, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.304, i32 0, i32 0), i64 4, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.305, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.306, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.305, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.307, i32 0, i32 0), i64 4, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.305, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.308, i32 0, i32 0), i64 5, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.305, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.309, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.310, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.311, i32 0, i32 0), i64 2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.312, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.313, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.314, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.315, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.316, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.317, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.318, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.319, i32 0, i32 0), i64 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.318, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.320, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.321, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.322, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.323, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.324, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.287, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.325, i32 0, i32 0), i64 7, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.326, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.327, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.328, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.329, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.330, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.331, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.332, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.333, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.334, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.335, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.336, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.337, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.338, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.339, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.340, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.341, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.342, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.343, i32 0, i32 0), i64 4, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.344, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.345, i32 0, i32 0), i64 4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.346, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.347, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.346, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.348, i32 0, i32 0), i64 2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.338, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.349, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.350, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.351, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.352, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.353, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.354, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.355, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.356, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.357, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.358, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.359, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.360, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.361, i32 0, i32 0), i64 2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.301, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.362, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.363, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.364, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.365, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.366, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.367, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.368, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.369, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.370, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.371, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.372, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.373, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.374, i32 0, i32 0), i64 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.375, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.376, i32 0, i32 0), i64 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.373, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.377, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.378, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.379, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.380, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.381, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.382, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.383, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.384, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.385, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.386, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.387, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.388, i32 0, i32 0) }, %struct.anon zeroinitializer], align 16
@.str.304 = private unnamed_addr constant [5 x i8] c"html\00", align 1
@.str.305 = private unnamed_addr constant [10 x i8] c"text/html\00", align 1
@.str.306 = private unnamed_addr constant [4 x i8] c"htm\00", align 1
@.str.307 = private unnamed_addr constant [5 x i8] c"shtm\00", align 1
@.str.308 = private unnamed_addr constant [6 x i8] c"shtml\00", align 1
@.str.309 = private unnamed_addr constant [4 x i8] c"css\00", align 1
@.str.310 = private unnamed_addr constant [9 x i8] c"text/css\00", align 1
@.str.311 = private unnamed_addr constant [3 x i8] c"js\00", align 1
@.str.312 = private unnamed_addr constant [25 x i8] c"application/x-javascript\00", align 1
@.str.313 = private unnamed_addr constant [4 x i8] c"ico\00", align 1
@.str.314 = private unnamed_addr constant [13 x i8] c"image/x-icon\00", align 1
@.str.315 = private unnamed_addr constant [4 x i8] c"gif\00", align 1
@.str.316 = private unnamed_addr constant [10 x i8] c"image/gif\00", align 1
@.str.317 = private unnamed_addr constant [4 x i8] c"jpg\00", align 1
@.str.318 = private unnamed_addr constant [11 x i8] c"image/jpeg\00", align 1
@.str.319 = private unnamed_addr constant [5 x i8] c"jpeg\00", align 1
@.str.320 = private unnamed_addr constant [4 x i8] c"png\00", align 1
@.str.321 = private unnamed_addr constant [10 x i8] c"image/png\00", align 1
@.str.322 = private unnamed_addr constant [4 x i8] c"svg\00", align 1
@.str.323 = private unnamed_addr constant [14 x i8] c"image/svg+xml\00", align 1
@.str.324 = private unnamed_addr constant [4 x i8] c"txt\00", align 1
@.str.325 = private unnamed_addr constant [8 x i8] c"torrent\00", align 1
@.str.326 = private unnamed_addr constant [25 x i8] c"application/x-bittorrent\00", align 1
@.str.327 = private unnamed_addr constant [4 x i8] c"wav\00", align 1
@.str.328 = private unnamed_addr constant [12 x i8] c"audio/x-wav\00", align 1
@.str.329 = private unnamed_addr constant [4 x i8] c"mp3\00", align 1
@.str.330 = private unnamed_addr constant [12 x i8] c"audio/x-mp3\00", align 1
@.str.331 = private unnamed_addr constant [4 x i8] c"mid\00", align 1
@.str.332 = private unnamed_addr constant [10 x i8] c"audio/mid\00", align 1
@.str.333 = private unnamed_addr constant [4 x i8] c"m3u\00", align 1
@.str.334 = private unnamed_addr constant [16 x i8] c"audio/x-mpegurl\00", align 1
@.str.335 = private unnamed_addr constant [4 x i8] c"ogg\00", align 1
@.str.336 = private unnamed_addr constant [16 x i8] c"application/ogg\00", align 1
@.str.337 = private unnamed_addr constant [4 x i8] c"ram\00", align 1
@.str.338 = private unnamed_addr constant [21 x i8] c"audio/x-pn-realaudio\00", align 1
@.str.339 = private unnamed_addr constant [4 x i8] c"xml\00", align 1
@.str.340 = private unnamed_addr constant [9 x i8] c"text/xml\00", align 1
@.str.341 = private unnamed_addr constant [4 x i8] c"ttf\00", align 1
@.str.342 = private unnamed_addr constant [23 x i8] c"application/x-font-ttf\00", align 1
@.str.343 = private unnamed_addr constant [5 x i8] c"json\00", align 1
@.str.344 = private unnamed_addr constant [17 x i8] c"application/json\00", align 1
@.str.345 = private unnamed_addr constant [5 x i8] c"xslt\00", align 1
@.str.346 = private unnamed_addr constant [16 x i8] c"application/xml\00", align 1
@.str.347 = private unnamed_addr constant [4 x i8] c"xsl\00", align 1
@.str.348 = private unnamed_addr constant [3 x i8] c"ra\00", align 1
@.str.349 = private unnamed_addr constant [4 x i8] c"doc\00", align 1
@.str.350 = private unnamed_addr constant [19 x i8] c"application/msword\00", align 1
@.str.351 = private unnamed_addr constant [4 x i8] c"exe\00", align 1
@.str.352 = private unnamed_addr constant [25 x i8] c"application/octet-stream\00", align 1
@.str.353 = private unnamed_addr constant [4 x i8] c"zip\00", align 1
@.str.354 = private unnamed_addr constant [29 x i8] c"application/x-zip-compressed\00", align 1
@.str.355 = private unnamed_addr constant [4 x i8] c"xls\00", align 1
@.str.356 = private unnamed_addr constant [18 x i8] c"application/excel\00", align 1
@.str.357 = private unnamed_addr constant [4 x i8] c"tgz\00", align 1
@.str.358 = private unnamed_addr constant [21 x i8] c"application/x-tar-gz\00", align 1
@.str.359 = private unnamed_addr constant [4 x i8] c"tar\00", align 1
@.str.360 = private unnamed_addr constant [18 x i8] c"application/x-tar\00", align 1
@.str.361 = private unnamed_addr constant [3 x i8] c"gz\00", align 1
@.str.362 = private unnamed_addr constant [4 x i8] c"arj\00", align 1
@.str.363 = private unnamed_addr constant [29 x i8] c"application/x-arj-compressed\00", align 1
@.str.364 = private unnamed_addr constant [4 x i8] c"rar\00", align 1
@.str.365 = private unnamed_addr constant [29 x i8] c"application/x-rar-compressed\00", align 1
@.str.366 = private unnamed_addr constant [4 x i8] c"rtf\00", align 1
@.str.367 = private unnamed_addr constant [16 x i8] c"application/rtf\00", align 1
@.str.368 = private unnamed_addr constant [4 x i8] c"pdf\00", align 1
@.str.369 = private unnamed_addr constant [16 x i8] c"application/pdf\00", align 1
@.str.370 = private unnamed_addr constant [4 x i8] c"swf\00", align 1
@.str.371 = private unnamed_addr constant [30 x i8] c"application/x-shockwave-flash\00", align 1
@.str.372 = private unnamed_addr constant [4 x i8] c"mpg\00", align 1
@.str.373 = private unnamed_addr constant [11 x i8] c"video/mpeg\00", align 1
@.str.374 = private unnamed_addr constant [5 x i8] c"webm\00", align 1
@.str.375 = private unnamed_addr constant [11 x i8] c"video/webm\00", align 1
@.str.376 = private unnamed_addr constant [5 x i8] c"mpeg\00", align 1
@.str.377 = private unnamed_addr constant [4 x i8] c"mov\00", align 1
@.str.378 = private unnamed_addr constant [16 x i8] c"video/quicktime\00", align 1
@.str.379 = private unnamed_addr constant [4 x i8] c"mp4\00", align 1
@.str.380 = private unnamed_addr constant [10 x i8] c"video/mp4\00", align 1
@.str.381 = private unnamed_addr constant [4 x i8] c"m4v\00", align 1
@.str.382 = private unnamed_addr constant [12 x i8] c"video/x-m4v\00", align 1
@.str.383 = private unnamed_addr constant [4 x i8] c"asf\00", align 1
@.str.384 = private unnamed_addr constant [15 x i8] c"video/x-ms-asf\00", align 1
@.str.385 = private unnamed_addr constant [4 x i8] c"avi\00", align 1
@.str.386 = private unnamed_addr constant [16 x i8] c"video/x-msvideo\00", align 1
@.str.387 = private unnamed_addr constant [4 x i8] c"bmp\00", align 1
@.str.388 = private unnamed_addr constant [10 x i8] c"image/bmp\00", align 1
@__func__.mg_deliver_websocket_data = private unnamed_addr constant [26 x i8] c"mg_deliver_websocket_data\00", align 1
@.str.389 = private unnamed_addr constant [29 x i8] c"new_data_len >= existing_len\00", align 1
@.str.390 = private unnamed_addr constant [38 x i8] c"fragmented control frames are illegal\00", align 1
@.str.391 = private unnamed_addr constant [55 x i8] c"non-continuation in the middle of a fragmented message\00", align 1
@.str.392 = private unnamed_addr constant [19 x i8] c"overflowed message\00", align 1
@mg_ws_handshake.magic = internal global i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.393, i32 0, i32 0), align 8
@.str.393 = private unnamed_addr constant [37 x i8] c"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\00", align 1
@.str.394 = private unnamed_addr constant [76 x i8] c"HTTP/1.1 101 Switching Protocols\0D\0AUpgrade: websocket\0D\0AConnection: Upgrade\0D\0A\00", align 1
@.str.395 = private unnamed_addr constant [23 x i8] c"Sec-WebSocket-Protocol\00", align 1
@.str.396 = private unnamed_addr constant [27 x i8] c"Sec-WebSocket-Accept: %s%s\00", align 1
@.str.397 = private unnamed_addr constant [5 x i8] c"\0D\0A\0D\0A\00", align 1
@.str.398 = private unnamed_addr constant [11 x i8] c"%p %.*s %s\00", align 1
@.str.399 = private unnamed_addr constant [6 x i8] c"  %s\0A\00", align 1
@.str.400 = private unnamed_addr constant [6 x i8] c"%04x \00", align 1
@.str.401 = private unnamed_addr constant [6 x i8] c" %02x\00", align 1
@.str.402 = private unnamed_addr constant [4 x i8] c"   \00", align 1
@.str.403 = private unnamed_addr constant [28 x i8] c"%p invalid len: %d, closing\00", align 1
@.str.404 = private unnamed_addr constant [14 x i8] c"Recv PINGRESP\00", align 1
@.str.405 = private unnamed_addr constant [13 x i8] c"Send PINGREQ\00", align 1
@.str.406 = private unnamed_addr constant [13 x i8] c"Ping timeout\00", align 1
@.str.407 = private unnamed_addr constant [107 x i8] c"%d %2x %d proto [%.*s] client_id [%.*s] will_topic [%.*s] will_msg [%.*s] user_name [%.*s] password [%.*s]\00", align 1
@.str.408 = private unnamed_addr constant [17 x i8] c"/etc/resolv.conf\00", align 1
@.str.409 = private unnamed_addr constant [23 x i8] c"nameserver %u.%u.%u.%u\00", align 1
@.str.410 = private unnamed_addr constant [12 x i8] c"%u.%u.%u.%u\00", align 1
@.str.411 = private unnamed_addr constant [19 x i8] c"ev=%d user_data=%p\00", align 1

; Function Attrs: nounwind ssp uwtable
define void @cs_base64_init(%struct.cs_base64_ctx* %ctx, void (i8, i8*)* %b64_putc, i8* %user_data) #0 {
entry:
  %ctx.addr = alloca %struct.cs_base64_ctx*, align 8
  %b64_putc.addr = alloca void (i8, i8*)*, align 8
  %user_data.addr = alloca i8*, align 8
  store %struct.cs_base64_ctx* %ctx, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  store void (i8, i8*)* %b64_putc, void (i8, i8*)** %b64_putc.addr, align 8, !tbaa !3
  store i8* %user_data, i8** %user_data.addr, align 8, !tbaa !3
  %0 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %chunk_size = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %0, i32 0, i32 2
  store i32 0, i32* %chunk_size, align 4, !tbaa !7
  %1 = load void (i8, i8*)*, void (i8, i8*)** %b64_putc.addr, align 8, !tbaa !3
  %2 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %b64_putc1 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %2, i32 0, i32 0
  store void (i8, i8*)* %1, void (i8, i8*)** %b64_putc1, align 8, !tbaa !10
  %3 = load i8*, i8** %user_data.addr, align 8, !tbaa !3
  %4 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %user_data2 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %4, i32 0, i32 3
  store i8* %3, i8** %user_data2, align 8, !tbaa !11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @cs_base64_update(%struct.cs_base64_ctx* %ctx, i8* %str, i64 %len) #0 {
entry:
  %ctx.addr = alloca %struct.cs_base64_ctx*, align 8
  %str.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %src = alloca i8*, align 8
  %i = alloca i64, align 8
  store %struct.cs_base64_ctx* %ctx, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  store i8* %str, i8** %str.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  %0 = bitcast i8** %src to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load i8*, i8** %str.addr, align 8, !tbaa !3
  store i8* %1, i8** %src, align 8, !tbaa !3
  %2 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  store i64 0, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i64, i64* %i, align 8, !tbaa !12
  %4 = load i64, i64* %len.addr, align 8, !tbaa !12
  %cmp = icmp ult i64 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i8*, i8** %src, align 8, !tbaa !3
  %6 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %6
  %7 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %8 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %chunk = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %8, i32 0, i32 1
  %9 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %chunk_size = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %9, i32 0, i32 2
  %10 = load i32, i32* %chunk_size, align 4, !tbaa !7
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %chunk_size, align 4, !tbaa !7
  %idxprom = sext i32 %10 to i64
  %arrayidx1 = getelementptr inbounds [3 x i8], [3 x i8]* %chunk, i64 0, i64 %idxprom
  store i8 %7, i8* %arrayidx1, align 1, !tbaa !14
  %11 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %chunk_size2 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %11, i32 0, i32 2
  %12 = load i32, i32* %chunk_size2, align 4, !tbaa !7
  %cmp3 = icmp eq i32 %12, 3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %13 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  call void @cs_base64_emit_chunk(%struct.cs_base64_ctx* %13)
  %14 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %chunk_size4 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %14, i32 0, i32 2
  store i32 0, i32* %chunk_size4, align 4, !tbaa !7
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i64, i64* %i, align 8, !tbaa !12
  %inc5 = add i64 %15, 1
  store i64 %inc5, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %16) #5
  %17 = bitcast i8** %src to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %17) #5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal void @cs_base64_emit_chunk(%struct.cs_base64_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.cs_base64_ctx*, align 8
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.cs_base64_ctx* %ctx, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %0 = bitcast i32* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = bitcast i32* %b to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  %2 = bitcast i32* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  %3 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %chunk = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %3, i32 0, i32 1
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* %chunk, i64 0, i64 0
  %4 = load i8, i8* %arrayidx, align 8, !tbaa !14
  %conv = zext i8 %4 to i32
  store i32 %conv, i32* %a, align 4, !tbaa !15
  %5 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %chunk1 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %5, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [3 x i8], [3 x i8]* %chunk1, i64 0, i64 1
  %6 = load i8, i8* %arrayidx2, align 1, !tbaa !14
  %conv3 = zext i8 %6 to i32
  store i32 %conv3, i32* %b, align 4, !tbaa !15
  %7 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %chunk4 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %7, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [3 x i8], [3 x i8]* %chunk4, i64 0, i64 2
  %8 = load i8, i8* %arrayidx5, align 2, !tbaa !14
  %conv6 = zext i8 %8 to i32
  store i32 %conv6, i32* %c, align 4, !tbaa !15
  %9 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %10 = load i32, i32* %a, align 4, !tbaa !15
  %shr = ashr i32 %10, 2
  call void @cs_base64_emit_code(%struct.cs_base64_ctx* %9, i32 %shr)
  %11 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %12 = load i32, i32* %a, align 4, !tbaa !15
  %and = and i32 %12, 3
  %shl = shl i32 %and, 4
  %13 = load i32, i32* %b, align 4, !tbaa !15
  %shr7 = ashr i32 %13, 4
  %or = or i32 %shl, %shr7
  call void @cs_base64_emit_code(%struct.cs_base64_ctx* %11, i32 %or)
  %14 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %chunk_size = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %14, i32 0, i32 2
  %15 = load i32, i32* %chunk_size, align 4, !tbaa !7
  %cmp = icmp sgt i32 %15, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %16 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %17 = load i32, i32* %b, align 4, !tbaa !15
  %and9 = and i32 %17, 15
  %shl10 = shl i32 %and9, 2
  %18 = load i32, i32* %c, align 4, !tbaa !15
  %shr11 = ashr i32 %18, 6
  %or12 = or i32 %shl10, %shr11
  call void @cs_base64_emit_code(%struct.cs_base64_ctx* %16, i32 %or12)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %19 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %chunk_size13 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %19, i32 0, i32 2
  %20 = load i32, i32* %chunk_size13, align 4, !tbaa !7
  %cmp14 = icmp sgt i32 %20, 2
  br i1 %cmp14, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.end
  %21 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %22 = load i32, i32* %c, align 4, !tbaa !15
  %and17 = and i32 %22, 63
  call void @cs_base64_emit_code(%struct.cs_base64_ctx* %21, i32 %and17)
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %if.end
  %23 = bitcast i32* %c to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %23) #5
  %24 = bitcast i32* %b to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %24) #5
  %25 = bitcast i32* %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %25) #5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define void @cs_base64_finish(%struct.cs_base64_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.cs_base64_ctx*, align 8
  %i = alloca i32, align 4
  store %struct.cs_base64_ctx* %ctx, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %0 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %chunk_size = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %chunk_size, align 4, !tbaa !7
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  %3 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %chunk = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %3, i32 0, i32 1
  %4 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %chunk_size1 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %chunk_size1, align 4, !tbaa !7
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* %chunk, i64 0, i64 %idxprom
  %6 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %chunk_size2 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %6, i32 0, i32 2
  %7 = load i32, i32* %chunk_size2, align 4, !tbaa !7
  %sub = sub nsw i32 3, %7
  %conv = sext i32 %sub to i64
  %8 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %chunk3 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %8, i32 0, i32 1
  %9 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %chunk_size4 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %9, i32 0, i32 2
  %10 = load i32, i32* %chunk_size4, align 4, !tbaa !7
  %idxprom5 = sext i32 %10 to i64
  %arrayidx6 = getelementptr inbounds [3 x i8], [3 x i8]* %chunk3, i64 0, i64 %idxprom5
  %11 = call i64 @llvm.objectsize.i64.p0i8(i8* %arrayidx6, i1 false, i1 true)
  %call = call i8* @__memset_chk(i8* %arrayidx, i32 0, i64 %conv, i64 %11) #5
  %12 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  call void @cs_base64_emit_chunk(%struct.cs_base64_ctx* %12)
  store i32 0, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %13 = load i32, i32* %i, align 4, !tbaa !15
  %14 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %chunk_size7 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %14, i32 0, i32 2
  %15 = load i32, i32* %chunk_size7, align 4, !tbaa !7
  %sub8 = sub nsw i32 3, %15
  %cmp9 = icmp slt i32 %13, %sub8
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %b64_putc = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %16, i32 0, i32 0
  %17 = load void (i8, i8*)*, void (i8, i8*)** %b64_putc, align 8, !tbaa !10
  %18 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %user_data = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %18, i32 0, i32 3
  %19 = load i8*, i8** %user_data, align 8, !tbaa !11
  call void %17(i8 signext 61, i8* %19)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %20 = load i32, i32* %i, align 4, !tbaa !15
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %21 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %21) #5
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

; Function Attrs: nounwind
declare i8* @__memset_chk(i8*, i32, i64, i64) #2

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.objectsize.i64.p0i8(i8*, i1, i1) #3

; Function Attrs: nounwind ssp uwtable
define void @cs_base64_encode(i8* %src, i32 %src_len, i8* %dst) #0 {
entry:
  %src.addr = alloca i8*, align 8
  %src_len.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8, !tbaa !3
  store i32 %src_len, i32* %src_len.addr, align 4, !tbaa !15
  store i8* %dst, i8** %dst.addr, align 8, !tbaa !3
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = bitcast i32* %j to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  %2 = bitcast i32* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  %3 = bitcast i32* %b to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  %4 = bitcast i32* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #5
  store i32 0, i32* %j, align 4, !tbaa !15
  store i32 0, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %i, align 4, !tbaa !15
  %6 = load i32, i32* %src_len.addr, align 4, !tbaa !15
  %cmp = icmp slt i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i8*, i8** %src.addr, align 8, !tbaa !3
  %8 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom = sext i32 %8 to i64
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 %idxprom
  %9 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = zext i8 %9 to i32
  store i32 %conv, i32* %a, align 4, !tbaa !15
  %10 = load i32, i32* %i, align 4, !tbaa !15
  %add = add nsw i32 %10, 1
  %11 = load i32, i32* %src_len.addr, align 4, !tbaa !15
  %cmp1 = icmp sge i32 %add, %11
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %12 = load i8*, i8** %src.addr, align 8, !tbaa !3
  %13 = load i32, i32* %i, align 4, !tbaa !15
  %add3 = add nsw i32 %13, 1
  %idxprom4 = sext i32 %add3 to i64
  %arrayidx5 = getelementptr inbounds i8, i8* %12, i64 %idxprom4
  %14 = load i8, i8* %arrayidx5, align 1, !tbaa !14
  %conv6 = zext i8 %14 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %conv6, %cond.false ]
  store i32 %cond, i32* %b, align 4, !tbaa !15
  %15 = load i32, i32* %i, align 4, !tbaa !15
  %add7 = add nsw i32 %15, 2
  %16 = load i32, i32* %src_len.addr, align 4, !tbaa !15
  %cmp8 = icmp sge i32 %add7, %16
  br i1 %cmp8, label %cond.true10, label %cond.false11

cond.true10:                                      ; preds = %cond.end
  br label %cond.end16

cond.false11:                                     ; preds = %cond.end
  %17 = load i8*, i8** %src.addr, align 8, !tbaa !3
  %18 = load i32, i32* %i, align 4, !tbaa !15
  %add12 = add nsw i32 %18, 2
  %idxprom13 = sext i32 %add12 to i64
  %arrayidx14 = getelementptr inbounds i8, i8* %17, i64 %idxprom13
  %19 = load i8, i8* %arrayidx14, align 1, !tbaa !14
  %conv15 = zext i8 %19 to i32
  br label %cond.end16

cond.end16:                                       ; preds = %cond.false11, %cond.true10
  %cond17 = phi i32 [ 0, %cond.true10 ], [ %conv15, %cond.false11 ]
  store i32 %cond17, i32* %c, align 4, !tbaa !15
  br label %do.body

do.body:                                          ; preds = %cond.end16
  %20 = load i8*, i8** @cs_base64_encode.b64, align 8, !tbaa !3
  %21 = load i32, i32* %a, align 4, !tbaa !15
  %shr = ashr i32 %21, 2
  %idxprom18 = sext i32 %shr to i64
  %arrayidx19 = getelementptr inbounds i8, i8* %20, i64 %idxprom18
  %22 = load i8, i8* %arrayidx19, align 1, !tbaa !14
  %23 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %24 = load i32, i32* %j, align 4, !tbaa !15
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4, !tbaa !15
  %idxprom20 = sext i32 %24 to i64
  %arrayidx21 = getelementptr inbounds i8, i8* %23, i64 %idxprom20
  store i8 %22, i8* %arrayidx21, align 1, !tbaa !14
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.body22

do.body22:                                        ; preds = %do.end
  %25 = load i8*, i8** @cs_base64_encode.b64, align 8, !tbaa !3
  %26 = load i32, i32* %a, align 4, !tbaa !15
  %and = and i32 %26, 3
  %shl = shl i32 %and, 4
  %27 = load i32, i32* %b, align 4, !tbaa !15
  %shr23 = ashr i32 %27, 4
  %or = or i32 %shl, %shr23
  %idxprom24 = sext i32 %or to i64
  %arrayidx25 = getelementptr inbounds i8, i8* %25, i64 %idxprom24
  %28 = load i8, i8* %arrayidx25, align 1, !tbaa !14
  %29 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %30 = load i32, i32* %j, align 4, !tbaa !15
  %inc26 = add nsw i32 %30, 1
  store i32 %inc26, i32* %j, align 4, !tbaa !15
  %idxprom27 = sext i32 %30 to i64
  %arrayidx28 = getelementptr inbounds i8, i8* %29, i64 %idxprom27
  store i8 %28, i8* %arrayidx28, align 1, !tbaa !14
  br label %do.cond29

do.cond29:                                        ; preds = %do.body22
  br label %do.end30

do.end30:                                         ; preds = %do.cond29
  %31 = load i32, i32* %i, align 4, !tbaa !15
  %add31 = add nsw i32 %31, 1
  %32 = load i32, i32* %src_len.addr, align 4, !tbaa !15
  %cmp32 = icmp slt i32 %add31, %32
  br i1 %cmp32, label %if.then, label %if.end

if.then:                                          ; preds = %do.end30
  br label %do.body34

do.body34:                                        ; preds = %if.then
  %33 = load i8*, i8** @cs_base64_encode.b64, align 8, !tbaa !3
  %34 = load i32, i32* %b, align 4, !tbaa !15
  %and35 = and i32 %34, 15
  %shl36 = shl i32 %and35, 2
  %35 = load i32, i32* %c, align 4, !tbaa !15
  %shr37 = ashr i32 %35, 6
  %or38 = or i32 %shl36, %shr37
  %idxprom39 = sext i32 %or38 to i64
  %arrayidx40 = getelementptr inbounds i8, i8* %33, i64 %idxprom39
  %36 = load i8, i8* %arrayidx40, align 1, !tbaa !14
  %37 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %38 = load i32, i32* %j, align 4, !tbaa !15
  %inc41 = add nsw i32 %38, 1
  store i32 %inc41, i32* %j, align 4, !tbaa !15
  %idxprom42 = sext i32 %38 to i64
  %arrayidx43 = getelementptr inbounds i8, i8* %37, i64 %idxprom42
  store i8 %36, i8* %arrayidx43, align 1, !tbaa !14
  br label %do.cond44

do.cond44:                                        ; preds = %do.body34
  br label %do.end45

do.end45:                                         ; preds = %do.cond44
  br label %if.end

if.end:                                           ; preds = %do.end45, %do.end30
  %39 = load i32, i32* %i, align 4, !tbaa !15
  %add46 = add nsw i32 %39, 2
  %40 = load i32, i32* %src_len.addr, align 4, !tbaa !15
  %cmp47 = icmp slt i32 %add46, %40
  br i1 %cmp47, label %if.then49, label %if.end59

if.then49:                                        ; preds = %if.end
  br label %do.body50

do.body50:                                        ; preds = %if.then49
  %41 = load i8*, i8** @cs_base64_encode.b64, align 8, !tbaa !3
  %42 = load i32, i32* %c, align 4, !tbaa !15
  %and51 = and i32 %42, 63
  %idxprom52 = sext i32 %and51 to i64
  %arrayidx53 = getelementptr inbounds i8, i8* %41, i64 %idxprom52
  %43 = load i8, i8* %arrayidx53, align 1, !tbaa !14
  %44 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %45 = load i32, i32* %j, align 4, !tbaa !15
  %inc54 = add nsw i32 %45, 1
  store i32 %inc54, i32* %j, align 4, !tbaa !15
  %idxprom55 = sext i32 %45 to i64
  %arrayidx56 = getelementptr inbounds i8, i8* %44, i64 %idxprom55
  store i8 %43, i8* %arrayidx56, align 1, !tbaa !14
  br label %do.cond57

do.cond57:                                        ; preds = %do.body50
  br label %do.end58

do.end58:                                         ; preds = %do.cond57
  br label %if.end59

if.end59:                                         ; preds = %do.end58, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end59
  %46 = load i32, i32* %i, align 4, !tbaa !15
  %add60 = add nsw i32 %46, 3
  store i32 %add60, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %do.end68, %for.end
  %47 = load i32, i32* %j, align 4, !tbaa !15
  %rem = srem i32 %47, 4
  %cmp61 = icmp ne i32 %rem, 0
  br i1 %cmp61, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body63

do.body63:                                        ; preds = %while.body
  %48 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %49 = load i32, i32* %j, align 4, !tbaa !15
  %inc64 = add nsw i32 %49, 1
  store i32 %inc64, i32* %j, align 4, !tbaa !15
  %idxprom65 = sext i32 %49 to i64
  %arrayidx66 = getelementptr inbounds i8, i8* %48, i64 %idxprom65
  store i8 61, i8* %arrayidx66, align 1, !tbaa !14
  br label %do.cond67

do.cond67:                                        ; preds = %do.body63
  br label %do.end68

do.end68:                                         ; preds = %do.cond67
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %do.body69

do.body69:                                        ; preds = %while.end
  %50 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %51 = load i32, i32* %j, align 4, !tbaa !15
  %inc70 = add nsw i32 %51, 1
  store i32 %inc70, i32* %j, align 4, !tbaa !15
  %idxprom71 = sext i32 %51 to i64
  %arrayidx72 = getelementptr inbounds i8, i8* %50, i64 %idxprom71
  store i8 0, i8* %arrayidx72, align 1, !tbaa !14
  br label %do.cond73

do.cond73:                                        ; preds = %do.body69
  br label %do.end74

do.end74:                                         ; preds = %do.cond73
  %52 = bitcast i32* %c to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %52) #5
  %53 = bitcast i32* %b to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %53) #5
  %54 = bitcast i32* %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %54) #5
  %55 = bitcast i32* %j to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %55) #5
  %56 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %56) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @cs_fprint_base64(%struct.__sFILE* %f, i8* %src, i32 %src_len) #0 {
entry:
  %f.addr = alloca %struct.__sFILE*, align 8
  %src.addr = alloca i8*, align 8
  %src_len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.__sFILE* %f, %struct.__sFILE** %f.addr, align 8, !tbaa !3
  store i8* %src, i8** %src.addr, align 8, !tbaa !3
  store i32 %src_len, i32* %src_len.addr, align 4, !tbaa !15
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = bitcast i32* %j to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  %2 = bitcast i32* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  %3 = bitcast i32* %b to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  %4 = bitcast i32* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #5
  store i32 0, i32* %j, align 4, !tbaa !15
  store i32 0, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %i, align 4, !tbaa !15
  %6 = load i32, i32* %src_len.addr, align 4, !tbaa !15
  %cmp = icmp slt i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i8*, i8** %src.addr, align 8, !tbaa !3
  %8 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom = sext i32 %8 to i64
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 %idxprom
  %9 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = zext i8 %9 to i32
  store i32 %conv, i32* %a, align 4, !tbaa !15
  %10 = load i32, i32* %i, align 4, !tbaa !15
  %add = add nsw i32 %10, 1
  %11 = load i32, i32* %src_len.addr, align 4, !tbaa !15
  %cmp1 = icmp sge i32 %add, %11
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %12 = load i8*, i8** %src.addr, align 8, !tbaa !3
  %13 = load i32, i32* %i, align 4, !tbaa !15
  %add3 = add nsw i32 %13, 1
  %idxprom4 = sext i32 %add3 to i64
  %arrayidx5 = getelementptr inbounds i8, i8* %12, i64 %idxprom4
  %14 = load i8, i8* %arrayidx5, align 1, !tbaa !14
  %conv6 = zext i8 %14 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %conv6, %cond.false ]
  store i32 %cond, i32* %b, align 4, !tbaa !15
  %15 = load i32, i32* %i, align 4, !tbaa !15
  %add7 = add nsw i32 %15, 2
  %16 = load i32, i32* %src_len.addr, align 4, !tbaa !15
  %cmp8 = icmp sge i32 %add7, %16
  br i1 %cmp8, label %cond.true10, label %cond.false11

cond.true10:                                      ; preds = %cond.end
  br label %cond.end16

cond.false11:                                     ; preds = %cond.end
  %17 = load i8*, i8** %src.addr, align 8, !tbaa !3
  %18 = load i32, i32* %i, align 4, !tbaa !15
  %add12 = add nsw i32 %18, 2
  %idxprom13 = sext i32 %add12 to i64
  %arrayidx14 = getelementptr inbounds i8, i8* %17, i64 %idxprom13
  %19 = load i8, i8* %arrayidx14, align 1, !tbaa !14
  %conv15 = zext i8 %19 to i32
  br label %cond.end16

cond.end16:                                       ; preds = %cond.false11, %cond.true10
  %cond17 = phi i32 [ 0, %cond.true10 ], [ %conv15, %cond.false11 ]
  store i32 %cond17, i32* %c, align 4, !tbaa !15
  br label %do.body

do.body:                                          ; preds = %cond.end16
  %20 = load %struct.__sFILE*, %struct.__sFILE** %f.addr, align 8, !tbaa !3
  %21 = load i8*, i8** @cs_fprint_base64.b64, align 8, !tbaa !3
  %22 = load i32, i32* %a, align 4, !tbaa !15
  %shr = ashr i32 %22, 2
  %idxprom18 = sext i32 %shr to i64
  %arrayidx19 = getelementptr inbounds i8, i8* %21, i64 %idxprom18
  %23 = load i8, i8* %arrayidx19, align 1, !tbaa !14
  %conv20 = sext i8 %23 to i32
  %call = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %conv20)
  %24 = load i32, i32* %j, align 4, !tbaa !15
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4, !tbaa !15
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.body21

do.body21:                                        ; preds = %do.end
  %25 = load %struct.__sFILE*, %struct.__sFILE** %f.addr, align 8, !tbaa !3
  %26 = load i8*, i8** @cs_fprint_base64.b64, align 8, !tbaa !3
  %27 = load i32, i32* %a, align 4, !tbaa !15
  %and = and i32 %27, 3
  %shl = shl i32 %and, 4
  %28 = load i32, i32* %b, align 4, !tbaa !15
  %shr22 = ashr i32 %28, 4
  %or = or i32 %shl, %shr22
  %idxprom23 = sext i32 %or to i64
  %arrayidx24 = getelementptr inbounds i8, i8* %26, i64 %idxprom23
  %29 = load i8, i8* %arrayidx24, align 1, !tbaa !14
  %conv25 = sext i8 %29 to i32
  %call26 = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %25, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %conv25)
  %30 = load i32, i32* %j, align 4, !tbaa !15
  %inc27 = add nsw i32 %30, 1
  store i32 %inc27, i32* %j, align 4, !tbaa !15
  br label %do.cond28

do.cond28:                                        ; preds = %do.body21
  br label %do.end29

do.end29:                                         ; preds = %do.cond28
  %31 = load i32, i32* %i, align 4, !tbaa !15
  %add30 = add nsw i32 %31, 1
  %32 = load i32, i32* %src_len.addr, align 4, !tbaa !15
  %cmp31 = icmp slt i32 %add30, %32
  br i1 %cmp31, label %if.then, label %if.end

if.then:                                          ; preds = %do.end29
  br label %do.body33

do.body33:                                        ; preds = %if.then
  %33 = load %struct.__sFILE*, %struct.__sFILE** %f.addr, align 8, !tbaa !3
  %34 = load i8*, i8** @cs_fprint_base64.b64, align 8, !tbaa !3
  %35 = load i32, i32* %b, align 4, !tbaa !15
  %and34 = and i32 %35, 15
  %shl35 = shl i32 %and34, 2
  %36 = load i32, i32* %c, align 4, !tbaa !15
  %shr36 = ashr i32 %36, 6
  %or37 = or i32 %shl35, %shr36
  %idxprom38 = sext i32 %or37 to i64
  %arrayidx39 = getelementptr inbounds i8, i8* %34, i64 %idxprom38
  %37 = load i8, i8* %arrayidx39, align 1, !tbaa !14
  %conv40 = sext i8 %37 to i32
  %call41 = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %33, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %conv40)
  %38 = load i32, i32* %j, align 4, !tbaa !15
  %inc42 = add nsw i32 %38, 1
  store i32 %inc42, i32* %j, align 4, !tbaa !15
  br label %do.cond43

do.cond43:                                        ; preds = %do.body33
  br label %do.end44

do.end44:                                         ; preds = %do.cond43
  br label %if.end

if.end:                                           ; preds = %do.end44, %do.end29
  %39 = load i32, i32* %i, align 4, !tbaa !15
  %add45 = add nsw i32 %39, 2
  %40 = load i32, i32* %src_len.addr, align 4, !tbaa !15
  %cmp46 = icmp slt i32 %add45, %40
  br i1 %cmp46, label %if.then48, label %if.end58

if.then48:                                        ; preds = %if.end
  br label %do.body49

do.body49:                                        ; preds = %if.then48
  %41 = load %struct.__sFILE*, %struct.__sFILE** %f.addr, align 8, !tbaa !3
  %42 = load i8*, i8** @cs_fprint_base64.b64, align 8, !tbaa !3
  %43 = load i32, i32* %c, align 4, !tbaa !15
  %and50 = and i32 %43, 63
  %idxprom51 = sext i32 %and50 to i64
  %arrayidx52 = getelementptr inbounds i8, i8* %42, i64 %idxprom51
  %44 = load i8, i8* %arrayidx52, align 1, !tbaa !14
  %conv53 = sext i8 %44 to i32
  %call54 = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %41, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %conv53)
  %45 = load i32, i32* %j, align 4, !tbaa !15
  %inc55 = add nsw i32 %45, 1
  store i32 %inc55, i32* %j, align 4, !tbaa !15
  br label %do.cond56

do.cond56:                                        ; preds = %do.body49
  br label %do.end57

do.end57:                                         ; preds = %do.cond56
  br label %if.end58

if.end58:                                         ; preds = %do.end57, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end58
  %46 = load i32, i32* %i, align 4, !tbaa !15
  %add59 = add nsw i32 %46, 3
  store i32 %add59, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %do.end66, %for.end
  %47 = load i32, i32* %j, align 4, !tbaa !15
  %rem = srem i32 %47, 4
  %cmp60 = icmp ne i32 %rem, 0
  br i1 %cmp60, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body62

do.body62:                                        ; preds = %while.body
  %48 = load %struct.__sFILE*, %struct.__sFILE** %f.addr, align 8, !tbaa !3
  %call63 = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %48, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 61)
  %49 = load i32, i32* %j, align 4, !tbaa !15
  %inc64 = add nsw i32 %49, 1
  store i32 %inc64, i32* %j, align 4, !tbaa !15
  br label %do.cond65

do.cond65:                                        ; preds = %do.body62
  br label %do.end66

do.end66:                                         ; preds = %do.cond65
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %50 = bitcast i32* %c to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %50) #5
  %51 = bitcast i32* %b to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %51) #5
  %52 = bitcast i32* %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %52) #5
  %53 = bitcast i32* %j to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %53) #5
  %54 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %54) #5
  ret void
}

declare i32 @fprintf(%struct.__sFILE*, i8*, ...) #4

; Function Attrs: nounwind ssp uwtable
define i32 @cs_base64_decode(i8* %s, i32 %len, i8* %dst, i32* %dec_len) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 8
  %dec_len.addr = alloca i32*, align 8
  %a = alloca i8, align 1
  %b = alloca i8, align 1
  %c = alloca i8, align 1
  %d = alloca i8, align 1
  %orig_len = alloca i32, align 4
  %orig_dst = alloca i8*, align 8
  store i8* %s, i8** %s.addr, align 8, !tbaa !3
  store i32 %len, i32* %len.addr, align 4, !tbaa !15
  store i8* %dst, i8** %dst.addr, align 8, !tbaa !3
  store i32* %dec_len, i32** %dec_len.addr, align 8, !tbaa !3
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %a) #5
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %b) #5
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %c) #5
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %d) #5
  %0 = bitcast i32* %orig_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = load i32, i32* %len.addr, align 4, !tbaa !15
  store i32 %1, i32* %orig_len, align 4, !tbaa !15
  %2 = bitcast i8** %orig_dst to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  %3 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  store i8* %3, i8** %orig_dst, align 8, !tbaa !3
  br label %while.cond

while.cond:                                       ; preds = %if.end45, %entry
  %4 = load i32, i32* %len.addr, align 4, !tbaa !15
  %cmp = icmp sge i32 %4, 4
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %while.cond
  %5 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 0
  %6 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %call = call zeroext i8 @from_b64(i8 zeroext %6)
  store i8 %call, i8* %a, align 1, !tbaa !14
  %conv = zext i8 %call to i32
  %cmp1 = icmp ne i32 %conv, 255
  br i1 %cmp1, label %land.lhs.true3, label %land.end

land.lhs.true3:                                   ; preds = %land.lhs.true
  %7 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %arrayidx4 = getelementptr inbounds i8, i8* %7, i64 1
  %8 = load i8, i8* %arrayidx4, align 1, !tbaa !14
  %call5 = call zeroext i8 @from_b64(i8 zeroext %8)
  store i8 %call5, i8* %b, align 1, !tbaa !14
  %conv6 = zext i8 %call5 to i32
  %cmp7 = icmp ne i32 %conv6, 255
  br i1 %cmp7, label %land.lhs.true9, label %land.end

land.lhs.true9:                                   ; preds = %land.lhs.true3
  %9 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %arrayidx10 = getelementptr inbounds i8, i8* %9, i64 2
  %10 = load i8, i8* %arrayidx10, align 1, !tbaa !14
  %call11 = call zeroext i8 @from_b64(i8 zeroext %10)
  store i8 %call11, i8* %c, align 1, !tbaa !14
  %conv12 = zext i8 %call11 to i32
  %cmp13 = icmp ne i32 %conv12, 255
  br i1 %cmp13, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true9
  %11 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %arrayidx15 = getelementptr inbounds i8, i8* %11, i64 3
  %12 = load i8, i8* %arrayidx15, align 1, !tbaa !14
  %call16 = call zeroext i8 @from_b64(i8 zeroext %12)
  store i8 %call16, i8* %d, align 1, !tbaa !14
  %conv17 = zext i8 %call16 to i32
  %cmp18 = icmp ne i32 %conv17, 255
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true9, %land.lhs.true3, %land.lhs.true, %while.cond
  %13 = phi i1 [ false, %land.lhs.true9 ], [ false, %land.lhs.true3 ], [ false, %land.lhs.true ], [ false, %while.cond ], [ %cmp18, %land.rhs ]
  br i1 %13, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %14 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 4
  store i8* %add.ptr, i8** %s.addr, align 8, !tbaa !3
  %15 = load i32, i32* %len.addr, align 4, !tbaa !15
  %sub = sub nsw i32 %15, 4
  store i32 %sub, i32* %len.addr, align 4, !tbaa !15
  %16 = load i8, i8* %a, align 1, !tbaa !14
  %conv20 = zext i8 %16 to i32
  %cmp21 = icmp eq i32 %conv20, 200
  br i1 %cmp21, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %17 = load i8, i8* %b, align 1, !tbaa !14
  %conv23 = zext i8 %17 to i32
  %cmp24 = icmp eq i32 %conv23, 200
  br i1 %cmp24, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %while.body
  br label %while.end

if.end:                                           ; preds = %lor.lhs.false
  %18 = load i8, i8* %a, align 1, !tbaa !14
  %conv26 = zext i8 %18 to i32
  %shl = shl i32 %conv26, 2
  %19 = load i8, i8* %b, align 1, !tbaa !14
  %conv27 = zext i8 %19 to i32
  %shr = ashr i32 %conv27, 4
  %or = or i32 %shl, %shr
  %conv28 = trunc i32 %or to i8
  %20 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %incdec.ptr = getelementptr inbounds i8, i8* %20, i32 1
  store i8* %incdec.ptr, i8** %dst.addr, align 8, !tbaa !3
  store i8 %conv28, i8* %20, align 1, !tbaa !14
  %21 = load i8, i8* %c, align 1, !tbaa !14
  %conv29 = zext i8 %21 to i32
  %cmp30 = icmp eq i32 %conv29, 200
  br i1 %cmp30, label %if.then32, label %if.end33

if.then32:                                        ; preds = %if.end
  br label %while.end

if.end33:                                         ; preds = %if.end
  %22 = load i8, i8* %b, align 1, !tbaa !14
  %conv34 = zext i8 %22 to i32
  %shl35 = shl i32 %conv34, 4
  %23 = load i8, i8* %c, align 1, !tbaa !14
  %conv36 = zext i8 %23 to i32
  %shr37 = ashr i32 %conv36, 2
  %or38 = or i32 %shl35, %shr37
  %conv39 = trunc i32 %or38 to i8
  %24 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %incdec.ptr40 = getelementptr inbounds i8, i8* %24, i32 1
  store i8* %incdec.ptr40, i8** %dst.addr, align 8, !tbaa !3
  store i8 %conv39, i8* %24, align 1, !tbaa !14
  %25 = load i8, i8* %d, align 1, !tbaa !14
  %conv41 = zext i8 %25 to i32
  %cmp42 = icmp eq i32 %conv41, 200
  br i1 %cmp42, label %if.then44, label %if.end45

if.then44:                                        ; preds = %if.end33
  br label %while.end

if.end45:                                         ; preds = %if.end33
  %26 = load i8, i8* %c, align 1, !tbaa !14
  %conv46 = zext i8 %26 to i32
  %shl47 = shl i32 %conv46, 6
  %27 = load i8, i8* %d, align 1, !tbaa !14
  %conv48 = zext i8 %27 to i32
  %or49 = or i32 %shl47, %conv48
  %conv50 = trunc i32 %or49 to i8
  %28 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %incdec.ptr51 = getelementptr inbounds i8, i8* %28, i32 1
  store i8* %incdec.ptr51, i8** %dst.addr, align 8, !tbaa !3
  store i8 %conv50, i8* %28, align 1, !tbaa !14
  br label %while.cond

while.end:                                        ; preds = %if.then44, %if.then32, %if.then, %land.end
  %29 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  store i8 0, i8* %29, align 1, !tbaa !14
  %30 = load i32*, i32** %dec_len.addr, align 8, !tbaa !3
  %cmp52 = icmp ne i32* %30, null
  br i1 %cmp52, label %if.then54, label %if.end56

if.then54:                                        ; preds = %while.end
  %31 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %32 = load i8*, i8** %orig_dst, align 8, !tbaa !3
  %sub.ptr.lhs.cast = ptrtoint i8* %31 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %32 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv55 = trunc i64 %sub.ptr.sub to i32
  %33 = load i32*, i32** %dec_len.addr, align 8, !tbaa !3
  store i32 %conv55, i32* %33, align 4, !tbaa !15
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %while.end
  %34 = load i32, i32* %orig_len, align 4, !tbaa !15
  %35 = load i32, i32* %len.addr, align 4, !tbaa !15
  %sub57 = sub nsw i32 %34, %35
  %36 = bitcast i8** %orig_dst to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %36) #5
  %37 = bitcast i32* %orig_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %37) #5
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %d) #5
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %c) #5
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %b) #5
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %a) #5
  ret i32 %sub57
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i8 @from_b64(i8 zeroext %ch) #0 {
entry:
  %ch.addr = alloca i8, align 1
  store i8 %ch, i8* %ch.addr, align 1, !tbaa !14
  %0 = load i8, i8* %ch.addr, align 1, !tbaa !14
  %conv = zext i8 %0 to i32
  %and = and i32 %conv, 127
  %idxprom = sext i32 %and to i64
  %arrayidx = getelementptr inbounds [128 x i8], [128 x i8]* @from_b64.tab, i64 0, i64 %idxprom
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !14
  ret i8 %1
}

; Function Attrs: nounwind ssp uwtable
define weak void @cs_log_set_file_level(i8* %file_level) #0 {
entry:
  %file_level.addr = alloca i8*, align 8
  %fl = alloca i8*, align 8
  store i8* %file_level, i8** %file_level.addr, align 8, !tbaa !3
  %0 = bitcast i8** %fl to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load i8*, i8** @s_file_level, align 8, !tbaa !3
  store i8* %1, i8** %fl, align 8, !tbaa !3
  %2 = load i8*, i8** %file_level.addr, align 8, !tbaa !3
  %cmp = icmp ne i8* %2, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %file_level.addr, align 8, !tbaa !3
  %call = call i8* @strdup(i8* %3)
  store i8* %call, i8** @s_file_level, align 8, !tbaa !3
  br label %if.end

if.else:                                          ; preds = %entry
  store i8* null, i8** @s_file_level, align 8, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load i8*, i8** %fl, align 8, !tbaa !3
  call void @free(i8* %4)
  %5 = bitcast i8** %fl to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %5) #5
  ret void
}

declare i8* @strdup(i8*) #4

declare void @free(i8*) #4

; Function Attrs: nounwind ssp uwtable
define weak i32 @cs_log_print_prefix(i32 %level, i8* %file, i32 %ln) #0 {
entry:
  %retval = alloca i32, align 4
  %level.addr = alloca i32, align 4
  %file.addr = alloca i8*, align 8
  %ln.addr = alloca i32, align 4
  %prefix = alloca [24 x i8], align 16
  %q = alloca i8*, align 8
  %p = alloca i8*, align 8
  %fl = alloca i64, align 8
  %ll = alloca i64, align 8
  %pl = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %c = alloca i8, align 1
  %pll = alloca i32, align 4
  %fl51 = alloca %struct.mg_str, align 8
  %ps = alloca %struct.mg_str, align 8
  %k = alloca %struct.mg_str, align 8
  %v = alloca %struct.mg_str, align 8
  %tmp = alloca %struct.mg_str, align 8
  %tmp56 = alloca %struct.mg_str, align 8
  %yes = alloca i8, align 1
  store i32 %level, i32* %level.addr, align 4, !tbaa !14
  store i8* %file, i8** %file.addr, align 8, !tbaa !3
  store i32 %ln, i32* %ln.addr, align 4, !tbaa !15
  %0 = bitcast [24 x i8]* %prefix to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %0) #5
  %1 = bitcast i8** %q to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %2 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  %3 = bitcast i64* %fl to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  store i64 0, i64* %fl, align 8, !tbaa !12
  %4 = bitcast i64* %ll to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #5
  store i64 0, i64* %ll, align 8, !tbaa !12
  %5 = bitcast i64* %pl to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #5
  store i64 0, i64* %pl, align 8, !tbaa !12
  %6 = load i32, i32* %level.addr, align 4, !tbaa !14
  %7 = load i32, i32* @cs_log_level, align 4, !tbaa !14
  %cmp = icmp sgt i32 %6, %7
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %8 = load i8*, i8** @s_file_level, align 8, !tbaa !3
  %cmp1 = icmp eq i8* %8, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup93

if.end:                                           ; preds = %land.lhs.true, %entry
  %9 = load i8*, i8** %file.addr, align 8, !tbaa !3
  %10 = load i8*, i8** %file.addr, align 8, !tbaa !3
  %call = call i64 @strlen(i8* %10)
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 %call
  store i8* %add.ptr, i8** %p, align 8, !tbaa !3
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont, %if.end
  %11 = load i8*, i8** %p, align 8, !tbaa !3
  %12 = load i8*, i8** %file.addr, align 8, !tbaa !3
  %cmp2 = icmp ne i8* %11, %12
  br i1 %cmp2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %c) #5
  %13 = load i8*, i8** %p, align 8, !tbaa !3
  %add.ptr3 = getelementptr inbounds i8, i8* %13, i64 -1
  %14 = load i8, i8* %add.ptr3, align 1, !tbaa !14
  store i8 %14, i8* %c, align 1, !tbaa !14
  %15 = load i8, i8* %c, align 1, !tbaa !14
  %conv = sext i8 %15 to i32
  %cmp4 = icmp eq i32 %conv, 47
  br i1 %cmp4, label %if.then9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %16 = load i8, i8* %c, align 1, !tbaa !14
  %conv6 = sext i8 %16 to i32
  %cmp7 = icmp eq i32 %conv6, 92
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %lor.lhs.false, %while.body
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end10:                                         ; preds = %lor.lhs.false
  %17 = load i8*, i8** %p, align 8, !tbaa !3
  %incdec.ptr = getelementptr inbounds i8, i8* %17, i32 -1
  store i8* %incdec.ptr, i8** %p, align 8, !tbaa !3
  %18 = load i64, i64* %fl, align 8, !tbaa !12
  %inc = add i64 %18, 1
  store i64 %inc, i64* %fl, align 8, !tbaa !12
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end10, %if.then9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %c) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 3, label %while.end
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %while.cond

while.end:                                        ; preds = %cleanup, %while.cond
  %19 = load i32, i32* %ln.addr, align 4, !tbaa !15
  %cmp11 = icmp slt i32 %19, 10000
  br i1 %cmp11, label %cond.true, label %cond.false25

cond.true:                                        ; preds = %while.end
  %20 = load i32, i32* %ln.addr, align 4, !tbaa !15
  %cmp13 = icmp slt i32 %20, 1000
  br i1 %cmp13, label %cond.true15, label %cond.false22

cond.true15:                                      ; preds = %cond.true
  %21 = load i32, i32* %ln.addr, align 4, !tbaa !15
  %cmp16 = icmp slt i32 %21, 100
  br i1 %cmp16, label %cond.true18, label %cond.false

cond.true18:                                      ; preds = %cond.true15
  %22 = load i32, i32* %ln.addr, align 4, !tbaa !15
  %cmp19 = icmp slt i32 %22, 10
  %23 = zext i1 %cmp19 to i64
  %cond = select i1 %cmp19, i32 1, i32 2
  br label %cond.end

cond.false:                                       ; preds = %cond.true15
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true18
  %cond21 = phi i32 [ %cond, %cond.true18 ], [ 3, %cond.false ]
  br label %cond.end23

cond.false22:                                     ; preds = %cond.true
  br label %cond.end23

cond.end23:                                       ; preds = %cond.false22, %cond.end
  %cond24 = phi i32 [ %cond21, %cond.end ], [ 4, %cond.false22 ]
  br label %cond.end26

cond.false25:                                     ; preds = %while.end
  br label %cond.end26

cond.end26:                                       ; preds = %cond.false25, %cond.end23
  %cond27 = phi i32 [ %cond24, %cond.end23 ], [ 5, %cond.false25 ]
  %conv28 = sext i32 %cond27 to i64
  store i64 %conv28, i64* %ll, align 8, !tbaa !12
  %24 = load i64, i64* %fl, align 8, !tbaa !12
  %25 = load i64, i64* %ll, align 8, !tbaa !12
  %sub = sub i64 24, %25
  %sub29 = sub i64 %sub, 2
  %cmp30 = icmp ugt i64 %24, %sub29
  br i1 %cmp30, label %if.then32, label %if.end35

if.then32:                                        ; preds = %cond.end26
  %26 = load i64, i64* %ll, align 8, !tbaa !12
  %sub33 = sub i64 24, %26
  %sub34 = sub i64 %sub33, 2
  store i64 %sub34, i64* %fl, align 8, !tbaa !12
  br label %if.end35

if.end35:                                         ; preds = %if.then32, %cond.end26
  %27 = load i64, i64* %fl, align 8, !tbaa !12
  %add = add i64 %27, 1
  %28 = load i64, i64* %ll, align 8, !tbaa !12
  %add36 = add i64 %add, %28
  store i64 %add36, i64* %pl, align 8, !tbaa !12
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %prefix, i32 0, i32 0
  %29 = load i8*, i8** %p, align 8, !tbaa !3
  %30 = load i64, i64* %fl, align 8, !tbaa !12
  %call37 = call i8* @__memcpy_chk(i8* %arraydecay, i8* %29, i64 %30, i64 24) #5
  %arraydecay38 = getelementptr inbounds [24 x i8], [24 x i8]* %prefix, i32 0, i32 0
  %31 = load i64, i64* %pl, align 8, !tbaa !12
  %add.ptr39 = getelementptr inbounds i8, i8* %arraydecay38, i64 %31
  store i8* %add.ptr39, i8** %q, align 8, !tbaa !3
  %32 = load i8*, i8** %q, align 8, !tbaa !3
  %33 = load i64, i64* %pl, align 8, !tbaa !12
  %sub40 = sub i64 24, %33
  %34 = load i8*, i8** %q, align 8, !tbaa !3
  %35 = call i64 @llvm.objectsize.i64.p0i8(i8* %34, i1 false, i1 true)
  %call41 = call i8* @__memset_chk(i8* %32, i32 32, i64 %sub40, i64 %35) #5
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end35
  %36 = load i32, i32* %ln.addr, align 4, !tbaa !15
  %rem = srem i32 %36, 10
  %add42 = add nsw i32 48, %rem
  %conv43 = trunc i32 %add42 to i8
  %37 = load i8*, i8** %q, align 8, !tbaa !3
  %incdec.ptr44 = getelementptr inbounds i8, i8* %37, i32 -1
  store i8* %incdec.ptr44, i8** %q, align 8, !tbaa !3
  store i8 %conv43, i8* %incdec.ptr44, align 1, !tbaa !14
  %38 = load i32, i32* %ln.addr, align 4, !tbaa !15
  %div = sdiv i32 %38, 10
  store i32 %div, i32* %ln.addr, align 4, !tbaa !15
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %39 = load i32, i32* %ln.addr, align 4, !tbaa !15
  %cmp45 = icmp sgt i32 %39, 0
  br i1 %cmp45, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %40 = load i8*, i8** %q, align 8, !tbaa !3
  %incdec.ptr47 = getelementptr inbounds i8, i8* %40, i32 -1
  store i8* %incdec.ptr47, i8** %q, align 8, !tbaa !3
  store i8 58, i8* %incdec.ptr47, align 1, !tbaa !14
  %41 = load i8*, i8** @s_file_level, align 8, !tbaa !3
  %cmp48 = icmp ne i8* %41, null
  br i1 %cmp48, label %if.then50, label %if.end86

if.then50:                                        ; preds = %do.end
  %42 = bitcast i32* %pll to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %42) #5
  %43 = load i32, i32* @cs_log_level, align 4, !tbaa !14
  store i32 %43, i32* %pll, align 4, !tbaa !14
  %44 = bitcast %struct.mg_str* %fl51 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %44) #5
  %45 = load i8*, i8** @s_file_level, align 8, !tbaa !3
  %call52 = call { i8*, i64 } @mg_mk_str(i8* %45)
  %46 = bitcast %struct.mg_str* %fl51 to { i8*, i64 }*
  %47 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %46, i32 0, i32 0
  %48 = extractvalue { i8*, i64 } %call52, 0
  store i8* %48, i8** %47, align 8
  %49 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %46, i32 0, i32 1
  %50 = extractvalue { i8*, i64 } %call52, 1
  store i64 %50, i64* %49, align 8
  %51 = bitcast %struct.mg_str* %ps to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %51) #5
  %p53 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ps, i32 0, i32 0
  %arraydecay54 = getelementptr inbounds [24 x i8], [24 x i8]* %prefix, i32 0, i32 0
  store i8* %arraydecay54, i8** %p53, align 8, !tbaa !16
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ps, i32 0, i32 1
  %52 = load i64, i64* %pl, align 8, !tbaa !12
  store i64 %52, i64* %len, align 8, !tbaa !18
  %53 = bitcast %struct.mg_str* %k to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %53) #5
  %54 = bitcast %struct.mg_str* %v to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %54) #5
  br label %while.cond55

while.cond55:                                     ; preds = %cleanup72, %if.then50
  %55 = bitcast %struct.mg_str* %tmp56 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %55) #5
  %56 = bitcast %struct.mg_str* %fl51 to { i8*, i64 }*
  %57 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %56, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %56, i32 0, i32 1
  %60 = load i64, i64* %59, align 8
  %call57 = call { i8*, i64 } @mg_next_comma_list_entry_n(i8* %58, i64 %60, %struct.mg_str* %k, %struct.mg_str* %v)
  %61 = bitcast %struct.mg_str* %tmp56 to { i8*, i64 }*
  %62 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %61, i32 0, i32 0
  %63 = extractvalue { i8*, i64 } %call57, 0
  store i8* %63, i8** %62, align 8
  %64 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %61, i32 0, i32 1
  %65 = extractvalue { i8*, i64 } %call57, 1
  store i64 %65, i64* %64, align 8
  %66 = bitcast %struct.mg_str* %fl51 to i8*
  %67 = bitcast %struct.mg_str* %tmp56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %67, i64 16, i1 false), !tbaa.struct !19
  %68 = bitcast %struct.mg_str* %tmp56 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %68) #5
  %69 = bitcast %struct.mg_str* %tmp to i8*
  %70 = bitcast %struct.mg_str* %fl51 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %69, i8* align 8 %70, i64 16, i1 false), !tbaa.struct !19
  %p58 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %tmp, i32 0, i32 0
  %71 = load i8*, i8** %p58, align 8, !tbaa !16
  %cmp59 = icmp ne i8* %71, null
  br i1 %cmp59, label %while.body61, label %while.end74

while.body61:                                     ; preds = %while.cond55
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %yes) #5
  %72 = bitcast %struct.mg_str* %ps to { i8*, i64 }*
  %73 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %72, i32 0, i32 0
  %74 = load i8*, i8** %73, align 8
  %75 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %72, i32 0, i32 1
  %76 = load i64, i64* %75, align 8
  %77 = bitcast %struct.mg_str* %k to { i8*, i64 }*
  %78 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %77, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %77, i32 0, i32 1
  %81 = load i64, i64* %80, align 8
  %call62 = call i32 @mg_str_starts_with(i8* %74, i64 %76, i8* %79, i64 %81)
  %tobool = icmp ne i32 %call62, 0
  br i1 %tobool, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %while.body61
  %len63 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %v, i32 0, i32 1
  %82 = load i64, i64* %len63, align 8, !tbaa !18
  %cmp64 = icmp eq i64 %82, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.body61
  %83 = phi i1 [ true, %while.body61 ], [ %cmp64, %lor.rhs ]
  %lnot = xor i1 %83, true
  %frombool = zext i1 %lnot to i8
  store i8 %frombool, i8* %yes, align 1, !tbaa !20
  %84 = load i8, i8* %yes, align 1, !tbaa !20, !range !22
  %tobool66 = trunc i8 %84 to i1
  br i1 %tobool66, label %if.end68, label %if.then67

if.then67:                                        ; preds = %lor.end
  store i32 6, i32* %cleanup.dest.slot, align 4
  br label %cleanup72

if.end68:                                         ; preds = %lor.end
  %p69 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %v, i32 0, i32 0
  %85 = load i8*, i8** %p69, align 8, !tbaa !16
  %86 = load i8, i8* %85, align 1, !tbaa !14
  %conv70 = sext i8 %86 to i32
  %sub71 = sub nsw i32 %conv70, 48
  store i32 %sub71, i32* %pll, align 4, !tbaa !14
  store i32 7, i32* %cleanup.dest.slot, align 4
  br label %cleanup72

cleanup72:                                        ; preds = %if.end68, %if.then67
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %yes) #5
  %cleanup.dest73 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest73, label %unreachable [
    i32 6, label %while.cond55
    i32 7, label %while.end74
  ]

while.end74:                                      ; preds = %cleanup72, %while.cond55
  %87 = load i32, i32* %level.addr, align 4, !tbaa !14
  %88 = load i32, i32* %pll, align 4, !tbaa !14
  %cmp75 = icmp sgt i32 %87, %88
  br i1 %cmp75, label %if.then77, label %if.end78

if.then77:                                        ; preds = %while.end74
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup79

if.end78:                                         ; preds = %while.end74
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup79

cleanup79:                                        ; preds = %if.end78, %if.then77
  %89 = bitcast %struct.mg_str* %v to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %89) #5
  %90 = bitcast %struct.mg_str* %k to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %90) #5
  %91 = bitcast %struct.mg_str* %ps to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %91) #5
  %92 = bitcast %struct.mg_str* %fl51 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %92) #5
  %93 = bitcast i32* %pll to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %93) #5
  %cleanup.dest84 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest84, label %cleanup93 [
    i32 0, label %cleanup.cont85
  ]

cleanup.cont85:                                   ; preds = %cleanup79
  br label %if.end86

if.end86:                                         ; preds = %cleanup.cont85, %do.end
  %94 = load %struct.__sFILE*, %struct.__sFILE** @cs_log_file, align 8, !tbaa !3
  %cmp87 = icmp eq %struct.__sFILE* %94, null
  br i1 %cmp87, label %if.then89, label %if.end90

if.then89:                                        ; preds = %if.end86
  %95 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8, !tbaa !3
  store %struct.__sFILE* %95, %struct.__sFILE** @cs_log_file, align 8, !tbaa !3
  br label %if.end90

if.end90:                                         ; preds = %if.then89, %if.end86
  %96 = load i32, i32* %level.addr, align 4, !tbaa !14
  store i32 %96, i32* @cs_log_cur_msg_level, align 4, !tbaa !14
  %arraydecay91 = getelementptr inbounds [24 x i8], [24 x i8]* %prefix, i32 0, i32 0
  %97 = load %struct.__sFILE*, %struct.__sFILE** @cs_log_file, align 8, !tbaa !3
  %call92 = call i64 @"\01_fwrite"(i8* %arraydecay91, i64 1, i64 24, %struct.__sFILE* %97)
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup93

cleanup93:                                        ; preds = %if.end90, %cleanup79, %if.then
  %98 = bitcast i64* %pl to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %98) #5
  %99 = bitcast i64* %ll to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %99) #5
  %100 = bitcast i64* %fl to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %100) #5
  %101 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %101) #5
  %102 = bitcast i8** %q to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %102) #5
  %103 = bitcast [24 x i8]* %prefix to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %103) #5
  %104 = load i32, i32* %retval, align 4
  ret i32 %104

unreachable:                                      ; preds = %cleanup72, %cleanup
  unreachable
}

declare i64 @strlen(i8*) #4

; Function Attrs: nounwind
declare i8* @__memcpy_chk(i8*, i8*, i64, i64) #2

; Function Attrs: nounwind ssp uwtable
define weak { i8*, i64 } @mg_mk_str(i8* %s) #0 {
entry:
  %retval = alloca %struct.mg_str, align 8
  %s.addr = alloca i8*, align 8
  store i8* %s, i8** %s.addr, align 8, !tbaa !3
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %retval, i32 0, i32 0
  %0 = load i8*, i8** %s.addr, align 8, !tbaa !3
  store i8* %0, i8** %p, align 8, !tbaa !16
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %retval, i32 0, i32 1
  store i64 0, i64* %len, align 8, !tbaa !18
  %1 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %cmp = icmp ne i8* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %call = call i64 @strlen(i8* %2)
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %retval, i32 0, i32 1
  store i64 %call, i64* %len1, align 8, !tbaa !18
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %4 = load { i8*, i64 }, { i8*, i64 }* %3, align 8
  ret { i8*, i64 } %4
}

; Function Attrs: nounwind ssp uwtable
define weak { i8*, i64 } @mg_next_comma_list_entry_n(i8* %list.coerce0, i64 %list.coerce1, %struct.mg_str* %val, %struct.mg_str* %eq_val) #0 {
entry:
  %retval = alloca %struct.mg_str, align 8
  %list = alloca %struct.mg_str, align 8
  %val.addr = alloca %struct.mg_str*, align 8
  %eq_val.addr = alloca %struct.mg_str*, align 8
  %tmp = alloca %struct.mg_str, align 8
  %chr = alloca i8*, align 8
  %tmp12 = alloca %struct.mg_str, align 8
  %0 = bitcast %struct.mg_str* %list to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %list.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %list.coerce1, i64* %2, align 8
  store %struct.mg_str* %val, %struct.mg_str** %val.addr, align 8, !tbaa !3
  store %struct.mg_str* %eq_val, %struct.mg_str** %eq_val.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %list, i32 0, i32 1
  %3 = load i64, i64* %len, align 8, !tbaa !18
  %cmp = icmp eq i64 %3, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %4) #5
  %call = call { i8*, i64 } @mg_mk_str(i8* null)
  %5 = bitcast %struct.mg_str* %tmp to { i8*, i64 }*
  %6 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 0
  %7 = extractvalue { i8*, i64 } %call, 0
  store i8* %7, i8** %6, align 8
  %8 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 1
  %9 = extractvalue { i8*, i64 } %call, 1
  store i64 %9, i64* %8, align 8
  %10 = bitcast %struct.mg_str* %list to i8*
  %11 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 16, i1 false), !tbaa.struct !19
  %12 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %12) #5
  br label %if.end45

if.else:                                          ; preds = %entry
  %13 = bitcast i8** %chr to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %13) #5
  store i8* null, i8** %chr, align 8, !tbaa !3
  %14 = load %struct.mg_str*, %struct.mg_str** %val.addr, align 8, !tbaa !3
  %15 = bitcast %struct.mg_str* %14 to i8*
  %16 = bitcast %struct.mg_str* %list to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 16, i1 false), !tbaa.struct !19
  %17 = load %struct.mg_str*, %struct.mg_str** %val.addr, align 8, !tbaa !3
  %18 = bitcast %struct.mg_str* %17 to { i8*, i64 }*
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %18, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %18, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %call1 = call i8* @mg_strchr(i8* %20, i64 %22, i32 44)
  store i8* %call1, i8** %chr, align 8, !tbaa !3
  %cmp2 = icmp ne i8* %call1, null
  br i1 %cmp2, label %if.then3, label %if.else11

if.then3:                                         ; preds = %if.else
  %23 = load i8*, i8** %chr, align 8, !tbaa !3
  %24 = load %struct.mg_str*, %struct.mg_str** %val.addr, align 8, !tbaa !3
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %24, i32 0, i32 0
  %25 = load i8*, i8** %p, align 8, !tbaa !16
  %sub.ptr.lhs.cast = ptrtoint i8* %23 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %25 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %26 = load %struct.mg_str*, %struct.mg_str** %val.addr, align 8, !tbaa !3
  %len4 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %26, i32 0, i32 1
  store i64 %sub.ptr.sub, i64* %len4, align 8, !tbaa !18
  %27 = load i8*, i8** %chr, align 8, !tbaa !3
  %incdec.ptr = getelementptr inbounds i8, i8* %27, i32 1
  store i8* %incdec.ptr, i8** %chr, align 8, !tbaa !3
  %28 = load i8*, i8** %chr, align 8, !tbaa !3
  %p5 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %list, i32 0, i32 0
  %29 = load i8*, i8** %p5, align 8, !tbaa !16
  %sub.ptr.lhs.cast6 = ptrtoint i8* %28 to i64
  %sub.ptr.rhs.cast7 = ptrtoint i8* %29 to i64
  %sub.ptr.sub8 = sub i64 %sub.ptr.lhs.cast6, %sub.ptr.rhs.cast7
  %len9 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %list, i32 0, i32 1
  %30 = load i64, i64* %len9, align 8, !tbaa !18
  %sub = sub i64 %30, %sub.ptr.sub8
  store i64 %sub, i64* %len9, align 8, !tbaa !18
  %31 = load i8*, i8** %chr, align 8, !tbaa !3
  %p10 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %list, i32 0, i32 0
  store i8* %31, i8** %p10, align 8, !tbaa !16
  br label %if.end

if.else11:                                        ; preds = %if.else
  %32 = bitcast %struct.mg_str* %tmp12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %32) #5
  %p13 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %list, i32 0, i32 0
  %33 = load i8*, i8** %p13, align 8, !tbaa !16
  %len14 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %list, i32 0, i32 1
  %34 = load i64, i64* %len14, align 8, !tbaa !18
  %add.ptr = getelementptr inbounds i8, i8* %33, i64 %34
  %call15 = call { i8*, i64 } @mg_mk_str_n(i8* %add.ptr, i64 0)
  %35 = bitcast %struct.mg_str* %tmp12 to { i8*, i64 }*
  %36 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %35, i32 0, i32 0
  %37 = extractvalue { i8*, i64 } %call15, 0
  store i8* %37, i8** %36, align 8
  %38 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %35, i32 0, i32 1
  %39 = extractvalue { i8*, i64 } %call15, 1
  store i64 %39, i64* %38, align 8
  %40 = bitcast %struct.mg_str* %list to i8*
  %41 = bitcast %struct.mg_str* %tmp12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 16, i1 false), !tbaa.struct !19
  %42 = bitcast %struct.mg_str* %tmp12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %42) #5
  br label %if.end

if.end:                                           ; preds = %if.else11, %if.then3
  %43 = load %struct.mg_str*, %struct.mg_str** %eq_val.addr, align 8, !tbaa !3
  %cmp16 = icmp ne %struct.mg_str* %43, null
  br i1 %cmp16, label %if.then17, label %if.end44

if.then17:                                        ; preds = %if.end
  %44 = load %struct.mg_str*, %struct.mg_str** %eq_val.addr, align 8, !tbaa !3
  %len18 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %44, i32 0, i32 1
  store i64 0, i64* %len18, align 8, !tbaa !18
  %45 = load %struct.mg_str*, %struct.mg_str** %val.addr, align 8, !tbaa !3
  %p19 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %45, i32 0, i32 0
  %46 = load i8*, i8** %p19, align 8, !tbaa !16
  %47 = load %struct.mg_str*, %struct.mg_str** %val.addr, align 8, !tbaa !3
  %len20 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %47, i32 0, i32 1
  %48 = load i64, i64* %len20, align 8, !tbaa !18
  %call21 = call i8* @memchr(i8* %46, i32 61, i64 %48)
  %49 = load %struct.mg_str*, %struct.mg_str** %eq_val.addr, align 8, !tbaa !3
  %p22 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %49, i32 0, i32 0
  store i8* %call21, i8** %p22, align 8, !tbaa !16
  %50 = load %struct.mg_str*, %struct.mg_str** %eq_val.addr, align 8, !tbaa !3
  %p23 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %50, i32 0, i32 0
  %51 = load i8*, i8** %p23, align 8, !tbaa !16
  %cmp24 = icmp ne i8* %51, null
  br i1 %cmp24, label %if.then25, label %if.end43

if.then25:                                        ; preds = %if.then17
  %52 = load %struct.mg_str*, %struct.mg_str** %eq_val.addr, align 8, !tbaa !3
  %p26 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %52, i32 0, i32 0
  %53 = load i8*, i8** %p26, align 8, !tbaa !16
  %incdec.ptr27 = getelementptr inbounds i8, i8* %53, i32 1
  store i8* %incdec.ptr27, i8** %p26, align 8, !tbaa !16
  %54 = load %struct.mg_str*, %struct.mg_str** %val.addr, align 8, !tbaa !3
  %p28 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %54, i32 0, i32 0
  %55 = load i8*, i8** %p28, align 8, !tbaa !16
  %56 = load %struct.mg_str*, %struct.mg_str** %val.addr, align 8, !tbaa !3
  %len29 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %56, i32 0, i32 1
  %57 = load i64, i64* %len29, align 8, !tbaa !18
  %add.ptr30 = getelementptr inbounds i8, i8* %55, i64 %57
  %58 = load %struct.mg_str*, %struct.mg_str** %eq_val.addr, align 8, !tbaa !3
  %p31 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %58, i32 0, i32 0
  %59 = load i8*, i8** %p31, align 8, !tbaa !16
  %sub.ptr.lhs.cast32 = ptrtoint i8* %add.ptr30 to i64
  %sub.ptr.rhs.cast33 = ptrtoint i8* %59 to i64
  %sub.ptr.sub34 = sub i64 %sub.ptr.lhs.cast32, %sub.ptr.rhs.cast33
  %60 = load %struct.mg_str*, %struct.mg_str** %eq_val.addr, align 8, !tbaa !3
  %len35 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %60, i32 0, i32 1
  store i64 %sub.ptr.sub34, i64* %len35, align 8, !tbaa !18
  %61 = load %struct.mg_str*, %struct.mg_str** %eq_val.addr, align 8, !tbaa !3
  %p36 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %61, i32 0, i32 0
  %62 = load i8*, i8** %p36, align 8, !tbaa !16
  %63 = load %struct.mg_str*, %struct.mg_str** %val.addr, align 8, !tbaa !3
  %p37 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %63, i32 0, i32 0
  %64 = load i8*, i8** %p37, align 8, !tbaa !16
  %sub.ptr.lhs.cast38 = ptrtoint i8* %62 to i64
  %sub.ptr.rhs.cast39 = ptrtoint i8* %64 to i64
  %sub.ptr.sub40 = sub i64 %sub.ptr.lhs.cast38, %sub.ptr.rhs.cast39
  %sub41 = sub nsw i64 %sub.ptr.sub40, 1
  %65 = load %struct.mg_str*, %struct.mg_str** %val.addr, align 8, !tbaa !3
  %len42 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %65, i32 0, i32 1
  store i64 %sub41, i64* %len42, align 8, !tbaa !18
  br label %if.end43

if.end43:                                         ; preds = %if.then25, %if.then17
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.end
  %66 = bitcast i8** %chr to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %66) #5
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.then
  %67 = bitcast %struct.mg_str* %retval to i8*
  %68 = bitcast %struct.mg_str* %list to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 16, i1 false), !tbaa.struct !19
  %69 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %70 = load { i8*, i64 }, { i8*, i64 }* %69, align 8
  ret { i8*, i64 } %70
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #1

; Function Attrs: nounwind ssp uwtable
define weak i32 @mg_str_starts_with(i8* %s.coerce0, i64 %s.coerce1, i8* %prefix.coerce0, i64 %prefix.coerce1) #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca %struct.mg_str, align 8
  %prefix = alloca %struct.mg_str, align 8
  %sp = alloca %struct.mg_str, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %0 = bitcast %struct.mg_str* %s to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %s.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %s.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %prefix to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %prefix.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %prefix.coerce1, i64* %5, align 8
  %6 = bitcast %struct.mg_str* %sp to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %6) #5
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %sp, i32 0, i32 0
  %p1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 0
  %7 = load i8*, i8** %p1, align 8, !tbaa !16
  store i8* %7, i8** %p, align 8, !tbaa !16
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %sp, i32 0, i32 1
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %prefix, i32 0, i32 1
  %8 = load i64, i64* %len2, align 8, !tbaa !18
  store i64 %8, i64* %len, align 8, !tbaa !18
  %len3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  %9 = load i64, i64* %len3, align 8, !tbaa !18
  %len4 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %prefix, i32 0, i32 1
  %10 = load i64, i64* %len4, align 8, !tbaa !18
  %cmp = icmp ult i64 %9, %10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %11 = bitcast %struct.mg_str* %sp to { i8*, i64 }*
  %12 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %struct.mg_str* %prefix to { i8*, i64 }*
  %17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %16, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %16, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %call = call i32 @mg_strcmp(i8* %13, i64 %15, i8* %18, i64 %20)
  %cmp5 = icmp eq i32 %call, 0
  %conv = zext i1 %cmp5 to i32
  store i32 %conv, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %21 = bitcast %struct.mg_str* %sp to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %21) #5
  %22 = load i32, i32* %retval, align 4
  ret i32 %22
}

declare i64 @"\01_fwrite"(i8*, i64, i64, %struct.__sFILE*) #4

; Function Attrs: nounwind ssp uwtable
define weak void @cs_log_printf(i8* %fmt, ...) #0 {
entry:
  %fmt.addr = alloca i8*, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store i8* %fmt, i8** %fmt.addr, align 8, !tbaa !3
  %0 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %0) #5
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %1 = load %struct.__sFILE*, %struct.__sFILE** @cs_log_file, align 8, !tbaa !3
  %2 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %call = call i32 @vfprintf(%struct.__sFILE* %1, i8* %2, %struct.__va_list_tag* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*
  call void @llvm.va_end(i8* %arraydecay34)
  %3 = load %struct.__sFILE*, %struct.__sFILE** @cs_log_file, align 8, !tbaa !3
  %call5 = call i32 @fputc(i32 10, %struct.__sFILE* %3)
  %4 = load %struct.__sFILE*, %struct.__sFILE** @cs_log_file, align 8, !tbaa !3
  %call6 = call i32 @fflush(%struct.__sFILE* %4)
  store i32 -1, i32* @cs_log_cur_msg_level, align 4, !tbaa !14
  %5 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %5) #5
  ret void
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #5

declare i32 @vfprintf(%struct.__sFILE*, i8*, %struct.__va_list_tag*) #4

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #5

declare i32 @fputc(i32, %struct.__sFILE*) #4

declare i32 @fflush(%struct.__sFILE*) #4

; Function Attrs: nounwind ssp uwtable
define weak void @cs_log_set_file(%struct.__sFILE* %file) #0 {
entry:
  %file.addr = alloca %struct.__sFILE*, align 8
  store %struct.__sFILE* %file, %struct.__sFILE** %file.addr, align 8, !tbaa !3
  %0 = load %struct.__sFILE*, %struct.__sFILE** %file.addr, align 8, !tbaa !3
  store %struct.__sFILE* %0, %struct.__sFILE** @cs_log_file, align 8, !tbaa !3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak void @cs_log_set_level(i32 %level) #0 {
entry:
  %level.addr = alloca i32, align 4
  store i32 %level, i32* %level.addr, align 4, !tbaa !14
  %0 = load i32, i32* %level.addr, align 4, !tbaa !14
  store i32 %0, i32* @cs_log_level, align 4, !tbaa !14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak double @cs_time() #0 {
entry:
  %retval = alloca double, align 8
  %now = alloca double, align 8
  %tv = alloca %struct.timeval, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %0 = bitcast double* %now to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = bitcast %struct.timeval* %tv to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %1) #5
  %call = call i32 @gettimeofday(%struct.timeval* %tv, i8* null)
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store double 0.000000e+00, double* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 0
  %2 = load i64, i64* %tv_sec, align 8, !tbaa !23
  %conv = sitofp i64 %2 to double
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 1
  %3 = load i32, i32* %tv_usec, align 8, !tbaa !25
  %conv1 = sitofp i32 %3 to double
  %div = fdiv double %conv1, 1.000000e+06
  %add = fadd double %conv, %div
  store double %add, double* %now, align 8, !tbaa !26
  %4 = load double, double* %now, align 8, !tbaa !26
  store double %4, double* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %5 = bitcast %struct.timeval* %tv to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %5) #5
  %6 = bitcast double* %now to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %6) #5
  %7 = load double, double* %retval, align 8
  ret double %7
}

declare i32 @gettimeofday(%struct.timeval*, i8*) #4

; Function Attrs: nounwind ssp uwtable
define double @cs_timegm(%struct.tm* %tm) #0 {
entry:
  %tm.addr = alloca %struct.tm*, align 8
  %month = alloca i32, align 4
  %year = alloca i32, align 4
  %year_for_leap = alloca i32, align 4
  %rt = alloca i64, align 8
  store %struct.tm* %tm, %struct.tm** %tm.addr, align 8, !tbaa !3
  %0 = bitcast i32* %month to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !tbaa !3
  %tm_mon = getelementptr inbounds %struct.tm, %struct.tm* %1, i32 0, i32 4
  %2 = load i32, i32* %tm_mon, align 8, !tbaa !28
  %rem = srem i32 %2, 12
  store i32 %rem, i32* %month, align 4, !tbaa !15
  %3 = bitcast i32* %year to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  %4 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !tbaa !3
  %tm_year = getelementptr inbounds %struct.tm, %struct.tm* %4, i32 0, i32 5
  %5 = load i32, i32* %tm_year, align 4, !tbaa !30
  %6 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !tbaa !3
  %tm_mon1 = getelementptr inbounds %struct.tm, %struct.tm* %6, i32 0, i32 4
  %7 = load i32, i32* %tm_mon1, align 8, !tbaa !28
  %div = sdiv i32 %7, 12
  %add = add nsw i32 %5, %div
  store i32 %add, i32* %year, align 4, !tbaa !15
  %8 = bitcast i32* %year_for_leap to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %8) #5
  %9 = bitcast i64* %rt to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #5
  %10 = load i32, i32* %month, align 4, !tbaa !15
  %cmp = icmp slt i32 %10, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %11 = load i32, i32* %month, align 4, !tbaa !15
  %add2 = add nsw i32 %11, 12
  store i32 %add2, i32* %month, align 4, !tbaa !15
  %12 = load i32, i32* %year, align 4, !tbaa !15
  %dec = add nsw i32 %12, -1
  store i32 %dec, i32* %year, align 4, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load i32, i32* %month, align 4, !tbaa !15
  %cmp3 = icmp sgt i32 %13, 1
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %14 = load i32, i32* %year, align 4, !tbaa !15
  %add4 = add nsw i32 %14, 1
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %15 = load i32, i32* %year, align 4, !tbaa !15
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add4, %cond.true ], [ %15, %cond.false ]
  store i32 %cond, i32* %year_for_leap, align 4, !tbaa !15
  %16 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !tbaa !3
  %tm_sec = getelementptr inbounds %struct.tm, %struct.tm* %16, i32 0, i32 0
  %17 = load i32, i32* %tm_sec, align 8, !tbaa !31
  %18 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !tbaa !3
  %tm_min = getelementptr inbounds %struct.tm, %struct.tm* %18, i32 0, i32 1
  %19 = load i32, i32* %tm_min, align 4, !tbaa !32
  %20 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !tbaa !3
  %tm_hour = getelementptr inbounds %struct.tm, %struct.tm* %20, i32 0, i32 2
  %21 = load i32, i32* %tm_hour, align 8, !tbaa !33
  %22 = load i32, i32* %month, align 4, !tbaa !15
  %idxprom = sext i32 %22 to i64
  %arrayidx = getelementptr inbounds [12 x i32], [12 x i32]* @cs_timegm.month_day, i64 0, i64 %idxprom
  %23 = load i32, i32* %arrayidx, align 4, !tbaa !15
  %24 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !tbaa !3
  %tm_mday = getelementptr inbounds %struct.tm, %struct.tm* %24, i32 0, i32 3
  %25 = load i32, i32* %tm_mday, align 4, !tbaa !34
  %add5 = add nsw i32 %23, %25
  %sub = sub nsw i32 %add5, 1
  %26 = load i32, i32* %year, align 4, !tbaa !15
  %sub6 = sub nsw i32 %26, 70
  %mul = mul nsw i32 365, %sub6
  %add7 = add nsw i32 %sub, %mul
  %27 = load i32, i32* %year_for_leap, align 4, !tbaa !15
  %sub8 = sub nsw i32 %27, 69
  %div9 = sdiv i32 %sub8, 4
  %add10 = add nsw i32 %add7, %div9
  %28 = load i32, i32* %year_for_leap, align 4, !tbaa !15
  %sub11 = sub nsw i32 %28, 1
  %div12 = sdiv i32 %sub11, 100
  %sub13 = sub nsw i32 %add10, %div12
  %29 = load i32, i32* %year_for_leap, align 4, !tbaa !15
  %add14 = add nsw i32 %29, 299
  %div15 = sdiv i32 %add14, 400
  %add16 = add nsw i32 %sub13, %div15
  %mul17 = mul nsw i32 24, %add16
  %add18 = add nsw i32 %21, %mul17
  %mul19 = mul nsw i32 60, %add18
  %add20 = add nsw i32 %19, %mul19
  %mul21 = mul nsw i32 60, %add20
  %add22 = add nsw i32 %17, %mul21
  %conv = sext i32 %add22 to i64
  store i64 %conv, i64* %rt, align 8, !tbaa !35
  %30 = load i64, i64* %rt, align 8, !tbaa !35
  %cmp23 = icmp slt i64 %30, 0
  br i1 %cmp23, label %cond.true25, label %cond.false26

cond.true25:                                      ; preds = %cond.end
  br label %cond.end28

cond.false26:                                     ; preds = %cond.end
  %31 = load i64, i64* %rt, align 8, !tbaa !35
  %conv27 = sitofp i64 %31 to double
  br label %cond.end28

cond.end28:                                       ; preds = %cond.false26, %cond.true25
  %cond29 = phi double [ -1.000000e+00, %cond.true25 ], [ %conv27, %cond.false26 ]
  %32 = bitcast i64* %rt to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %32) #5
  %33 = bitcast i32* %year_for_leap to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %33) #5
  %34 = bitcast i32* %year to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %34) #5
  %35 = bitcast i32* %month to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %35) #5
  ret double %cond29
}

; Function Attrs: nounwind ssp uwtable
define void @cs_md5_init(%struct.cs_md5_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.cs_md5_ctx*, align 8
  store %struct.cs_md5_ctx* %ctx, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %0 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %buf = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %buf, i64 0, i64 0
  store i32 1732584193, i32* %arrayidx, align 4, !tbaa !15
  %1 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %buf1 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %1, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [4 x i32], [4 x i32]* %buf1, i64 0, i64 1
  store i32 -271733879, i32* %arrayidx2, align 4, !tbaa !15
  %2 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %buf3 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %2, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [4 x i32], [4 x i32]* %buf3, i64 0, i64 2
  store i32 -1732584194, i32* %arrayidx4, align 4, !tbaa !15
  %3 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %buf5 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %3, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [4 x i32], [4 x i32]* %buf5, i64 0, i64 3
  store i32 271733878, i32* %arrayidx6, align 4, !tbaa !15
  %4 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %bits = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %4, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [2 x i32], [2 x i32]* %bits, i64 0, i64 0
  store i32 0, i32* %arrayidx7, align 4, !tbaa !15
  %5 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %bits8 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %5, i32 0, i32 1
  %arrayidx9 = getelementptr inbounds [2 x i32], [2 x i32]* %bits8, i64 0, i64 1
  store i32 0, i32* %arrayidx9, align 4, !tbaa !15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @cs_md5_update(%struct.cs_md5_ctx* %ctx, i8* %buf, i64 %len) #0 {
entry:
  %ctx.addr = alloca %struct.cs_md5_ctx*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %t = alloca i32, align 4
  %p = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.cs_md5_ctx* %ctx, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  %0 = bitcast i32* %t to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %bits = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %1, i32 0, i32 1
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %bits, i64 0, i64 0
  %2 = load i32, i32* %arrayidx, align 4, !tbaa !15
  store i32 %2, i32* %t, align 4, !tbaa !15
  %3 = load i32, i32* %t, align 4, !tbaa !15
  %4 = load i64, i64* %len.addr, align 8, !tbaa !12
  %conv = trunc i64 %4 to i32
  %shl = shl i32 %conv, 3
  %add = add i32 %3, %shl
  %5 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %bits1 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %5, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [2 x i32], [2 x i32]* %bits1, i64 0, i64 0
  store i32 %add, i32* %arrayidx2, align 4, !tbaa !15
  %6 = load i32, i32* %t, align 4, !tbaa !15
  %cmp = icmp ult i32 %add, %6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %bits4 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %7, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [2 x i32], [2 x i32]* %bits4, i64 0, i64 1
  %8 = load i32, i32* %arrayidx5, align 4, !tbaa !15
  %inc = add i32 %8, 1
  store i32 %inc, i32* %arrayidx5, align 4, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %9 = load i64, i64* %len.addr, align 8, !tbaa !12
  %conv6 = trunc i64 %9 to i32
  %shr = lshr i32 %conv6, 29
  %10 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %bits7 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %10, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [2 x i32], [2 x i32]* %bits7, i64 0, i64 1
  %11 = load i32, i32* %arrayidx8, align 4, !tbaa !15
  %add9 = add i32 %11, %shr
  store i32 %add9, i32* %arrayidx8, align 4, !tbaa !15
  %12 = load i32, i32* %t, align 4, !tbaa !15
  %shr10 = lshr i32 %12, 3
  %and = and i32 %shr10, 63
  store i32 %and, i32* %t, align 4, !tbaa !15
  %13 = load i32, i32* %t, align 4, !tbaa !15
  %tobool = icmp ne i32 %13, 0
  br i1 %tobool, label %if.then11, label %if.end29

if.then11:                                        ; preds = %if.end
  %14 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %14) #5
  %15 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %in = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %15, i32 0, i32 2
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %in, i32 0, i32 0
  %16 = load i32, i32* %t, align 4, !tbaa !15
  %idx.ext = zext i32 %16 to i64
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 %idx.ext
  store i8* %add.ptr, i8** %p, align 8, !tbaa !3
  %17 = load i32, i32* %t, align 4, !tbaa !15
  %sub = sub i32 64, %17
  store i32 %sub, i32* %t, align 4, !tbaa !15
  %18 = load i64, i64* %len.addr, align 8, !tbaa !12
  %19 = load i32, i32* %t, align 4, !tbaa !15
  %conv12 = zext i32 %19 to i64
  %cmp13 = icmp ult i64 %18, %conv12
  br i1 %cmp13, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.then11
  %20 = load i8*, i8** %p, align 8, !tbaa !3
  %21 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %22 = load i64, i64* %len.addr, align 8, !tbaa !12
  %23 = load i8*, i8** %p, align 8, !tbaa !3
  %24 = call i64 @llvm.objectsize.i64.p0i8(i8* %23, i1 false, i1 true)
  %call = call i8* @__memcpy_chk(i8* %20, i8* %21, i64 %22, i64 %24) #5
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end16:                                         ; preds = %if.then11
  %25 = load i8*, i8** %p, align 8, !tbaa !3
  %26 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %27 = load i32, i32* %t, align 4, !tbaa !15
  %conv17 = zext i32 %27 to i64
  %28 = load i8*, i8** %p, align 8, !tbaa !3
  %29 = call i64 @llvm.objectsize.i64.p0i8(i8* %28, i1 false, i1 true)
  %call18 = call i8* @__memcpy_chk(i8* %25, i8* %26, i64 %conv17, i64 %29) #5
  %30 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %in19 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %30, i32 0, i32 2
  %arraydecay20 = getelementptr inbounds [64 x i8], [64 x i8]* %in19, i32 0, i32 0
  call void @byteReverse(i8* %arraydecay20, i32 16)
  %31 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %buf21 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %31, i32 0, i32 0
  %arraydecay22 = getelementptr inbounds [4 x i32], [4 x i32]* %buf21, i32 0, i32 0
  %32 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %in23 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %32, i32 0, i32 2
  %arraydecay24 = getelementptr inbounds [64 x i8], [64 x i8]* %in23, i32 0, i32 0
  %33 = bitcast i8* %arraydecay24 to i32*
  call void @cs_md5_transform(i32* %arraydecay22, i32* %33)
  %34 = load i32, i32* %t, align 4, !tbaa !15
  %35 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %idx.ext25 = zext i32 %34 to i64
  %add.ptr26 = getelementptr inbounds i8, i8* %35, i64 %idx.ext25
  store i8* %add.ptr26, i8** %buf.addr, align 8, !tbaa !3
  %36 = load i32, i32* %t, align 4, !tbaa !15
  %conv27 = zext i32 %36 to i64
  %37 = load i64, i64* %len.addr, align 8, !tbaa !12
  %sub28 = sub i64 %37, %conv27
  store i64 %sub28, i64* %len.addr, align 8, !tbaa !12
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end16, %if.then15
  %38 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %38) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup50 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end29

if.end29:                                         ; preds = %cleanup.cont, %if.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end29
  %39 = load i64, i64* %len.addr, align 8, !tbaa !12
  %cmp30 = icmp uge i64 %39, 64
  br i1 %cmp30, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %40 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %in32 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %40, i32 0, i32 2
  %arraydecay33 = getelementptr inbounds [64 x i8], [64 x i8]* %in32, i32 0, i32 0
  %41 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %42 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %in34 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %42, i32 0, i32 2
  %arraydecay35 = getelementptr inbounds [64 x i8], [64 x i8]* %in34, i32 0, i32 0
  %43 = call i64 @llvm.objectsize.i64.p0i8(i8* %arraydecay35, i1 false, i1 true)
  %call36 = call i8* @__memcpy_chk(i8* %arraydecay33, i8* %41, i64 64, i64 %43) #5
  %44 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %in37 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %44, i32 0, i32 2
  %arraydecay38 = getelementptr inbounds [64 x i8], [64 x i8]* %in37, i32 0, i32 0
  call void @byteReverse(i8* %arraydecay38, i32 16)
  %45 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %buf39 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %45, i32 0, i32 0
  %arraydecay40 = getelementptr inbounds [4 x i32], [4 x i32]* %buf39, i32 0, i32 0
  %46 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %in41 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %46, i32 0, i32 2
  %arraydecay42 = getelementptr inbounds [64 x i8], [64 x i8]* %in41, i32 0, i32 0
  %47 = bitcast i8* %arraydecay42 to i32*
  call void @cs_md5_transform(i32* %arraydecay40, i32* %47)
  %48 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %add.ptr43 = getelementptr inbounds i8, i8* %48, i64 64
  store i8* %add.ptr43, i8** %buf.addr, align 8, !tbaa !3
  %49 = load i64, i64* %len.addr, align 8, !tbaa !12
  %sub44 = sub i64 %49, 64
  store i64 %sub44, i64* %len.addr, align 8, !tbaa !12
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %50 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %in45 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %50, i32 0, i32 2
  %arraydecay46 = getelementptr inbounds [64 x i8], [64 x i8]* %in45, i32 0, i32 0
  %51 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %52 = load i64, i64* %len.addr, align 8, !tbaa !12
  %53 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %in47 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %53, i32 0, i32 2
  %arraydecay48 = getelementptr inbounds [64 x i8], [64 x i8]* %in47, i32 0, i32 0
  %54 = call i64 @llvm.objectsize.i64.p0i8(i8* %arraydecay48, i1 false, i1 true)
  %call49 = call i8* @__memcpy_chk(i8* %arraydecay46, i8* %51, i64 %52, i64 %54) #5
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup50

cleanup50:                                        ; preds = %while.end, %cleanup
  %55 = bitcast i32* %t to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %55) #5
  %cleanup.dest51 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest51, label %unreachable [
    i32 0, label %cleanup.cont52
    i32 1, label %cleanup.cont52
  ]

cleanup.cont52:                                   ; preds = %cleanup50, %cleanup50
  ret void

unreachable:                                      ; preds = %cleanup50
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal void @byteReverse(i8* %buf, i32 %longs) #0 {
entry:
  %buf.addr = alloca i8*, align 8
  %longs.addr = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i32 %longs, i32* %longs.addr, align 4, !tbaa !15
  %0 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %1 = load i32, i32* %longs.addr, align 4, !tbaa !15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @cs_md5_transform(i32* %buf, i32* %in) #0 {
entry:
  %buf.addr = alloca i32*, align 8
  %in.addr = alloca i32*, align 8
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  store i32* %buf, i32** %buf.addr, align 8, !tbaa !3
  store i32* %in, i32** %in.addr, align 8, !tbaa !3
  %0 = bitcast i32* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = bitcast i32* %b to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  %2 = bitcast i32* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  %3 = bitcast i32* %d to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  %4 = load i32*, i32** %buf.addr, align 8, !tbaa !3
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 0
  %5 = load i32, i32* %arrayidx, align 4, !tbaa !15
  store i32 %5, i32* %a, align 4, !tbaa !15
  %6 = load i32*, i32** %buf.addr, align 8, !tbaa !3
  %arrayidx1 = getelementptr inbounds i32, i32* %6, i64 1
  %7 = load i32, i32* %arrayidx1, align 4, !tbaa !15
  store i32 %7, i32* %b, align 4, !tbaa !15
  %8 = load i32*, i32** %buf.addr, align 8, !tbaa !3
  %arrayidx2 = getelementptr inbounds i32, i32* %8, i64 2
  %9 = load i32, i32* %arrayidx2, align 4, !tbaa !15
  store i32 %9, i32* %c, align 4, !tbaa !15
  %10 = load i32*, i32** %buf.addr, align 8, !tbaa !3
  %arrayidx3 = getelementptr inbounds i32, i32* %10, i64 3
  %11 = load i32, i32* %arrayidx3, align 4, !tbaa !15
  store i32 %11, i32* %d, align 4, !tbaa !15
  %12 = load i32, i32* %d, align 4, !tbaa !15
  %13 = load i32, i32* %b, align 4, !tbaa !15
  %14 = load i32, i32* %c, align 4, !tbaa !15
  %15 = load i32, i32* %d, align 4, !tbaa !15
  %xor = xor i32 %14, %15
  %and = and i32 %13, %xor
  %xor4 = xor i32 %12, %and
  %16 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx5 = getelementptr inbounds i32, i32* %16, i64 0
  %17 = load i32, i32* %arrayidx5, align 4, !tbaa !15
  %add = add i32 %xor4, %17
  %add6 = add i32 %add, -680876936
  %18 = load i32, i32* %a, align 4, !tbaa !15
  %add7 = add i32 %18, %add6
  store i32 %add7, i32* %a, align 4, !tbaa !15
  %19 = load i32, i32* %a, align 4, !tbaa !15
  %shl = shl i32 %19, 7
  %20 = load i32, i32* %a, align 4, !tbaa !15
  %shr = lshr i32 %20, 25
  %or = or i32 %shl, %shr
  store i32 %or, i32* %a, align 4, !tbaa !15
  %21 = load i32, i32* %b, align 4, !tbaa !15
  %22 = load i32, i32* %a, align 4, !tbaa !15
  %add8 = add i32 %22, %21
  store i32 %add8, i32* %a, align 4, !tbaa !15
  %23 = load i32, i32* %c, align 4, !tbaa !15
  %24 = load i32, i32* %a, align 4, !tbaa !15
  %25 = load i32, i32* %b, align 4, !tbaa !15
  %26 = load i32, i32* %c, align 4, !tbaa !15
  %xor9 = xor i32 %25, %26
  %and10 = and i32 %24, %xor9
  %xor11 = xor i32 %23, %and10
  %27 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx12 = getelementptr inbounds i32, i32* %27, i64 1
  %28 = load i32, i32* %arrayidx12, align 4, !tbaa !15
  %add13 = add i32 %xor11, %28
  %add14 = add i32 %add13, -389564586
  %29 = load i32, i32* %d, align 4, !tbaa !15
  %add15 = add i32 %29, %add14
  store i32 %add15, i32* %d, align 4, !tbaa !15
  %30 = load i32, i32* %d, align 4, !tbaa !15
  %shl16 = shl i32 %30, 12
  %31 = load i32, i32* %d, align 4, !tbaa !15
  %shr17 = lshr i32 %31, 20
  %or18 = or i32 %shl16, %shr17
  store i32 %or18, i32* %d, align 4, !tbaa !15
  %32 = load i32, i32* %a, align 4, !tbaa !15
  %33 = load i32, i32* %d, align 4, !tbaa !15
  %add19 = add i32 %33, %32
  store i32 %add19, i32* %d, align 4, !tbaa !15
  %34 = load i32, i32* %b, align 4, !tbaa !15
  %35 = load i32, i32* %d, align 4, !tbaa !15
  %36 = load i32, i32* %a, align 4, !tbaa !15
  %37 = load i32, i32* %b, align 4, !tbaa !15
  %xor20 = xor i32 %36, %37
  %and21 = and i32 %35, %xor20
  %xor22 = xor i32 %34, %and21
  %38 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx23 = getelementptr inbounds i32, i32* %38, i64 2
  %39 = load i32, i32* %arrayidx23, align 4, !tbaa !15
  %add24 = add i32 %xor22, %39
  %add25 = add i32 %add24, 606105819
  %40 = load i32, i32* %c, align 4, !tbaa !15
  %add26 = add i32 %40, %add25
  store i32 %add26, i32* %c, align 4, !tbaa !15
  %41 = load i32, i32* %c, align 4, !tbaa !15
  %shl27 = shl i32 %41, 17
  %42 = load i32, i32* %c, align 4, !tbaa !15
  %shr28 = lshr i32 %42, 15
  %or29 = or i32 %shl27, %shr28
  store i32 %or29, i32* %c, align 4, !tbaa !15
  %43 = load i32, i32* %d, align 4, !tbaa !15
  %44 = load i32, i32* %c, align 4, !tbaa !15
  %add30 = add i32 %44, %43
  store i32 %add30, i32* %c, align 4, !tbaa !15
  %45 = load i32, i32* %a, align 4, !tbaa !15
  %46 = load i32, i32* %c, align 4, !tbaa !15
  %47 = load i32, i32* %d, align 4, !tbaa !15
  %48 = load i32, i32* %a, align 4, !tbaa !15
  %xor31 = xor i32 %47, %48
  %and32 = and i32 %46, %xor31
  %xor33 = xor i32 %45, %and32
  %49 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx34 = getelementptr inbounds i32, i32* %49, i64 3
  %50 = load i32, i32* %arrayidx34, align 4, !tbaa !15
  %add35 = add i32 %xor33, %50
  %add36 = add i32 %add35, -1044525330
  %51 = load i32, i32* %b, align 4, !tbaa !15
  %add37 = add i32 %51, %add36
  store i32 %add37, i32* %b, align 4, !tbaa !15
  %52 = load i32, i32* %b, align 4, !tbaa !15
  %shl38 = shl i32 %52, 22
  %53 = load i32, i32* %b, align 4, !tbaa !15
  %shr39 = lshr i32 %53, 10
  %or40 = or i32 %shl38, %shr39
  store i32 %or40, i32* %b, align 4, !tbaa !15
  %54 = load i32, i32* %c, align 4, !tbaa !15
  %55 = load i32, i32* %b, align 4, !tbaa !15
  %add41 = add i32 %55, %54
  store i32 %add41, i32* %b, align 4, !tbaa !15
  %56 = load i32, i32* %d, align 4, !tbaa !15
  %57 = load i32, i32* %b, align 4, !tbaa !15
  %58 = load i32, i32* %c, align 4, !tbaa !15
  %59 = load i32, i32* %d, align 4, !tbaa !15
  %xor42 = xor i32 %58, %59
  %and43 = and i32 %57, %xor42
  %xor44 = xor i32 %56, %and43
  %60 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx45 = getelementptr inbounds i32, i32* %60, i64 4
  %61 = load i32, i32* %arrayidx45, align 4, !tbaa !15
  %add46 = add i32 %xor44, %61
  %add47 = add i32 %add46, -176418897
  %62 = load i32, i32* %a, align 4, !tbaa !15
  %add48 = add i32 %62, %add47
  store i32 %add48, i32* %a, align 4, !tbaa !15
  %63 = load i32, i32* %a, align 4, !tbaa !15
  %shl49 = shl i32 %63, 7
  %64 = load i32, i32* %a, align 4, !tbaa !15
  %shr50 = lshr i32 %64, 25
  %or51 = or i32 %shl49, %shr50
  store i32 %or51, i32* %a, align 4, !tbaa !15
  %65 = load i32, i32* %b, align 4, !tbaa !15
  %66 = load i32, i32* %a, align 4, !tbaa !15
  %add52 = add i32 %66, %65
  store i32 %add52, i32* %a, align 4, !tbaa !15
  %67 = load i32, i32* %c, align 4, !tbaa !15
  %68 = load i32, i32* %a, align 4, !tbaa !15
  %69 = load i32, i32* %b, align 4, !tbaa !15
  %70 = load i32, i32* %c, align 4, !tbaa !15
  %xor53 = xor i32 %69, %70
  %and54 = and i32 %68, %xor53
  %xor55 = xor i32 %67, %and54
  %71 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx56 = getelementptr inbounds i32, i32* %71, i64 5
  %72 = load i32, i32* %arrayidx56, align 4, !tbaa !15
  %add57 = add i32 %xor55, %72
  %add58 = add i32 %add57, 1200080426
  %73 = load i32, i32* %d, align 4, !tbaa !15
  %add59 = add i32 %73, %add58
  store i32 %add59, i32* %d, align 4, !tbaa !15
  %74 = load i32, i32* %d, align 4, !tbaa !15
  %shl60 = shl i32 %74, 12
  %75 = load i32, i32* %d, align 4, !tbaa !15
  %shr61 = lshr i32 %75, 20
  %or62 = or i32 %shl60, %shr61
  store i32 %or62, i32* %d, align 4, !tbaa !15
  %76 = load i32, i32* %a, align 4, !tbaa !15
  %77 = load i32, i32* %d, align 4, !tbaa !15
  %add63 = add i32 %77, %76
  store i32 %add63, i32* %d, align 4, !tbaa !15
  %78 = load i32, i32* %b, align 4, !tbaa !15
  %79 = load i32, i32* %d, align 4, !tbaa !15
  %80 = load i32, i32* %a, align 4, !tbaa !15
  %81 = load i32, i32* %b, align 4, !tbaa !15
  %xor64 = xor i32 %80, %81
  %and65 = and i32 %79, %xor64
  %xor66 = xor i32 %78, %and65
  %82 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx67 = getelementptr inbounds i32, i32* %82, i64 6
  %83 = load i32, i32* %arrayidx67, align 4, !tbaa !15
  %add68 = add i32 %xor66, %83
  %add69 = add i32 %add68, -1473231341
  %84 = load i32, i32* %c, align 4, !tbaa !15
  %add70 = add i32 %84, %add69
  store i32 %add70, i32* %c, align 4, !tbaa !15
  %85 = load i32, i32* %c, align 4, !tbaa !15
  %shl71 = shl i32 %85, 17
  %86 = load i32, i32* %c, align 4, !tbaa !15
  %shr72 = lshr i32 %86, 15
  %or73 = or i32 %shl71, %shr72
  store i32 %or73, i32* %c, align 4, !tbaa !15
  %87 = load i32, i32* %d, align 4, !tbaa !15
  %88 = load i32, i32* %c, align 4, !tbaa !15
  %add74 = add i32 %88, %87
  store i32 %add74, i32* %c, align 4, !tbaa !15
  %89 = load i32, i32* %a, align 4, !tbaa !15
  %90 = load i32, i32* %c, align 4, !tbaa !15
  %91 = load i32, i32* %d, align 4, !tbaa !15
  %92 = load i32, i32* %a, align 4, !tbaa !15
  %xor75 = xor i32 %91, %92
  %and76 = and i32 %90, %xor75
  %xor77 = xor i32 %89, %and76
  %93 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx78 = getelementptr inbounds i32, i32* %93, i64 7
  %94 = load i32, i32* %arrayidx78, align 4, !tbaa !15
  %add79 = add i32 %xor77, %94
  %add80 = add i32 %add79, -45705983
  %95 = load i32, i32* %b, align 4, !tbaa !15
  %add81 = add i32 %95, %add80
  store i32 %add81, i32* %b, align 4, !tbaa !15
  %96 = load i32, i32* %b, align 4, !tbaa !15
  %shl82 = shl i32 %96, 22
  %97 = load i32, i32* %b, align 4, !tbaa !15
  %shr83 = lshr i32 %97, 10
  %or84 = or i32 %shl82, %shr83
  store i32 %or84, i32* %b, align 4, !tbaa !15
  %98 = load i32, i32* %c, align 4, !tbaa !15
  %99 = load i32, i32* %b, align 4, !tbaa !15
  %add85 = add i32 %99, %98
  store i32 %add85, i32* %b, align 4, !tbaa !15
  %100 = load i32, i32* %d, align 4, !tbaa !15
  %101 = load i32, i32* %b, align 4, !tbaa !15
  %102 = load i32, i32* %c, align 4, !tbaa !15
  %103 = load i32, i32* %d, align 4, !tbaa !15
  %xor86 = xor i32 %102, %103
  %and87 = and i32 %101, %xor86
  %xor88 = xor i32 %100, %and87
  %104 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx89 = getelementptr inbounds i32, i32* %104, i64 8
  %105 = load i32, i32* %arrayidx89, align 4, !tbaa !15
  %add90 = add i32 %xor88, %105
  %add91 = add i32 %add90, 1770035416
  %106 = load i32, i32* %a, align 4, !tbaa !15
  %add92 = add i32 %106, %add91
  store i32 %add92, i32* %a, align 4, !tbaa !15
  %107 = load i32, i32* %a, align 4, !tbaa !15
  %shl93 = shl i32 %107, 7
  %108 = load i32, i32* %a, align 4, !tbaa !15
  %shr94 = lshr i32 %108, 25
  %or95 = or i32 %shl93, %shr94
  store i32 %or95, i32* %a, align 4, !tbaa !15
  %109 = load i32, i32* %b, align 4, !tbaa !15
  %110 = load i32, i32* %a, align 4, !tbaa !15
  %add96 = add i32 %110, %109
  store i32 %add96, i32* %a, align 4, !tbaa !15
  %111 = load i32, i32* %c, align 4, !tbaa !15
  %112 = load i32, i32* %a, align 4, !tbaa !15
  %113 = load i32, i32* %b, align 4, !tbaa !15
  %114 = load i32, i32* %c, align 4, !tbaa !15
  %xor97 = xor i32 %113, %114
  %and98 = and i32 %112, %xor97
  %xor99 = xor i32 %111, %and98
  %115 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx100 = getelementptr inbounds i32, i32* %115, i64 9
  %116 = load i32, i32* %arrayidx100, align 4, !tbaa !15
  %add101 = add i32 %xor99, %116
  %add102 = add i32 %add101, -1958414417
  %117 = load i32, i32* %d, align 4, !tbaa !15
  %add103 = add i32 %117, %add102
  store i32 %add103, i32* %d, align 4, !tbaa !15
  %118 = load i32, i32* %d, align 4, !tbaa !15
  %shl104 = shl i32 %118, 12
  %119 = load i32, i32* %d, align 4, !tbaa !15
  %shr105 = lshr i32 %119, 20
  %or106 = or i32 %shl104, %shr105
  store i32 %or106, i32* %d, align 4, !tbaa !15
  %120 = load i32, i32* %a, align 4, !tbaa !15
  %121 = load i32, i32* %d, align 4, !tbaa !15
  %add107 = add i32 %121, %120
  store i32 %add107, i32* %d, align 4, !tbaa !15
  %122 = load i32, i32* %b, align 4, !tbaa !15
  %123 = load i32, i32* %d, align 4, !tbaa !15
  %124 = load i32, i32* %a, align 4, !tbaa !15
  %125 = load i32, i32* %b, align 4, !tbaa !15
  %xor108 = xor i32 %124, %125
  %and109 = and i32 %123, %xor108
  %xor110 = xor i32 %122, %and109
  %126 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx111 = getelementptr inbounds i32, i32* %126, i64 10
  %127 = load i32, i32* %arrayidx111, align 4, !tbaa !15
  %add112 = add i32 %xor110, %127
  %add113 = add i32 %add112, -42063
  %128 = load i32, i32* %c, align 4, !tbaa !15
  %add114 = add i32 %128, %add113
  store i32 %add114, i32* %c, align 4, !tbaa !15
  %129 = load i32, i32* %c, align 4, !tbaa !15
  %shl115 = shl i32 %129, 17
  %130 = load i32, i32* %c, align 4, !tbaa !15
  %shr116 = lshr i32 %130, 15
  %or117 = or i32 %shl115, %shr116
  store i32 %or117, i32* %c, align 4, !tbaa !15
  %131 = load i32, i32* %d, align 4, !tbaa !15
  %132 = load i32, i32* %c, align 4, !tbaa !15
  %add118 = add i32 %132, %131
  store i32 %add118, i32* %c, align 4, !tbaa !15
  %133 = load i32, i32* %a, align 4, !tbaa !15
  %134 = load i32, i32* %c, align 4, !tbaa !15
  %135 = load i32, i32* %d, align 4, !tbaa !15
  %136 = load i32, i32* %a, align 4, !tbaa !15
  %xor119 = xor i32 %135, %136
  %and120 = and i32 %134, %xor119
  %xor121 = xor i32 %133, %and120
  %137 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx122 = getelementptr inbounds i32, i32* %137, i64 11
  %138 = load i32, i32* %arrayidx122, align 4, !tbaa !15
  %add123 = add i32 %xor121, %138
  %add124 = add i32 %add123, -1990404162
  %139 = load i32, i32* %b, align 4, !tbaa !15
  %add125 = add i32 %139, %add124
  store i32 %add125, i32* %b, align 4, !tbaa !15
  %140 = load i32, i32* %b, align 4, !tbaa !15
  %shl126 = shl i32 %140, 22
  %141 = load i32, i32* %b, align 4, !tbaa !15
  %shr127 = lshr i32 %141, 10
  %or128 = or i32 %shl126, %shr127
  store i32 %or128, i32* %b, align 4, !tbaa !15
  %142 = load i32, i32* %c, align 4, !tbaa !15
  %143 = load i32, i32* %b, align 4, !tbaa !15
  %add129 = add i32 %143, %142
  store i32 %add129, i32* %b, align 4, !tbaa !15
  %144 = load i32, i32* %d, align 4, !tbaa !15
  %145 = load i32, i32* %b, align 4, !tbaa !15
  %146 = load i32, i32* %c, align 4, !tbaa !15
  %147 = load i32, i32* %d, align 4, !tbaa !15
  %xor130 = xor i32 %146, %147
  %and131 = and i32 %145, %xor130
  %xor132 = xor i32 %144, %and131
  %148 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx133 = getelementptr inbounds i32, i32* %148, i64 12
  %149 = load i32, i32* %arrayidx133, align 4, !tbaa !15
  %add134 = add i32 %xor132, %149
  %add135 = add i32 %add134, 1804603682
  %150 = load i32, i32* %a, align 4, !tbaa !15
  %add136 = add i32 %150, %add135
  store i32 %add136, i32* %a, align 4, !tbaa !15
  %151 = load i32, i32* %a, align 4, !tbaa !15
  %shl137 = shl i32 %151, 7
  %152 = load i32, i32* %a, align 4, !tbaa !15
  %shr138 = lshr i32 %152, 25
  %or139 = or i32 %shl137, %shr138
  store i32 %or139, i32* %a, align 4, !tbaa !15
  %153 = load i32, i32* %b, align 4, !tbaa !15
  %154 = load i32, i32* %a, align 4, !tbaa !15
  %add140 = add i32 %154, %153
  store i32 %add140, i32* %a, align 4, !tbaa !15
  %155 = load i32, i32* %c, align 4, !tbaa !15
  %156 = load i32, i32* %a, align 4, !tbaa !15
  %157 = load i32, i32* %b, align 4, !tbaa !15
  %158 = load i32, i32* %c, align 4, !tbaa !15
  %xor141 = xor i32 %157, %158
  %and142 = and i32 %156, %xor141
  %xor143 = xor i32 %155, %and142
  %159 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx144 = getelementptr inbounds i32, i32* %159, i64 13
  %160 = load i32, i32* %arrayidx144, align 4, !tbaa !15
  %add145 = add i32 %xor143, %160
  %add146 = add i32 %add145, -40341101
  %161 = load i32, i32* %d, align 4, !tbaa !15
  %add147 = add i32 %161, %add146
  store i32 %add147, i32* %d, align 4, !tbaa !15
  %162 = load i32, i32* %d, align 4, !tbaa !15
  %shl148 = shl i32 %162, 12
  %163 = load i32, i32* %d, align 4, !tbaa !15
  %shr149 = lshr i32 %163, 20
  %or150 = or i32 %shl148, %shr149
  store i32 %or150, i32* %d, align 4, !tbaa !15
  %164 = load i32, i32* %a, align 4, !tbaa !15
  %165 = load i32, i32* %d, align 4, !tbaa !15
  %add151 = add i32 %165, %164
  store i32 %add151, i32* %d, align 4, !tbaa !15
  %166 = load i32, i32* %b, align 4, !tbaa !15
  %167 = load i32, i32* %d, align 4, !tbaa !15
  %168 = load i32, i32* %a, align 4, !tbaa !15
  %169 = load i32, i32* %b, align 4, !tbaa !15
  %xor152 = xor i32 %168, %169
  %and153 = and i32 %167, %xor152
  %xor154 = xor i32 %166, %and153
  %170 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx155 = getelementptr inbounds i32, i32* %170, i64 14
  %171 = load i32, i32* %arrayidx155, align 4, !tbaa !15
  %add156 = add i32 %xor154, %171
  %add157 = add i32 %add156, -1502002290
  %172 = load i32, i32* %c, align 4, !tbaa !15
  %add158 = add i32 %172, %add157
  store i32 %add158, i32* %c, align 4, !tbaa !15
  %173 = load i32, i32* %c, align 4, !tbaa !15
  %shl159 = shl i32 %173, 17
  %174 = load i32, i32* %c, align 4, !tbaa !15
  %shr160 = lshr i32 %174, 15
  %or161 = or i32 %shl159, %shr160
  store i32 %or161, i32* %c, align 4, !tbaa !15
  %175 = load i32, i32* %d, align 4, !tbaa !15
  %176 = load i32, i32* %c, align 4, !tbaa !15
  %add162 = add i32 %176, %175
  store i32 %add162, i32* %c, align 4, !tbaa !15
  %177 = load i32, i32* %a, align 4, !tbaa !15
  %178 = load i32, i32* %c, align 4, !tbaa !15
  %179 = load i32, i32* %d, align 4, !tbaa !15
  %180 = load i32, i32* %a, align 4, !tbaa !15
  %xor163 = xor i32 %179, %180
  %and164 = and i32 %178, %xor163
  %xor165 = xor i32 %177, %and164
  %181 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx166 = getelementptr inbounds i32, i32* %181, i64 15
  %182 = load i32, i32* %arrayidx166, align 4, !tbaa !15
  %add167 = add i32 %xor165, %182
  %add168 = add i32 %add167, 1236535329
  %183 = load i32, i32* %b, align 4, !tbaa !15
  %add169 = add i32 %183, %add168
  store i32 %add169, i32* %b, align 4, !tbaa !15
  %184 = load i32, i32* %b, align 4, !tbaa !15
  %shl170 = shl i32 %184, 22
  %185 = load i32, i32* %b, align 4, !tbaa !15
  %shr171 = lshr i32 %185, 10
  %or172 = or i32 %shl170, %shr171
  store i32 %or172, i32* %b, align 4, !tbaa !15
  %186 = load i32, i32* %c, align 4, !tbaa !15
  %187 = load i32, i32* %b, align 4, !tbaa !15
  %add173 = add i32 %187, %186
  store i32 %add173, i32* %b, align 4, !tbaa !15
  %188 = load i32, i32* %c, align 4, !tbaa !15
  %189 = load i32, i32* %d, align 4, !tbaa !15
  %190 = load i32, i32* %b, align 4, !tbaa !15
  %191 = load i32, i32* %c, align 4, !tbaa !15
  %xor174 = xor i32 %190, %191
  %and175 = and i32 %189, %xor174
  %xor176 = xor i32 %188, %and175
  %192 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx177 = getelementptr inbounds i32, i32* %192, i64 1
  %193 = load i32, i32* %arrayidx177, align 4, !tbaa !15
  %add178 = add i32 %xor176, %193
  %add179 = add i32 %add178, -165796510
  %194 = load i32, i32* %a, align 4, !tbaa !15
  %add180 = add i32 %194, %add179
  store i32 %add180, i32* %a, align 4, !tbaa !15
  %195 = load i32, i32* %a, align 4, !tbaa !15
  %shl181 = shl i32 %195, 5
  %196 = load i32, i32* %a, align 4, !tbaa !15
  %shr182 = lshr i32 %196, 27
  %or183 = or i32 %shl181, %shr182
  store i32 %or183, i32* %a, align 4, !tbaa !15
  %197 = load i32, i32* %b, align 4, !tbaa !15
  %198 = load i32, i32* %a, align 4, !tbaa !15
  %add184 = add i32 %198, %197
  store i32 %add184, i32* %a, align 4, !tbaa !15
  %199 = load i32, i32* %b, align 4, !tbaa !15
  %200 = load i32, i32* %c, align 4, !tbaa !15
  %201 = load i32, i32* %a, align 4, !tbaa !15
  %202 = load i32, i32* %b, align 4, !tbaa !15
  %xor185 = xor i32 %201, %202
  %and186 = and i32 %200, %xor185
  %xor187 = xor i32 %199, %and186
  %203 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx188 = getelementptr inbounds i32, i32* %203, i64 6
  %204 = load i32, i32* %arrayidx188, align 4, !tbaa !15
  %add189 = add i32 %xor187, %204
  %add190 = add i32 %add189, -1069501632
  %205 = load i32, i32* %d, align 4, !tbaa !15
  %add191 = add i32 %205, %add190
  store i32 %add191, i32* %d, align 4, !tbaa !15
  %206 = load i32, i32* %d, align 4, !tbaa !15
  %shl192 = shl i32 %206, 9
  %207 = load i32, i32* %d, align 4, !tbaa !15
  %shr193 = lshr i32 %207, 23
  %or194 = or i32 %shl192, %shr193
  store i32 %or194, i32* %d, align 4, !tbaa !15
  %208 = load i32, i32* %a, align 4, !tbaa !15
  %209 = load i32, i32* %d, align 4, !tbaa !15
  %add195 = add i32 %209, %208
  store i32 %add195, i32* %d, align 4, !tbaa !15
  %210 = load i32, i32* %a, align 4, !tbaa !15
  %211 = load i32, i32* %b, align 4, !tbaa !15
  %212 = load i32, i32* %d, align 4, !tbaa !15
  %213 = load i32, i32* %a, align 4, !tbaa !15
  %xor196 = xor i32 %212, %213
  %and197 = and i32 %211, %xor196
  %xor198 = xor i32 %210, %and197
  %214 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx199 = getelementptr inbounds i32, i32* %214, i64 11
  %215 = load i32, i32* %arrayidx199, align 4, !tbaa !15
  %add200 = add i32 %xor198, %215
  %add201 = add i32 %add200, 643717713
  %216 = load i32, i32* %c, align 4, !tbaa !15
  %add202 = add i32 %216, %add201
  store i32 %add202, i32* %c, align 4, !tbaa !15
  %217 = load i32, i32* %c, align 4, !tbaa !15
  %shl203 = shl i32 %217, 14
  %218 = load i32, i32* %c, align 4, !tbaa !15
  %shr204 = lshr i32 %218, 18
  %or205 = or i32 %shl203, %shr204
  store i32 %or205, i32* %c, align 4, !tbaa !15
  %219 = load i32, i32* %d, align 4, !tbaa !15
  %220 = load i32, i32* %c, align 4, !tbaa !15
  %add206 = add i32 %220, %219
  store i32 %add206, i32* %c, align 4, !tbaa !15
  %221 = load i32, i32* %d, align 4, !tbaa !15
  %222 = load i32, i32* %a, align 4, !tbaa !15
  %223 = load i32, i32* %c, align 4, !tbaa !15
  %224 = load i32, i32* %d, align 4, !tbaa !15
  %xor207 = xor i32 %223, %224
  %and208 = and i32 %222, %xor207
  %xor209 = xor i32 %221, %and208
  %225 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx210 = getelementptr inbounds i32, i32* %225, i64 0
  %226 = load i32, i32* %arrayidx210, align 4, !tbaa !15
  %add211 = add i32 %xor209, %226
  %add212 = add i32 %add211, -373897302
  %227 = load i32, i32* %b, align 4, !tbaa !15
  %add213 = add i32 %227, %add212
  store i32 %add213, i32* %b, align 4, !tbaa !15
  %228 = load i32, i32* %b, align 4, !tbaa !15
  %shl214 = shl i32 %228, 20
  %229 = load i32, i32* %b, align 4, !tbaa !15
  %shr215 = lshr i32 %229, 12
  %or216 = or i32 %shl214, %shr215
  store i32 %or216, i32* %b, align 4, !tbaa !15
  %230 = load i32, i32* %c, align 4, !tbaa !15
  %231 = load i32, i32* %b, align 4, !tbaa !15
  %add217 = add i32 %231, %230
  store i32 %add217, i32* %b, align 4, !tbaa !15
  %232 = load i32, i32* %c, align 4, !tbaa !15
  %233 = load i32, i32* %d, align 4, !tbaa !15
  %234 = load i32, i32* %b, align 4, !tbaa !15
  %235 = load i32, i32* %c, align 4, !tbaa !15
  %xor218 = xor i32 %234, %235
  %and219 = and i32 %233, %xor218
  %xor220 = xor i32 %232, %and219
  %236 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx221 = getelementptr inbounds i32, i32* %236, i64 5
  %237 = load i32, i32* %arrayidx221, align 4, !tbaa !15
  %add222 = add i32 %xor220, %237
  %add223 = add i32 %add222, -701558691
  %238 = load i32, i32* %a, align 4, !tbaa !15
  %add224 = add i32 %238, %add223
  store i32 %add224, i32* %a, align 4, !tbaa !15
  %239 = load i32, i32* %a, align 4, !tbaa !15
  %shl225 = shl i32 %239, 5
  %240 = load i32, i32* %a, align 4, !tbaa !15
  %shr226 = lshr i32 %240, 27
  %or227 = or i32 %shl225, %shr226
  store i32 %or227, i32* %a, align 4, !tbaa !15
  %241 = load i32, i32* %b, align 4, !tbaa !15
  %242 = load i32, i32* %a, align 4, !tbaa !15
  %add228 = add i32 %242, %241
  store i32 %add228, i32* %a, align 4, !tbaa !15
  %243 = load i32, i32* %b, align 4, !tbaa !15
  %244 = load i32, i32* %c, align 4, !tbaa !15
  %245 = load i32, i32* %a, align 4, !tbaa !15
  %246 = load i32, i32* %b, align 4, !tbaa !15
  %xor229 = xor i32 %245, %246
  %and230 = and i32 %244, %xor229
  %xor231 = xor i32 %243, %and230
  %247 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx232 = getelementptr inbounds i32, i32* %247, i64 10
  %248 = load i32, i32* %arrayidx232, align 4, !tbaa !15
  %add233 = add i32 %xor231, %248
  %add234 = add i32 %add233, 38016083
  %249 = load i32, i32* %d, align 4, !tbaa !15
  %add235 = add i32 %249, %add234
  store i32 %add235, i32* %d, align 4, !tbaa !15
  %250 = load i32, i32* %d, align 4, !tbaa !15
  %shl236 = shl i32 %250, 9
  %251 = load i32, i32* %d, align 4, !tbaa !15
  %shr237 = lshr i32 %251, 23
  %or238 = or i32 %shl236, %shr237
  store i32 %or238, i32* %d, align 4, !tbaa !15
  %252 = load i32, i32* %a, align 4, !tbaa !15
  %253 = load i32, i32* %d, align 4, !tbaa !15
  %add239 = add i32 %253, %252
  store i32 %add239, i32* %d, align 4, !tbaa !15
  %254 = load i32, i32* %a, align 4, !tbaa !15
  %255 = load i32, i32* %b, align 4, !tbaa !15
  %256 = load i32, i32* %d, align 4, !tbaa !15
  %257 = load i32, i32* %a, align 4, !tbaa !15
  %xor240 = xor i32 %256, %257
  %and241 = and i32 %255, %xor240
  %xor242 = xor i32 %254, %and241
  %258 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx243 = getelementptr inbounds i32, i32* %258, i64 15
  %259 = load i32, i32* %arrayidx243, align 4, !tbaa !15
  %add244 = add i32 %xor242, %259
  %add245 = add i32 %add244, -660478335
  %260 = load i32, i32* %c, align 4, !tbaa !15
  %add246 = add i32 %260, %add245
  store i32 %add246, i32* %c, align 4, !tbaa !15
  %261 = load i32, i32* %c, align 4, !tbaa !15
  %shl247 = shl i32 %261, 14
  %262 = load i32, i32* %c, align 4, !tbaa !15
  %shr248 = lshr i32 %262, 18
  %or249 = or i32 %shl247, %shr248
  store i32 %or249, i32* %c, align 4, !tbaa !15
  %263 = load i32, i32* %d, align 4, !tbaa !15
  %264 = load i32, i32* %c, align 4, !tbaa !15
  %add250 = add i32 %264, %263
  store i32 %add250, i32* %c, align 4, !tbaa !15
  %265 = load i32, i32* %d, align 4, !tbaa !15
  %266 = load i32, i32* %a, align 4, !tbaa !15
  %267 = load i32, i32* %c, align 4, !tbaa !15
  %268 = load i32, i32* %d, align 4, !tbaa !15
  %xor251 = xor i32 %267, %268
  %and252 = and i32 %266, %xor251
  %xor253 = xor i32 %265, %and252
  %269 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx254 = getelementptr inbounds i32, i32* %269, i64 4
  %270 = load i32, i32* %arrayidx254, align 4, !tbaa !15
  %add255 = add i32 %xor253, %270
  %add256 = add i32 %add255, -405537848
  %271 = load i32, i32* %b, align 4, !tbaa !15
  %add257 = add i32 %271, %add256
  store i32 %add257, i32* %b, align 4, !tbaa !15
  %272 = load i32, i32* %b, align 4, !tbaa !15
  %shl258 = shl i32 %272, 20
  %273 = load i32, i32* %b, align 4, !tbaa !15
  %shr259 = lshr i32 %273, 12
  %or260 = or i32 %shl258, %shr259
  store i32 %or260, i32* %b, align 4, !tbaa !15
  %274 = load i32, i32* %c, align 4, !tbaa !15
  %275 = load i32, i32* %b, align 4, !tbaa !15
  %add261 = add i32 %275, %274
  store i32 %add261, i32* %b, align 4, !tbaa !15
  %276 = load i32, i32* %c, align 4, !tbaa !15
  %277 = load i32, i32* %d, align 4, !tbaa !15
  %278 = load i32, i32* %b, align 4, !tbaa !15
  %279 = load i32, i32* %c, align 4, !tbaa !15
  %xor262 = xor i32 %278, %279
  %and263 = and i32 %277, %xor262
  %xor264 = xor i32 %276, %and263
  %280 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx265 = getelementptr inbounds i32, i32* %280, i64 9
  %281 = load i32, i32* %arrayidx265, align 4, !tbaa !15
  %add266 = add i32 %xor264, %281
  %add267 = add i32 %add266, 568446438
  %282 = load i32, i32* %a, align 4, !tbaa !15
  %add268 = add i32 %282, %add267
  store i32 %add268, i32* %a, align 4, !tbaa !15
  %283 = load i32, i32* %a, align 4, !tbaa !15
  %shl269 = shl i32 %283, 5
  %284 = load i32, i32* %a, align 4, !tbaa !15
  %shr270 = lshr i32 %284, 27
  %or271 = or i32 %shl269, %shr270
  store i32 %or271, i32* %a, align 4, !tbaa !15
  %285 = load i32, i32* %b, align 4, !tbaa !15
  %286 = load i32, i32* %a, align 4, !tbaa !15
  %add272 = add i32 %286, %285
  store i32 %add272, i32* %a, align 4, !tbaa !15
  %287 = load i32, i32* %b, align 4, !tbaa !15
  %288 = load i32, i32* %c, align 4, !tbaa !15
  %289 = load i32, i32* %a, align 4, !tbaa !15
  %290 = load i32, i32* %b, align 4, !tbaa !15
  %xor273 = xor i32 %289, %290
  %and274 = and i32 %288, %xor273
  %xor275 = xor i32 %287, %and274
  %291 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx276 = getelementptr inbounds i32, i32* %291, i64 14
  %292 = load i32, i32* %arrayidx276, align 4, !tbaa !15
  %add277 = add i32 %xor275, %292
  %add278 = add i32 %add277, -1019803690
  %293 = load i32, i32* %d, align 4, !tbaa !15
  %add279 = add i32 %293, %add278
  store i32 %add279, i32* %d, align 4, !tbaa !15
  %294 = load i32, i32* %d, align 4, !tbaa !15
  %shl280 = shl i32 %294, 9
  %295 = load i32, i32* %d, align 4, !tbaa !15
  %shr281 = lshr i32 %295, 23
  %or282 = or i32 %shl280, %shr281
  store i32 %or282, i32* %d, align 4, !tbaa !15
  %296 = load i32, i32* %a, align 4, !tbaa !15
  %297 = load i32, i32* %d, align 4, !tbaa !15
  %add283 = add i32 %297, %296
  store i32 %add283, i32* %d, align 4, !tbaa !15
  %298 = load i32, i32* %a, align 4, !tbaa !15
  %299 = load i32, i32* %b, align 4, !tbaa !15
  %300 = load i32, i32* %d, align 4, !tbaa !15
  %301 = load i32, i32* %a, align 4, !tbaa !15
  %xor284 = xor i32 %300, %301
  %and285 = and i32 %299, %xor284
  %xor286 = xor i32 %298, %and285
  %302 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx287 = getelementptr inbounds i32, i32* %302, i64 3
  %303 = load i32, i32* %arrayidx287, align 4, !tbaa !15
  %add288 = add i32 %xor286, %303
  %add289 = add i32 %add288, -187363961
  %304 = load i32, i32* %c, align 4, !tbaa !15
  %add290 = add i32 %304, %add289
  store i32 %add290, i32* %c, align 4, !tbaa !15
  %305 = load i32, i32* %c, align 4, !tbaa !15
  %shl291 = shl i32 %305, 14
  %306 = load i32, i32* %c, align 4, !tbaa !15
  %shr292 = lshr i32 %306, 18
  %or293 = or i32 %shl291, %shr292
  store i32 %or293, i32* %c, align 4, !tbaa !15
  %307 = load i32, i32* %d, align 4, !tbaa !15
  %308 = load i32, i32* %c, align 4, !tbaa !15
  %add294 = add i32 %308, %307
  store i32 %add294, i32* %c, align 4, !tbaa !15
  %309 = load i32, i32* %d, align 4, !tbaa !15
  %310 = load i32, i32* %a, align 4, !tbaa !15
  %311 = load i32, i32* %c, align 4, !tbaa !15
  %312 = load i32, i32* %d, align 4, !tbaa !15
  %xor295 = xor i32 %311, %312
  %and296 = and i32 %310, %xor295
  %xor297 = xor i32 %309, %and296
  %313 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx298 = getelementptr inbounds i32, i32* %313, i64 8
  %314 = load i32, i32* %arrayidx298, align 4, !tbaa !15
  %add299 = add i32 %xor297, %314
  %add300 = add i32 %add299, 1163531501
  %315 = load i32, i32* %b, align 4, !tbaa !15
  %add301 = add i32 %315, %add300
  store i32 %add301, i32* %b, align 4, !tbaa !15
  %316 = load i32, i32* %b, align 4, !tbaa !15
  %shl302 = shl i32 %316, 20
  %317 = load i32, i32* %b, align 4, !tbaa !15
  %shr303 = lshr i32 %317, 12
  %or304 = or i32 %shl302, %shr303
  store i32 %or304, i32* %b, align 4, !tbaa !15
  %318 = load i32, i32* %c, align 4, !tbaa !15
  %319 = load i32, i32* %b, align 4, !tbaa !15
  %add305 = add i32 %319, %318
  store i32 %add305, i32* %b, align 4, !tbaa !15
  %320 = load i32, i32* %c, align 4, !tbaa !15
  %321 = load i32, i32* %d, align 4, !tbaa !15
  %322 = load i32, i32* %b, align 4, !tbaa !15
  %323 = load i32, i32* %c, align 4, !tbaa !15
  %xor306 = xor i32 %322, %323
  %and307 = and i32 %321, %xor306
  %xor308 = xor i32 %320, %and307
  %324 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx309 = getelementptr inbounds i32, i32* %324, i64 13
  %325 = load i32, i32* %arrayidx309, align 4, !tbaa !15
  %add310 = add i32 %xor308, %325
  %add311 = add i32 %add310, -1444681467
  %326 = load i32, i32* %a, align 4, !tbaa !15
  %add312 = add i32 %326, %add311
  store i32 %add312, i32* %a, align 4, !tbaa !15
  %327 = load i32, i32* %a, align 4, !tbaa !15
  %shl313 = shl i32 %327, 5
  %328 = load i32, i32* %a, align 4, !tbaa !15
  %shr314 = lshr i32 %328, 27
  %or315 = or i32 %shl313, %shr314
  store i32 %or315, i32* %a, align 4, !tbaa !15
  %329 = load i32, i32* %b, align 4, !tbaa !15
  %330 = load i32, i32* %a, align 4, !tbaa !15
  %add316 = add i32 %330, %329
  store i32 %add316, i32* %a, align 4, !tbaa !15
  %331 = load i32, i32* %b, align 4, !tbaa !15
  %332 = load i32, i32* %c, align 4, !tbaa !15
  %333 = load i32, i32* %a, align 4, !tbaa !15
  %334 = load i32, i32* %b, align 4, !tbaa !15
  %xor317 = xor i32 %333, %334
  %and318 = and i32 %332, %xor317
  %xor319 = xor i32 %331, %and318
  %335 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx320 = getelementptr inbounds i32, i32* %335, i64 2
  %336 = load i32, i32* %arrayidx320, align 4, !tbaa !15
  %add321 = add i32 %xor319, %336
  %add322 = add i32 %add321, -51403784
  %337 = load i32, i32* %d, align 4, !tbaa !15
  %add323 = add i32 %337, %add322
  store i32 %add323, i32* %d, align 4, !tbaa !15
  %338 = load i32, i32* %d, align 4, !tbaa !15
  %shl324 = shl i32 %338, 9
  %339 = load i32, i32* %d, align 4, !tbaa !15
  %shr325 = lshr i32 %339, 23
  %or326 = or i32 %shl324, %shr325
  store i32 %or326, i32* %d, align 4, !tbaa !15
  %340 = load i32, i32* %a, align 4, !tbaa !15
  %341 = load i32, i32* %d, align 4, !tbaa !15
  %add327 = add i32 %341, %340
  store i32 %add327, i32* %d, align 4, !tbaa !15
  %342 = load i32, i32* %a, align 4, !tbaa !15
  %343 = load i32, i32* %b, align 4, !tbaa !15
  %344 = load i32, i32* %d, align 4, !tbaa !15
  %345 = load i32, i32* %a, align 4, !tbaa !15
  %xor328 = xor i32 %344, %345
  %and329 = and i32 %343, %xor328
  %xor330 = xor i32 %342, %and329
  %346 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx331 = getelementptr inbounds i32, i32* %346, i64 7
  %347 = load i32, i32* %arrayidx331, align 4, !tbaa !15
  %add332 = add i32 %xor330, %347
  %add333 = add i32 %add332, 1735328473
  %348 = load i32, i32* %c, align 4, !tbaa !15
  %add334 = add i32 %348, %add333
  store i32 %add334, i32* %c, align 4, !tbaa !15
  %349 = load i32, i32* %c, align 4, !tbaa !15
  %shl335 = shl i32 %349, 14
  %350 = load i32, i32* %c, align 4, !tbaa !15
  %shr336 = lshr i32 %350, 18
  %or337 = or i32 %shl335, %shr336
  store i32 %or337, i32* %c, align 4, !tbaa !15
  %351 = load i32, i32* %d, align 4, !tbaa !15
  %352 = load i32, i32* %c, align 4, !tbaa !15
  %add338 = add i32 %352, %351
  store i32 %add338, i32* %c, align 4, !tbaa !15
  %353 = load i32, i32* %d, align 4, !tbaa !15
  %354 = load i32, i32* %a, align 4, !tbaa !15
  %355 = load i32, i32* %c, align 4, !tbaa !15
  %356 = load i32, i32* %d, align 4, !tbaa !15
  %xor339 = xor i32 %355, %356
  %and340 = and i32 %354, %xor339
  %xor341 = xor i32 %353, %and340
  %357 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx342 = getelementptr inbounds i32, i32* %357, i64 12
  %358 = load i32, i32* %arrayidx342, align 4, !tbaa !15
  %add343 = add i32 %xor341, %358
  %add344 = add i32 %add343, -1926607734
  %359 = load i32, i32* %b, align 4, !tbaa !15
  %add345 = add i32 %359, %add344
  store i32 %add345, i32* %b, align 4, !tbaa !15
  %360 = load i32, i32* %b, align 4, !tbaa !15
  %shl346 = shl i32 %360, 20
  %361 = load i32, i32* %b, align 4, !tbaa !15
  %shr347 = lshr i32 %361, 12
  %or348 = or i32 %shl346, %shr347
  store i32 %or348, i32* %b, align 4, !tbaa !15
  %362 = load i32, i32* %c, align 4, !tbaa !15
  %363 = load i32, i32* %b, align 4, !tbaa !15
  %add349 = add i32 %363, %362
  store i32 %add349, i32* %b, align 4, !tbaa !15
  %364 = load i32, i32* %b, align 4, !tbaa !15
  %365 = load i32, i32* %c, align 4, !tbaa !15
  %xor350 = xor i32 %364, %365
  %366 = load i32, i32* %d, align 4, !tbaa !15
  %xor351 = xor i32 %xor350, %366
  %367 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx352 = getelementptr inbounds i32, i32* %367, i64 5
  %368 = load i32, i32* %arrayidx352, align 4, !tbaa !15
  %add353 = add i32 %xor351, %368
  %add354 = add i32 %add353, -378558
  %369 = load i32, i32* %a, align 4, !tbaa !15
  %add355 = add i32 %369, %add354
  store i32 %add355, i32* %a, align 4, !tbaa !15
  %370 = load i32, i32* %a, align 4, !tbaa !15
  %shl356 = shl i32 %370, 4
  %371 = load i32, i32* %a, align 4, !tbaa !15
  %shr357 = lshr i32 %371, 28
  %or358 = or i32 %shl356, %shr357
  store i32 %or358, i32* %a, align 4, !tbaa !15
  %372 = load i32, i32* %b, align 4, !tbaa !15
  %373 = load i32, i32* %a, align 4, !tbaa !15
  %add359 = add i32 %373, %372
  store i32 %add359, i32* %a, align 4, !tbaa !15
  %374 = load i32, i32* %a, align 4, !tbaa !15
  %375 = load i32, i32* %b, align 4, !tbaa !15
  %xor360 = xor i32 %374, %375
  %376 = load i32, i32* %c, align 4, !tbaa !15
  %xor361 = xor i32 %xor360, %376
  %377 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx362 = getelementptr inbounds i32, i32* %377, i64 8
  %378 = load i32, i32* %arrayidx362, align 4, !tbaa !15
  %add363 = add i32 %xor361, %378
  %add364 = add i32 %add363, -2022574463
  %379 = load i32, i32* %d, align 4, !tbaa !15
  %add365 = add i32 %379, %add364
  store i32 %add365, i32* %d, align 4, !tbaa !15
  %380 = load i32, i32* %d, align 4, !tbaa !15
  %shl366 = shl i32 %380, 11
  %381 = load i32, i32* %d, align 4, !tbaa !15
  %shr367 = lshr i32 %381, 21
  %or368 = or i32 %shl366, %shr367
  store i32 %or368, i32* %d, align 4, !tbaa !15
  %382 = load i32, i32* %a, align 4, !tbaa !15
  %383 = load i32, i32* %d, align 4, !tbaa !15
  %add369 = add i32 %383, %382
  store i32 %add369, i32* %d, align 4, !tbaa !15
  %384 = load i32, i32* %d, align 4, !tbaa !15
  %385 = load i32, i32* %a, align 4, !tbaa !15
  %xor370 = xor i32 %384, %385
  %386 = load i32, i32* %b, align 4, !tbaa !15
  %xor371 = xor i32 %xor370, %386
  %387 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx372 = getelementptr inbounds i32, i32* %387, i64 11
  %388 = load i32, i32* %arrayidx372, align 4, !tbaa !15
  %add373 = add i32 %xor371, %388
  %add374 = add i32 %add373, 1839030562
  %389 = load i32, i32* %c, align 4, !tbaa !15
  %add375 = add i32 %389, %add374
  store i32 %add375, i32* %c, align 4, !tbaa !15
  %390 = load i32, i32* %c, align 4, !tbaa !15
  %shl376 = shl i32 %390, 16
  %391 = load i32, i32* %c, align 4, !tbaa !15
  %shr377 = lshr i32 %391, 16
  %or378 = or i32 %shl376, %shr377
  store i32 %or378, i32* %c, align 4, !tbaa !15
  %392 = load i32, i32* %d, align 4, !tbaa !15
  %393 = load i32, i32* %c, align 4, !tbaa !15
  %add379 = add i32 %393, %392
  store i32 %add379, i32* %c, align 4, !tbaa !15
  %394 = load i32, i32* %c, align 4, !tbaa !15
  %395 = load i32, i32* %d, align 4, !tbaa !15
  %xor380 = xor i32 %394, %395
  %396 = load i32, i32* %a, align 4, !tbaa !15
  %xor381 = xor i32 %xor380, %396
  %397 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx382 = getelementptr inbounds i32, i32* %397, i64 14
  %398 = load i32, i32* %arrayidx382, align 4, !tbaa !15
  %add383 = add i32 %xor381, %398
  %add384 = add i32 %add383, -35309556
  %399 = load i32, i32* %b, align 4, !tbaa !15
  %add385 = add i32 %399, %add384
  store i32 %add385, i32* %b, align 4, !tbaa !15
  %400 = load i32, i32* %b, align 4, !tbaa !15
  %shl386 = shl i32 %400, 23
  %401 = load i32, i32* %b, align 4, !tbaa !15
  %shr387 = lshr i32 %401, 9
  %or388 = or i32 %shl386, %shr387
  store i32 %or388, i32* %b, align 4, !tbaa !15
  %402 = load i32, i32* %c, align 4, !tbaa !15
  %403 = load i32, i32* %b, align 4, !tbaa !15
  %add389 = add i32 %403, %402
  store i32 %add389, i32* %b, align 4, !tbaa !15
  %404 = load i32, i32* %b, align 4, !tbaa !15
  %405 = load i32, i32* %c, align 4, !tbaa !15
  %xor390 = xor i32 %404, %405
  %406 = load i32, i32* %d, align 4, !tbaa !15
  %xor391 = xor i32 %xor390, %406
  %407 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx392 = getelementptr inbounds i32, i32* %407, i64 1
  %408 = load i32, i32* %arrayidx392, align 4, !tbaa !15
  %add393 = add i32 %xor391, %408
  %add394 = add i32 %add393, -1530992060
  %409 = load i32, i32* %a, align 4, !tbaa !15
  %add395 = add i32 %409, %add394
  store i32 %add395, i32* %a, align 4, !tbaa !15
  %410 = load i32, i32* %a, align 4, !tbaa !15
  %shl396 = shl i32 %410, 4
  %411 = load i32, i32* %a, align 4, !tbaa !15
  %shr397 = lshr i32 %411, 28
  %or398 = or i32 %shl396, %shr397
  store i32 %or398, i32* %a, align 4, !tbaa !15
  %412 = load i32, i32* %b, align 4, !tbaa !15
  %413 = load i32, i32* %a, align 4, !tbaa !15
  %add399 = add i32 %413, %412
  store i32 %add399, i32* %a, align 4, !tbaa !15
  %414 = load i32, i32* %a, align 4, !tbaa !15
  %415 = load i32, i32* %b, align 4, !tbaa !15
  %xor400 = xor i32 %414, %415
  %416 = load i32, i32* %c, align 4, !tbaa !15
  %xor401 = xor i32 %xor400, %416
  %417 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx402 = getelementptr inbounds i32, i32* %417, i64 4
  %418 = load i32, i32* %arrayidx402, align 4, !tbaa !15
  %add403 = add i32 %xor401, %418
  %add404 = add i32 %add403, 1272893353
  %419 = load i32, i32* %d, align 4, !tbaa !15
  %add405 = add i32 %419, %add404
  store i32 %add405, i32* %d, align 4, !tbaa !15
  %420 = load i32, i32* %d, align 4, !tbaa !15
  %shl406 = shl i32 %420, 11
  %421 = load i32, i32* %d, align 4, !tbaa !15
  %shr407 = lshr i32 %421, 21
  %or408 = or i32 %shl406, %shr407
  store i32 %or408, i32* %d, align 4, !tbaa !15
  %422 = load i32, i32* %a, align 4, !tbaa !15
  %423 = load i32, i32* %d, align 4, !tbaa !15
  %add409 = add i32 %423, %422
  store i32 %add409, i32* %d, align 4, !tbaa !15
  %424 = load i32, i32* %d, align 4, !tbaa !15
  %425 = load i32, i32* %a, align 4, !tbaa !15
  %xor410 = xor i32 %424, %425
  %426 = load i32, i32* %b, align 4, !tbaa !15
  %xor411 = xor i32 %xor410, %426
  %427 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx412 = getelementptr inbounds i32, i32* %427, i64 7
  %428 = load i32, i32* %arrayidx412, align 4, !tbaa !15
  %add413 = add i32 %xor411, %428
  %add414 = add i32 %add413, -155497632
  %429 = load i32, i32* %c, align 4, !tbaa !15
  %add415 = add i32 %429, %add414
  store i32 %add415, i32* %c, align 4, !tbaa !15
  %430 = load i32, i32* %c, align 4, !tbaa !15
  %shl416 = shl i32 %430, 16
  %431 = load i32, i32* %c, align 4, !tbaa !15
  %shr417 = lshr i32 %431, 16
  %or418 = or i32 %shl416, %shr417
  store i32 %or418, i32* %c, align 4, !tbaa !15
  %432 = load i32, i32* %d, align 4, !tbaa !15
  %433 = load i32, i32* %c, align 4, !tbaa !15
  %add419 = add i32 %433, %432
  store i32 %add419, i32* %c, align 4, !tbaa !15
  %434 = load i32, i32* %c, align 4, !tbaa !15
  %435 = load i32, i32* %d, align 4, !tbaa !15
  %xor420 = xor i32 %434, %435
  %436 = load i32, i32* %a, align 4, !tbaa !15
  %xor421 = xor i32 %xor420, %436
  %437 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx422 = getelementptr inbounds i32, i32* %437, i64 10
  %438 = load i32, i32* %arrayidx422, align 4, !tbaa !15
  %add423 = add i32 %xor421, %438
  %add424 = add i32 %add423, -1094730640
  %439 = load i32, i32* %b, align 4, !tbaa !15
  %add425 = add i32 %439, %add424
  store i32 %add425, i32* %b, align 4, !tbaa !15
  %440 = load i32, i32* %b, align 4, !tbaa !15
  %shl426 = shl i32 %440, 23
  %441 = load i32, i32* %b, align 4, !tbaa !15
  %shr427 = lshr i32 %441, 9
  %or428 = or i32 %shl426, %shr427
  store i32 %or428, i32* %b, align 4, !tbaa !15
  %442 = load i32, i32* %c, align 4, !tbaa !15
  %443 = load i32, i32* %b, align 4, !tbaa !15
  %add429 = add i32 %443, %442
  store i32 %add429, i32* %b, align 4, !tbaa !15
  %444 = load i32, i32* %b, align 4, !tbaa !15
  %445 = load i32, i32* %c, align 4, !tbaa !15
  %xor430 = xor i32 %444, %445
  %446 = load i32, i32* %d, align 4, !tbaa !15
  %xor431 = xor i32 %xor430, %446
  %447 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx432 = getelementptr inbounds i32, i32* %447, i64 13
  %448 = load i32, i32* %arrayidx432, align 4, !tbaa !15
  %add433 = add i32 %xor431, %448
  %add434 = add i32 %add433, 681279174
  %449 = load i32, i32* %a, align 4, !tbaa !15
  %add435 = add i32 %449, %add434
  store i32 %add435, i32* %a, align 4, !tbaa !15
  %450 = load i32, i32* %a, align 4, !tbaa !15
  %shl436 = shl i32 %450, 4
  %451 = load i32, i32* %a, align 4, !tbaa !15
  %shr437 = lshr i32 %451, 28
  %or438 = or i32 %shl436, %shr437
  store i32 %or438, i32* %a, align 4, !tbaa !15
  %452 = load i32, i32* %b, align 4, !tbaa !15
  %453 = load i32, i32* %a, align 4, !tbaa !15
  %add439 = add i32 %453, %452
  store i32 %add439, i32* %a, align 4, !tbaa !15
  %454 = load i32, i32* %a, align 4, !tbaa !15
  %455 = load i32, i32* %b, align 4, !tbaa !15
  %xor440 = xor i32 %454, %455
  %456 = load i32, i32* %c, align 4, !tbaa !15
  %xor441 = xor i32 %xor440, %456
  %457 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx442 = getelementptr inbounds i32, i32* %457, i64 0
  %458 = load i32, i32* %arrayidx442, align 4, !tbaa !15
  %add443 = add i32 %xor441, %458
  %add444 = add i32 %add443, -358537222
  %459 = load i32, i32* %d, align 4, !tbaa !15
  %add445 = add i32 %459, %add444
  store i32 %add445, i32* %d, align 4, !tbaa !15
  %460 = load i32, i32* %d, align 4, !tbaa !15
  %shl446 = shl i32 %460, 11
  %461 = load i32, i32* %d, align 4, !tbaa !15
  %shr447 = lshr i32 %461, 21
  %or448 = or i32 %shl446, %shr447
  store i32 %or448, i32* %d, align 4, !tbaa !15
  %462 = load i32, i32* %a, align 4, !tbaa !15
  %463 = load i32, i32* %d, align 4, !tbaa !15
  %add449 = add i32 %463, %462
  store i32 %add449, i32* %d, align 4, !tbaa !15
  %464 = load i32, i32* %d, align 4, !tbaa !15
  %465 = load i32, i32* %a, align 4, !tbaa !15
  %xor450 = xor i32 %464, %465
  %466 = load i32, i32* %b, align 4, !tbaa !15
  %xor451 = xor i32 %xor450, %466
  %467 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx452 = getelementptr inbounds i32, i32* %467, i64 3
  %468 = load i32, i32* %arrayidx452, align 4, !tbaa !15
  %add453 = add i32 %xor451, %468
  %add454 = add i32 %add453, -722521979
  %469 = load i32, i32* %c, align 4, !tbaa !15
  %add455 = add i32 %469, %add454
  store i32 %add455, i32* %c, align 4, !tbaa !15
  %470 = load i32, i32* %c, align 4, !tbaa !15
  %shl456 = shl i32 %470, 16
  %471 = load i32, i32* %c, align 4, !tbaa !15
  %shr457 = lshr i32 %471, 16
  %or458 = or i32 %shl456, %shr457
  store i32 %or458, i32* %c, align 4, !tbaa !15
  %472 = load i32, i32* %d, align 4, !tbaa !15
  %473 = load i32, i32* %c, align 4, !tbaa !15
  %add459 = add i32 %473, %472
  store i32 %add459, i32* %c, align 4, !tbaa !15
  %474 = load i32, i32* %c, align 4, !tbaa !15
  %475 = load i32, i32* %d, align 4, !tbaa !15
  %xor460 = xor i32 %474, %475
  %476 = load i32, i32* %a, align 4, !tbaa !15
  %xor461 = xor i32 %xor460, %476
  %477 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx462 = getelementptr inbounds i32, i32* %477, i64 6
  %478 = load i32, i32* %arrayidx462, align 4, !tbaa !15
  %add463 = add i32 %xor461, %478
  %add464 = add i32 %add463, 76029189
  %479 = load i32, i32* %b, align 4, !tbaa !15
  %add465 = add i32 %479, %add464
  store i32 %add465, i32* %b, align 4, !tbaa !15
  %480 = load i32, i32* %b, align 4, !tbaa !15
  %shl466 = shl i32 %480, 23
  %481 = load i32, i32* %b, align 4, !tbaa !15
  %shr467 = lshr i32 %481, 9
  %or468 = or i32 %shl466, %shr467
  store i32 %or468, i32* %b, align 4, !tbaa !15
  %482 = load i32, i32* %c, align 4, !tbaa !15
  %483 = load i32, i32* %b, align 4, !tbaa !15
  %add469 = add i32 %483, %482
  store i32 %add469, i32* %b, align 4, !tbaa !15
  %484 = load i32, i32* %b, align 4, !tbaa !15
  %485 = load i32, i32* %c, align 4, !tbaa !15
  %xor470 = xor i32 %484, %485
  %486 = load i32, i32* %d, align 4, !tbaa !15
  %xor471 = xor i32 %xor470, %486
  %487 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx472 = getelementptr inbounds i32, i32* %487, i64 9
  %488 = load i32, i32* %arrayidx472, align 4, !tbaa !15
  %add473 = add i32 %xor471, %488
  %add474 = add i32 %add473, -640364487
  %489 = load i32, i32* %a, align 4, !tbaa !15
  %add475 = add i32 %489, %add474
  store i32 %add475, i32* %a, align 4, !tbaa !15
  %490 = load i32, i32* %a, align 4, !tbaa !15
  %shl476 = shl i32 %490, 4
  %491 = load i32, i32* %a, align 4, !tbaa !15
  %shr477 = lshr i32 %491, 28
  %or478 = or i32 %shl476, %shr477
  store i32 %or478, i32* %a, align 4, !tbaa !15
  %492 = load i32, i32* %b, align 4, !tbaa !15
  %493 = load i32, i32* %a, align 4, !tbaa !15
  %add479 = add i32 %493, %492
  store i32 %add479, i32* %a, align 4, !tbaa !15
  %494 = load i32, i32* %a, align 4, !tbaa !15
  %495 = load i32, i32* %b, align 4, !tbaa !15
  %xor480 = xor i32 %494, %495
  %496 = load i32, i32* %c, align 4, !tbaa !15
  %xor481 = xor i32 %xor480, %496
  %497 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx482 = getelementptr inbounds i32, i32* %497, i64 12
  %498 = load i32, i32* %arrayidx482, align 4, !tbaa !15
  %add483 = add i32 %xor481, %498
  %add484 = add i32 %add483, -421815835
  %499 = load i32, i32* %d, align 4, !tbaa !15
  %add485 = add i32 %499, %add484
  store i32 %add485, i32* %d, align 4, !tbaa !15
  %500 = load i32, i32* %d, align 4, !tbaa !15
  %shl486 = shl i32 %500, 11
  %501 = load i32, i32* %d, align 4, !tbaa !15
  %shr487 = lshr i32 %501, 21
  %or488 = or i32 %shl486, %shr487
  store i32 %or488, i32* %d, align 4, !tbaa !15
  %502 = load i32, i32* %a, align 4, !tbaa !15
  %503 = load i32, i32* %d, align 4, !tbaa !15
  %add489 = add i32 %503, %502
  store i32 %add489, i32* %d, align 4, !tbaa !15
  %504 = load i32, i32* %d, align 4, !tbaa !15
  %505 = load i32, i32* %a, align 4, !tbaa !15
  %xor490 = xor i32 %504, %505
  %506 = load i32, i32* %b, align 4, !tbaa !15
  %xor491 = xor i32 %xor490, %506
  %507 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx492 = getelementptr inbounds i32, i32* %507, i64 15
  %508 = load i32, i32* %arrayidx492, align 4, !tbaa !15
  %add493 = add i32 %xor491, %508
  %add494 = add i32 %add493, 530742520
  %509 = load i32, i32* %c, align 4, !tbaa !15
  %add495 = add i32 %509, %add494
  store i32 %add495, i32* %c, align 4, !tbaa !15
  %510 = load i32, i32* %c, align 4, !tbaa !15
  %shl496 = shl i32 %510, 16
  %511 = load i32, i32* %c, align 4, !tbaa !15
  %shr497 = lshr i32 %511, 16
  %or498 = or i32 %shl496, %shr497
  store i32 %or498, i32* %c, align 4, !tbaa !15
  %512 = load i32, i32* %d, align 4, !tbaa !15
  %513 = load i32, i32* %c, align 4, !tbaa !15
  %add499 = add i32 %513, %512
  store i32 %add499, i32* %c, align 4, !tbaa !15
  %514 = load i32, i32* %c, align 4, !tbaa !15
  %515 = load i32, i32* %d, align 4, !tbaa !15
  %xor500 = xor i32 %514, %515
  %516 = load i32, i32* %a, align 4, !tbaa !15
  %xor501 = xor i32 %xor500, %516
  %517 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx502 = getelementptr inbounds i32, i32* %517, i64 2
  %518 = load i32, i32* %arrayidx502, align 4, !tbaa !15
  %add503 = add i32 %xor501, %518
  %add504 = add i32 %add503, -995338651
  %519 = load i32, i32* %b, align 4, !tbaa !15
  %add505 = add i32 %519, %add504
  store i32 %add505, i32* %b, align 4, !tbaa !15
  %520 = load i32, i32* %b, align 4, !tbaa !15
  %shl506 = shl i32 %520, 23
  %521 = load i32, i32* %b, align 4, !tbaa !15
  %shr507 = lshr i32 %521, 9
  %or508 = or i32 %shl506, %shr507
  store i32 %or508, i32* %b, align 4, !tbaa !15
  %522 = load i32, i32* %c, align 4, !tbaa !15
  %523 = load i32, i32* %b, align 4, !tbaa !15
  %add509 = add i32 %523, %522
  store i32 %add509, i32* %b, align 4, !tbaa !15
  %524 = load i32, i32* %c, align 4, !tbaa !15
  %525 = load i32, i32* %b, align 4, !tbaa !15
  %526 = load i32, i32* %d, align 4, !tbaa !15
  %neg = xor i32 %526, -1
  %or510 = or i32 %525, %neg
  %xor511 = xor i32 %524, %or510
  %527 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx512 = getelementptr inbounds i32, i32* %527, i64 0
  %528 = load i32, i32* %arrayidx512, align 4, !tbaa !15
  %add513 = add i32 %xor511, %528
  %add514 = add i32 %add513, -198630844
  %529 = load i32, i32* %a, align 4, !tbaa !15
  %add515 = add i32 %529, %add514
  store i32 %add515, i32* %a, align 4, !tbaa !15
  %530 = load i32, i32* %a, align 4, !tbaa !15
  %shl516 = shl i32 %530, 6
  %531 = load i32, i32* %a, align 4, !tbaa !15
  %shr517 = lshr i32 %531, 26
  %or518 = or i32 %shl516, %shr517
  store i32 %or518, i32* %a, align 4, !tbaa !15
  %532 = load i32, i32* %b, align 4, !tbaa !15
  %533 = load i32, i32* %a, align 4, !tbaa !15
  %add519 = add i32 %533, %532
  store i32 %add519, i32* %a, align 4, !tbaa !15
  %534 = load i32, i32* %b, align 4, !tbaa !15
  %535 = load i32, i32* %a, align 4, !tbaa !15
  %536 = load i32, i32* %c, align 4, !tbaa !15
  %neg520 = xor i32 %536, -1
  %or521 = or i32 %535, %neg520
  %xor522 = xor i32 %534, %or521
  %537 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx523 = getelementptr inbounds i32, i32* %537, i64 7
  %538 = load i32, i32* %arrayidx523, align 4, !tbaa !15
  %add524 = add i32 %xor522, %538
  %add525 = add i32 %add524, 1126891415
  %539 = load i32, i32* %d, align 4, !tbaa !15
  %add526 = add i32 %539, %add525
  store i32 %add526, i32* %d, align 4, !tbaa !15
  %540 = load i32, i32* %d, align 4, !tbaa !15
  %shl527 = shl i32 %540, 10
  %541 = load i32, i32* %d, align 4, !tbaa !15
  %shr528 = lshr i32 %541, 22
  %or529 = or i32 %shl527, %shr528
  store i32 %or529, i32* %d, align 4, !tbaa !15
  %542 = load i32, i32* %a, align 4, !tbaa !15
  %543 = load i32, i32* %d, align 4, !tbaa !15
  %add530 = add i32 %543, %542
  store i32 %add530, i32* %d, align 4, !tbaa !15
  %544 = load i32, i32* %a, align 4, !tbaa !15
  %545 = load i32, i32* %d, align 4, !tbaa !15
  %546 = load i32, i32* %b, align 4, !tbaa !15
  %neg531 = xor i32 %546, -1
  %or532 = or i32 %545, %neg531
  %xor533 = xor i32 %544, %or532
  %547 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx534 = getelementptr inbounds i32, i32* %547, i64 14
  %548 = load i32, i32* %arrayidx534, align 4, !tbaa !15
  %add535 = add i32 %xor533, %548
  %add536 = add i32 %add535, -1416354905
  %549 = load i32, i32* %c, align 4, !tbaa !15
  %add537 = add i32 %549, %add536
  store i32 %add537, i32* %c, align 4, !tbaa !15
  %550 = load i32, i32* %c, align 4, !tbaa !15
  %shl538 = shl i32 %550, 15
  %551 = load i32, i32* %c, align 4, !tbaa !15
  %shr539 = lshr i32 %551, 17
  %or540 = or i32 %shl538, %shr539
  store i32 %or540, i32* %c, align 4, !tbaa !15
  %552 = load i32, i32* %d, align 4, !tbaa !15
  %553 = load i32, i32* %c, align 4, !tbaa !15
  %add541 = add i32 %553, %552
  store i32 %add541, i32* %c, align 4, !tbaa !15
  %554 = load i32, i32* %d, align 4, !tbaa !15
  %555 = load i32, i32* %c, align 4, !tbaa !15
  %556 = load i32, i32* %a, align 4, !tbaa !15
  %neg542 = xor i32 %556, -1
  %or543 = or i32 %555, %neg542
  %xor544 = xor i32 %554, %or543
  %557 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx545 = getelementptr inbounds i32, i32* %557, i64 5
  %558 = load i32, i32* %arrayidx545, align 4, !tbaa !15
  %add546 = add i32 %xor544, %558
  %add547 = add i32 %add546, -57434055
  %559 = load i32, i32* %b, align 4, !tbaa !15
  %add548 = add i32 %559, %add547
  store i32 %add548, i32* %b, align 4, !tbaa !15
  %560 = load i32, i32* %b, align 4, !tbaa !15
  %shl549 = shl i32 %560, 21
  %561 = load i32, i32* %b, align 4, !tbaa !15
  %shr550 = lshr i32 %561, 11
  %or551 = or i32 %shl549, %shr550
  store i32 %or551, i32* %b, align 4, !tbaa !15
  %562 = load i32, i32* %c, align 4, !tbaa !15
  %563 = load i32, i32* %b, align 4, !tbaa !15
  %add552 = add i32 %563, %562
  store i32 %add552, i32* %b, align 4, !tbaa !15
  %564 = load i32, i32* %c, align 4, !tbaa !15
  %565 = load i32, i32* %b, align 4, !tbaa !15
  %566 = load i32, i32* %d, align 4, !tbaa !15
  %neg553 = xor i32 %566, -1
  %or554 = or i32 %565, %neg553
  %xor555 = xor i32 %564, %or554
  %567 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx556 = getelementptr inbounds i32, i32* %567, i64 12
  %568 = load i32, i32* %arrayidx556, align 4, !tbaa !15
  %add557 = add i32 %xor555, %568
  %add558 = add i32 %add557, 1700485571
  %569 = load i32, i32* %a, align 4, !tbaa !15
  %add559 = add i32 %569, %add558
  store i32 %add559, i32* %a, align 4, !tbaa !15
  %570 = load i32, i32* %a, align 4, !tbaa !15
  %shl560 = shl i32 %570, 6
  %571 = load i32, i32* %a, align 4, !tbaa !15
  %shr561 = lshr i32 %571, 26
  %or562 = or i32 %shl560, %shr561
  store i32 %or562, i32* %a, align 4, !tbaa !15
  %572 = load i32, i32* %b, align 4, !tbaa !15
  %573 = load i32, i32* %a, align 4, !tbaa !15
  %add563 = add i32 %573, %572
  store i32 %add563, i32* %a, align 4, !tbaa !15
  %574 = load i32, i32* %b, align 4, !tbaa !15
  %575 = load i32, i32* %a, align 4, !tbaa !15
  %576 = load i32, i32* %c, align 4, !tbaa !15
  %neg564 = xor i32 %576, -1
  %or565 = or i32 %575, %neg564
  %xor566 = xor i32 %574, %or565
  %577 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx567 = getelementptr inbounds i32, i32* %577, i64 3
  %578 = load i32, i32* %arrayidx567, align 4, !tbaa !15
  %add568 = add i32 %xor566, %578
  %add569 = add i32 %add568, -1894986606
  %579 = load i32, i32* %d, align 4, !tbaa !15
  %add570 = add i32 %579, %add569
  store i32 %add570, i32* %d, align 4, !tbaa !15
  %580 = load i32, i32* %d, align 4, !tbaa !15
  %shl571 = shl i32 %580, 10
  %581 = load i32, i32* %d, align 4, !tbaa !15
  %shr572 = lshr i32 %581, 22
  %or573 = or i32 %shl571, %shr572
  store i32 %or573, i32* %d, align 4, !tbaa !15
  %582 = load i32, i32* %a, align 4, !tbaa !15
  %583 = load i32, i32* %d, align 4, !tbaa !15
  %add574 = add i32 %583, %582
  store i32 %add574, i32* %d, align 4, !tbaa !15
  %584 = load i32, i32* %a, align 4, !tbaa !15
  %585 = load i32, i32* %d, align 4, !tbaa !15
  %586 = load i32, i32* %b, align 4, !tbaa !15
  %neg575 = xor i32 %586, -1
  %or576 = or i32 %585, %neg575
  %xor577 = xor i32 %584, %or576
  %587 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx578 = getelementptr inbounds i32, i32* %587, i64 10
  %588 = load i32, i32* %arrayidx578, align 4, !tbaa !15
  %add579 = add i32 %xor577, %588
  %add580 = add i32 %add579, -1051523
  %589 = load i32, i32* %c, align 4, !tbaa !15
  %add581 = add i32 %589, %add580
  store i32 %add581, i32* %c, align 4, !tbaa !15
  %590 = load i32, i32* %c, align 4, !tbaa !15
  %shl582 = shl i32 %590, 15
  %591 = load i32, i32* %c, align 4, !tbaa !15
  %shr583 = lshr i32 %591, 17
  %or584 = or i32 %shl582, %shr583
  store i32 %or584, i32* %c, align 4, !tbaa !15
  %592 = load i32, i32* %d, align 4, !tbaa !15
  %593 = load i32, i32* %c, align 4, !tbaa !15
  %add585 = add i32 %593, %592
  store i32 %add585, i32* %c, align 4, !tbaa !15
  %594 = load i32, i32* %d, align 4, !tbaa !15
  %595 = load i32, i32* %c, align 4, !tbaa !15
  %596 = load i32, i32* %a, align 4, !tbaa !15
  %neg586 = xor i32 %596, -1
  %or587 = or i32 %595, %neg586
  %xor588 = xor i32 %594, %or587
  %597 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx589 = getelementptr inbounds i32, i32* %597, i64 1
  %598 = load i32, i32* %arrayidx589, align 4, !tbaa !15
  %add590 = add i32 %xor588, %598
  %add591 = add i32 %add590, -2054922799
  %599 = load i32, i32* %b, align 4, !tbaa !15
  %add592 = add i32 %599, %add591
  store i32 %add592, i32* %b, align 4, !tbaa !15
  %600 = load i32, i32* %b, align 4, !tbaa !15
  %shl593 = shl i32 %600, 21
  %601 = load i32, i32* %b, align 4, !tbaa !15
  %shr594 = lshr i32 %601, 11
  %or595 = or i32 %shl593, %shr594
  store i32 %or595, i32* %b, align 4, !tbaa !15
  %602 = load i32, i32* %c, align 4, !tbaa !15
  %603 = load i32, i32* %b, align 4, !tbaa !15
  %add596 = add i32 %603, %602
  store i32 %add596, i32* %b, align 4, !tbaa !15
  %604 = load i32, i32* %c, align 4, !tbaa !15
  %605 = load i32, i32* %b, align 4, !tbaa !15
  %606 = load i32, i32* %d, align 4, !tbaa !15
  %neg597 = xor i32 %606, -1
  %or598 = or i32 %605, %neg597
  %xor599 = xor i32 %604, %or598
  %607 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx600 = getelementptr inbounds i32, i32* %607, i64 8
  %608 = load i32, i32* %arrayidx600, align 4, !tbaa !15
  %add601 = add i32 %xor599, %608
  %add602 = add i32 %add601, 1873313359
  %609 = load i32, i32* %a, align 4, !tbaa !15
  %add603 = add i32 %609, %add602
  store i32 %add603, i32* %a, align 4, !tbaa !15
  %610 = load i32, i32* %a, align 4, !tbaa !15
  %shl604 = shl i32 %610, 6
  %611 = load i32, i32* %a, align 4, !tbaa !15
  %shr605 = lshr i32 %611, 26
  %or606 = or i32 %shl604, %shr605
  store i32 %or606, i32* %a, align 4, !tbaa !15
  %612 = load i32, i32* %b, align 4, !tbaa !15
  %613 = load i32, i32* %a, align 4, !tbaa !15
  %add607 = add i32 %613, %612
  store i32 %add607, i32* %a, align 4, !tbaa !15
  %614 = load i32, i32* %b, align 4, !tbaa !15
  %615 = load i32, i32* %a, align 4, !tbaa !15
  %616 = load i32, i32* %c, align 4, !tbaa !15
  %neg608 = xor i32 %616, -1
  %or609 = or i32 %615, %neg608
  %xor610 = xor i32 %614, %or609
  %617 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx611 = getelementptr inbounds i32, i32* %617, i64 15
  %618 = load i32, i32* %arrayidx611, align 4, !tbaa !15
  %add612 = add i32 %xor610, %618
  %add613 = add i32 %add612, -30611744
  %619 = load i32, i32* %d, align 4, !tbaa !15
  %add614 = add i32 %619, %add613
  store i32 %add614, i32* %d, align 4, !tbaa !15
  %620 = load i32, i32* %d, align 4, !tbaa !15
  %shl615 = shl i32 %620, 10
  %621 = load i32, i32* %d, align 4, !tbaa !15
  %shr616 = lshr i32 %621, 22
  %or617 = or i32 %shl615, %shr616
  store i32 %or617, i32* %d, align 4, !tbaa !15
  %622 = load i32, i32* %a, align 4, !tbaa !15
  %623 = load i32, i32* %d, align 4, !tbaa !15
  %add618 = add i32 %623, %622
  store i32 %add618, i32* %d, align 4, !tbaa !15
  %624 = load i32, i32* %a, align 4, !tbaa !15
  %625 = load i32, i32* %d, align 4, !tbaa !15
  %626 = load i32, i32* %b, align 4, !tbaa !15
  %neg619 = xor i32 %626, -1
  %or620 = or i32 %625, %neg619
  %xor621 = xor i32 %624, %or620
  %627 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx622 = getelementptr inbounds i32, i32* %627, i64 6
  %628 = load i32, i32* %arrayidx622, align 4, !tbaa !15
  %add623 = add i32 %xor621, %628
  %add624 = add i32 %add623, -1560198380
  %629 = load i32, i32* %c, align 4, !tbaa !15
  %add625 = add i32 %629, %add624
  store i32 %add625, i32* %c, align 4, !tbaa !15
  %630 = load i32, i32* %c, align 4, !tbaa !15
  %shl626 = shl i32 %630, 15
  %631 = load i32, i32* %c, align 4, !tbaa !15
  %shr627 = lshr i32 %631, 17
  %or628 = or i32 %shl626, %shr627
  store i32 %or628, i32* %c, align 4, !tbaa !15
  %632 = load i32, i32* %d, align 4, !tbaa !15
  %633 = load i32, i32* %c, align 4, !tbaa !15
  %add629 = add i32 %633, %632
  store i32 %add629, i32* %c, align 4, !tbaa !15
  %634 = load i32, i32* %d, align 4, !tbaa !15
  %635 = load i32, i32* %c, align 4, !tbaa !15
  %636 = load i32, i32* %a, align 4, !tbaa !15
  %neg630 = xor i32 %636, -1
  %or631 = or i32 %635, %neg630
  %xor632 = xor i32 %634, %or631
  %637 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx633 = getelementptr inbounds i32, i32* %637, i64 13
  %638 = load i32, i32* %arrayidx633, align 4, !tbaa !15
  %add634 = add i32 %xor632, %638
  %add635 = add i32 %add634, 1309151649
  %639 = load i32, i32* %b, align 4, !tbaa !15
  %add636 = add i32 %639, %add635
  store i32 %add636, i32* %b, align 4, !tbaa !15
  %640 = load i32, i32* %b, align 4, !tbaa !15
  %shl637 = shl i32 %640, 21
  %641 = load i32, i32* %b, align 4, !tbaa !15
  %shr638 = lshr i32 %641, 11
  %or639 = or i32 %shl637, %shr638
  store i32 %or639, i32* %b, align 4, !tbaa !15
  %642 = load i32, i32* %c, align 4, !tbaa !15
  %643 = load i32, i32* %b, align 4, !tbaa !15
  %add640 = add i32 %643, %642
  store i32 %add640, i32* %b, align 4, !tbaa !15
  %644 = load i32, i32* %c, align 4, !tbaa !15
  %645 = load i32, i32* %b, align 4, !tbaa !15
  %646 = load i32, i32* %d, align 4, !tbaa !15
  %neg641 = xor i32 %646, -1
  %or642 = or i32 %645, %neg641
  %xor643 = xor i32 %644, %or642
  %647 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx644 = getelementptr inbounds i32, i32* %647, i64 4
  %648 = load i32, i32* %arrayidx644, align 4, !tbaa !15
  %add645 = add i32 %xor643, %648
  %add646 = add i32 %add645, -145523070
  %649 = load i32, i32* %a, align 4, !tbaa !15
  %add647 = add i32 %649, %add646
  store i32 %add647, i32* %a, align 4, !tbaa !15
  %650 = load i32, i32* %a, align 4, !tbaa !15
  %shl648 = shl i32 %650, 6
  %651 = load i32, i32* %a, align 4, !tbaa !15
  %shr649 = lshr i32 %651, 26
  %or650 = or i32 %shl648, %shr649
  store i32 %or650, i32* %a, align 4, !tbaa !15
  %652 = load i32, i32* %b, align 4, !tbaa !15
  %653 = load i32, i32* %a, align 4, !tbaa !15
  %add651 = add i32 %653, %652
  store i32 %add651, i32* %a, align 4, !tbaa !15
  %654 = load i32, i32* %b, align 4, !tbaa !15
  %655 = load i32, i32* %a, align 4, !tbaa !15
  %656 = load i32, i32* %c, align 4, !tbaa !15
  %neg652 = xor i32 %656, -1
  %or653 = or i32 %655, %neg652
  %xor654 = xor i32 %654, %or653
  %657 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx655 = getelementptr inbounds i32, i32* %657, i64 11
  %658 = load i32, i32* %arrayidx655, align 4, !tbaa !15
  %add656 = add i32 %xor654, %658
  %add657 = add i32 %add656, -1120210379
  %659 = load i32, i32* %d, align 4, !tbaa !15
  %add658 = add i32 %659, %add657
  store i32 %add658, i32* %d, align 4, !tbaa !15
  %660 = load i32, i32* %d, align 4, !tbaa !15
  %shl659 = shl i32 %660, 10
  %661 = load i32, i32* %d, align 4, !tbaa !15
  %shr660 = lshr i32 %661, 22
  %or661 = or i32 %shl659, %shr660
  store i32 %or661, i32* %d, align 4, !tbaa !15
  %662 = load i32, i32* %a, align 4, !tbaa !15
  %663 = load i32, i32* %d, align 4, !tbaa !15
  %add662 = add i32 %663, %662
  store i32 %add662, i32* %d, align 4, !tbaa !15
  %664 = load i32, i32* %a, align 4, !tbaa !15
  %665 = load i32, i32* %d, align 4, !tbaa !15
  %666 = load i32, i32* %b, align 4, !tbaa !15
  %neg663 = xor i32 %666, -1
  %or664 = or i32 %665, %neg663
  %xor665 = xor i32 %664, %or664
  %667 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx666 = getelementptr inbounds i32, i32* %667, i64 2
  %668 = load i32, i32* %arrayidx666, align 4, !tbaa !15
  %add667 = add i32 %xor665, %668
  %add668 = add i32 %add667, 718787259
  %669 = load i32, i32* %c, align 4, !tbaa !15
  %add669 = add i32 %669, %add668
  store i32 %add669, i32* %c, align 4, !tbaa !15
  %670 = load i32, i32* %c, align 4, !tbaa !15
  %shl670 = shl i32 %670, 15
  %671 = load i32, i32* %c, align 4, !tbaa !15
  %shr671 = lshr i32 %671, 17
  %or672 = or i32 %shl670, %shr671
  store i32 %or672, i32* %c, align 4, !tbaa !15
  %672 = load i32, i32* %d, align 4, !tbaa !15
  %673 = load i32, i32* %c, align 4, !tbaa !15
  %add673 = add i32 %673, %672
  store i32 %add673, i32* %c, align 4, !tbaa !15
  %674 = load i32, i32* %d, align 4, !tbaa !15
  %675 = load i32, i32* %c, align 4, !tbaa !15
  %676 = load i32, i32* %a, align 4, !tbaa !15
  %neg674 = xor i32 %676, -1
  %or675 = or i32 %675, %neg674
  %xor676 = xor i32 %674, %or675
  %677 = load i32*, i32** %in.addr, align 8, !tbaa !3
  %arrayidx677 = getelementptr inbounds i32, i32* %677, i64 9
  %678 = load i32, i32* %arrayidx677, align 4, !tbaa !15
  %add678 = add i32 %xor676, %678
  %add679 = add i32 %add678, -343485551
  %679 = load i32, i32* %b, align 4, !tbaa !15
  %add680 = add i32 %679, %add679
  store i32 %add680, i32* %b, align 4, !tbaa !15
  %680 = load i32, i32* %b, align 4, !tbaa !15
  %shl681 = shl i32 %680, 21
  %681 = load i32, i32* %b, align 4, !tbaa !15
  %shr682 = lshr i32 %681, 11
  %or683 = or i32 %shl681, %shr682
  store i32 %or683, i32* %b, align 4, !tbaa !15
  %682 = load i32, i32* %c, align 4, !tbaa !15
  %683 = load i32, i32* %b, align 4, !tbaa !15
  %add684 = add i32 %683, %682
  store i32 %add684, i32* %b, align 4, !tbaa !15
  %684 = load i32, i32* %a, align 4, !tbaa !15
  %685 = load i32*, i32** %buf.addr, align 8, !tbaa !3
  %arrayidx685 = getelementptr inbounds i32, i32* %685, i64 0
  %686 = load i32, i32* %arrayidx685, align 4, !tbaa !15
  %add686 = add i32 %686, %684
  store i32 %add686, i32* %arrayidx685, align 4, !tbaa !15
  %687 = load i32, i32* %b, align 4, !tbaa !15
  %688 = load i32*, i32** %buf.addr, align 8, !tbaa !3
  %arrayidx687 = getelementptr inbounds i32, i32* %688, i64 1
  %689 = load i32, i32* %arrayidx687, align 4, !tbaa !15
  %add688 = add i32 %689, %687
  store i32 %add688, i32* %arrayidx687, align 4, !tbaa !15
  %690 = load i32, i32* %c, align 4, !tbaa !15
  %691 = load i32*, i32** %buf.addr, align 8, !tbaa !3
  %arrayidx689 = getelementptr inbounds i32, i32* %691, i64 2
  %692 = load i32, i32* %arrayidx689, align 4, !tbaa !15
  %add690 = add i32 %692, %690
  store i32 %add690, i32* %arrayidx689, align 4, !tbaa !15
  %693 = load i32, i32* %d, align 4, !tbaa !15
  %694 = load i32*, i32** %buf.addr, align 8, !tbaa !3
  %arrayidx691 = getelementptr inbounds i32, i32* %694, i64 3
  %695 = load i32, i32* %arrayidx691, align 4, !tbaa !15
  %add692 = add i32 %695, %693
  store i32 %add692, i32* %arrayidx691, align 4, !tbaa !15
  %696 = bitcast i32* %d to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %696) #5
  %697 = bitcast i32* %c to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %697) #5
  %698 = bitcast i32* %b to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %698) #5
  %699 = bitcast i32* %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %699) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @cs_md5_final(i8* %digest, %struct.cs_md5_ctx* %ctx) #0 {
entry:
  %digest.addr = alloca i8*, align 8
  %ctx.addr = alloca %struct.cs_md5_ctx*, align 8
  %count = alloca i32, align 4
  %p = alloca i8*, align 8
  %a = alloca i32*, align 8
  store i8* %digest, i8** %digest.addr, align 8, !tbaa !3
  store %struct.cs_md5_ctx* %ctx, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %0 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %2 = bitcast i32** %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  %3 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %bits = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %3, i32 0, i32 1
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %bits, i64 0, i64 0
  %4 = load i32, i32* %arrayidx, align 4, !tbaa !15
  %shr = lshr i32 %4, 3
  %and = and i32 %shr, 63
  store i32 %and, i32* %count, align 4, !tbaa !15
  %5 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %in = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %5, i32 0, i32 2
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %in, i32 0, i32 0
  %6 = load i32, i32* %count, align 4, !tbaa !15
  %idx.ext = zext i32 %6 to i64
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 %idx.ext
  store i8* %add.ptr, i8** %p, align 8, !tbaa !3
  %7 = load i8*, i8** %p, align 8, !tbaa !3
  %incdec.ptr = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr, i8** %p, align 8, !tbaa !3
  store i8 -128, i8* %7, align 1, !tbaa !14
  %8 = load i32, i32* %count, align 4, !tbaa !15
  %sub = sub i32 63, %8
  store i32 %sub, i32* %count, align 4, !tbaa !15
  %9 = load i32, i32* %count, align 4, !tbaa !15
  %cmp = icmp ult i32 %9, 8
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %10 = load i8*, i8** %p, align 8, !tbaa !3
  %11 = load i32, i32* %count, align 4, !tbaa !15
  %conv = zext i32 %11 to i64
  %12 = load i8*, i8** %p, align 8, !tbaa !3
  %13 = call i64 @llvm.objectsize.i64.p0i8(i8* %12, i1 false, i1 true)
  %call = call i8* @__memset_chk(i8* %10, i32 0, i64 %conv, i64 %13) #5
  %14 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %in1 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %14, i32 0, i32 2
  %arraydecay2 = getelementptr inbounds [64 x i8], [64 x i8]* %in1, i32 0, i32 0
  call void @byteReverse(i8* %arraydecay2, i32 16)
  %15 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %buf = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %15, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [4 x i32], [4 x i32]* %buf, i32 0, i32 0
  %16 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %in4 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %16, i32 0, i32 2
  %arraydecay5 = getelementptr inbounds [64 x i8], [64 x i8]* %in4, i32 0, i32 0
  %17 = bitcast i8* %arraydecay5 to i32*
  call void @cs_md5_transform(i32* %arraydecay3, i32* %17)
  %18 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %in6 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %18, i32 0, i32 2
  %arraydecay7 = getelementptr inbounds [64 x i8], [64 x i8]* %in6, i32 0, i32 0
  %19 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %in8 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %19, i32 0, i32 2
  %arraydecay9 = getelementptr inbounds [64 x i8], [64 x i8]* %in8, i32 0, i32 0
  %20 = call i64 @llvm.objectsize.i64.p0i8(i8* %arraydecay9, i1 false, i1 true)
  %call10 = call i8* @__memset_chk(i8* %arraydecay7, i32 0, i64 56, i64 %20) #5
  br label %if.end

if.else:                                          ; preds = %entry
  %21 = load i8*, i8** %p, align 8, !tbaa !3
  %22 = load i32, i32* %count, align 4, !tbaa !15
  %sub11 = sub i32 %22, 8
  %conv12 = zext i32 %sub11 to i64
  %23 = load i8*, i8** %p, align 8, !tbaa !3
  %24 = call i64 @llvm.objectsize.i64.p0i8(i8* %23, i1 false, i1 true)
  %call13 = call i8* @__memset_chk(i8* %21, i32 0, i64 %conv12, i64 %24) #5
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %25 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %in14 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %25, i32 0, i32 2
  %arraydecay15 = getelementptr inbounds [64 x i8], [64 x i8]* %in14, i32 0, i32 0
  call void @byteReverse(i8* %arraydecay15, i32 14)
  %26 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %in16 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %26, i32 0, i32 2
  %arraydecay17 = getelementptr inbounds [64 x i8], [64 x i8]* %in16, i32 0, i32 0
  %27 = bitcast i8* %arraydecay17 to i32*
  store i32* %27, i32** %a, align 8, !tbaa !3
  %28 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %bits18 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %28, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [2 x i32], [2 x i32]* %bits18, i64 0, i64 0
  %29 = load i32, i32* %arrayidx19, align 4, !tbaa !15
  %30 = load i32*, i32** %a, align 8, !tbaa !3
  %arrayidx20 = getelementptr inbounds i32, i32* %30, i64 14
  store i32 %29, i32* %arrayidx20, align 4, !tbaa !15
  %31 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %bits21 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %31, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [2 x i32], [2 x i32]* %bits21, i64 0, i64 1
  %32 = load i32, i32* %arrayidx22, align 4, !tbaa !15
  %33 = load i32*, i32** %a, align 8, !tbaa !3
  %arrayidx23 = getelementptr inbounds i32, i32* %33, i64 15
  store i32 %32, i32* %arrayidx23, align 4, !tbaa !15
  %34 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %buf24 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %34, i32 0, i32 0
  %arraydecay25 = getelementptr inbounds [4 x i32], [4 x i32]* %buf24, i32 0, i32 0
  %35 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %in26 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %35, i32 0, i32 2
  %arraydecay27 = getelementptr inbounds [64 x i8], [64 x i8]* %in26, i32 0, i32 0
  %36 = bitcast i8* %arraydecay27 to i32*
  call void @cs_md5_transform(i32* %arraydecay25, i32* %36)
  %37 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %buf28 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %37, i32 0, i32 0
  %arraydecay29 = getelementptr inbounds [4 x i32], [4 x i32]* %buf28, i32 0, i32 0
  %38 = bitcast i32* %arraydecay29 to i8*
  call void @byteReverse(i8* %38, i32 4)
  %39 = load i8*, i8** %digest.addr, align 8, !tbaa !3
  %40 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %buf30 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %40, i32 0, i32 0
  %arraydecay31 = getelementptr inbounds [4 x i32], [4 x i32]* %buf30, i32 0, i32 0
  %41 = bitcast i32* %arraydecay31 to i8*
  %42 = load i8*, i8** %digest.addr, align 8, !tbaa !3
  %43 = call i64 @llvm.objectsize.i64.p0i8(i8* %42, i1 false, i1 true)
  %call32 = call i8* @__memcpy_chk(i8* %39, i8* %41, i64 16, i64 %43) #5
  %44 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %45 = bitcast %struct.cs_md5_ctx* %44 to i8*
  %46 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8, !tbaa !3
  %47 = bitcast %struct.cs_md5_ctx* %46 to i8*
  %48 = call i64 @llvm.objectsize.i64.p0i8(i8* %47, i1 false, i1 true)
  %call33 = call i8* @__memset_chk(i8* %45, i32 0, i64 88, i64 %48) #5
  %49 = bitcast i32** %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %49) #5
  %50 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %50) #5
  %51 = bitcast i32* %count to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %51) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @cs_sha1_transform(i32* %state, i8* %buffer) #0 {
entry:
  %state.addr = alloca i32*, align 8
  %buffer.addr = alloca i8*, align 8
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %e = alloca i32, align 4
  %block = alloca [1 x %union.char64long16], align 16
  store i32* %state, i32** %state.addr, align 8, !tbaa !3
  store i8* %buffer, i8** %buffer.addr, align 8, !tbaa !3
  %0 = bitcast i32* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = bitcast i32* %b to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  %2 = bitcast i32* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  %3 = bitcast i32* %d to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  %4 = bitcast i32* %e to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #5
  %5 = bitcast [1 x %union.char64long16]* %block to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* %5) #5
  %arraydecay = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %6 = bitcast %union.char64long16* %arraydecay to i8*
  %7 = load i8*, i8** %buffer.addr, align 8, !tbaa !3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %6, i8* align 1 %7, i64 64, i1 false)
  %8 = load i32*, i32** %state.addr, align 8, !tbaa !3
  %arrayidx = getelementptr inbounds i32, i32* %8, i64 0
  %9 = load i32, i32* %arrayidx, align 4, !tbaa !15
  store i32 %9, i32* %a, align 4, !tbaa !15
  %10 = load i32*, i32** %state.addr, align 8, !tbaa !3
  %arrayidx1 = getelementptr inbounds i32, i32* %10, i64 1
  %11 = load i32, i32* %arrayidx1, align 4, !tbaa !15
  store i32 %11, i32* %b, align 4, !tbaa !15
  %12 = load i32*, i32** %state.addr, align 8, !tbaa !3
  %arrayidx2 = getelementptr inbounds i32, i32* %12, i64 2
  %13 = load i32, i32* %arrayidx2, align 4, !tbaa !15
  store i32 %13, i32* %c, align 4, !tbaa !15
  %14 = load i32*, i32** %state.addr, align 8, !tbaa !3
  %arrayidx3 = getelementptr inbounds i32, i32* %14, i64 3
  %15 = load i32, i32* %arrayidx3, align 4, !tbaa !15
  store i32 %15, i32* %d, align 4, !tbaa !15
  %16 = load i32*, i32** %state.addr, align 8, !tbaa !3
  %arrayidx4 = getelementptr inbounds i32, i32* %16, i64 4
  %17 = load i32, i32* %arrayidx4, align 4, !tbaa !15
  store i32 %17, i32* %e, align 4, !tbaa !15
  %18 = load i32, i32* %b, align 4, !tbaa !15
  %19 = load i32, i32* %c, align 4, !tbaa !15
  %20 = load i32, i32* %d, align 4, !tbaa !15
  %xor = xor i32 %19, %20
  %and = and i32 %18, %xor
  %21 = load i32, i32* %d, align 4, !tbaa !15
  %xor5 = xor i32 %and, %21
  %arraydecay6 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call = call i32 @blk0(%union.char64long16* %arraydecay6, i32 0)
  %add = add i32 %xor5, %call
  %add7 = add i32 %add, 1518500249
  %22 = load i32, i32* %a, align 4, !tbaa !15
  %shl = shl i32 %22, 5
  %23 = load i32, i32* %a, align 4, !tbaa !15
  %shr = lshr i32 %23, 27
  %or = or i32 %shl, %shr
  %add8 = add i32 %add7, %or
  %24 = load i32, i32* %e, align 4, !tbaa !15
  %add9 = add i32 %24, %add8
  store i32 %add9, i32* %e, align 4, !tbaa !15
  %25 = load i32, i32* %b, align 4, !tbaa !15
  %shl10 = shl i32 %25, 30
  %26 = load i32, i32* %b, align 4, !tbaa !15
  %shr11 = lshr i32 %26, 2
  %or12 = or i32 %shl10, %shr11
  store i32 %or12, i32* %b, align 4, !tbaa !15
  %27 = load i32, i32* %a, align 4, !tbaa !15
  %28 = load i32, i32* %b, align 4, !tbaa !15
  %29 = load i32, i32* %c, align 4, !tbaa !15
  %xor13 = xor i32 %28, %29
  %and14 = and i32 %27, %xor13
  %30 = load i32, i32* %c, align 4, !tbaa !15
  %xor15 = xor i32 %and14, %30
  %arraydecay16 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call17 = call i32 @blk0(%union.char64long16* %arraydecay16, i32 1)
  %add18 = add i32 %xor15, %call17
  %add19 = add i32 %add18, 1518500249
  %31 = load i32, i32* %e, align 4, !tbaa !15
  %shl20 = shl i32 %31, 5
  %32 = load i32, i32* %e, align 4, !tbaa !15
  %shr21 = lshr i32 %32, 27
  %or22 = or i32 %shl20, %shr21
  %add23 = add i32 %add19, %or22
  %33 = load i32, i32* %d, align 4, !tbaa !15
  %add24 = add i32 %33, %add23
  store i32 %add24, i32* %d, align 4, !tbaa !15
  %34 = load i32, i32* %a, align 4, !tbaa !15
  %shl25 = shl i32 %34, 30
  %35 = load i32, i32* %a, align 4, !tbaa !15
  %shr26 = lshr i32 %35, 2
  %or27 = or i32 %shl25, %shr26
  store i32 %or27, i32* %a, align 4, !tbaa !15
  %36 = load i32, i32* %e, align 4, !tbaa !15
  %37 = load i32, i32* %a, align 4, !tbaa !15
  %38 = load i32, i32* %b, align 4, !tbaa !15
  %xor28 = xor i32 %37, %38
  %and29 = and i32 %36, %xor28
  %39 = load i32, i32* %b, align 4, !tbaa !15
  %xor30 = xor i32 %and29, %39
  %arraydecay31 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call32 = call i32 @blk0(%union.char64long16* %arraydecay31, i32 2)
  %add33 = add i32 %xor30, %call32
  %add34 = add i32 %add33, 1518500249
  %40 = load i32, i32* %d, align 4, !tbaa !15
  %shl35 = shl i32 %40, 5
  %41 = load i32, i32* %d, align 4, !tbaa !15
  %shr36 = lshr i32 %41, 27
  %or37 = or i32 %shl35, %shr36
  %add38 = add i32 %add34, %or37
  %42 = load i32, i32* %c, align 4, !tbaa !15
  %add39 = add i32 %42, %add38
  store i32 %add39, i32* %c, align 4, !tbaa !15
  %43 = load i32, i32* %e, align 4, !tbaa !15
  %shl40 = shl i32 %43, 30
  %44 = load i32, i32* %e, align 4, !tbaa !15
  %shr41 = lshr i32 %44, 2
  %or42 = or i32 %shl40, %shr41
  store i32 %or42, i32* %e, align 4, !tbaa !15
  %45 = load i32, i32* %d, align 4, !tbaa !15
  %46 = load i32, i32* %e, align 4, !tbaa !15
  %47 = load i32, i32* %a, align 4, !tbaa !15
  %xor43 = xor i32 %46, %47
  %and44 = and i32 %45, %xor43
  %48 = load i32, i32* %a, align 4, !tbaa !15
  %xor45 = xor i32 %and44, %48
  %arraydecay46 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call47 = call i32 @blk0(%union.char64long16* %arraydecay46, i32 3)
  %add48 = add i32 %xor45, %call47
  %add49 = add i32 %add48, 1518500249
  %49 = load i32, i32* %c, align 4, !tbaa !15
  %shl50 = shl i32 %49, 5
  %50 = load i32, i32* %c, align 4, !tbaa !15
  %shr51 = lshr i32 %50, 27
  %or52 = or i32 %shl50, %shr51
  %add53 = add i32 %add49, %or52
  %51 = load i32, i32* %b, align 4, !tbaa !15
  %add54 = add i32 %51, %add53
  store i32 %add54, i32* %b, align 4, !tbaa !15
  %52 = load i32, i32* %d, align 4, !tbaa !15
  %shl55 = shl i32 %52, 30
  %53 = load i32, i32* %d, align 4, !tbaa !15
  %shr56 = lshr i32 %53, 2
  %or57 = or i32 %shl55, %shr56
  store i32 %or57, i32* %d, align 4, !tbaa !15
  %54 = load i32, i32* %c, align 4, !tbaa !15
  %55 = load i32, i32* %d, align 4, !tbaa !15
  %56 = load i32, i32* %e, align 4, !tbaa !15
  %xor58 = xor i32 %55, %56
  %and59 = and i32 %54, %xor58
  %57 = load i32, i32* %e, align 4, !tbaa !15
  %xor60 = xor i32 %and59, %57
  %arraydecay61 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call62 = call i32 @blk0(%union.char64long16* %arraydecay61, i32 4)
  %add63 = add i32 %xor60, %call62
  %add64 = add i32 %add63, 1518500249
  %58 = load i32, i32* %b, align 4, !tbaa !15
  %shl65 = shl i32 %58, 5
  %59 = load i32, i32* %b, align 4, !tbaa !15
  %shr66 = lshr i32 %59, 27
  %or67 = or i32 %shl65, %shr66
  %add68 = add i32 %add64, %or67
  %60 = load i32, i32* %a, align 4, !tbaa !15
  %add69 = add i32 %60, %add68
  store i32 %add69, i32* %a, align 4, !tbaa !15
  %61 = load i32, i32* %c, align 4, !tbaa !15
  %shl70 = shl i32 %61, 30
  %62 = load i32, i32* %c, align 4, !tbaa !15
  %shr71 = lshr i32 %62, 2
  %or72 = or i32 %shl70, %shr71
  store i32 %or72, i32* %c, align 4, !tbaa !15
  %63 = load i32, i32* %b, align 4, !tbaa !15
  %64 = load i32, i32* %c, align 4, !tbaa !15
  %65 = load i32, i32* %d, align 4, !tbaa !15
  %xor73 = xor i32 %64, %65
  %and74 = and i32 %63, %xor73
  %66 = load i32, i32* %d, align 4, !tbaa !15
  %xor75 = xor i32 %and74, %66
  %arraydecay76 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call77 = call i32 @blk0(%union.char64long16* %arraydecay76, i32 5)
  %add78 = add i32 %xor75, %call77
  %add79 = add i32 %add78, 1518500249
  %67 = load i32, i32* %a, align 4, !tbaa !15
  %shl80 = shl i32 %67, 5
  %68 = load i32, i32* %a, align 4, !tbaa !15
  %shr81 = lshr i32 %68, 27
  %or82 = or i32 %shl80, %shr81
  %add83 = add i32 %add79, %or82
  %69 = load i32, i32* %e, align 4, !tbaa !15
  %add84 = add i32 %69, %add83
  store i32 %add84, i32* %e, align 4, !tbaa !15
  %70 = load i32, i32* %b, align 4, !tbaa !15
  %shl85 = shl i32 %70, 30
  %71 = load i32, i32* %b, align 4, !tbaa !15
  %shr86 = lshr i32 %71, 2
  %or87 = or i32 %shl85, %shr86
  store i32 %or87, i32* %b, align 4, !tbaa !15
  %72 = load i32, i32* %a, align 4, !tbaa !15
  %73 = load i32, i32* %b, align 4, !tbaa !15
  %74 = load i32, i32* %c, align 4, !tbaa !15
  %xor88 = xor i32 %73, %74
  %and89 = and i32 %72, %xor88
  %75 = load i32, i32* %c, align 4, !tbaa !15
  %xor90 = xor i32 %and89, %75
  %arraydecay91 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call92 = call i32 @blk0(%union.char64long16* %arraydecay91, i32 6)
  %add93 = add i32 %xor90, %call92
  %add94 = add i32 %add93, 1518500249
  %76 = load i32, i32* %e, align 4, !tbaa !15
  %shl95 = shl i32 %76, 5
  %77 = load i32, i32* %e, align 4, !tbaa !15
  %shr96 = lshr i32 %77, 27
  %or97 = or i32 %shl95, %shr96
  %add98 = add i32 %add94, %or97
  %78 = load i32, i32* %d, align 4, !tbaa !15
  %add99 = add i32 %78, %add98
  store i32 %add99, i32* %d, align 4, !tbaa !15
  %79 = load i32, i32* %a, align 4, !tbaa !15
  %shl100 = shl i32 %79, 30
  %80 = load i32, i32* %a, align 4, !tbaa !15
  %shr101 = lshr i32 %80, 2
  %or102 = or i32 %shl100, %shr101
  store i32 %or102, i32* %a, align 4, !tbaa !15
  %81 = load i32, i32* %e, align 4, !tbaa !15
  %82 = load i32, i32* %a, align 4, !tbaa !15
  %83 = load i32, i32* %b, align 4, !tbaa !15
  %xor103 = xor i32 %82, %83
  %and104 = and i32 %81, %xor103
  %84 = load i32, i32* %b, align 4, !tbaa !15
  %xor105 = xor i32 %and104, %84
  %arraydecay106 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call107 = call i32 @blk0(%union.char64long16* %arraydecay106, i32 7)
  %add108 = add i32 %xor105, %call107
  %add109 = add i32 %add108, 1518500249
  %85 = load i32, i32* %d, align 4, !tbaa !15
  %shl110 = shl i32 %85, 5
  %86 = load i32, i32* %d, align 4, !tbaa !15
  %shr111 = lshr i32 %86, 27
  %or112 = or i32 %shl110, %shr111
  %add113 = add i32 %add109, %or112
  %87 = load i32, i32* %c, align 4, !tbaa !15
  %add114 = add i32 %87, %add113
  store i32 %add114, i32* %c, align 4, !tbaa !15
  %88 = load i32, i32* %e, align 4, !tbaa !15
  %shl115 = shl i32 %88, 30
  %89 = load i32, i32* %e, align 4, !tbaa !15
  %shr116 = lshr i32 %89, 2
  %or117 = or i32 %shl115, %shr116
  store i32 %or117, i32* %e, align 4, !tbaa !15
  %90 = load i32, i32* %d, align 4, !tbaa !15
  %91 = load i32, i32* %e, align 4, !tbaa !15
  %92 = load i32, i32* %a, align 4, !tbaa !15
  %xor118 = xor i32 %91, %92
  %and119 = and i32 %90, %xor118
  %93 = load i32, i32* %a, align 4, !tbaa !15
  %xor120 = xor i32 %and119, %93
  %arraydecay121 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call122 = call i32 @blk0(%union.char64long16* %arraydecay121, i32 8)
  %add123 = add i32 %xor120, %call122
  %add124 = add i32 %add123, 1518500249
  %94 = load i32, i32* %c, align 4, !tbaa !15
  %shl125 = shl i32 %94, 5
  %95 = load i32, i32* %c, align 4, !tbaa !15
  %shr126 = lshr i32 %95, 27
  %or127 = or i32 %shl125, %shr126
  %add128 = add i32 %add124, %or127
  %96 = load i32, i32* %b, align 4, !tbaa !15
  %add129 = add i32 %96, %add128
  store i32 %add129, i32* %b, align 4, !tbaa !15
  %97 = load i32, i32* %d, align 4, !tbaa !15
  %shl130 = shl i32 %97, 30
  %98 = load i32, i32* %d, align 4, !tbaa !15
  %shr131 = lshr i32 %98, 2
  %or132 = or i32 %shl130, %shr131
  store i32 %or132, i32* %d, align 4, !tbaa !15
  %99 = load i32, i32* %c, align 4, !tbaa !15
  %100 = load i32, i32* %d, align 4, !tbaa !15
  %101 = load i32, i32* %e, align 4, !tbaa !15
  %xor133 = xor i32 %100, %101
  %and134 = and i32 %99, %xor133
  %102 = load i32, i32* %e, align 4, !tbaa !15
  %xor135 = xor i32 %and134, %102
  %arraydecay136 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call137 = call i32 @blk0(%union.char64long16* %arraydecay136, i32 9)
  %add138 = add i32 %xor135, %call137
  %add139 = add i32 %add138, 1518500249
  %103 = load i32, i32* %b, align 4, !tbaa !15
  %shl140 = shl i32 %103, 5
  %104 = load i32, i32* %b, align 4, !tbaa !15
  %shr141 = lshr i32 %104, 27
  %or142 = or i32 %shl140, %shr141
  %add143 = add i32 %add139, %or142
  %105 = load i32, i32* %a, align 4, !tbaa !15
  %add144 = add i32 %105, %add143
  store i32 %add144, i32* %a, align 4, !tbaa !15
  %106 = load i32, i32* %c, align 4, !tbaa !15
  %shl145 = shl i32 %106, 30
  %107 = load i32, i32* %c, align 4, !tbaa !15
  %shr146 = lshr i32 %107, 2
  %or147 = or i32 %shl145, %shr146
  store i32 %or147, i32* %c, align 4, !tbaa !15
  %108 = load i32, i32* %b, align 4, !tbaa !15
  %109 = load i32, i32* %c, align 4, !tbaa !15
  %110 = load i32, i32* %d, align 4, !tbaa !15
  %xor148 = xor i32 %109, %110
  %and149 = and i32 %108, %xor148
  %111 = load i32, i32* %d, align 4, !tbaa !15
  %xor150 = xor i32 %and149, %111
  %arraydecay151 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call152 = call i32 @blk0(%union.char64long16* %arraydecay151, i32 10)
  %add153 = add i32 %xor150, %call152
  %add154 = add i32 %add153, 1518500249
  %112 = load i32, i32* %a, align 4, !tbaa !15
  %shl155 = shl i32 %112, 5
  %113 = load i32, i32* %a, align 4, !tbaa !15
  %shr156 = lshr i32 %113, 27
  %or157 = or i32 %shl155, %shr156
  %add158 = add i32 %add154, %or157
  %114 = load i32, i32* %e, align 4, !tbaa !15
  %add159 = add i32 %114, %add158
  store i32 %add159, i32* %e, align 4, !tbaa !15
  %115 = load i32, i32* %b, align 4, !tbaa !15
  %shl160 = shl i32 %115, 30
  %116 = load i32, i32* %b, align 4, !tbaa !15
  %shr161 = lshr i32 %116, 2
  %or162 = or i32 %shl160, %shr161
  store i32 %or162, i32* %b, align 4, !tbaa !15
  %117 = load i32, i32* %a, align 4, !tbaa !15
  %118 = load i32, i32* %b, align 4, !tbaa !15
  %119 = load i32, i32* %c, align 4, !tbaa !15
  %xor163 = xor i32 %118, %119
  %and164 = and i32 %117, %xor163
  %120 = load i32, i32* %c, align 4, !tbaa !15
  %xor165 = xor i32 %and164, %120
  %arraydecay166 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call167 = call i32 @blk0(%union.char64long16* %arraydecay166, i32 11)
  %add168 = add i32 %xor165, %call167
  %add169 = add i32 %add168, 1518500249
  %121 = load i32, i32* %e, align 4, !tbaa !15
  %shl170 = shl i32 %121, 5
  %122 = load i32, i32* %e, align 4, !tbaa !15
  %shr171 = lshr i32 %122, 27
  %or172 = or i32 %shl170, %shr171
  %add173 = add i32 %add169, %or172
  %123 = load i32, i32* %d, align 4, !tbaa !15
  %add174 = add i32 %123, %add173
  store i32 %add174, i32* %d, align 4, !tbaa !15
  %124 = load i32, i32* %a, align 4, !tbaa !15
  %shl175 = shl i32 %124, 30
  %125 = load i32, i32* %a, align 4, !tbaa !15
  %shr176 = lshr i32 %125, 2
  %or177 = or i32 %shl175, %shr176
  store i32 %or177, i32* %a, align 4, !tbaa !15
  %126 = load i32, i32* %e, align 4, !tbaa !15
  %127 = load i32, i32* %a, align 4, !tbaa !15
  %128 = load i32, i32* %b, align 4, !tbaa !15
  %xor178 = xor i32 %127, %128
  %and179 = and i32 %126, %xor178
  %129 = load i32, i32* %b, align 4, !tbaa !15
  %xor180 = xor i32 %and179, %129
  %arraydecay181 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call182 = call i32 @blk0(%union.char64long16* %arraydecay181, i32 12)
  %add183 = add i32 %xor180, %call182
  %add184 = add i32 %add183, 1518500249
  %130 = load i32, i32* %d, align 4, !tbaa !15
  %shl185 = shl i32 %130, 5
  %131 = load i32, i32* %d, align 4, !tbaa !15
  %shr186 = lshr i32 %131, 27
  %or187 = or i32 %shl185, %shr186
  %add188 = add i32 %add184, %or187
  %132 = load i32, i32* %c, align 4, !tbaa !15
  %add189 = add i32 %132, %add188
  store i32 %add189, i32* %c, align 4, !tbaa !15
  %133 = load i32, i32* %e, align 4, !tbaa !15
  %shl190 = shl i32 %133, 30
  %134 = load i32, i32* %e, align 4, !tbaa !15
  %shr191 = lshr i32 %134, 2
  %or192 = or i32 %shl190, %shr191
  store i32 %or192, i32* %e, align 4, !tbaa !15
  %135 = load i32, i32* %d, align 4, !tbaa !15
  %136 = load i32, i32* %e, align 4, !tbaa !15
  %137 = load i32, i32* %a, align 4, !tbaa !15
  %xor193 = xor i32 %136, %137
  %and194 = and i32 %135, %xor193
  %138 = load i32, i32* %a, align 4, !tbaa !15
  %xor195 = xor i32 %and194, %138
  %arraydecay196 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call197 = call i32 @blk0(%union.char64long16* %arraydecay196, i32 13)
  %add198 = add i32 %xor195, %call197
  %add199 = add i32 %add198, 1518500249
  %139 = load i32, i32* %c, align 4, !tbaa !15
  %shl200 = shl i32 %139, 5
  %140 = load i32, i32* %c, align 4, !tbaa !15
  %shr201 = lshr i32 %140, 27
  %or202 = or i32 %shl200, %shr201
  %add203 = add i32 %add199, %or202
  %141 = load i32, i32* %b, align 4, !tbaa !15
  %add204 = add i32 %141, %add203
  store i32 %add204, i32* %b, align 4, !tbaa !15
  %142 = load i32, i32* %d, align 4, !tbaa !15
  %shl205 = shl i32 %142, 30
  %143 = load i32, i32* %d, align 4, !tbaa !15
  %shr206 = lshr i32 %143, 2
  %or207 = or i32 %shl205, %shr206
  store i32 %or207, i32* %d, align 4, !tbaa !15
  %144 = load i32, i32* %c, align 4, !tbaa !15
  %145 = load i32, i32* %d, align 4, !tbaa !15
  %146 = load i32, i32* %e, align 4, !tbaa !15
  %xor208 = xor i32 %145, %146
  %and209 = and i32 %144, %xor208
  %147 = load i32, i32* %e, align 4, !tbaa !15
  %xor210 = xor i32 %and209, %147
  %arraydecay211 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call212 = call i32 @blk0(%union.char64long16* %arraydecay211, i32 14)
  %add213 = add i32 %xor210, %call212
  %add214 = add i32 %add213, 1518500249
  %148 = load i32, i32* %b, align 4, !tbaa !15
  %shl215 = shl i32 %148, 5
  %149 = load i32, i32* %b, align 4, !tbaa !15
  %shr216 = lshr i32 %149, 27
  %or217 = or i32 %shl215, %shr216
  %add218 = add i32 %add214, %or217
  %150 = load i32, i32* %a, align 4, !tbaa !15
  %add219 = add i32 %150, %add218
  store i32 %add219, i32* %a, align 4, !tbaa !15
  %151 = load i32, i32* %c, align 4, !tbaa !15
  %shl220 = shl i32 %151, 30
  %152 = load i32, i32* %c, align 4, !tbaa !15
  %shr221 = lshr i32 %152, 2
  %or222 = or i32 %shl220, %shr221
  store i32 %or222, i32* %c, align 4, !tbaa !15
  %153 = load i32, i32* %b, align 4, !tbaa !15
  %154 = load i32, i32* %c, align 4, !tbaa !15
  %155 = load i32, i32* %d, align 4, !tbaa !15
  %xor223 = xor i32 %154, %155
  %and224 = and i32 %153, %xor223
  %156 = load i32, i32* %d, align 4, !tbaa !15
  %xor225 = xor i32 %and224, %156
  %arraydecay226 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call227 = call i32 @blk0(%union.char64long16* %arraydecay226, i32 15)
  %add228 = add i32 %xor225, %call227
  %add229 = add i32 %add228, 1518500249
  %157 = load i32, i32* %a, align 4, !tbaa !15
  %shl230 = shl i32 %157, 5
  %158 = load i32, i32* %a, align 4, !tbaa !15
  %shr231 = lshr i32 %158, 27
  %or232 = or i32 %shl230, %shr231
  %add233 = add i32 %add229, %or232
  %159 = load i32, i32* %e, align 4, !tbaa !15
  %add234 = add i32 %159, %add233
  store i32 %add234, i32* %e, align 4, !tbaa !15
  %160 = load i32, i32* %b, align 4, !tbaa !15
  %shl235 = shl i32 %160, 30
  %161 = load i32, i32* %b, align 4, !tbaa !15
  %shr236 = lshr i32 %161, 2
  %or237 = or i32 %shl235, %shr236
  store i32 %or237, i32* %b, align 4, !tbaa !15
  %162 = load i32, i32* %a, align 4, !tbaa !15
  %163 = load i32, i32* %b, align 4, !tbaa !15
  %164 = load i32, i32* %c, align 4, !tbaa !15
  %xor238 = xor i32 %163, %164
  %and239 = and i32 %162, %xor238
  %165 = load i32, i32* %c, align 4, !tbaa !15
  %xor240 = xor i32 %and239, %165
  %arraydecay241 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l = bitcast %union.char64long16* %arraydecay241 to [16 x i32]*
  %arrayidx242 = getelementptr inbounds [16 x i32], [16 x i32]* %l, i64 0, i64 13
  %166 = load i32, i32* %arrayidx242, align 4, !tbaa !14
  %arraydecay243 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l244 = bitcast %union.char64long16* %arraydecay243 to [16 x i32]*
  %arrayidx245 = getelementptr inbounds [16 x i32], [16 x i32]* %l244, i64 0, i64 8
  %167 = load i32, i32* %arrayidx245, align 16, !tbaa !14
  %xor246 = xor i32 %166, %167
  %arraydecay247 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l248 = bitcast %union.char64long16* %arraydecay247 to [16 x i32]*
  %arrayidx249 = getelementptr inbounds [16 x i32], [16 x i32]* %l248, i64 0, i64 2
  %168 = load i32, i32* %arrayidx249, align 8, !tbaa !14
  %xor250 = xor i32 %xor246, %168
  %arraydecay251 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l252 = bitcast %union.char64long16* %arraydecay251 to [16 x i32]*
  %arrayidx253 = getelementptr inbounds [16 x i32], [16 x i32]* %l252, i64 0, i64 0
  %169 = load i32, i32* %arrayidx253, align 16, !tbaa !14
  %xor254 = xor i32 %xor250, %169
  %shl255 = shl i32 %xor254, 1
  %arraydecay256 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l257 = bitcast %union.char64long16* %arraydecay256 to [16 x i32]*
  %arrayidx258 = getelementptr inbounds [16 x i32], [16 x i32]* %l257, i64 0, i64 13
  %170 = load i32, i32* %arrayidx258, align 4, !tbaa !14
  %arraydecay259 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l260 = bitcast %union.char64long16* %arraydecay259 to [16 x i32]*
  %arrayidx261 = getelementptr inbounds [16 x i32], [16 x i32]* %l260, i64 0, i64 8
  %171 = load i32, i32* %arrayidx261, align 16, !tbaa !14
  %xor262 = xor i32 %170, %171
  %arraydecay263 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l264 = bitcast %union.char64long16* %arraydecay263 to [16 x i32]*
  %arrayidx265 = getelementptr inbounds [16 x i32], [16 x i32]* %l264, i64 0, i64 2
  %172 = load i32, i32* %arrayidx265, align 8, !tbaa !14
  %xor266 = xor i32 %xor262, %172
  %arraydecay267 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l268 = bitcast %union.char64long16* %arraydecay267 to [16 x i32]*
  %arrayidx269 = getelementptr inbounds [16 x i32], [16 x i32]* %l268, i64 0, i64 0
  %173 = load i32, i32* %arrayidx269, align 16, !tbaa !14
  %xor270 = xor i32 %xor266, %173
  %shr271 = lshr i32 %xor270, 31
  %or272 = or i32 %shl255, %shr271
  %arraydecay273 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l274 = bitcast %union.char64long16* %arraydecay273 to [16 x i32]*
  %arrayidx275 = getelementptr inbounds [16 x i32], [16 x i32]* %l274, i64 0, i64 0
  store i32 %or272, i32* %arrayidx275, align 16, !tbaa !14
  %add276 = add i32 %xor240, %or272
  %add277 = add i32 %add276, 1518500249
  %174 = load i32, i32* %e, align 4, !tbaa !15
  %shl278 = shl i32 %174, 5
  %175 = load i32, i32* %e, align 4, !tbaa !15
  %shr279 = lshr i32 %175, 27
  %or280 = or i32 %shl278, %shr279
  %add281 = add i32 %add277, %or280
  %176 = load i32, i32* %d, align 4, !tbaa !15
  %add282 = add i32 %176, %add281
  store i32 %add282, i32* %d, align 4, !tbaa !15
  %177 = load i32, i32* %a, align 4, !tbaa !15
  %shl283 = shl i32 %177, 30
  %178 = load i32, i32* %a, align 4, !tbaa !15
  %shr284 = lshr i32 %178, 2
  %or285 = or i32 %shl283, %shr284
  store i32 %or285, i32* %a, align 4, !tbaa !15
  %179 = load i32, i32* %e, align 4, !tbaa !15
  %180 = load i32, i32* %a, align 4, !tbaa !15
  %181 = load i32, i32* %b, align 4, !tbaa !15
  %xor286 = xor i32 %180, %181
  %and287 = and i32 %179, %xor286
  %182 = load i32, i32* %b, align 4, !tbaa !15
  %xor288 = xor i32 %and287, %182
  %arraydecay289 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l290 = bitcast %union.char64long16* %arraydecay289 to [16 x i32]*
  %arrayidx291 = getelementptr inbounds [16 x i32], [16 x i32]* %l290, i64 0, i64 14
  %183 = load i32, i32* %arrayidx291, align 8, !tbaa !14
  %arraydecay292 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l293 = bitcast %union.char64long16* %arraydecay292 to [16 x i32]*
  %arrayidx294 = getelementptr inbounds [16 x i32], [16 x i32]* %l293, i64 0, i64 9
  %184 = load i32, i32* %arrayidx294, align 4, !tbaa !14
  %xor295 = xor i32 %183, %184
  %arraydecay296 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l297 = bitcast %union.char64long16* %arraydecay296 to [16 x i32]*
  %arrayidx298 = getelementptr inbounds [16 x i32], [16 x i32]* %l297, i64 0, i64 3
  %185 = load i32, i32* %arrayidx298, align 4, !tbaa !14
  %xor299 = xor i32 %xor295, %185
  %arraydecay300 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l301 = bitcast %union.char64long16* %arraydecay300 to [16 x i32]*
  %arrayidx302 = getelementptr inbounds [16 x i32], [16 x i32]* %l301, i64 0, i64 1
  %186 = load i32, i32* %arrayidx302, align 4, !tbaa !14
  %xor303 = xor i32 %xor299, %186
  %shl304 = shl i32 %xor303, 1
  %arraydecay305 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l306 = bitcast %union.char64long16* %arraydecay305 to [16 x i32]*
  %arrayidx307 = getelementptr inbounds [16 x i32], [16 x i32]* %l306, i64 0, i64 14
  %187 = load i32, i32* %arrayidx307, align 8, !tbaa !14
  %arraydecay308 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l309 = bitcast %union.char64long16* %arraydecay308 to [16 x i32]*
  %arrayidx310 = getelementptr inbounds [16 x i32], [16 x i32]* %l309, i64 0, i64 9
  %188 = load i32, i32* %arrayidx310, align 4, !tbaa !14
  %xor311 = xor i32 %187, %188
  %arraydecay312 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l313 = bitcast %union.char64long16* %arraydecay312 to [16 x i32]*
  %arrayidx314 = getelementptr inbounds [16 x i32], [16 x i32]* %l313, i64 0, i64 3
  %189 = load i32, i32* %arrayidx314, align 4, !tbaa !14
  %xor315 = xor i32 %xor311, %189
  %arraydecay316 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l317 = bitcast %union.char64long16* %arraydecay316 to [16 x i32]*
  %arrayidx318 = getelementptr inbounds [16 x i32], [16 x i32]* %l317, i64 0, i64 1
  %190 = load i32, i32* %arrayidx318, align 4, !tbaa !14
  %xor319 = xor i32 %xor315, %190
  %shr320 = lshr i32 %xor319, 31
  %or321 = or i32 %shl304, %shr320
  %arraydecay322 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l323 = bitcast %union.char64long16* %arraydecay322 to [16 x i32]*
  %arrayidx324 = getelementptr inbounds [16 x i32], [16 x i32]* %l323, i64 0, i64 1
  store i32 %or321, i32* %arrayidx324, align 4, !tbaa !14
  %add325 = add i32 %xor288, %or321
  %add326 = add i32 %add325, 1518500249
  %191 = load i32, i32* %d, align 4, !tbaa !15
  %shl327 = shl i32 %191, 5
  %192 = load i32, i32* %d, align 4, !tbaa !15
  %shr328 = lshr i32 %192, 27
  %or329 = or i32 %shl327, %shr328
  %add330 = add i32 %add326, %or329
  %193 = load i32, i32* %c, align 4, !tbaa !15
  %add331 = add i32 %193, %add330
  store i32 %add331, i32* %c, align 4, !tbaa !15
  %194 = load i32, i32* %e, align 4, !tbaa !15
  %shl332 = shl i32 %194, 30
  %195 = load i32, i32* %e, align 4, !tbaa !15
  %shr333 = lshr i32 %195, 2
  %or334 = or i32 %shl332, %shr333
  store i32 %or334, i32* %e, align 4, !tbaa !15
  %196 = load i32, i32* %d, align 4, !tbaa !15
  %197 = load i32, i32* %e, align 4, !tbaa !15
  %198 = load i32, i32* %a, align 4, !tbaa !15
  %xor335 = xor i32 %197, %198
  %and336 = and i32 %196, %xor335
  %199 = load i32, i32* %a, align 4, !tbaa !15
  %xor337 = xor i32 %and336, %199
  %arraydecay338 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l339 = bitcast %union.char64long16* %arraydecay338 to [16 x i32]*
  %arrayidx340 = getelementptr inbounds [16 x i32], [16 x i32]* %l339, i64 0, i64 15
  %200 = load i32, i32* %arrayidx340, align 4, !tbaa !14
  %arraydecay341 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l342 = bitcast %union.char64long16* %arraydecay341 to [16 x i32]*
  %arrayidx343 = getelementptr inbounds [16 x i32], [16 x i32]* %l342, i64 0, i64 10
  %201 = load i32, i32* %arrayidx343, align 8, !tbaa !14
  %xor344 = xor i32 %200, %201
  %arraydecay345 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l346 = bitcast %union.char64long16* %arraydecay345 to [16 x i32]*
  %arrayidx347 = getelementptr inbounds [16 x i32], [16 x i32]* %l346, i64 0, i64 4
  %202 = load i32, i32* %arrayidx347, align 16, !tbaa !14
  %xor348 = xor i32 %xor344, %202
  %arraydecay349 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l350 = bitcast %union.char64long16* %arraydecay349 to [16 x i32]*
  %arrayidx351 = getelementptr inbounds [16 x i32], [16 x i32]* %l350, i64 0, i64 2
  %203 = load i32, i32* %arrayidx351, align 8, !tbaa !14
  %xor352 = xor i32 %xor348, %203
  %shl353 = shl i32 %xor352, 1
  %arraydecay354 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l355 = bitcast %union.char64long16* %arraydecay354 to [16 x i32]*
  %arrayidx356 = getelementptr inbounds [16 x i32], [16 x i32]* %l355, i64 0, i64 15
  %204 = load i32, i32* %arrayidx356, align 4, !tbaa !14
  %arraydecay357 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l358 = bitcast %union.char64long16* %arraydecay357 to [16 x i32]*
  %arrayidx359 = getelementptr inbounds [16 x i32], [16 x i32]* %l358, i64 0, i64 10
  %205 = load i32, i32* %arrayidx359, align 8, !tbaa !14
  %xor360 = xor i32 %204, %205
  %arraydecay361 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l362 = bitcast %union.char64long16* %arraydecay361 to [16 x i32]*
  %arrayidx363 = getelementptr inbounds [16 x i32], [16 x i32]* %l362, i64 0, i64 4
  %206 = load i32, i32* %arrayidx363, align 16, !tbaa !14
  %xor364 = xor i32 %xor360, %206
  %arraydecay365 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l366 = bitcast %union.char64long16* %arraydecay365 to [16 x i32]*
  %arrayidx367 = getelementptr inbounds [16 x i32], [16 x i32]* %l366, i64 0, i64 2
  %207 = load i32, i32* %arrayidx367, align 8, !tbaa !14
  %xor368 = xor i32 %xor364, %207
  %shr369 = lshr i32 %xor368, 31
  %or370 = or i32 %shl353, %shr369
  %arraydecay371 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l372 = bitcast %union.char64long16* %arraydecay371 to [16 x i32]*
  %arrayidx373 = getelementptr inbounds [16 x i32], [16 x i32]* %l372, i64 0, i64 2
  store i32 %or370, i32* %arrayidx373, align 8, !tbaa !14
  %add374 = add i32 %xor337, %or370
  %add375 = add i32 %add374, 1518500249
  %208 = load i32, i32* %c, align 4, !tbaa !15
  %shl376 = shl i32 %208, 5
  %209 = load i32, i32* %c, align 4, !tbaa !15
  %shr377 = lshr i32 %209, 27
  %or378 = or i32 %shl376, %shr377
  %add379 = add i32 %add375, %or378
  %210 = load i32, i32* %b, align 4, !tbaa !15
  %add380 = add i32 %210, %add379
  store i32 %add380, i32* %b, align 4, !tbaa !15
  %211 = load i32, i32* %d, align 4, !tbaa !15
  %shl381 = shl i32 %211, 30
  %212 = load i32, i32* %d, align 4, !tbaa !15
  %shr382 = lshr i32 %212, 2
  %or383 = or i32 %shl381, %shr382
  store i32 %or383, i32* %d, align 4, !tbaa !15
  %213 = load i32, i32* %c, align 4, !tbaa !15
  %214 = load i32, i32* %d, align 4, !tbaa !15
  %215 = load i32, i32* %e, align 4, !tbaa !15
  %xor384 = xor i32 %214, %215
  %and385 = and i32 %213, %xor384
  %216 = load i32, i32* %e, align 4, !tbaa !15
  %xor386 = xor i32 %and385, %216
  %arraydecay387 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l388 = bitcast %union.char64long16* %arraydecay387 to [16 x i32]*
  %arrayidx389 = getelementptr inbounds [16 x i32], [16 x i32]* %l388, i64 0, i64 0
  %217 = load i32, i32* %arrayidx389, align 16, !tbaa !14
  %arraydecay390 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l391 = bitcast %union.char64long16* %arraydecay390 to [16 x i32]*
  %arrayidx392 = getelementptr inbounds [16 x i32], [16 x i32]* %l391, i64 0, i64 11
  %218 = load i32, i32* %arrayidx392, align 4, !tbaa !14
  %xor393 = xor i32 %217, %218
  %arraydecay394 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l395 = bitcast %union.char64long16* %arraydecay394 to [16 x i32]*
  %arrayidx396 = getelementptr inbounds [16 x i32], [16 x i32]* %l395, i64 0, i64 5
  %219 = load i32, i32* %arrayidx396, align 4, !tbaa !14
  %xor397 = xor i32 %xor393, %219
  %arraydecay398 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l399 = bitcast %union.char64long16* %arraydecay398 to [16 x i32]*
  %arrayidx400 = getelementptr inbounds [16 x i32], [16 x i32]* %l399, i64 0, i64 3
  %220 = load i32, i32* %arrayidx400, align 4, !tbaa !14
  %xor401 = xor i32 %xor397, %220
  %shl402 = shl i32 %xor401, 1
  %arraydecay403 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l404 = bitcast %union.char64long16* %arraydecay403 to [16 x i32]*
  %arrayidx405 = getelementptr inbounds [16 x i32], [16 x i32]* %l404, i64 0, i64 0
  %221 = load i32, i32* %arrayidx405, align 16, !tbaa !14
  %arraydecay406 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l407 = bitcast %union.char64long16* %arraydecay406 to [16 x i32]*
  %arrayidx408 = getelementptr inbounds [16 x i32], [16 x i32]* %l407, i64 0, i64 11
  %222 = load i32, i32* %arrayidx408, align 4, !tbaa !14
  %xor409 = xor i32 %221, %222
  %arraydecay410 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l411 = bitcast %union.char64long16* %arraydecay410 to [16 x i32]*
  %arrayidx412 = getelementptr inbounds [16 x i32], [16 x i32]* %l411, i64 0, i64 5
  %223 = load i32, i32* %arrayidx412, align 4, !tbaa !14
  %xor413 = xor i32 %xor409, %223
  %arraydecay414 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l415 = bitcast %union.char64long16* %arraydecay414 to [16 x i32]*
  %arrayidx416 = getelementptr inbounds [16 x i32], [16 x i32]* %l415, i64 0, i64 3
  %224 = load i32, i32* %arrayidx416, align 4, !tbaa !14
  %xor417 = xor i32 %xor413, %224
  %shr418 = lshr i32 %xor417, 31
  %or419 = or i32 %shl402, %shr418
  %arraydecay420 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l421 = bitcast %union.char64long16* %arraydecay420 to [16 x i32]*
  %arrayidx422 = getelementptr inbounds [16 x i32], [16 x i32]* %l421, i64 0, i64 3
  store i32 %or419, i32* %arrayidx422, align 4, !tbaa !14
  %add423 = add i32 %xor386, %or419
  %add424 = add i32 %add423, 1518500249
  %225 = load i32, i32* %b, align 4, !tbaa !15
  %shl425 = shl i32 %225, 5
  %226 = load i32, i32* %b, align 4, !tbaa !15
  %shr426 = lshr i32 %226, 27
  %or427 = or i32 %shl425, %shr426
  %add428 = add i32 %add424, %or427
  %227 = load i32, i32* %a, align 4, !tbaa !15
  %add429 = add i32 %227, %add428
  store i32 %add429, i32* %a, align 4, !tbaa !15
  %228 = load i32, i32* %c, align 4, !tbaa !15
  %shl430 = shl i32 %228, 30
  %229 = load i32, i32* %c, align 4, !tbaa !15
  %shr431 = lshr i32 %229, 2
  %or432 = or i32 %shl430, %shr431
  store i32 %or432, i32* %c, align 4, !tbaa !15
  %230 = load i32, i32* %b, align 4, !tbaa !15
  %231 = load i32, i32* %c, align 4, !tbaa !15
  %xor433 = xor i32 %230, %231
  %232 = load i32, i32* %d, align 4, !tbaa !15
  %xor434 = xor i32 %xor433, %232
  %arraydecay435 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l436 = bitcast %union.char64long16* %arraydecay435 to [16 x i32]*
  %arrayidx437 = getelementptr inbounds [16 x i32], [16 x i32]* %l436, i64 0, i64 1
  %233 = load i32, i32* %arrayidx437, align 4, !tbaa !14
  %arraydecay438 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l439 = bitcast %union.char64long16* %arraydecay438 to [16 x i32]*
  %arrayidx440 = getelementptr inbounds [16 x i32], [16 x i32]* %l439, i64 0, i64 12
  %234 = load i32, i32* %arrayidx440, align 16, !tbaa !14
  %xor441 = xor i32 %233, %234
  %arraydecay442 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l443 = bitcast %union.char64long16* %arraydecay442 to [16 x i32]*
  %arrayidx444 = getelementptr inbounds [16 x i32], [16 x i32]* %l443, i64 0, i64 6
  %235 = load i32, i32* %arrayidx444, align 8, !tbaa !14
  %xor445 = xor i32 %xor441, %235
  %arraydecay446 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l447 = bitcast %union.char64long16* %arraydecay446 to [16 x i32]*
  %arrayidx448 = getelementptr inbounds [16 x i32], [16 x i32]* %l447, i64 0, i64 4
  %236 = load i32, i32* %arrayidx448, align 16, !tbaa !14
  %xor449 = xor i32 %xor445, %236
  %shl450 = shl i32 %xor449, 1
  %arraydecay451 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l452 = bitcast %union.char64long16* %arraydecay451 to [16 x i32]*
  %arrayidx453 = getelementptr inbounds [16 x i32], [16 x i32]* %l452, i64 0, i64 1
  %237 = load i32, i32* %arrayidx453, align 4, !tbaa !14
  %arraydecay454 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l455 = bitcast %union.char64long16* %arraydecay454 to [16 x i32]*
  %arrayidx456 = getelementptr inbounds [16 x i32], [16 x i32]* %l455, i64 0, i64 12
  %238 = load i32, i32* %arrayidx456, align 16, !tbaa !14
  %xor457 = xor i32 %237, %238
  %arraydecay458 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l459 = bitcast %union.char64long16* %arraydecay458 to [16 x i32]*
  %arrayidx460 = getelementptr inbounds [16 x i32], [16 x i32]* %l459, i64 0, i64 6
  %239 = load i32, i32* %arrayidx460, align 8, !tbaa !14
  %xor461 = xor i32 %xor457, %239
  %arraydecay462 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l463 = bitcast %union.char64long16* %arraydecay462 to [16 x i32]*
  %arrayidx464 = getelementptr inbounds [16 x i32], [16 x i32]* %l463, i64 0, i64 4
  %240 = load i32, i32* %arrayidx464, align 16, !tbaa !14
  %xor465 = xor i32 %xor461, %240
  %shr466 = lshr i32 %xor465, 31
  %or467 = or i32 %shl450, %shr466
  %arraydecay468 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l469 = bitcast %union.char64long16* %arraydecay468 to [16 x i32]*
  %arrayidx470 = getelementptr inbounds [16 x i32], [16 x i32]* %l469, i64 0, i64 4
  store i32 %or467, i32* %arrayidx470, align 16, !tbaa !14
  %add471 = add i32 %xor434, %or467
  %add472 = add i32 %add471, 1859775393
  %241 = load i32, i32* %a, align 4, !tbaa !15
  %shl473 = shl i32 %241, 5
  %242 = load i32, i32* %a, align 4, !tbaa !15
  %shr474 = lshr i32 %242, 27
  %or475 = or i32 %shl473, %shr474
  %add476 = add i32 %add472, %or475
  %243 = load i32, i32* %e, align 4, !tbaa !15
  %add477 = add i32 %243, %add476
  store i32 %add477, i32* %e, align 4, !tbaa !15
  %244 = load i32, i32* %b, align 4, !tbaa !15
  %shl478 = shl i32 %244, 30
  %245 = load i32, i32* %b, align 4, !tbaa !15
  %shr479 = lshr i32 %245, 2
  %or480 = or i32 %shl478, %shr479
  store i32 %or480, i32* %b, align 4, !tbaa !15
  %246 = load i32, i32* %a, align 4, !tbaa !15
  %247 = load i32, i32* %b, align 4, !tbaa !15
  %xor481 = xor i32 %246, %247
  %248 = load i32, i32* %c, align 4, !tbaa !15
  %xor482 = xor i32 %xor481, %248
  %arraydecay483 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l484 = bitcast %union.char64long16* %arraydecay483 to [16 x i32]*
  %arrayidx485 = getelementptr inbounds [16 x i32], [16 x i32]* %l484, i64 0, i64 2
  %249 = load i32, i32* %arrayidx485, align 8, !tbaa !14
  %arraydecay486 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l487 = bitcast %union.char64long16* %arraydecay486 to [16 x i32]*
  %arrayidx488 = getelementptr inbounds [16 x i32], [16 x i32]* %l487, i64 0, i64 13
  %250 = load i32, i32* %arrayidx488, align 4, !tbaa !14
  %xor489 = xor i32 %249, %250
  %arraydecay490 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l491 = bitcast %union.char64long16* %arraydecay490 to [16 x i32]*
  %arrayidx492 = getelementptr inbounds [16 x i32], [16 x i32]* %l491, i64 0, i64 7
  %251 = load i32, i32* %arrayidx492, align 4, !tbaa !14
  %xor493 = xor i32 %xor489, %251
  %arraydecay494 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l495 = bitcast %union.char64long16* %arraydecay494 to [16 x i32]*
  %arrayidx496 = getelementptr inbounds [16 x i32], [16 x i32]* %l495, i64 0, i64 5
  %252 = load i32, i32* %arrayidx496, align 4, !tbaa !14
  %xor497 = xor i32 %xor493, %252
  %shl498 = shl i32 %xor497, 1
  %arraydecay499 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l500 = bitcast %union.char64long16* %arraydecay499 to [16 x i32]*
  %arrayidx501 = getelementptr inbounds [16 x i32], [16 x i32]* %l500, i64 0, i64 2
  %253 = load i32, i32* %arrayidx501, align 8, !tbaa !14
  %arraydecay502 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l503 = bitcast %union.char64long16* %arraydecay502 to [16 x i32]*
  %arrayidx504 = getelementptr inbounds [16 x i32], [16 x i32]* %l503, i64 0, i64 13
  %254 = load i32, i32* %arrayidx504, align 4, !tbaa !14
  %xor505 = xor i32 %253, %254
  %arraydecay506 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l507 = bitcast %union.char64long16* %arraydecay506 to [16 x i32]*
  %arrayidx508 = getelementptr inbounds [16 x i32], [16 x i32]* %l507, i64 0, i64 7
  %255 = load i32, i32* %arrayidx508, align 4, !tbaa !14
  %xor509 = xor i32 %xor505, %255
  %arraydecay510 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l511 = bitcast %union.char64long16* %arraydecay510 to [16 x i32]*
  %arrayidx512 = getelementptr inbounds [16 x i32], [16 x i32]* %l511, i64 0, i64 5
  %256 = load i32, i32* %arrayidx512, align 4, !tbaa !14
  %xor513 = xor i32 %xor509, %256
  %shr514 = lshr i32 %xor513, 31
  %or515 = or i32 %shl498, %shr514
  %arraydecay516 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l517 = bitcast %union.char64long16* %arraydecay516 to [16 x i32]*
  %arrayidx518 = getelementptr inbounds [16 x i32], [16 x i32]* %l517, i64 0, i64 5
  store i32 %or515, i32* %arrayidx518, align 4, !tbaa !14
  %add519 = add i32 %xor482, %or515
  %add520 = add i32 %add519, 1859775393
  %257 = load i32, i32* %e, align 4, !tbaa !15
  %shl521 = shl i32 %257, 5
  %258 = load i32, i32* %e, align 4, !tbaa !15
  %shr522 = lshr i32 %258, 27
  %or523 = or i32 %shl521, %shr522
  %add524 = add i32 %add520, %or523
  %259 = load i32, i32* %d, align 4, !tbaa !15
  %add525 = add i32 %259, %add524
  store i32 %add525, i32* %d, align 4, !tbaa !15
  %260 = load i32, i32* %a, align 4, !tbaa !15
  %shl526 = shl i32 %260, 30
  %261 = load i32, i32* %a, align 4, !tbaa !15
  %shr527 = lshr i32 %261, 2
  %or528 = or i32 %shl526, %shr527
  store i32 %or528, i32* %a, align 4, !tbaa !15
  %262 = load i32, i32* %e, align 4, !tbaa !15
  %263 = load i32, i32* %a, align 4, !tbaa !15
  %xor529 = xor i32 %262, %263
  %264 = load i32, i32* %b, align 4, !tbaa !15
  %xor530 = xor i32 %xor529, %264
  %arraydecay531 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l532 = bitcast %union.char64long16* %arraydecay531 to [16 x i32]*
  %arrayidx533 = getelementptr inbounds [16 x i32], [16 x i32]* %l532, i64 0, i64 3
  %265 = load i32, i32* %arrayidx533, align 4, !tbaa !14
  %arraydecay534 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l535 = bitcast %union.char64long16* %arraydecay534 to [16 x i32]*
  %arrayidx536 = getelementptr inbounds [16 x i32], [16 x i32]* %l535, i64 0, i64 14
  %266 = load i32, i32* %arrayidx536, align 8, !tbaa !14
  %xor537 = xor i32 %265, %266
  %arraydecay538 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l539 = bitcast %union.char64long16* %arraydecay538 to [16 x i32]*
  %arrayidx540 = getelementptr inbounds [16 x i32], [16 x i32]* %l539, i64 0, i64 8
  %267 = load i32, i32* %arrayidx540, align 16, !tbaa !14
  %xor541 = xor i32 %xor537, %267
  %arraydecay542 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l543 = bitcast %union.char64long16* %arraydecay542 to [16 x i32]*
  %arrayidx544 = getelementptr inbounds [16 x i32], [16 x i32]* %l543, i64 0, i64 6
  %268 = load i32, i32* %arrayidx544, align 8, !tbaa !14
  %xor545 = xor i32 %xor541, %268
  %shl546 = shl i32 %xor545, 1
  %arraydecay547 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l548 = bitcast %union.char64long16* %arraydecay547 to [16 x i32]*
  %arrayidx549 = getelementptr inbounds [16 x i32], [16 x i32]* %l548, i64 0, i64 3
  %269 = load i32, i32* %arrayidx549, align 4, !tbaa !14
  %arraydecay550 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l551 = bitcast %union.char64long16* %arraydecay550 to [16 x i32]*
  %arrayidx552 = getelementptr inbounds [16 x i32], [16 x i32]* %l551, i64 0, i64 14
  %270 = load i32, i32* %arrayidx552, align 8, !tbaa !14
  %xor553 = xor i32 %269, %270
  %arraydecay554 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l555 = bitcast %union.char64long16* %arraydecay554 to [16 x i32]*
  %arrayidx556 = getelementptr inbounds [16 x i32], [16 x i32]* %l555, i64 0, i64 8
  %271 = load i32, i32* %arrayidx556, align 16, !tbaa !14
  %xor557 = xor i32 %xor553, %271
  %arraydecay558 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l559 = bitcast %union.char64long16* %arraydecay558 to [16 x i32]*
  %arrayidx560 = getelementptr inbounds [16 x i32], [16 x i32]* %l559, i64 0, i64 6
  %272 = load i32, i32* %arrayidx560, align 8, !tbaa !14
  %xor561 = xor i32 %xor557, %272
  %shr562 = lshr i32 %xor561, 31
  %or563 = or i32 %shl546, %shr562
  %arraydecay564 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l565 = bitcast %union.char64long16* %arraydecay564 to [16 x i32]*
  %arrayidx566 = getelementptr inbounds [16 x i32], [16 x i32]* %l565, i64 0, i64 6
  store i32 %or563, i32* %arrayidx566, align 8, !tbaa !14
  %add567 = add i32 %xor530, %or563
  %add568 = add i32 %add567, 1859775393
  %273 = load i32, i32* %d, align 4, !tbaa !15
  %shl569 = shl i32 %273, 5
  %274 = load i32, i32* %d, align 4, !tbaa !15
  %shr570 = lshr i32 %274, 27
  %or571 = or i32 %shl569, %shr570
  %add572 = add i32 %add568, %or571
  %275 = load i32, i32* %c, align 4, !tbaa !15
  %add573 = add i32 %275, %add572
  store i32 %add573, i32* %c, align 4, !tbaa !15
  %276 = load i32, i32* %e, align 4, !tbaa !15
  %shl574 = shl i32 %276, 30
  %277 = load i32, i32* %e, align 4, !tbaa !15
  %shr575 = lshr i32 %277, 2
  %or576 = or i32 %shl574, %shr575
  store i32 %or576, i32* %e, align 4, !tbaa !15
  %278 = load i32, i32* %d, align 4, !tbaa !15
  %279 = load i32, i32* %e, align 4, !tbaa !15
  %xor577 = xor i32 %278, %279
  %280 = load i32, i32* %a, align 4, !tbaa !15
  %xor578 = xor i32 %xor577, %280
  %arraydecay579 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l580 = bitcast %union.char64long16* %arraydecay579 to [16 x i32]*
  %arrayidx581 = getelementptr inbounds [16 x i32], [16 x i32]* %l580, i64 0, i64 4
  %281 = load i32, i32* %arrayidx581, align 16, !tbaa !14
  %arraydecay582 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l583 = bitcast %union.char64long16* %arraydecay582 to [16 x i32]*
  %arrayidx584 = getelementptr inbounds [16 x i32], [16 x i32]* %l583, i64 0, i64 15
  %282 = load i32, i32* %arrayidx584, align 4, !tbaa !14
  %xor585 = xor i32 %281, %282
  %arraydecay586 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l587 = bitcast %union.char64long16* %arraydecay586 to [16 x i32]*
  %arrayidx588 = getelementptr inbounds [16 x i32], [16 x i32]* %l587, i64 0, i64 9
  %283 = load i32, i32* %arrayidx588, align 4, !tbaa !14
  %xor589 = xor i32 %xor585, %283
  %arraydecay590 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l591 = bitcast %union.char64long16* %arraydecay590 to [16 x i32]*
  %arrayidx592 = getelementptr inbounds [16 x i32], [16 x i32]* %l591, i64 0, i64 7
  %284 = load i32, i32* %arrayidx592, align 4, !tbaa !14
  %xor593 = xor i32 %xor589, %284
  %shl594 = shl i32 %xor593, 1
  %arraydecay595 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l596 = bitcast %union.char64long16* %arraydecay595 to [16 x i32]*
  %arrayidx597 = getelementptr inbounds [16 x i32], [16 x i32]* %l596, i64 0, i64 4
  %285 = load i32, i32* %arrayidx597, align 16, !tbaa !14
  %arraydecay598 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l599 = bitcast %union.char64long16* %arraydecay598 to [16 x i32]*
  %arrayidx600 = getelementptr inbounds [16 x i32], [16 x i32]* %l599, i64 0, i64 15
  %286 = load i32, i32* %arrayidx600, align 4, !tbaa !14
  %xor601 = xor i32 %285, %286
  %arraydecay602 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l603 = bitcast %union.char64long16* %arraydecay602 to [16 x i32]*
  %arrayidx604 = getelementptr inbounds [16 x i32], [16 x i32]* %l603, i64 0, i64 9
  %287 = load i32, i32* %arrayidx604, align 4, !tbaa !14
  %xor605 = xor i32 %xor601, %287
  %arraydecay606 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l607 = bitcast %union.char64long16* %arraydecay606 to [16 x i32]*
  %arrayidx608 = getelementptr inbounds [16 x i32], [16 x i32]* %l607, i64 0, i64 7
  %288 = load i32, i32* %arrayidx608, align 4, !tbaa !14
  %xor609 = xor i32 %xor605, %288
  %shr610 = lshr i32 %xor609, 31
  %or611 = or i32 %shl594, %shr610
  %arraydecay612 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l613 = bitcast %union.char64long16* %arraydecay612 to [16 x i32]*
  %arrayidx614 = getelementptr inbounds [16 x i32], [16 x i32]* %l613, i64 0, i64 7
  store i32 %or611, i32* %arrayidx614, align 4, !tbaa !14
  %add615 = add i32 %xor578, %or611
  %add616 = add i32 %add615, 1859775393
  %289 = load i32, i32* %c, align 4, !tbaa !15
  %shl617 = shl i32 %289, 5
  %290 = load i32, i32* %c, align 4, !tbaa !15
  %shr618 = lshr i32 %290, 27
  %or619 = or i32 %shl617, %shr618
  %add620 = add i32 %add616, %or619
  %291 = load i32, i32* %b, align 4, !tbaa !15
  %add621 = add i32 %291, %add620
  store i32 %add621, i32* %b, align 4, !tbaa !15
  %292 = load i32, i32* %d, align 4, !tbaa !15
  %shl622 = shl i32 %292, 30
  %293 = load i32, i32* %d, align 4, !tbaa !15
  %shr623 = lshr i32 %293, 2
  %or624 = or i32 %shl622, %shr623
  store i32 %or624, i32* %d, align 4, !tbaa !15
  %294 = load i32, i32* %c, align 4, !tbaa !15
  %295 = load i32, i32* %d, align 4, !tbaa !15
  %xor625 = xor i32 %294, %295
  %296 = load i32, i32* %e, align 4, !tbaa !15
  %xor626 = xor i32 %xor625, %296
  %arraydecay627 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l628 = bitcast %union.char64long16* %arraydecay627 to [16 x i32]*
  %arrayidx629 = getelementptr inbounds [16 x i32], [16 x i32]* %l628, i64 0, i64 5
  %297 = load i32, i32* %arrayidx629, align 4, !tbaa !14
  %arraydecay630 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l631 = bitcast %union.char64long16* %arraydecay630 to [16 x i32]*
  %arrayidx632 = getelementptr inbounds [16 x i32], [16 x i32]* %l631, i64 0, i64 0
  %298 = load i32, i32* %arrayidx632, align 16, !tbaa !14
  %xor633 = xor i32 %297, %298
  %arraydecay634 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l635 = bitcast %union.char64long16* %arraydecay634 to [16 x i32]*
  %arrayidx636 = getelementptr inbounds [16 x i32], [16 x i32]* %l635, i64 0, i64 10
  %299 = load i32, i32* %arrayidx636, align 8, !tbaa !14
  %xor637 = xor i32 %xor633, %299
  %arraydecay638 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l639 = bitcast %union.char64long16* %arraydecay638 to [16 x i32]*
  %arrayidx640 = getelementptr inbounds [16 x i32], [16 x i32]* %l639, i64 0, i64 8
  %300 = load i32, i32* %arrayidx640, align 16, !tbaa !14
  %xor641 = xor i32 %xor637, %300
  %shl642 = shl i32 %xor641, 1
  %arraydecay643 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l644 = bitcast %union.char64long16* %arraydecay643 to [16 x i32]*
  %arrayidx645 = getelementptr inbounds [16 x i32], [16 x i32]* %l644, i64 0, i64 5
  %301 = load i32, i32* %arrayidx645, align 4, !tbaa !14
  %arraydecay646 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l647 = bitcast %union.char64long16* %arraydecay646 to [16 x i32]*
  %arrayidx648 = getelementptr inbounds [16 x i32], [16 x i32]* %l647, i64 0, i64 0
  %302 = load i32, i32* %arrayidx648, align 16, !tbaa !14
  %xor649 = xor i32 %301, %302
  %arraydecay650 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l651 = bitcast %union.char64long16* %arraydecay650 to [16 x i32]*
  %arrayidx652 = getelementptr inbounds [16 x i32], [16 x i32]* %l651, i64 0, i64 10
  %303 = load i32, i32* %arrayidx652, align 8, !tbaa !14
  %xor653 = xor i32 %xor649, %303
  %arraydecay654 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l655 = bitcast %union.char64long16* %arraydecay654 to [16 x i32]*
  %arrayidx656 = getelementptr inbounds [16 x i32], [16 x i32]* %l655, i64 0, i64 8
  %304 = load i32, i32* %arrayidx656, align 16, !tbaa !14
  %xor657 = xor i32 %xor653, %304
  %shr658 = lshr i32 %xor657, 31
  %or659 = or i32 %shl642, %shr658
  %arraydecay660 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l661 = bitcast %union.char64long16* %arraydecay660 to [16 x i32]*
  %arrayidx662 = getelementptr inbounds [16 x i32], [16 x i32]* %l661, i64 0, i64 8
  store i32 %or659, i32* %arrayidx662, align 16, !tbaa !14
  %add663 = add i32 %xor626, %or659
  %add664 = add i32 %add663, 1859775393
  %305 = load i32, i32* %b, align 4, !tbaa !15
  %shl665 = shl i32 %305, 5
  %306 = load i32, i32* %b, align 4, !tbaa !15
  %shr666 = lshr i32 %306, 27
  %or667 = or i32 %shl665, %shr666
  %add668 = add i32 %add664, %or667
  %307 = load i32, i32* %a, align 4, !tbaa !15
  %add669 = add i32 %307, %add668
  store i32 %add669, i32* %a, align 4, !tbaa !15
  %308 = load i32, i32* %c, align 4, !tbaa !15
  %shl670 = shl i32 %308, 30
  %309 = load i32, i32* %c, align 4, !tbaa !15
  %shr671 = lshr i32 %309, 2
  %or672 = or i32 %shl670, %shr671
  store i32 %or672, i32* %c, align 4, !tbaa !15
  %310 = load i32, i32* %b, align 4, !tbaa !15
  %311 = load i32, i32* %c, align 4, !tbaa !15
  %xor673 = xor i32 %310, %311
  %312 = load i32, i32* %d, align 4, !tbaa !15
  %xor674 = xor i32 %xor673, %312
  %arraydecay675 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l676 = bitcast %union.char64long16* %arraydecay675 to [16 x i32]*
  %arrayidx677 = getelementptr inbounds [16 x i32], [16 x i32]* %l676, i64 0, i64 6
  %313 = load i32, i32* %arrayidx677, align 8, !tbaa !14
  %arraydecay678 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l679 = bitcast %union.char64long16* %arraydecay678 to [16 x i32]*
  %arrayidx680 = getelementptr inbounds [16 x i32], [16 x i32]* %l679, i64 0, i64 1
  %314 = load i32, i32* %arrayidx680, align 4, !tbaa !14
  %xor681 = xor i32 %313, %314
  %arraydecay682 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l683 = bitcast %union.char64long16* %arraydecay682 to [16 x i32]*
  %arrayidx684 = getelementptr inbounds [16 x i32], [16 x i32]* %l683, i64 0, i64 11
  %315 = load i32, i32* %arrayidx684, align 4, !tbaa !14
  %xor685 = xor i32 %xor681, %315
  %arraydecay686 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l687 = bitcast %union.char64long16* %arraydecay686 to [16 x i32]*
  %arrayidx688 = getelementptr inbounds [16 x i32], [16 x i32]* %l687, i64 0, i64 9
  %316 = load i32, i32* %arrayidx688, align 4, !tbaa !14
  %xor689 = xor i32 %xor685, %316
  %shl690 = shl i32 %xor689, 1
  %arraydecay691 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l692 = bitcast %union.char64long16* %arraydecay691 to [16 x i32]*
  %arrayidx693 = getelementptr inbounds [16 x i32], [16 x i32]* %l692, i64 0, i64 6
  %317 = load i32, i32* %arrayidx693, align 8, !tbaa !14
  %arraydecay694 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l695 = bitcast %union.char64long16* %arraydecay694 to [16 x i32]*
  %arrayidx696 = getelementptr inbounds [16 x i32], [16 x i32]* %l695, i64 0, i64 1
  %318 = load i32, i32* %arrayidx696, align 4, !tbaa !14
  %xor697 = xor i32 %317, %318
  %arraydecay698 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l699 = bitcast %union.char64long16* %arraydecay698 to [16 x i32]*
  %arrayidx700 = getelementptr inbounds [16 x i32], [16 x i32]* %l699, i64 0, i64 11
  %319 = load i32, i32* %arrayidx700, align 4, !tbaa !14
  %xor701 = xor i32 %xor697, %319
  %arraydecay702 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l703 = bitcast %union.char64long16* %arraydecay702 to [16 x i32]*
  %arrayidx704 = getelementptr inbounds [16 x i32], [16 x i32]* %l703, i64 0, i64 9
  %320 = load i32, i32* %arrayidx704, align 4, !tbaa !14
  %xor705 = xor i32 %xor701, %320
  %shr706 = lshr i32 %xor705, 31
  %or707 = or i32 %shl690, %shr706
  %arraydecay708 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l709 = bitcast %union.char64long16* %arraydecay708 to [16 x i32]*
  %arrayidx710 = getelementptr inbounds [16 x i32], [16 x i32]* %l709, i64 0, i64 9
  store i32 %or707, i32* %arrayidx710, align 4, !tbaa !14
  %add711 = add i32 %xor674, %or707
  %add712 = add i32 %add711, 1859775393
  %321 = load i32, i32* %a, align 4, !tbaa !15
  %shl713 = shl i32 %321, 5
  %322 = load i32, i32* %a, align 4, !tbaa !15
  %shr714 = lshr i32 %322, 27
  %or715 = or i32 %shl713, %shr714
  %add716 = add i32 %add712, %or715
  %323 = load i32, i32* %e, align 4, !tbaa !15
  %add717 = add i32 %323, %add716
  store i32 %add717, i32* %e, align 4, !tbaa !15
  %324 = load i32, i32* %b, align 4, !tbaa !15
  %shl718 = shl i32 %324, 30
  %325 = load i32, i32* %b, align 4, !tbaa !15
  %shr719 = lshr i32 %325, 2
  %or720 = or i32 %shl718, %shr719
  store i32 %or720, i32* %b, align 4, !tbaa !15
  %326 = load i32, i32* %a, align 4, !tbaa !15
  %327 = load i32, i32* %b, align 4, !tbaa !15
  %xor721 = xor i32 %326, %327
  %328 = load i32, i32* %c, align 4, !tbaa !15
  %xor722 = xor i32 %xor721, %328
  %arraydecay723 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l724 = bitcast %union.char64long16* %arraydecay723 to [16 x i32]*
  %arrayidx725 = getelementptr inbounds [16 x i32], [16 x i32]* %l724, i64 0, i64 7
  %329 = load i32, i32* %arrayidx725, align 4, !tbaa !14
  %arraydecay726 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l727 = bitcast %union.char64long16* %arraydecay726 to [16 x i32]*
  %arrayidx728 = getelementptr inbounds [16 x i32], [16 x i32]* %l727, i64 0, i64 2
  %330 = load i32, i32* %arrayidx728, align 8, !tbaa !14
  %xor729 = xor i32 %329, %330
  %arraydecay730 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l731 = bitcast %union.char64long16* %arraydecay730 to [16 x i32]*
  %arrayidx732 = getelementptr inbounds [16 x i32], [16 x i32]* %l731, i64 0, i64 12
  %331 = load i32, i32* %arrayidx732, align 16, !tbaa !14
  %xor733 = xor i32 %xor729, %331
  %arraydecay734 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l735 = bitcast %union.char64long16* %arraydecay734 to [16 x i32]*
  %arrayidx736 = getelementptr inbounds [16 x i32], [16 x i32]* %l735, i64 0, i64 10
  %332 = load i32, i32* %arrayidx736, align 8, !tbaa !14
  %xor737 = xor i32 %xor733, %332
  %shl738 = shl i32 %xor737, 1
  %arraydecay739 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l740 = bitcast %union.char64long16* %arraydecay739 to [16 x i32]*
  %arrayidx741 = getelementptr inbounds [16 x i32], [16 x i32]* %l740, i64 0, i64 7
  %333 = load i32, i32* %arrayidx741, align 4, !tbaa !14
  %arraydecay742 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l743 = bitcast %union.char64long16* %arraydecay742 to [16 x i32]*
  %arrayidx744 = getelementptr inbounds [16 x i32], [16 x i32]* %l743, i64 0, i64 2
  %334 = load i32, i32* %arrayidx744, align 8, !tbaa !14
  %xor745 = xor i32 %333, %334
  %arraydecay746 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l747 = bitcast %union.char64long16* %arraydecay746 to [16 x i32]*
  %arrayidx748 = getelementptr inbounds [16 x i32], [16 x i32]* %l747, i64 0, i64 12
  %335 = load i32, i32* %arrayidx748, align 16, !tbaa !14
  %xor749 = xor i32 %xor745, %335
  %arraydecay750 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l751 = bitcast %union.char64long16* %arraydecay750 to [16 x i32]*
  %arrayidx752 = getelementptr inbounds [16 x i32], [16 x i32]* %l751, i64 0, i64 10
  %336 = load i32, i32* %arrayidx752, align 8, !tbaa !14
  %xor753 = xor i32 %xor749, %336
  %shr754 = lshr i32 %xor753, 31
  %or755 = or i32 %shl738, %shr754
  %arraydecay756 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l757 = bitcast %union.char64long16* %arraydecay756 to [16 x i32]*
  %arrayidx758 = getelementptr inbounds [16 x i32], [16 x i32]* %l757, i64 0, i64 10
  store i32 %or755, i32* %arrayidx758, align 8, !tbaa !14
  %add759 = add i32 %xor722, %or755
  %add760 = add i32 %add759, 1859775393
  %337 = load i32, i32* %e, align 4, !tbaa !15
  %shl761 = shl i32 %337, 5
  %338 = load i32, i32* %e, align 4, !tbaa !15
  %shr762 = lshr i32 %338, 27
  %or763 = or i32 %shl761, %shr762
  %add764 = add i32 %add760, %or763
  %339 = load i32, i32* %d, align 4, !tbaa !15
  %add765 = add i32 %339, %add764
  store i32 %add765, i32* %d, align 4, !tbaa !15
  %340 = load i32, i32* %a, align 4, !tbaa !15
  %shl766 = shl i32 %340, 30
  %341 = load i32, i32* %a, align 4, !tbaa !15
  %shr767 = lshr i32 %341, 2
  %or768 = or i32 %shl766, %shr767
  store i32 %or768, i32* %a, align 4, !tbaa !15
  %342 = load i32, i32* %e, align 4, !tbaa !15
  %343 = load i32, i32* %a, align 4, !tbaa !15
  %xor769 = xor i32 %342, %343
  %344 = load i32, i32* %b, align 4, !tbaa !15
  %xor770 = xor i32 %xor769, %344
  %arraydecay771 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l772 = bitcast %union.char64long16* %arraydecay771 to [16 x i32]*
  %arrayidx773 = getelementptr inbounds [16 x i32], [16 x i32]* %l772, i64 0, i64 8
  %345 = load i32, i32* %arrayidx773, align 16, !tbaa !14
  %arraydecay774 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l775 = bitcast %union.char64long16* %arraydecay774 to [16 x i32]*
  %arrayidx776 = getelementptr inbounds [16 x i32], [16 x i32]* %l775, i64 0, i64 3
  %346 = load i32, i32* %arrayidx776, align 4, !tbaa !14
  %xor777 = xor i32 %345, %346
  %arraydecay778 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l779 = bitcast %union.char64long16* %arraydecay778 to [16 x i32]*
  %arrayidx780 = getelementptr inbounds [16 x i32], [16 x i32]* %l779, i64 0, i64 13
  %347 = load i32, i32* %arrayidx780, align 4, !tbaa !14
  %xor781 = xor i32 %xor777, %347
  %arraydecay782 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l783 = bitcast %union.char64long16* %arraydecay782 to [16 x i32]*
  %arrayidx784 = getelementptr inbounds [16 x i32], [16 x i32]* %l783, i64 0, i64 11
  %348 = load i32, i32* %arrayidx784, align 4, !tbaa !14
  %xor785 = xor i32 %xor781, %348
  %shl786 = shl i32 %xor785, 1
  %arraydecay787 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l788 = bitcast %union.char64long16* %arraydecay787 to [16 x i32]*
  %arrayidx789 = getelementptr inbounds [16 x i32], [16 x i32]* %l788, i64 0, i64 8
  %349 = load i32, i32* %arrayidx789, align 16, !tbaa !14
  %arraydecay790 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l791 = bitcast %union.char64long16* %arraydecay790 to [16 x i32]*
  %arrayidx792 = getelementptr inbounds [16 x i32], [16 x i32]* %l791, i64 0, i64 3
  %350 = load i32, i32* %arrayidx792, align 4, !tbaa !14
  %xor793 = xor i32 %349, %350
  %arraydecay794 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l795 = bitcast %union.char64long16* %arraydecay794 to [16 x i32]*
  %arrayidx796 = getelementptr inbounds [16 x i32], [16 x i32]* %l795, i64 0, i64 13
  %351 = load i32, i32* %arrayidx796, align 4, !tbaa !14
  %xor797 = xor i32 %xor793, %351
  %arraydecay798 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l799 = bitcast %union.char64long16* %arraydecay798 to [16 x i32]*
  %arrayidx800 = getelementptr inbounds [16 x i32], [16 x i32]* %l799, i64 0, i64 11
  %352 = load i32, i32* %arrayidx800, align 4, !tbaa !14
  %xor801 = xor i32 %xor797, %352
  %shr802 = lshr i32 %xor801, 31
  %or803 = or i32 %shl786, %shr802
  %arraydecay804 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l805 = bitcast %union.char64long16* %arraydecay804 to [16 x i32]*
  %arrayidx806 = getelementptr inbounds [16 x i32], [16 x i32]* %l805, i64 0, i64 11
  store i32 %or803, i32* %arrayidx806, align 4, !tbaa !14
  %add807 = add i32 %xor770, %or803
  %add808 = add i32 %add807, 1859775393
  %353 = load i32, i32* %d, align 4, !tbaa !15
  %shl809 = shl i32 %353, 5
  %354 = load i32, i32* %d, align 4, !tbaa !15
  %shr810 = lshr i32 %354, 27
  %or811 = or i32 %shl809, %shr810
  %add812 = add i32 %add808, %or811
  %355 = load i32, i32* %c, align 4, !tbaa !15
  %add813 = add i32 %355, %add812
  store i32 %add813, i32* %c, align 4, !tbaa !15
  %356 = load i32, i32* %e, align 4, !tbaa !15
  %shl814 = shl i32 %356, 30
  %357 = load i32, i32* %e, align 4, !tbaa !15
  %shr815 = lshr i32 %357, 2
  %or816 = or i32 %shl814, %shr815
  store i32 %or816, i32* %e, align 4, !tbaa !15
  %358 = load i32, i32* %d, align 4, !tbaa !15
  %359 = load i32, i32* %e, align 4, !tbaa !15
  %xor817 = xor i32 %358, %359
  %360 = load i32, i32* %a, align 4, !tbaa !15
  %xor818 = xor i32 %xor817, %360
  %arraydecay819 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l820 = bitcast %union.char64long16* %arraydecay819 to [16 x i32]*
  %arrayidx821 = getelementptr inbounds [16 x i32], [16 x i32]* %l820, i64 0, i64 9
  %361 = load i32, i32* %arrayidx821, align 4, !tbaa !14
  %arraydecay822 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l823 = bitcast %union.char64long16* %arraydecay822 to [16 x i32]*
  %arrayidx824 = getelementptr inbounds [16 x i32], [16 x i32]* %l823, i64 0, i64 4
  %362 = load i32, i32* %arrayidx824, align 16, !tbaa !14
  %xor825 = xor i32 %361, %362
  %arraydecay826 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l827 = bitcast %union.char64long16* %arraydecay826 to [16 x i32]*
  %arrayidx828 = getelementptr inbounds [16 x i32], [16 x i32]* %l827, i64 0, i64 14
  %363 = load i32, i32* %arrayidx828, align 8, !tbaa !14
  %xor829 = xor i32 %xor825, %363
  %arraydecay830 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l831 = bitcast %union.char64long16* %arraydecay830 to [16 x i32]*
  %arrayidx832 = getelementptr inbounds [16 x i32], [16 x i32]* %l831, i64 0, i64 12
  %364 = load i32, i32* %arrayidx832, align 16, !tbaa !14
  %xor833 = xor i32 %xor829, %364
  %shl834 = shl i32 %xor833, 1
  %arraydecay835 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l836 = bitcast %union.char64long16* %arraydecay835 to [16 x i32]*
  %arrayidx837 = getelementptr inbounds [16 x i32], [16 x i32]* %l836, i64 0, i64 9
  %365 = load i32, i32* %arrayidx837, align 4, !tbaa !14
  %arraydecay838 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l839 = bitcast %union.char64long16* %arraydecay838 to [16 x i32]*
  %arrayidx840 = getelementptr inbounds [16 x i32], [16 x i32]* %l839, i64 0, i64 4
  %366 = load i32, i32* %arrayidx840, align 16, !tbaa !14
  %xor841 = xor i32 %365, %366
  %arraydecay842 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l843 = bitcast %union.char64long16* %arraydecay842 to [16 x i32]*
  %arrayidx844 = getelementptr inbounds [16 x i32], [16 x i32]* %l843, i64 0, i64 14
  %367 = load i32, i32* %arrayidx844, align 8, !tbaa !14
  %xor845 = xor i32 %xor841, %367
  %arraydecay846 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l847 = bitcast %union.char64long16* %arraydecay846 to [16 x i32]*
  %arrayidx848 = getelementptr inbounds [16 x i32], [16 x i32]* %l847, i64 0, i64 12
  %368 = load i32, i32* %arrayidx848, align 16, !tbaa !14
  %xor849 = xor i32 %xor845, %368
  %shr850 = lshr i32 %xor849, 31
  %or851 = or i32 %shl834, %shr850
  %arraydecay852 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l853 = bitcast %union.char64long16* %arraydecay852 to [16 x i32]*
  %arrayidx854 = getelementptr inbounds [16 x i32], [16 x i32]* %l853, i64 0, i64 12
  store i32 %or851, i32* %arrayidx854, align 16, !tbaa !14
  %add855 = add i32 %xor818, %or851
  %add856 = add i32 %add855, 1859775393
  %369 = load i32, i32* %c, align 4, !tbaa !15
  %shl857 = shl i32 %369, 5
  %370 = load i32, i32* %c, align 4, !tbaa !15
  %shr858 = lshr i32 %370, 27
  %or859 = or i32 %shl857, %shr858
  %add860 = add i32 %add856, %or859
  %371 = load i32, i32* %b, align 4, !tbaa !15
  %add861 = add i32 %371, %add860
  store i32 %add861, i32* %b, align 4, !tbaa !15
  %372 = load i32, i32* %d, align 4, !tbaa !15
  %shl862 = shl i32 %372, 30
  %373 = load i32, i32* %d, align 4, !tbaa !15
  %shr863 = lshr i32 %373, 2
  %or864 = or i32 %shl862, %shr863
  store i32 %or864, i32* %d, align 4, !tbaa !15
  %374 = load i32, i32* %c, align 4, !tbaa !15
  %375 = load i32, i32* %d, align 4, !tbaa !15
  %xor865 = xor i32 %374, %375
  %376 = load i32, i32* %e, align 4, !tbaa !15
  %xor866 = xor i32 %xor865, %376
  %arraydecay867 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l868 = bitcast %union.char64long16* %arraydecay867 to [16 x i32]*
  %arrayidx869 = getelementptr inbounds [16 x i32], [16 x i32]* %l868, i64 0, i64 10
  %377 = load i32, i32* %arrayidx869, align 8, !tbaa !14
  %arraydecay870 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l871 = bitcast %union.char64long16* %arraydecay870 to [16 x i32]*
  %arrayidx872 = getelementptr inbounds [16 x i32], [16 x i32]* %l871, i64 0, i64 5
  %378 = load i32, i32* %arrayidx872, align 4, !tbaa !14
  %xor873 = xor i32 %377, %378
  %arraydecay874 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l875 = bitcast %union.char64long16* %arraydecay874 to [16 x i32]*
  %arrayidx876 = getelementptr inbounds [16 x i32], [16 x i32]* %l875, i64 0, i64 15
  %379 = load i32, i32* %arrayidx876, align 4, !tbaa !14
  %xor877 = xor i32 %xor873, %379
  %arraydecay878 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l879 = bitcast %union.char64long16* %arraydecay878 to [16 x i32]*
  %arrayidx880 = getelementptr inbounds [16 x i32], [16 x i32]* %l879, i64 0, i64 13
  %380 = load i32, i32* %arrayidx880, align 4, !tbaa !14
  %xor881 = xor i32 %xor877, %380
  %shl882 = shl i32 %xor881, 1
  %arraydecay883 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l884 = bitcast %union.char64long16* %arraydecay883 to [16 x i32]*
  %arrayidx885 = getelementptr inbounds [16 x i32], [16 x i32]* %l884, i64 0, i64 10
  %381 = load i32, i32* %arrayidx885, align 8, !tbaa !14
  %arraydecay886 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l887 = bitcast %union.char64long16* %arraydecay886 to [16 x i32]*
  %arrayidx888 = getelementptr inbounds [16 x i32], [16 x i32]* %l887, i64 0, i64 5
  %382 = load i32, i32* %arrayidx888, align 4, !tbaa !14
  %xor889 = xor i32 %381, %382
  %arraydecay890 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l891 = bitcast %union.char64long16* %arraydecay890 to [16 x i32]*
  %arrayidx892 = getelementptr inbounds [16 x i32], [16 x i32]* %l891, i64 0, i64 15
  %383 = load i32, i32* %arrayidx892, align 4, !tbaa !14
  %xor893 = xor i32 %xor889, %383
  %arraydecay894 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l895 = bitcast %union.char64long16* %arraydecay894 to [16 x i32]*
  %arrayidx896 = getelementptr inbounds [16 x i32], [16 x i32]* %l895, i64 0, i64 13
  %384 = load i32, i32* %arrayidx896, align 4, !tbaa !14
  %xor897 = xor i32 %xor893, %384
  %shr898 = lshr i32 %xor897, 31
  %or899 = or i32 %shl882, %shr898
  %arraydecay900 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l901 = bitcast %union.char64long16* %arraydecay900 to [16 x i32]*
  %arrayidx902 = getelementptr inbounds [16 x i32], [16 x i32]* %l901, i64 0, i64 13
  store i32 %or899, i32* %arrayidx902, align 4, !tbaa !14
  %add903 = add i32 %xor866, %or899
  %add904 = add i32 %add903, 1859775393
  %385 = load i32, i32* %b, align 4, !tbaa !15
  %shl905 = shl i32 %385, 5
  %386 = load i32, i32* %b, align 4, !tbaa !15
  %shr906 = lshr i32 %386, 27
  %or907 = or i32 %shl905, %shr906
  %add908 = add i32 %add904, %or907
  %387 = load i32, i32* %a, align 4, !tbaa !15
  %add909 = add i32 %387, %add908
  store i32 %add909, i32* %a, align 4, !tbaa !15
  %388 = load i32, i32* %c, align 4, !tbaa !15
  %shl910 = shl i32 %388, 30
  %389 = load i32, i32* %c, align 4, !tbaa !15
  %shr911 = lshr i32 %389, 2
  %or912 = or i32 %shl910, %shr911
  store i32 %or912, i32* %c, align 4, !tbaa !15
  %390 = load i32, i32* %b, align 4, !tbaa !15
  %391 = load i32, i32* %c, align 4, !tbaa !15
  %xor913 = xor i32 %390, %391
  %392 = load i32, i32* %d, align 4, !tbaa !15
  %xor914 = xor i32 %xor913, %392
  %arraydecay915 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l916 = bitcast %union.char64long16* %arraydecay915 to [16 x i32]*
  %arrayidx917 = getelementptr inbounds [16 x i32], [16 x i32]* %l916, i64 0, i64 11
  %393 = load i32, i32* %arrayidx917, align 4, !tbaa !14
  %arraydecay918 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l919 = bitcast %union.char64long16* %arraydecay918 to [16 x i32]*
  %arrayidx920 = getelementptr inbounds [16 x i32], [16 x i32]* %l919, i64 0, i64 6
  %394 = load i32, i32* %arrayidx920, align 8, !tbaa !14
  %xor921 = xor i32 %393, %394
  %arraydecay922 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l923 = bitcast %union.char64long16* %arraydecay922 to [16 x i32]*
  %arrayidx924 = getelementptr inbounds [16 x i32], [16 x i32]* %l923, i64 0, i64 0
  %395 = load i32, i32* %arrayidx924, align 16, !tbaa !14
  %xor925 = xor i32 %xor921, %395
  %arraydecay926 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l927 = bitcast %union.char64long16* %arraydecay926 to [16 x i32]*
  %arrayidx928 = getelementptr inbounds [16 x i32], [16 x i32]* %l927, i64 0, i64 14
  %396 = load i32, i32* %arrayidx928, align 8, !tbaa !14
  %xor929 = xor i32 %xor925, %396
  %shl930 = shl i32 %xor929, 1
  %arraydecay931 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l932 = bitcast %union.char64long16* %arraydecay931 to [16 x i32]*
  %arrayidx933 = getelementptr inbounds [16 x i32], [16 x i32]* %l932, i64 0, i64 11
  %397 = load i32, i32* %arrayidx933, align 4, !tbaa !14
  %arraydecay934 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l935 = bitcast %union.char64long16* %arraydecay934 to [16 x i32]*
  %arrayidx936 = getelementptr inbounds [16 x i32], [16 x i32]* %l935, i64 0, i64 6
  %398 = load i32, i32* %arrayidx936, align 8, !tbaa !14
  %xor937 = xor i32 %397, %398
  %arraydecay938 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l939 = bitcast %union.char64long16* %arraydecay938 to [16 x i32]*
  %arrayidx940 = getelementptr inbounds [16 x i32], [16 x i32]* %l939, i64 0, i64 0
  %399 = load i32, i32* %arrayidx940, align 16, !tbaa !14
  %xor941 = xor i32 %xor937, %399
  %arraydecay942 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l943 = bitcast %union.char64long16* %arraydecay942 to [16 x i32]*
  %arrayidx944 = getelementptr inbounds [16 x i32], [16 x i32]* %l943, i64 0, i64 14
  %400 = load i32, i32* %arrayidx944, align 8, !tbaa !14
  %xor945 = xor i32 %xor941, %400
  %shr946 = lshr i32 %xor945, 31
  %or947 = or i32 %shl930, %shr946
  %arraydecay948 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l949 = bitcast %union.char64long16* %arraydecay948 to [16 x i32]*
  %arrayidx950 = getelementptr inbounds [16 x i32], [16 x i32]* %l949, i64 0, i64 14
  store i32 %or947, i32* %arrayidx950, align 8, !tbaa !14
  %add951 = add i32 %xor914, %or947
  %add952 = add i32 %add951, 1859775393
  %401 = load i32, i32* %a, align 4, !tbaa !15
  %shl953 = shl i32 %401, 5
  %402 = load i32, i32* %a, align 4, !tbaa !15
  %shr954 = lshr i32 %402, 27
  %or955 = or i32 %shl953, %shr954
  %add956 = add i32 %add952, %or955
  %403 = load i32, i32* %e, align 4, !tbaa !15
  %add957 = add i32 %403, %add956
  store i32 %add957, i32* %e, align 4, !tbaa !15
  %404 = load i32, i32* %b, align 4, !tbaa !15
  %shl958 = shl i32 %404, 30
  %405 = load i32, i32* %b, align 4, !tbaa !15
  %shr959 = lshr i32 %405, 2
  %or960 = or i32 %shl958, %shr959
  store i32 %or960, i32* %b, align 4, !tbaa !15
  %406 = load i32, i32* %a, align 4, !tbaa !15
  %407 = load i32, i32* %b, align 4, !tbaa !15
  %xor961 = xor i32 %406, %407
  %408 = load i32, i32* %c, align 4, !tbaa !15
  %xor962 = xor i32 %xor961, %408
  %arraydecay963 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l964 = bitcast %union.char64long16* %arraydecay963 to [16 x i32]*
  %arrayidx965 = getelementptr inbounds [16 x i32], [16 x i32]* %l964, i64 0, i64 12
  %409 = load i32, i32* %arrayidx965, align 16, !tbaa !14
  %arraydecay966 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l967 = bitcast %union.char64long16* %arraydecay966 to [16 x i32]*
  %arrayidx968 = getelementptr inbounds [16 x i32], [16 x i32]* %l967, i64 0, i64 7
  %410 = load i32, i32* %arrayidx968, align 4, !tbaa !14
  %xor969 = xor i32 %409, %410
  %arraydecay970 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l971 = bitcast %union.char64long16* %arraydecay970 to [16 x i32]*
  %arrayidx972 = getelementptr inbounds [16 x i32], [16 x i32]* %l971, i64 0, i64 1
  %411 = load i32, i32* %arrayidx972, align 4, !tbaa !14
  %xor973 = xor i32 %xor969, %411
  %arraydecay974 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l975 = bitcast %union.char64long16* %arraydecay974 to [16 x i32]*
  %arrayidx976 = getelementptr inbounds [16 x i32], [16 x i32]* %l975, i64 0, i64 15
  %412 = load i32, i32* %arrayidx976, align 4, !tbaa !14
  %xor977 = xor i32 %xor973, %412
  %shl978 = shl i32 %xor977, 1
  %arraydecay979 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l980 = bitcast %union.char64long16* %arraydecay979 to [16 x i32]*
  %arrayidx981 = getelementptr inbounds [16 x i32], [16 x i32]* %l980, i64 0, i64 12
  %413 = load i32, i32* %arrayidx981, align 16, !tbaa !14
  %arraydecay982 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l983 = bitcast %union.char64long16* %arraydecay982 to [16 x i32]*
  %arrayidx984 = getelementptr inbounds [16 x i32], [16 x i32]* %l983, i64 0, i64 7
  %414 = load i32, i32* %arrayidx984, align 4, !tbaa !14
  %xor985 = xor i32 %413, %414
  %arraydecay986 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l987 = bitcast %union.char64long16* %arraydecay986 to [16 x i32]*
  %arrayidx988 = getelementptr inbounds [16 x i32], [16 x i32]* %l987, i64 0, i64 1
  %415 = load i32, i32* %arrayidx988, align 4, !tbaa !14
  %xor989 = xor i32 %xor985, %415
  %arraydecay990 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l991 = bitcast %union.char64long16* %arraydecay990 to [16 x i32]*
  %arrayidx992 = getelementptr inbounds [16 x i32], [16 x i32]* %l991, i64 0, i64 15
  %416 = load i32, i32* %arrayidx992, align 4, !tbaa !14
  %xor993 = xor i32 %xor989, %416
  %shr994 = lshr i32 %xor993, 31
  %or995 = or i32 %shl978, %shr994
  %arraydecay996 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l997 = bitcast %union.char64long16* %arraydecay996 to [16 x i32]*
  %arrayidx998 = getelementptr inbounds [16 x i32], [16 x i32]* %l997, i64 0, i64 15
  store i32 %or995, i32* %arrayidx998, align 4, !tbaa !14
  %add999 = add i32 %xor962, %or995
  %add1000 = add i32 %add999, 1859775393
  %417 = load i32, i32* %e, align 4, !tbaa !15
  %shl1001 = shl i32 %417, 5
  %418 = load i32, i32* %e, align 4, !tbaa !15
  %shr1002 = lshr i32 %418, 27
  %or1003 = or i32 %shl1001, %shr1002
  %add1004 = add i32 %add1000, %or1003
  %419 = load i32, i32* %d, align 4, !tbaa !15
  %add1005 = add i32 %419, %add1004
  store i32 %add1005, i32* %d, align 4, !tbaa !15
  %420 = load i32, i32* %a, align 4, !tbaa !15
  %shl1006 = shl i32 %420, 30
  %421 = load i32, i32* %a, align 4, !tbaa !15
  %shr1007 = lshr i32 %421, 2
  %or1008 = or i32 %shl1006, %shr1007
  store i32 %or1008, i32* %a, align 4, !tbaa !15
  %422 = load i32, i32* %e, align 4, !tbaa !15
  %423 = load i32, i32* %a, align 4, !tbaa !15
  %xor1009 = xor i32 %422, %423
  %424 = load i32, i32* %b, align 4, !tbaa !15
  %xor1010 = xor i32 %xor1009, %424
  %arraydecay1011 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1012 = bitcast %union.char64long16* %arraydecay1011 to [16 x i32]*
  %arrayidx1013 = getelementptr inbounds [16 x i32], [16 x i32]* %l1012, i64 0, i64 13
  %425 = load i32, i32* %arrayidx1013, align 4, !tbaa !14
  %arraydecay1014 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1015 = bitcast %union.char64long16* %arraydecay1014 to [16 x i32]*
  %arrayidx1016 = getelementptr inbounds [16 x i32], [16 x i32]* %l1015, i64 0, i64 8
  %426 = load i32, i32* %arrayidx1016, align 16, !tbaa !14
  %xor1017 = xor i32 %425, %426
  %arraydecay1018 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1019 = bitcast %union.char64long16* %arraydecay1018 to [16 x i32]*
  %arrayidx1020 = getelementptr inbounds [16 x i32], [16 x i32]* %l1019, i64 0, i64 2
  %427 = load i32, i32* %arrayidx1020, align 8, !tbaa !14
  %xor1021 = xor i32 %xor1017, %427
  %arraydecay1022 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1023 = bitcast %union.char64long16* %arraydecay1022 to [16 x i32]*
  %arrayidx1024 = getelementptr inbounds [16 x i32], [16 x i32]* %l1023, i64 0, i64 0
  %428 = load i32, i32* %arrayidx1024, align 16, !tbaa !14
  %xor1025 = xor i32 %xor1021, %428
  %shl1026 = shl i32 %xor1025, 1
  %arraydecay1027 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1028 = bitcast %union.char64long16* %arraydecay1027 to [16 x i32]*
  %arrayidx1029 = getelementptr inbounds [16 x i32], [16 x i32]* %l1028, i64 0, i64 13
  %429 = load i32, i32* %arrayidx1029, align 4, !tbaa !14
  %arraydecay1030 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1031 = bitcast %union.char64long16* %arraydecay1030 to [16 x i32]*
  %arrayidx1032 = getelementptr inbounds [16 x i32], [16 x i32]* %l1031, i64 0, i64 8
  %430 = load i32, i32* %arrayidx1032, align 16, !tbaa !14
  %xor1033 = xor i32 %429, %430
  %arraydecay1034 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1035 = bitcast %union.char64long16* %arraydecay1034 to [16 x i32]*
  %arrayidx1036 = getelementptr inbounds [16 x i32], [16 x i32]* %l1035, i64 0, i64 2
  %431 = load i32, i32* %arrayidx1036, align 8, !tbaa !14
  %xor1037 = xor i32 %xor1033, %431
  %arraydecay1038 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1039 = bitcast %union.char64long16* %arraydecay1038 to [16 x i32]*
  %arrayidx1040 = getelementptr inbounds [16 x i32], [16 x i32]* %l1039, i64 0, i64 0
  %432 = load i32, i32* %arrayidx1040, align 16, !tbaa !14
  %xor1041 = xor i32 %xor1037, %432
  %shr1042 = lshr i32 %xor1041, 31
  %or1043 = or i32 %shl1026, %shr1042
  %arraydecay1044 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1045 = bitcast %union.char64long16* %arraydecay1044 to [16 x i32]*
  %arrayidx1046 = getelementptr inbounds [16 x i32], [16 x i32]* %l1045, i64 0, i64 0
  store i32 %or1043, i32* %arrayidx1046, align 16, !tbaa !14
  %add1047 = add i32 %xor1010, %or1043
  %add1048 = add i32 %add1047, 1859775393
  %433 = load i32, i32* %d, align 4, !tbaa !15
  %shl1049 = shl i32 %433, 5
  %434 = load i32, i32* %d, align 4, !tbaa !15
  %shr1050 = lshr i32 %434, 27
  %or1051 = or i32 %shl1049, %shr1050
  %add1052 = add i32 %add1048, %or1051
  %435 = load i32, i32* %c, align 4, !tbaa !15
  %add1053 = add i32 %435, %add1052
  store i32 %add1053, i32* %c, align 4, !tbaa !15
  %436 = load i32, i32* %e, align 4, !tbaa !15
  %shl1054 = shl i32 %436, 30
  %437 = load i32, i32* %e, align 4, !tbaa !15
  %shr1055 = lshr i32 %437, 2
  %or1056 = or i32 %shl1054, %shr1055
  store i32 %or1056, i32* %e, align 4, !tbaa !15
  %438 = load i32, i32* %d, align 4, !tbaa !15
  %439 = load i32, i32* %e, align 4, !tbaa !15
  %xor1057 = xor i32 %438, %439
  %440 = load i32, i32* %a, align 4, !tbaa !15
  %xor1058 = xor i32 %xor1057, %440
  %arraydecay1059 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1060 = bitcast %union.char64long16* %arraydecay1059 to [16 x i32]*
  %arrayidx1061 = getelementptr inbounds [16 x i32], [16 x i32]* %l1060, i64 0, i64 14
  %441 = load i32, i32* %arrayidx1061, align 8, !tbaa !14
  %arraydecay1062 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1063 = bitcast %union.char64long16* %arraydecay1062 to [16 x i32]*
  %arrayidx1064 = getelementptr inbounds [16 x i32], [16 x i32]* %l1063, i64 0, i64 9
  %442 = load i32, i32* %arrayidx1064, align 4, !tbaa !14
  %xor1065 = xor i32 %441, %442
  %arraydecay1066 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1067 = bitcast %union.char64long16* %arraydecay1066 to [16 x i32]*
  %arrayidx1068 = getelementptr inbounds [16 x i32], [16 x i32]* %l1067, i64 0, i64 3
  %443 = load i32, i32* %arrayidx1068, align 4, !tbaa !14
  %xor1069 = xor i32 %xor1065, %443
  %arraydecay1070 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1071 = bitcast %union.char64long16* %arraydecay1070 to [16 x i32]*
  %arrayidx1072 = getelementptr inbounds [16 x i32], [16 x i32]* %l1071, i64 0, i64 1
  %444 = load i32, i32* %arrayidx1072, align 4, !tbaa !14
  %xor1073 = xor i32 %xor1069, %444
  %shl1074 = shl i32 %xor1073, 1
  %arraydecay1075 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1076 = bitcast %union.char64long16* %arraydecay1075 to [16 x i32]*
  %arrayidx1077 = getelementptr inbounds [16 x i32], [16 x i32]* %l1076, i64 0, i64 14
  %445 = load i32, i32* %arrayidx1077, align 8, !tbaa !14
  %arraydecay1078 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1079 = bitcast %union.char64long16* %arraydecay1078 to [16 x i32]*
  %arrayidx1080 = getelementptr inbounds [16 x i32], [16 x i32]* %l1079, i64 0, i64 9
  %446 = load i32, i32* %arrayidx1080, align 4, !tbaa !14
  %xor1081 = xor i32 %445, %446
  %arraydecay1082 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1083 = bitcast %union.char64long16* %arraydecay1082 to [16 x i32]*
  %arrayidx1084 = getelementptr inbounds [16 x i32], [16 x i32]* %l1083, i64 0, i64 3
  %447 = load i32, i32* %arrayidx1084, align 4, !tbaa !14
  %xor1085 = xor i32 %xor1081, %447
  %arraydecay1086 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1087 = bitcast %union.char64long16* %arraydecay1086 to [16 x i32]*
  %arrayidx1088 = getelementptr inbounds [16 x i32], [16 x i32]* %l1087, i64 0, i64 1
  %448 = load i32, i32* %arrayidx1088, align 4, !tbaa !14
  %xor1089 = xor i32 %xor1085, %448
  %shr1090 = lshr i32 %xor1089, 31
  %or1091 = or i32 %shl1074, %shr1090
  %arraydecay1092 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1093 = bitcast %union.char64long16* %arraydecay1092 to [16 x i32]*
  %arrayidx1094 = getelementptr inbounds [16 x i32], [16 x i32]* %l1093, i64 0, i64 1
  store i32 %or1091, i32* %arrayidx1094, align 4, !tbaa !14
  %add1095 = add i32 %xor1058, %or1091
  %add1096 = add i32 %add1095, 1859775393
  %449 = load i32, i32* %c, align 4, !tbaa !15
  %shl1097 = shl i32 %449, 5
  %450 = load i32, i32* %c, align 4, !tbaa !15
  %shr1098 = lshr i32 %450, 27
  %or1099 = or i32 %shl1097, %shr1098
  %add1100 = add i32 %add1096, %or1099
  %451 = load i32, i32* %b, align 4, !tbaa !15
  %add1101 = add i32 %451, %add1100
  store i32 %add1101, i32* %b, align 4, !tbaa !15
  %452 = load i32, i32* %d, align 4, !tbaa !15
  %shl1102 = shl i32 %452, 30
  %453 = load i32, i32* %d, align 4, !tbaa !15
  %shr1103 = lshr i32 %453, 2
  %or1104 = or i32 %shl1102, %shr1103
  store i32 %or1104, i32* %d, align 4, !tbaa !15
  %454 = load i32, i32* %c, align 4, !tbaa !15
  %455 = load i32, i32* %d, align 4, !tbaa !15
  %xor1105 = xor i32 %454, %455
  %456 = load i32, i32* %e, align 4, !tbaa !15
  %xor1106 = xor i32 %xor1105, %456
  %arraydecay1107 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1108 = bitcast %union.char64long16* %arraydecay1107 to [16 x i32]*
  %arrayidx1109 = getelementptr inbounds [16 x i32], [16 x i32]* %l1108, i64 0, i64 15
  %457 = load i32, i32* %arrayidx1109, align 4, !tbaa !14
  %arraydecay1110 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1111 = bitcast %union.char64long16* %arraydecay1110 to [16 x i32]*
  %arrayidx1112 = getelementptr inbounds [16 x i32], [16 x i32]* %l1111, i64 0, i64 10
  %458 = load i32, i32* %arrayidx1112, align 8, !tbaa !14
  %xor1113 = xor i32 %457, %458
  %arraydecay1114 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1115 = bitcast %union.char64long16* %arraydecay1114 to [16 x i32]*
  %arrayidx1116 = getelementptr inbounds [16 x i32], [16 x i32]* %l1115, i64 0, i64 4
  %459 = load i32, i32* %arrayidx1116, align 16, !tbaa !14
  %xor1117 = xor i32 %xor1113, %459
  %arraydecay1118 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1119 = bitcast %union.char64long16* %arraydecay1118 to [16 x i32]*
  %arrayidx1120 = getelementptr inbounds [16 x i32], [16 x i32]* %l1119, i64 0, i64 2
  %460 = load i32, i32* %arrayidx1120, align 8, !tbaa !14
  %xor1121 = xor i32 %xor1117, %460
  %shl1122 = shl i32 %xor1121, 1
  %arraydecay1123 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1124 = bitcast %union.char64long16* %arraydecay1123 to [16 x i32]*
  %arrayidx1125 = getelementptr inbounds [16 x i32], [16 x i32]* %l1124, i64 0, i64 15
  %461 = load i32, i32* %arrayidx1125, align 4, !tbaa !14
  %arraydecay1126 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1127 = bitcast %union.char64long16* %arraydecay1126 to [16 x i32]*
  %arrayidx1128 = getelementptr inbounds [16 x i32], [16 x i32]* %l1127, i64 0, i64 10
  %462 = load i32, i32* %arrayidx1128, align 8, !tbaa !14
  %xor1129 = xor i32 %461, %462
  %arraydecay1130 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1131 = bitcast %union.char64long16* %arraydecay1130 to [16 x i32]*
  %arrayidx1132 = getelementptr inbounds [16 x i32], [16 x i32]* %l1131, i64 0, i64 4
  %463 = load i32, i32* %arrayidx1132, align 16, !tbaa !14
  %xor1133 = xor i32 %xor1129, %463
  %arraydecay1134 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1135 = bitcast %union.char64long16* %arraydecay1134 to [16 x i32]*
  %arrayidx1136 = getelementptr inbounds [16 x i32], [16 x i32]* %l1135, i64 0, i64 2
  %464 = load i32, i32* %arrayidx1136, align 8, !tbaa !14
  %xor1137 = xor i32 %xor1133, %464
  %shr1138 = lshr i32 %xor1137, 31
  %or1139 = or i32 %shl1122, %shr1138
  %arraydecay1140 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1141 = bitcast %union.char64long16* %arraydecay1140 to [16 x i32]*
  %arrayidx1142 = getelementptr inbounds [16 x i32], [16 x i32]* %l1141, i64 0, i64 2
  store i32 %or1139, i32* %arrayidx1142, align 8, !tbaa !14
  %add1143 = add i32 %xor1106, %or1139
  %add1144 = add i32 %add1143, 1859775393
  %465 = load i32, i32* %b, align 4, !tbaa !15
  %shl1145 = shl i32 %465, 5
  %466 = load i32, i32* %b, align 4, !tbaa !15
  %shr1146 = lshr i32 %466, 27
  %or1147 = or i32 %shl1145, %shr1146
  %add1148 = add i32 %add1144, %or1147
  %467 = load i32, i32* %a, align 4, !tbaa !15
  %add1149 = add i32 %467, %add1148
  store i32 %add1149, i32* %a, align 4, !tbaa !15
  %468 = load i32, i32* %c, align 4, !tbaa !15
  %shl1150 = shl i32 %468, 30
  %469 = load i32, i32* %c, align 4, !tbaa !15
  %shr1151 = lshr i32 %469, 2
  %or1152 = or i32 %shl1150, %shr1151
  store i32 %or1152, i32* %c, align 4, !tbaa !15
  %470 = load i32, i32* %b, align 4, !tbaa !15
  %471 = load i32, i32* %c, align 4, !tbaa !15
  %xor1153 = xor i32 %470, %471
  %472 = load i32, i32* %d, align 4, !tbaa !15
  %xor1154 = xor i32 %xor1153, %472
  %arraydecay1155 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1156 = bitcast %union.char64long16* %arraydecay1155 to [16 x i32]*
  %arrayidx1157 = getelementptr inbounds [16 x i32], [16 x i32]* %l1156, i64 0, i64 0
  %473 = load i32, i32* %arrayidx1157, align 16, !tbaa !14
  %arraydecay1158 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1159 = bitcast %union.char64long16* %arraydecay1158 to [16 x i32]*
  %arrayidx1160 = getelementptr inbounds [16 x i32], [16 x i32]* %l1159, i64 0, i64 11
  %474 = load i32, i32* %arrayidx1160, align 4, !tbaa !14
  %xor1161 = xor i32 %473, %474
  %arraydecay1162 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1163 = bitcast %union.char64long16* %arraydecay1162 to [16 x i32]*
  %arrayidx1164 = getelementptr inbounds [16 x i32], [16 x i32]* %l1163, i64 0, i64 5
  %475 = load i32, i32* %arrayidx1164, align 4, !tbaa !14
  %xor1165 = xor i32 %xor1161, %475
  %arraydecay1166 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1167 = bitcast %union.char64long16* %arraydecay1166 to [16 x i32]*
  %arrayidx1168 = getelementptr inbounds [16 x i32], [16 x i32]* %l1167, i64 0, i64 3
  %476 = load i32, i32* %arrayidx1168, align 4, !tbaa !14
  %xor1169 = xor i32 %xor1165, %476
  %shl1170 = shl i32 %xor1169, 1
  %arraydecay1171 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1172 = bitcast %union.char64long16* %arraydecay1171 to [16 x i32]*
  %arrayidx1173 = getelementptr inbounds [16 x i32], [16 x i32]* %l1172, i64 0, i64 0
  %477 = load i32, i32* %arrayidx1173, align 16, !tbaa !14
  %arraydecay1174 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1175 = bitcast %union.char64long16* %arraydecay1174 to [16 x i32]*
  %arrayidx1176 = getelementptr inbounds [16 x i32], [16 x i32]* %l1175, i64 0, i64 11
  %478 = load i32, i32* %arrayidx1176, align 4, !tbaa !14
  %xor1177 = xor i32 %477, %478
  %arraydecay1178 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1179 = bitcast %union.char64long16* %arraydecay1178 to [16 x i32]*
  %arrayidx1180 = getelementptr inbounds [16 x i32], [16 x i32]* %l1179, i64 0, i64 5
  %479 = load i32, i32* %arrayidx1180, align 4, !tbaa !14
  %xor1181 = xor i32 %xor1177, %479
  %arraydecay1182 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1183 = bitcast %union.char64long16* %arraydecay1182 to [16 x i32]*
  %arrayidx1184 = getelementptr inbounds [16 x i32], [16 x i32]* %l1183, i64 0, i64 3
  %480 = load i32, i32* %arrayidx1184, align 4, !tbaa !14
  %xor1185 = xor i32 %xor1181, %480
  %shr1186 = lshr i32 %xor1185, 31
  %or1187 = or i32 %shl1170, %shr1186
  %arraydecay1188 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1189 = bitcast %union.char64long16* %arraydecay1188 to [16 x i32]*
  %arrayidx1190 = getelementptr inbounds [16 x i32], [16 x i32]* %l1189, i64 0, i64 3
  store i32 %or1187, i32* %arrayidx1190, align 4, !tbaa !14
  %add1191 = add i32 %xor1154, %or1187
  %add1192 = add i32 %add1191, 1859775393
  %481 = load i32, i32* %a, align 4, !tbaa !15
  %shl1193 = shl i32 %481, 5
  %482 = load i32, i32* %a, align 4, !tbaa !15
  %shr1194 = lshr i32 %482, 27
  %or1195 = or i32 %shl1193, %shr1194
  %add1196 = add i32 %add1192, %or1195
  %483 = load i32, i32* %e, align 4, !tbaa !15
  %add1197 = add i32 %483, %add1196
  store i32 %add1197, i32* %e, align 4, !tbaa !15
  %484 = load i32, i32* %b, align 4, !tbaa !15
  %shl1198 = shl i32 %484, 30
  %485 = load i32, i32* %b, align 4, !tbaa !15
  %shr1199 = lshr i32 %485, 2
  %or1200 = or i32 %shl1198, %shr1199
  store i32 %or1200, i32* %b, align 4, !tbaa !15
  %486 = load i32, i32* %a, align 4, !tbaa !15
  %487 = load i32, i32* %b, align 4, !tbaa !15
  %xor1201 = xor i32 %486, %487
  %488 = load i32, i32* %c, align 4, !tbaa !15
  %xor1202 = xor i32 %xor1201, %488
  %arraydecay1203 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1204 = bitcast %union.char64long16* %arraydecay1203 to [16 x i32]*
  %arrayidx1205 = getelementptr inbounds [16 x i32], [16 x i32]* %l1204, i64 0, i64 1
  %489 = load i32, i32* %arrayidx1205, align 4, !tbaa !14
  %arraydecay1206 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1207 = bitcast %union.char64long16* %arraydecay1206 to [16 x i32]*
  %arrayidx1208 = getelementptr inbounds [16 x i32], [16 x i32]* %l1207, i64 0, i64 12
  %490 = load i32, i32* %arrayidx1208, align 16, !tbaa !14
  %xor1209 = xor i32 %489, %490
  %arraydecay1210 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1211 = bitcast %union.char64long16* %arraydecay1210 to [16 x i32]*
  %arrayidx1212 = getelementptr inbounds [16 x i32], [16 x i32]* %l1211, i64 0, i64 6
  %491 = load i32, i32* %arrayidx1212, align 8, !tbaa !14
  %xor1213 = xor i32 %xor1209, %491
  %arraydecay1214 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1215 = bitcast %union.char64long16* %arraydecay1214 to [16 x i32]*
  %arrayidx1216 = getelementptr inbounds [16 x i32], [16 x i32]* %l1215, i64 0, i64 4
  %492 = load i32, i32* %arrayidx1216, align 16, !tbaa !14
  %xor1217 = xor i32 %xor1213, %492
  %shl1218 = shl i32 %xor1217, 1
  %arraydecay1219 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1220 = bitcast %union.char64long16* %arraydecay1219 to [16 x i32]*
  %arrayidx1221 = getelementptr inbounds [16 x i32], [16 x i32]* %l1220, i64 0, i64 1
  %493 = load i32, i32* %arrayidx1221, align 4, !tbaa !14
  %arraydecay1222 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1223 = bitcast %union.char64long16* %arraydecay1222 to [16 x i32]*
  %arrayidx1224 = getelementptr inbounds [16 x i32], [16 x i32]* %l1223, i64 0, i64 12
  %494 = load i32, i32* %arrayidx1224, align 16, !tbaa !14
  %xor1225 = xor i32 %493, %494
  %arraydecay1226 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1227 = bitcast %union.char64long16* %arraydecay1226 to [16 x i32]*
  %arrayidx1228 = getelementptr inbounds [16 x i32], [16 x i32]* %l1227, i64 0, i64 6
  %495 = load i32, i32* %arrayidx1228, align 8, !tbaa !14
  %xor1229 = xor i32 %xor1225, %495
  %arraydecay1230 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1231 = bitcast %union.char64long16* %arraydecay1230 to [16 x i32]*
  %arrayidx1232 = getelementptr inbounds [16 x i32], [16 x i32]* %l1231, i64 0, i64 4
  %496 = load i32, i32* %arrayidx1232, align 16, !tbaa !14
  %xor1233 = xor i32 %xor1229, %496
  %shr1234 = lshr i32 %xor1233, 31
  %or1235 = or i32 %shl1218, %shr1234
  %arraydecay1236 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1237 = bitcast %union.char64long16* %arraydecay1236 to [16 x i32]*
  %arrayidx1238 = getelementptr inbounds [16 x i32], [16 x i32]* %l1237, i64 0, i64 4
  store i32 %or1235, i32* %arrayidx1238, align 16, !tbaa !14
  %add1239 = add i32 %xor1202, %or1235
  %add1240 = add i32 %add1239, 1859775393
  %497 = load i32, i32* %e, align 4, !tbaa !15
  %shl1241 = shl i32 %497, 5
  %498 = load i32, i32* %e, align 4, !tbaa !15
  %shr1242 = lshr i32 %498, 27
  %or1243 = or i32 %shl1241, %shr1242
  %add1244 = add i32 %add1240, %or1243
  %499 = load i32, i32* %d, align 4, !tbaa !15
  %add1245 = add i32 %499, %add1244
  store i32 %add1245, i32* %d, align 4, !tbaa !15
  %500 = load i32, i32* %a, align 4, !tbaa !15
  %shl1246 = shl i32 %500, 30
  %501 = load i32, i32* %a, align 4, !tbaa !15
  %shr1247 = lshr i32 %501, 2
  %or1248 = or i32 %shl1246, %shr1247
  store i32 %or1248, i32* %a, align 4, !tbaa !15
  %502 = load i32, i32* %e, align 4, !tbaa !15
  %503 = load i32, i32* %a, align 4, !tbaa !15
  %xor1249 = xor i32 %502, %503
  %504 = load i32, i32* %b, align 4, !tbaa !15
  %xor1250 = xor i32 %xor1249, %504
  %arraydecay1251 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1252 = bitcast %union.char64long16* %arraydecay1251 to [16 x i32]*
  %arrayidx1253 = getelementptr inbounds [16 x i32], [16 x i32]* %l1252, i64 0, i64 2
  %505 = load i32, i32* %arrayidx1253, align 8, !tbaa !14
  %arraydecay1254 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1255 = bitcast %union.char64long16* %arraydecay1254 to [16 x i32]*
  %arrayidx1256 = getelementptr inbounds [16 x i32], [16 x i32]* %l1255, i64 0, i64 13
  %506 = load i32, i32* %arrayidx1256, align 4, !tbaa !14
  %xor1257 = xor i32 %505, %506
  %arraydecay1258 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1259 = bitcast %union.char64long16* %arraydecay1258 to [16 x i32]*
  %arrayidx1260 = getelementptr inbounds [16 x i32], [16 x i32]* %l1259, i64 0, i64 7
  %507 = load i32, i32* %arrayidx1260, align 4, !tbaa !14
  %xor1261 = xor i32 %xor1257, %507
  %arraydecay1262 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1263 = bitcast %union.char64long16* %arraydecay1262 to [16 x i32]*
  %arrayidx1264 = getelementptr inbounds [16 x i32], [16 x i32]* %l1263, i64 0, i64 5
  %508 = load i32, i32* %arrayidx1264, align 4, !tbaa !14
  %xor1265 = xor i32 %xor1261, %508
  %shl1266 = shl i32 %xor1265, 1
  %arraydecay1267 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1268 = bitcast %union.char64long16* %arraydecay1267 to [16 x i32]*
  %arrayidx1269 = getelementptr inbounds [16 x i32], [16 x i32]* %l1268, i64 0, i64 2
  %509 = load i32, i32* %arrayidx1269, align 8, !tbaa !14
  %arraydecay1270 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1271 = bitcast %union.char64long16* %arraydecay1270 to [16 x i32]*
  %arrayidx1272 = getelementptr inbounds [16 x i32], [16 x i32]* %l1271, i64 0, i64 13
  %510 = load i32, i32* %arrayidx1272, align 4, !tbaa !14
  %xor1273 = xor i32 %509, %510
  %arraydecay1274 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1275 = bitcast %union.char64long16* %arraydecay1274 to [16 x i32]*
  %arrayidx1276 = getelementptr inbounds [16 x i32], [16 x i32]* %l1275, i64 0, i64 7
  %511 = load i32, i32* %arrayidx1276, align 4, !tbaa !14
  %xor1277 = xor i32 %xor1273, %511
  %arraydecay1278 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1279 = bitcast %union.char64long16* %arraydecay1278 to [16 x i32]*
  %arrayidx1280 = getelementptr inbounds [16 x i32], [16 x i32]* %l1279, i64 0, i64 5
  %512 = load i32, i32* %arrayidx1280, align 4, !tbaa !14
  %xor1281 = xor i32 %xor1277, %512
  %shr1282 = lshr i32 %xor1281, 31
  %or1283 = or i32 %shl1266, %shr1282
  %arraydecay1284 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1285 = bitcast %union.char64long16* %arraydecay1284 to [16 x i32]*
  %arrayidx1286 = getelementptr inbounds [16 x i32], [16 x i32]* %l1285, i64 0, i64 5
  store i32 %or1283, i32* %arrayidx1286, align 4, !tbaa !14
  %add1287 = add i32 %xor1250, %or1283
  %add1288 = add i32 %add1287, 1859775393
  %513 = load i32, i32* %d, align 4, !tbaa !15
  %shl1289 = shl i32 %513, 5
  %514 = load i32, i32* %d, align 4, !tbaa !15
  %shr1290 = lshr i32 %514, 27
  %or1291 = or i32 %shl1289, %shr1290
  %add1292 = add i32 %add1288, %or1291
  %515 = load i32, i32* %c, align 4, !tbaa !15
  %add1293 = add i32 %515, %add1292
  store i32 %add1293, i32* %c, align 4, !tbaa !15
  %516 = load i32, i32* %e, align 4, !tbaa !15
  %shl1294 = shl i32 %516, 30
  %517 = load i32, i32* %e, align 4, !tbaa !15
  %shr1295 = lshr i32 %517, 2
  %or1296 = or i32 %shl1294, %shr1295
  store i32 %or1296, i32* %e, align 4, !tbaa !15
  %518 = load i32, i32* %d, align 4, !tbaa !15
  %519 = load i32, i32* %e, align 4, !tbaa !15
  %xor1297 = xor i32 %518, %519
  %520 = load i32, i32* %a, align 4, !tbaa !15
  %xor1298 = xor i32 %xor1297, %520
  %arraydecay1299 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1300 = bitcast %union.char64long16* %arraydecay1299 to [16 x i32]*
  %arrayidx1301 = getelementptr inbounds [16 x i32], [16 x i32]* %l1300, i64 0, i64 3
  %521 = load i32, i32* %arrayidx1301, align 4, !tbaa !14
  %arraydecay1302 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1303 = bitcast %union.char64long16* %arraydecay1302 to [16 x i32]*
  %arrayidx1304 = getelementptr inbounds [16 x i32], [16 x i32]* %l1303, i64 0, i64 14
  %522 = load i32, i32* %arrayidx1304, align 8, !tbaa !14
  %xor1305 = xor i32 %521, %522
  %arraydecay1306 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1307 = bitcast %union.char64long16* %arraydecay1306 to [16 x i32]*
  %arrayidx1308 = getelementptr inbounds [16 x i32], [16 x i32]* %l1307, i64 0, i64 8
  %523 = load i32, i32* %arrayidx1308, align 16, !tbaa !14
  %xor1309 = xor i32 %xor1305, %523
  %arraydecay1310 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1311 = bitcast %union.char64long16* %arraydecay1310 to [16 x i32]*
  %arrayidx1312 = getelementptr inbounds [16 x i32], [16 x i32]* %l1311, i64 0, i64 6
  %524 = load i32, i32* %arrayidx1312, align 8, !tbaa !14
  %xor1313 = xor i32 %xor1309, %524
  %shl1314 = shl i32 %xor1313, 1
  %arraydecay1315 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1316 = bitcast %union.char64long16* %arraydecay1315 to [16 x i32]*
  %arrayidx1317 = getelementptr inbounds [16 x i32], [16 x i32]* %l1316, i64 0, i64 3
  %525 = load i32, i32* %arrayidx1317, align 4, !tbaa !14
  %arraydecay1318 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1319 = bitcast %union.char64long16* %arraydecay1318 to [16 x i32]*
  %arrayidx1320 = getelementptr inbounds [16 x i32], [16 x i32]* %l1319, i64 0, i64 14
  %526 = load i32, i32* %arrayidx1320, align 8, !tbaa !14
  %xor1321 = xor i32 %525, %526
  %arraydecay1322 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1323 = bitcast %union.char64long16* %arraydecay1322 to [16 x i32]*
  %arrayidx1324 = getelementptr inbounds [16 x i32], [16 x i32]* %l1323, i64 0, i64 8
  %527 = load i32, i32* %arrayidx1324, align 16, !tbaa !14
  %xor1325 = xor i32 %xor1321, %527
  %arraydecay1326 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1327 = bitcast %union.char64long16* %arraydecay1326 to [16 x i32]*
  %arrayidx1328 = getelementptr inbounds [16 x i32], [16 x i32]* %l1327, i64 0, i64 6
  %528 = load i32, i32* %arrayidx1328, align 8, !tbaa !14
  %xor1329 = xor i32 %xor1325, %528
  %shr1330 = lshr i32 %xor1329, 31
  %or1331 = or i32 %shl1314, %shr1330
  %arraydecay1332 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1333 = bitcast %union.char64long16* %arraydecay1332 to [16 x i32]*
  %arrayidx1334 = getelementptr inbounds [16 x i32], [16 x i32]* %l1333, i64 0, i64 6
  store i32 %or1331, i32* %arrayidx1334, align 8, !tbaa !14
  %add1335 = add i32 %xor1298, %or1331
  %add1336 = add i32 %add1335, 1859775393
  %529 = load i32, i32* %c, align 4, !tbaa !15
  %shl1337 = shl i32 %529, 5
  %530 = load i32, i32* %c, align 4, !tbaa !15
  %shr1338 = lshr i32 %530, 27
  %or1339 = or i32 %shl1337, %shr1338
  %add1340 = add i32 %add1336, %or1339
  %531 = load i32, i32* %b, align 4, !tbaa !15
  %add1341 = add i32 %531, %add1340
  store i32 %add1341, i32* %b, align 4, !tbaa !15
  %532 = load i32, i32* %d, align 4, !tbaa !15
  %shl1342 = shl i32 %532, 30
  %533 = load i32, i32* %d, align 4, !tbaa !15
  %shr1343 = lshr i32 %533, 2
  %or1344 = or i32 %shl1342, %shr1343
  store i32 %or1344, i32* %d, align 4, !tbaa !15
  %534 = load i32, i32* %c, align 4, !tbaa !15
  %535 = load i32, i32* %d, align 4, !tbaa !15
  %xor1345 = xor i32 %534, %535
  %536 = load i32, i32* %e, align 4, !tbaa !15
  %xor1346 = xor i32 %xor1345, %536
  %arraydecay1347 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1348 = bitcast %union.char64long16* %arraydecay1347 to [16 x i32]*
  %arrayidx1349 = getelementptr inbounds [16 x i32], [16 x i32]* %l1348, i64 0, i64 4
  %537 = load i32, i32* %arrayidx1349, align 16, !tbaa !14
  %arraydecay1350 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1351 = bitcast %union.char64long16* %arraydecay1350 to [16 x i32]*
  %arrayidx1352 = getelementptr inbounds [16 x i32], [16 x i32]* %l1351, i64 0, i64 15
  %538 = load i32, i32* %arrayidx1352, align 4, !tbaa !14
  %xor1353 = xor i32 %537, %538
  %arraydecay1354 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1355 = bitcast %union.char64long16* %arraydecay1354 to [16 x i32]*
  %arrayidx1356 = getelementptr inbounds [16 x i32], [16 x i32]* %l1355, i64 0, i64 9
  %539 = load i32, i32* %arrayidx1356, align 4, !tbaa !14
  %xor1357 = xor i32 %xor1353, %539
  %arraydecay1358 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1359 = bitcast %union.char64long16* %arraydecay1358 to [16 x i32]*
  %arrayidx1360 = getelementptr inbounds [16 x i32], [16 x i32]* %l1359, i64 0, i64 7
  %540 = load i32, i32* %arrayidx1360, align 4, !tbaa !14
  %xor1361 = xor i32 %xor1357, %540
  %shl1362 = shl i32 %xor1361, 1
  %arraydecay1363 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1364 = bitcast %union.char64long16* %arraydecay1363 to [16 x i32]*
  %arrayidx1365 = getelementptr inbounds [16 x i32], [16 x i32]* %l1364, i64 0, i64 4
  %541 = load i32, i32* %arrayidx1365, align 16, !tbaa !14
  %arraydecay1366 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1367 = bitcast %union.char64long16* %arraydecay1366 to [16 x i32]*
  %arrayidx1368 = getelementptr inbounds [16 x i32], [16 x i32]* %l1367, i64 0, i64 15
  %542 = load i32, i32* %arrayidx1368, align 4, !tbaa !14
  %xor1369 = xor i32 %541, %542
  %arraydecay1370 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1371 = bitcast %union.char64long16* %arraydecay1370 to [16 x i32]*
  %arrayidx1372 = getelementptr inbounds [16 x i32], [16 x i32]* %l1371, i64 0, i64 9
  %543 = load i32, i32* %arrayidx1372, align 4, !tbaa !14
  %xor1373 = xor i32 %xor1369, %543
  %arraydecay1374 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1375 = bitcast %union.char64long16* %arraydecay1374 to [16 x i32]*
  %arrayidx1376 = getelementptr inbounds [16 x i32], [16 x i32]* %l1375, i64 0, i64 7
  %544 = load i32, i32* %arrayidx1376, align 4, !tbaa !14
  %xor1377 = xor i32 %xor1373, %544
  %shr1378 = lshr i32 %xor1377, 31
  %or1379 = or i32 %shl1362, %shr1378
  %arraydecay1380 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1381 = bitcast %union.char64long16* %arraydecay1380 to [16 x i32]*
  %arrayidx1382 = getelementptr inbounds [16 x i32], [16 x i32]* %l1381, i64 0, i64 7
  store i32 %or1379, i32* %arrayidx1382, align 4, !tbaa !14
  %add1383 = add i32 %xor1346, %or1379
  %add1384 = add i32 %add1383, 1859775393
  %545 = load i32, i32* %b, align 4, !tbaa !15
  %shl1385 = shl i32 %545, 5
  %546 = load i32, i32* %b, align 4, !tbaa !15
  %shr1386 = lshr i32 %546, 27
  %or1387 = or i32 %shl1385, %shr1386
  %add1388 = add i32 %add1384, %or1387
  %547 = load i32, i32* %a, align 4, !tbaa !15
  %add1389 = add i32 %547, %add1388
  store i32 %add1389, i32* %a, align 4, !tbaa !15
  %548 = load i32, i32* %c, align 4, !tbaa !15
  %shl1390 = shl i32 %548, 30
  %549 = load i32, i32* %c, align 4, !tbaa !15
  %shr1391 = lshr i32 %549, 2
  %or1392 = or i32 %shl1390, %shr1391
  store i32 %or1392, i32* %c, align 4, !tbaa !15
  %550 = load i32, i32* %b, align 4, !tbaa !15
  %551 = load i32, i32* %c, align 4, !tbaa !15
  %or1393 = or i32 %550, %551
  %552 = load i32, i32* %d, align 4, !tbaa !15
  %and1394 = and i32 %or1393, %552
  %553 = load i32, i32* %b, align 4, !tbaa !15
  %554 = load i32, i32* %c, align 4, !tbaa !15
  %and1395 = and i32 %553, %554
  %or1396 = or i32 %and1394, %and1395
  %arraydecay1397 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1398 = bitcast %union.char64long16* %arraydecay1397 to [16 x i32]*
  %arrayidx1399 = getelementptr inbounds [16 x i32], [16 x i32]* %l1398, i64 0, i64 5
  %555 = load i32, i32* %arrayidx1399, align 4, !tbaa !14
  %arraydecay1400 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1401 = bitcast %union.char64long16* %arraydecay1400 to [16 x i32]*
  %arrayidx1402 = getelementptr inbounds [16 x i32], [16 x i32]* %l1401, i64 0, i64 0
  %556 = load i32, i32* %arrayidx1402, align 16, !tbaa !14
  %xor1403 = xor i32 %555, %556
  %arraydecay1404 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1405 = bitcast %union.char64long16* %arraydecay1404 to [16 x i32]*
  %arrayidx1406 = getelementptr inbounds [16 x i32], [16 x i32]* %l1405, i64 0, i64 10
  %557 = load i32, i32* %arrayidx1406, align 8, !tbaa !14
  %xor1407 = xor i32 %xor1403, %557
  %arraydecay1408 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1409 = bitcast %union.char64long16* %arraydecay1408 to [16 x i32]*
  %arrayidx1410 = getelementptr inbounds [16 x i32], [16 x i32]* %l1409, i64 0, i64 8
  %558 = load i32, i32* %arrayidx1410, align 16, !tbaa !14
  %xor1411 = xor i32 %xor1407, %558
  %shl1412 = shl i32 %xor1411, 1
  %arraydecay1413 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1414 = bitcast %union.char64long16* %arraydecay1413 to [16 x i32]*
  %arrayidx1415 = getelementptr inbounds [16 x i32], [16 x i32]* %l1414, i64 0, i64 5
  %559 = load i32, i32* %arrayidx1415, align 4, !tbaa !14
  %arraydecay1416 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1417 = bitcast %union.char64long16* %arraydecay1416 to [16 x i32]*
  %arrayidx1418 = getelementptr inbounds [16 x i32], [16 x i32]* %l1417, i64 0, i64 0
  %560 = load i32, i32* %arrayidx1418, align 16, !tbaa !14
  %xor1419 = xor i32 %559, %560
  %arraydecay1420 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1421 = bitcast %union.char64long16* %arraydecay1420 to [16 x i32]*
  %arrayidx1422 = getelementptr inbounds [16 x i32], [16 x i32]* %l1421, i64 0, i64 10
  %561 = load i32, i32* %arrayidx1422, align 8, !tbaa !14
  %xor1423 = xor i32 %xor1419, %561
  %arraydecay1424 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1425 = bitcast %union.char64long16* %arraydecay1424 to [16 x i32]*
  %arrayidx1426 = getelementptr inbounds [16 x i32], [16 x i32]* %l1425, i64 0, i64 8
  %562 = load i32, i32* %arrayidx1426, align 16, !tbaa !14
  %xor1427 = xor i32 %xor1423, %562
  %shr1428 = lshr i32 %xor1427, 31
  %or1429 = or i32 %shl1412, %shr1428
  %arraydecay1430 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1431 = bitcast %union.char64long16* %arraydecay1430 to [16 x i32]*
  %arrayidx1432 = getelementptr inbounds [16 x i32], [16 x i32]* %l1431, i64 0, i64 8
  store i32 %or1429, i32* %arrayidx1432, align 16, !tbaa !14
  %add1433 = add i32 %or1396, %or1429
  %add1434 = add i32 %add1433, -1894007588
  %563 = load i32, i32* %a, align 4, !tbaa !15
  %shl1435 = shl i32 %563, 5
  %564 = load i32, i32* %a, align 4, !tbaa !15
  %shr1436 = lshr i32 %564, 27
  %or1437 = or i32 %shl1435, %shr1436
  %add1438 = add i32 %add1434, %or1437
  %565 = load i32, i32* %e, align 4, !tbaa !15
  %add1439 = add i32 %565, %add1438
  store i32 %add1439, i32* %e, align 4, !tbaa !15
  %566 = load i32, i32* %b, align 4, !tbaa !15
  %shl1440 = shl i32 %566, 30
  %567 = load i32, i32* %b, align 4, !tbaa !15
  %shr1441 = lshr i32 %567, 2
  %or1442 = or i32 %shl1440, %shr1441
  store i32 %or1442, i32* %b, align 4, !tbaa !15
  %568 = load i32, i32* %a, align 4, !tbaa !15
  %569 = load i32, i32* %b, align 4, !tbaa !15
  %or1443 = or i32 %568, %569
  %570 = load i32, i32* %c, align 4, !tbaa !15
  %and1444 = and i32 %or1443, %570
  %571 = load i32, i32* %a, align 4, !tbaa !15
  %572 = load i32, i32* %b, align 4, !tbaa !15
  %and1445 = and i32 %571, %572
  %or1446 = or i32 %and1444, %and1445
  %arraydecay1447 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1448 = bitcast %union.char64long16* %arraydecay1447 to [16 x i32]*
  %arrayidx1449 = getelementptr inbounds [16 x i32], [16 x i32]* %l1448, i64 0, i64 6
  %573 = load i32, i32* %arrayidx1449, align 8, !tbaa !14
  %arraydecay1450 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1451 = bitcast %union.char64long16* %arraydecay1450 to [16 x i32]*
  %arrayidx1452 = getelementptr inbounds [16 x i32], [16 x i32]* %l1451, i64 0, i64 1
  %574 = load i32, i32* %arrayidx1452, align 4, !tbaa !14
  %xor1453 = xor i32 %573, %574
  %arraydecay1454 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1455 = bitcast %union.char64long16* %arraydecay1454 to [16 x i32]*
  %arrayidx1456 = getelementptr inbounds [16 x i32], [16 x i32]* %l1455, i64 0, i64 11
  %575 = load i32, i32* %arrayidx1456, align 4, !tbaa !14
  %xor1457 = xor i32 %xor1453, %575
  %arraydecay1458 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1459 = bitcast %union.char64long16* %arraydecay1458 to [16 x i32]*
  %arrayidx1460 = getelementptr inbounds [16 x i32], [16 x i32]* %l1459, i64 0, i64 9
  %576 = load i32, i32* %arrayidx1460, align 4, !tbaa !14
  %xor1461 = xor i32 %xor1457, %576
  %shl1462 = shl i32 %xor1461, 1
  %arraydecay1463 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1464 = bitcast %union.char64long16* %arraydecay1463 to [16 x i32]*
  %arrayidx1465 = getelementptr inbounds [16 x i32], [16 x i32]* %l1464, i64 0, i64 6
  %577 = load i32, i32* %arrayidx1465, align 8, !tbaa !14
  %arraydecay1466 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1467 = bitcast %union.char64long16* %arraydecay1466 to [16 x i32]*
  %arrayidx1468 = getelementptr inbounds [16 x i32], [16 x i32]* %l1467, i64 0, i64 1
  %578 = load i32, i32* %arrayidx1468, align 4, !tbaa !14
  %xor1469 = xor i32 %577, %578
  %arraydecay1470 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1471 = bitcast %union.char64long16* %arraydecay1470 to [16 x i32]*
  %arrayidx1472 = getelementptr inbounds [16 x i32], [16 x i32]* %l1471, i64 0, i64 11
  %579 = load i32, i32* %arrayidx1472, align 4, !tbaa !14
  %xor1473 = xor i32 %xor1469, %579
  %arraydecay1474 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1475 = bitcast %union.char64long16* %arraydecay1474 to [16 x i32]*
  %arrayidx1476 = getelementptr inbounds [16 x i32], [16 x i32]* %l1475, i64 0, i64 9
  %580 = load i32, i32* %arrayidx1476, align 4, !tbaa !14
  %xor1477 = xor i32 %xor1473, %580
  %shr1478 = lshr i32 %xor1477, 31
  %or1479 = or i32 %shl1462, %shr1478
  %arraydecay1480 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1481 = bitcast %union.char64long16* %arraydecay1480 to [16 x i32]*
  %arrayidx1482 = getelementptr inbounds [16 x i32], [16 x i32]* %l1481, i64 0, i64 9
  store i32 %or1479, i32* %arrayidx1482, align 4, !tbaa !14
  %add1483 = add i32 %or1446, %or1479
  %add1484 = add i32 %add1483, -1894007588
  %581 = load i32, i32* %e, align 4, !tbaa !15
  %shl1485 = shl i32 %581, 5
  %582 = load i32, i32* %e, align 4, !tbaa !15
  %shr1486 = lshr i32 %582, 27
  %or1487 = or i32 %shl1485, %shr1486
  %add1488 = add i32 %add1484, %or1487
  %583 = load i32, i32* %d, align 4, !tbaa !15
  %add1489 = add i32 %583, %add1488
  store i32 %add1489, i32* %d, align 4, !tbaa !15
  %584 = load i32, i32* %a, align 4, !tbaa !15
  %shl1490 = shl i32 %584, 30
  %585 = load i32, i32* %a, align 4, !tbaa !15
  %shr1491 = lshr i32 %585, 2
  %or1492 = or i32 %shl1490, %shr1491
  store i32 %or1492, i32* %a, align 4, !tbaa !15
  %586 = load i32, i32* %e, align 4, !tbaa !15
  %587 = load i32, i32* %a, align 4, !tbaa !15
  %or1493 = or i32 %586, %587
  %588 = load i32, i32* %b, align 4, !tbaa !15
  %and1494 = and i32 %or1493, %588
  %589 = load i32, i32* %e, align 4, !tbaa !15
  %590 = load i32, i32* %a, align 4, !tbaa !15
  %and1495 = and i32 %589, %590
  %or1496 = or i32 %and1494, %and1495
  %arraydecay1497 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1498 = bitcast %union.char64long16* %arraydecay1497 to [16 x i32]*
  %arrayidx1499 = getelementptr inbounds [16 x i32], [16 x i32]* %l1498, i64 0, i64 7
  %591 = load i32, i32* %arrayidx1499, align 4, !tbaa !14
  %arraydecay1500 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1501 = bitcast %union.char64long16* %arraydecay1500 to [16 x i32]*
  %arrayidx1502 = getelementptr inbounds [16 x i32], [16 x i32]* %l1501, i64 0, i64 2
  %592 = load i32, i32* %arrayidx1502, align 8, !tbaa !14
  %xor1503 = xor i32 %591, %592
  %arraydecay1504 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1505 = bitcast %union.char64long16* %arraydecay1504 to [16 x i32]*
  %arrayidx1506 = getelementptr inbounds [16 x i32], [16 x i32]* %l1505, i64 0, i64 12
  %593 = load i32, i32* %arrayidx1506, align 16, !tbaa !14
  %xor1507 = xor i32 %xor1503, %593
  %arraydecay1508 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1509 = bitcast %union.char64long16* %arraydecay1508 to [16 x i32]*
  %arrayidx1510 = getelementptr inbounds [16 x i32], [16 x i32]* %l1509, i64 0, i64 10
  %594 = load i32, i32* %arrayidx1510, align 8, !tbaa !14
  %xor1511 = xor i32 %xor1507, %594
  %shl1512 = shl i32 %xor1511, 1
  %arraydecay1513 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1514 = bitcast %union.char64long16* %arraydecay1513 to [16 x i32]*
  %arrayidx1515 = getelementptr inbounds [16 x i32], [16 x i32]* %l1514, i64 0, i64 7
  %595 = load i32, i32* %arrayidx1515, align 4, !tbaa !14
  %arraydecay1516 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1517 = bitcast %union.char64long16* %arraydecay1516 to [16 x i32]*
  %arrayidx1518 = getelementptr inbounds [16 x i32], [16 x i32]* %l1517, i64 0, i64 2
  %596 = load i32, i32* %arrayidx1518, align 8, !tbaa !14
  %xor1519 = xor i32 %595, %596
  %arraydecay1520 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1521 = bitcast %union.char64long16* %arraydecay1520 to [16 x i32]*
  %arrayidx1522 = getelementptr inbounds [16 x i32], [16 x i32]* %l1521, i64 0, i64 12
  %597 = load i32, i32* %arrayidx1522, align 16, !tbaa !14
  %xor1523 = xor i32 %xor1519, %597
  %arraydecay1524 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1525 = bitcast %union.char64long16* %arraydecay1524 to [16 x i32]*
  %arrayidx1526 = getelementptr inbounds [16 x i32], [16 x i32]* %l1525, i64 0, i64 10
  %598 = load i32, i32* %arrayidx1526, align 8, !tbaa !14
  %xor1527 = xor i32 %xor1523, %598
  %shr1528 = lshr i32 %xor1527, 31
  %or1529 = or i32 %shl1512, %shr1528
  %arraydecay1530 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1531 = bitcast %union.char64long16* %arraydecay1530 to [16 x i32]*
  %arrayidx1532 = getelementptr inbounds [16 x i32], [16 x i32]* %l1531, i64 0, i64 10
  store i32 %or1529, i32* %arrayidx1532, align 8, !tbaa !14
  %add1533 = add i32 %or1496, %or1529
  %add1534 = add i32 %add1533, -1894007588
  %599 = load i32, i32* %d, align 4, !tbaa !15
  %shl1535 = shl i32 %599, 5
  %600 = load i32, i32* %d, align 4, !tbaa !15
  %shr1536 = lshr i32 %600, 27
  %or1537 = or i32 %shl1535, %shr1536
  %add1538 = add i32 %add1534, %or1537
  %601 = load i32, i32* %c, align 4, !tbaa !15
  %add1539 = add i32 %601, %add1538
  store i32 %add1539, i32* %c, align 4, !tbaa !15
  %602 = load i32, i32* %e, align 4, !tbaa !15
  %shl1540 = shl i32 %602, 30
  %603 = load i32, i32* %e, align 4, !tbaa !15
  %shr1541 = lshr i32 %603, 2
  %or1542 = or i32 %shl1540, %shr1541
  store i32 %or1542, i32* %e, align 4, !tbaa !15
  %604 = load i32, i32* %d, align 4, !tbaa !15
  %605 = load i32, i32* %e, align 4, !tbaa !15
  %or1543 = or i32 %604, %605
  %606 = load i32, i32* %a, align 4, !tbaa !15
  %and1544 = and i32 %or1543, %606
  %607 = load i32, i32* %d, align 4, !tbaa !15
  %608 = load i32, i32* %e, align 4, !tbaa !15
  %and1545 = and i32 %607, %608
  %or1546 = or i32 %and1544, %and1545
  %arraydecay1547 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1548 = bitcast %union.char64long16* %arraydecay1547 to [16 x i32]*
  %arrayidx1549 = getelementptr inbounds [16 x i32], [16 x i32]* %l1548, i64 0, i64 8
  %609 = load i32, i32* %arrayidx1549, align 16, !tbaa !14
  %arraydecay1550 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1551 = bitcast %union.char64long16* %arraydecay1550 to [16 x i32]*
  %arrayidx1552 = getelementptr inbounds [16 x i32], [16 x i32]* %l1551, i64 0, i64 3
  %610 = load i32, i32* %arrayidx1552, align 4, !tbaa !14
  %xor1553 = xor i32 %609, %610
  %arraydecay1554 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1555 = bitcast %union.char64long16* %arraydecay1554 to [16 x i32]*
  %arrayidx1556 = getelementptr inbounds [16 x i32], [16 x i32]* %l1555, i64 0, i64 13
  %611 = load i32, i32* %arrayidx1556, align 4, !tbaa !14
  %xor1557 = xor i32 %xor1553, %611
  %arraydecay1558 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1559 = bitcast %union.char64long16* %arraydecay1558 to [16 x i32]*
  %arrayidx1560 = getelementptr inbounds [16 x i32], [16 x i32]* %l1559, i64 0, i64 11
  %612 = load i32, i32* %arrayidx1560, align 4, !tbaa !14
  %xor1561 = xor i32 %xor1557, %612
  %shl1562 = shl i32 %xor1561, 1
  %arraydecay1563 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1564 = bitcast %union.char64long16* %arraydecay1563 to [16 x i32]*
  %arrayidx1565 = getelementptr inbounds [16 x i32], [16 x i32]* %l1564, i64 0, i64 8
  %613 = load i32, i32* %arrayidx1565, align 16, !tbaa !14
  %arraydecay1566 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1567 = bitcast %union.char64long16* %arraydecay1566 to [16 x i32]*
  %arrayidx1568 = getelementptr inbounds [16 x i32], [16 x i32]* %l1567, i64 0, i64 3
  %614 = load i32, i32* %arrayidx1568, align 4, !tbaa !14
  %xor1569 = xor i32 %613, %614
  %arraydecay1570 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1571 = bitcast %union.char64long16* %arraydecay1570 to [16 x i32]*
  %arrayidx1572 = getelementptr inbounds [16 x i32], [16 x i32]* %l1571, i64 0, i64 13
  %615 = load i32, i32* %arrayidx1572, align 4, !tbaa !14
  %xor1573 = xor i32 %xor1569, %615
  %arraydecay1574 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1575 = bitcast %union.char64long16* %arraydecay1574 to [16 x i32]*
  %arrayidx1576 = getelementptr inbounds [16 x i32], [16 x i32]* %l1575, i64 0, i64 11
  %616 = load i32, i32* %arrayidx1576, align 4, !tbaa !14
  %xor1577 = xor i32 %xor1573, %616
  %shr1578 = lshr i32 %xor1577, 31
  %or1579 = or i32 %shl1562, %shr1578
  %arraydecay1580 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1581 = bitcast %union.char64long16* %arraydecay1580 to [16 x i32]*
  %arrayidx1582 = getelementptr inbounds [16 x i32], [16 x i32]* %l1581, i64 0, i64 11
  store i32 %or1579, i32* %arrayidx1582, align 4, !tbaa !14
  %add1583 = add i32 %or1546, %or1579
  %add1584 = add i32 %add1583, -1894007588
  %617 = load i32, i32* %c, align 4, !tbaa !15
  %shl1585 = shl i32 %617, 5
  %618 = load i32, i32* %c, align 4, !tbaa !15
  %shr1586 = lshr i32 %618, 27
  %or1587 = or i32 %shl1585, %shr1586
  %add1588 = add i32 %add1584, %or1587
  %619 = load i32, i32* %b, align 4, !tbaa !15
  %add1589 = add i32 %619, %add1588
  store i32 %add1589, i32* %b, align 4, !tbaa !15
  %620 = load i32, i32* %d, align 4, !tbaa !15
  %shl1590 = shl i32 %620, 30
  %621 = load i32, i32* %d, align 4, !tbaa !15
  %shr1591 = lshr i32 %621, 2
  %or1592 = or i32 %shl1590, %shr1591
  store i32 %or1592, i32* %d, align 4, !tbaa !15
  %622 = load i32, i32* %c, align 4, !tbaa !15
  %623 = load i32, i32* %d, align 4, !tbaa !15
  %or1593 = or i32 %622, %623
  %624 = load i32, i32* %e, align 4, !tbaa !15
  %and1594 = and i32 %or1593, %624
  %625 = load i32, i32* %c, align 4, !tbaa !15
  %626 = load i32, i32* %d, align 4, !tbaa !15
  %and1595 = and i32 %625, %626
  %or1596 = or i32 %and1594, %and1595
  %arraydecay1597 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1598 = bitcast %union.char64long16* %arraydecay1597 to [16 x i32]*
  %arrayidx1599 = getelementptr inbounds [16 x i32], [16 x i32]* %l1598, i64 0, i64 9
  %627 = load i32, i32* %arrayidx1599, align 4, !tbaa !14
  %arraydecay1600 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1601 = bitcast %union.char64long16* %arraydecay1600 to [16 x i32]*
  %arrayidx1602 = getelementptr inbounds [16 x i32], [16 x i32]* %l1601, i64 0, i64 4
  %628 = load i32, i32* %arrayidx1602, align 16, !tbaa !14
  %xor1603 = xor i32 %627, %628
  %arraydecay1604 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1605 = bitcast %union.char64long16* %arraydecay1604 to [16 x i32]*
  %arrayidx1606 = getelementptr inbounds [16 x i32], [16 x i32]* %l1605, i64 0, i64 14
  %629 = load i32, i32* %arrayidx1606, align 8, !tbaa !14
  %xor1607 = xor i32 %xor1603, %629
  %arraydecay1608 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1609 = bitcast %union.char64long16* %arraydecay1608 to [16 x i32]*
  %arrayidx1610 = getelementptr inbounds [16 x i32], [16 x i32]* %l1609, i64 0, i64 12
  %630 = load i32, i32* %arrayidx1610, align 16, !tbaa !14
  %xor1611 = xor i32 %xor1607, %630
  %shl1612 = shl i32 %xor1611, 1
  %arraydecay1613 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1614 = bitcast %union.char64long16* %arraydecay1613 to [16 x i32]*
  %arrayidx1615 = getelementptr inbounds [16 x i32], [16 x i32]* %l1614, i64 0, i64 9
  %631 = load i32, i32* %arrayidx1615, align 4, !tbaa !14
  %arraydecay1616 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1617 = bitcast %union.char64long16* %arraydecay1616 to [16 x i32]*
  %arrayidx1618 = getelementptr inbounds [16 x i32], [16 x i32]* %l1617, i64 0, i64 4
  %632 = load i32, i32* %arrayidx1618, align 16, !tbaa !14
  %xor1619 = xor i32 %631, %632
  %arraydecay1620 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1621 = bitcast %union.char64long16* %arraydecay1620 to [16 x i32]*
  %arrayidx1622 = getelementptr inbounds [16 x i32], [16 x i32]* %l1621, i64 0, i64 14
  %633 = load i32, i32* %arrayidx1622, align 8, !tbaa !14
  %xor1623 = xor i32 %xor1619, %633
  %arraydecay1624 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1625 = bitcast %union.char64long16* %arraydecay1624 to [16 x i32]*
  %arrayidx1626 = getelementptr inbounds [16 x i32], [16 x i32]* %l1625, i64 0, i64 12
  %634 = load i32, i32* %arrayidx1626, align 16, !tbaa !14
  %xor1627 = xor i32 %xor1623, %634
  %shr1628 = lshr i32 %xor1627, 31
  %or1629 = or i32 %shl1612, %shr1628
  %arraydecay1630 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1631 = bitcast %union.char64long16* %arraydecay1630 to [16 x i32]*
  %arrayidx1632 = getelementptr inbounds [16 x i32], [16 x i32]* %l1631, i64 0, i64 12
  store i32 %or1629, i32* %arrayidx1632, align 16, !tbaa !14
  %add1633 = add i32 %or1596, %or1629
  %add1634 = add i32 %add1633, -1894007588
  %635 = load i32, i32* %b, align 4, !tbaa !15
  %shl1635 = shl i32 %635, 5
  %636 = load i32, i32* %b, align 4, !tbaa !15
  %shr1636 = lshr i32 %636, 27
  %or1637 = or i32 %shl1635, %shr1636
  %add1638 = add i32 %add1634, %or1637
  %637 = load i32, i32* %a, align 4, !tbaa !15
  %add1639 = add i32 %637, %add1638
  store i32 %add1639, i32* %a, align 4, !tbaa !15
  %638 = load i32, i32* %c, align 4, !tbaa !15
  %shl1640 = shl i32 %638, 30
  %639 = load i32, i32* %c, align 4, !tbaa !15
  %shr1641 = lshr i32 %639, 2
  %or1642 = or i32 %shl1640, %shr1641
  store i32 %or1642, i32* %c, align 4, !tbaa !15
  %640 = load i32, i32* %b, align 4, !tbaa !15
  %641 = load i32, i32* %c, align 4, !tbaa !15
  %or1643 = or i32 %640, %641
  %642 = load i32, i32* %d, align 4, !tbaa !15
  %and1644 = and i32 %or1643, %642
  %643 = load i32, i32* %b, align 4, !tbaa !15
  %644 = load i32, i32* %c, align 4, !tbaa !15
  %and1645 = and i32 %643, %644
  %or1646 = or i32 %and1644, %and1645
  %arraydecay1647 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1648 = bitcast %union.char64long16* %arraydecay1647 to [16 x i32]*
  %arrayidx1649 = getelementptr inbounds [16 x i32], [16 x i32]* %l1648, i64 0, i64 10
  %645 = load i32, i32* %arrayidx1649, align 8, !tbaa !14
  %arraydecay1650 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1651 = bitcast %union.char64long16* %arraydecay1650 to [16 x i32]*
  %arrayidx1652 = getelementptr inbounds [16 x i32], [16 x i32]* %l1651, i64 0, i64 5
  %646 = load i32, i32* %arrayidx1652, align 4, !tbaa !14
  %xor1653 = xor i32 %645, %646
  %arraydecay1654 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1655 = bitcast %union.char64long16* %arraydecay1654 to [16 x i32]*
  %arrayidx1656 = getelementptr inbounds [16 x i32], [16 x i32]* %l1655, i64 0, i64 15
  %647 = load i32, i32* %arrayidx1656, align 4, !tbaa !14
  %xor1657 = xor i32 %xor1653, %647
  %arraydecay1658 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1659 = bitcast %union.char64long16* %arraydecay1658 to [16 x i32]*
  %arrayidx1660 = getelementptr inbounds [16 x i32], [16 x i32]* %l1659, i64 0, i64 13
  %648 = load i32, i32* %arrayidx1660, align 4, !tbaa !14
  %xor1661 = xor i32 %xor1657, %648
  %shl1662 = shl i32 %xor1661, 1
  %arraydecay1663 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1664 = bitcast %union.char64long16* %arraydecay1663 to [16 x i32]*
  %arrayidx1665 = getelementptr inbounds [16 x i32], [16 x i32]* %l1664, i64 0, i64 10
  %649 = load i32, i32* %arrayidx1665, align 8, !tbaa !14
  %arraydecay1666 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1667 = bitcast %union.char64long16* %arraydecay1666 to [16 x i32]*
  %arrayidx1668 = getelementptr inbounds [16 x i32], [16 x i32]* %l1667, i64 0, i64 5
  %650 = load i32, i32* %arrayidx1668, align 4, !tbaa !14
  %xor1669 = xor i32 %649, %650
  %arraydecay1670 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1671 = bitcast %union.char64long16* %arraydecay1670 to [16 x i32]*
  %arrayidx1672 = getelementptr inbounds [16 x i32], [16 x i32]* %l1671, i64 0, i64 15
  %651 = load i32, i32* %arrayidx1672, align 4, !tbaa !14
  %xor1673 = xor i32 %xor1669, %651
  %arraydecay1674 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1675 = bitcast %union.char64long16* %arraydecay1674 to [16 x i32]*
  %arrayidx1676 = getelementptr inbounds [16 x i32], [16 x i32]* %l1675, i64 0, i64 13
  %652 = load i32, i32* %arrayidx1676, align 4, !tbaa !14
  %xor1677 = xor i32 %xor1673, %652
  %shr1678 = lshr i32 %xor1677, 31
  %or1679 = or i32 %shl1662, %shr1678
  %arraydecay1680 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1681 = bitcast %union.char64long16* %arraydecay1680 to [16 x i32]*
  %arrayidx1682 = getelementptr inbounds [16 x i32], [16 x i32]* %l1681, i64 0, i64 13
  store i32 %or1679, i32* %arrayidx1682, align 4, !tbaa !14
  %add1683 = add i32 %or1646, %or1679
  %add1684 = add i32 %add1683, -1894007588
  %653 = load i32, i32* %a, align 4, !tbaa !15
  %shl1685 = shl i32 %653, 5
  %654 = load i32, i32* %a, align 4, !tbaa !15
  %shr1686 = lshr i32 %654, 27
  %or1687 = or i32 %shl1685, %shr1686
  %add1688 = add i32 %add1684, %or1687
  %655 = load i32, i32* %e, align 4, !tbaa !15
  %add1689 = add i32 %655, %add1688
  store i32 %add1689, i32* %e, align 4, !tbaa !15
  %656 = load i32, i32* %b, align 4, !tbaa !15
  %shl1690 = shl i32 %656, 30
  %657 = load i32, i32* %b, align 4, !tbaa !15
  %shr1691 = lshr i32 %657, 2
  %or1692 = or i32 %shl1690, %shr1691
  store i32 %or1692, i32* %b, align 4, !tbaa !15
  %658 = load i32, i32* %a, align 4, !tbaa !15
  %659 = load i32, i32* %b, align 4, !tbaa !15
  %or1693 = or i32 %658, %659
  %660 = load i32, i32* %c, align 4, !tbaa !15
  %and1694 = and i32 %or1693, %660
  %661 = load i32, i32* %a, align 4, !tbaa !15
  %662 = load i32, i32* %b, align 4, !tbaa !15
  %and1695 = and i32 %661, %662
  %or1696 = or i32 %and1694, %and1695
  %arraydecay1697 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1698 = bitcast %union.char64long16* %arraydecay1697 to [16 x i32]*
  %arrayidx1699 = getelementptr inbounds [16 x i32], [16 x i32]* %l1698, i64 0, i64 11
  %663 = load i32, i32* %arrayidx1699, align 4, !tbaa !14
  %arraydecay1700 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1701 = bitcast %union.char64long16* %arraydecay1700 to [16 x i32]*
  %arrayidx1702 = getelementptr inbounds [16 x i32], [16 x i32]* %l1701, i64 0, i64 6
  %664 = load i32, i32* %arrayidx1702, align 8, !tbaa !14
  %xor1703 = xor i32 %663, %664
  %arraydecay1704 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1705 = bitcast %union.char64long16* %arraydecay1704 to [16 x i32]*
  %arrayidx1706 = getelementptr inbounds [16 x i32], [16 x i32]* %l1705, i64 0, i64 0
  %665 = load i32, i32* %arrayidx1706, align 16, !tbaa !14
  %xor1707 = xor i32 %xor1703, %665
  %arraydecay1708 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1709 = bitcast %union.char64long16* %arraydecay1708 to [16 x i32]*
  %arrayidx1710 = getelementptr inbounds [16 x i32], [16 x i32]* %l1709, i64 0, i64 14
  %666 = load i32, i32* %arrayidx1710, align 8, !tbaa !14
  %xor1711 = xor i32 %xor1707, %666
  %shl1712 = shl i32 %xor1711, 1
  %arraydecay1713 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1714 = bitcast %union.char64long16* %arraydecay1713 to [16 x i32]*
  %arrayidx1715 = getelementptr inbounds [16 x i32], [16 x i32]* %l1714, i64 0, i64 11
  %667 = load i32, i32* %arrayidx1715, align 4, !tbaa !14
  %arraydecay1716 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1717 = bitcast %union.char64long16* %arraydecay1716 to [16 x i32]*
  %arrayidx1718 = getelementptr inbounds [16 x i32], [16 x i32]* %l1717, i64 0, i64 6
  %668 = load i32, i32* %arrayidx1718, align 8, !tbaa !14
  %xor1719 = xor i32 %667, %668
  %arraydecay1720 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1721 = bitcast %union.char64long16* %arraydecay1720 to [16 x i32]*
  %arrayidx1722 = getelementptr inbounds [16 x i32], [16 x i32]* %l1721, i64 0, i64 0
  %669 = load i32, i32* %arrayidx1722, align 16, !tbaa !14
  %xor1723 = xor i32 %xor1719, %669
  %arraydecay1724 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1725 = bitcast %union.char64long16* %arraydecay1724 to [16 x i32]*
  %arrayidx1726 = getelementptr inbounds [16 x i32], [16 x i32]* %l1725, i64 0, i64 14
  %670 = load i32, i32* %arrayidx1726, align 8, !tbaa !14
  %xor1727 = xor i32 %xor1723, %670
  %shr1728 = lshr i32 %xor1727, 31
  %or1729 = or i32 %shl1712, %shr1728
  %arraydecay1730 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1731 = bitcast %union.char64long16* %arraydecay1730 to [16 x i32]*
  %arrayidx1732 = getelementptr inbounds [16 x i32], [16 x i32]* %l1731, i64 0, i64 14
  store i32 %or1729, i32* %arrayidx1732, align 8, !tbaa !14
  %add1733 = add i32 %or1696, %or1729
  %add1734 = add i32 %add1733, -1894007588
  %671 = load i32, i32* %e, align 4, !tbaa !15
  %shl1735 = shl i32 %671, 5
  %672 = load i32, i32* %e, align 4, !tbaa !15
  %shr1736 = lshr i32 %672, 27
  %or1737 = or i32 %shl1735, %shr1736
  %add1738 = add i32 %add1734, %or1737
  %673 = load i32, i32* %d, align 4, !tbaa !15
  %add1739 = add i32 %673, %add1738
  store i32 %add1739, i32* %d, align 4, !tbaa !15
  %674 = load i32, i32* %a, align 4, !tbaa !15
  %shl1740 = shl i32 %674, 30
  %675 = load i32, i32* %a, align 4, !tbaa !15
  %shr1741 = lshr i32 %675, 2
  %or1742 = or i32 %shl1740, %shr1741
  store i32 %or1742, i32* %a, align 4, !tbaa !15
  %676 = load i32, i32* %e, align 4, !tbaa !15
  %677 = load i32, i32* %a, align 4, !tbaa !15
  %or1743 = or i32 %676, %677
  %678 = load i32, i32* %b, align 4, !tbaa !15
  %and1744 = and i32 %or1743, %678
  %679 = load i32, i32* %e, align 4, !tbaa !15
  %680 = load i32, i32* %a, align 4, !tbaa !15
  %and1745 = and i32 %679, %680
  %or1746 = or i32 %and1744, %and1745
  %arraydecay1747 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1748 = bitcast %union.char64long16* %arraydecay1747 to [16 x i32]*
  %arrayidx1749 = getelementptr inbounds [16 x i32], [16 x i32]* %l1748, i64 0, i64 12
  %681 = load i32, i32* %arrayidx1749, align 16, !tbaa !14
  %arraydecay1750 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1751 = bitcast %union.char64long16* %arraydecay1750 to [16 x i32]*
  %arrayidx1752 = getelementptr inbounds [16 x i32], [16 x i32]* %l1751, i64 0, i64 7
  %682 = load i32, i32* %arrayidx1752, align 4, !tbaa !14
  %xor1753 = xor i32 %681, %682
  %arraydecay1754 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1755 = bitcast %union.char64long16* %arraydecay1754 to [16 x i32]*
  %arrayidx1756 = getelementptr inbounds [16 x i32], [16 x i32]* %l1755, i64 0, i64 1
  %683 = load i32, i32* %arrayidx1756, align 4, !tbaa !14
  %xor1757 = xor i32 %xor1753, %683
  %arraydecay1758 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1759 = bitcast %union.char64long16* %arraydecay1758 to [16 x i32]*
  %arrayidx1760 = getelementptr inbounds [16 x i32], [16 x i32]* %l1759, i64 0, i64 15
  %684 = load i32, i32* %arrayidx1760, align 4, !tbaa !14
  %xor1761 = xor i32 %xor1757, %684
  %shl1762 = shl i32 %xor1761, 1
  %arraydecay1763 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1764 = bitcast %union.char64long16* %arraydecay1763 to [16 x i32]*
  %arrayidx1765 = getelementptr inbounds [16 x i32], [16 x i32]* %l1764, i64 0, i64 12
  %685 = load i32, i32* %arrayidx1765, align 16, !tbaa !14
  %arraydecay1766 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1767 = bitcast %union.char64long16* %arraydecay1766 to [16 x i32]*
  %arrayidx1768 = getelementptr inbounds [16 x i32], [16 x i32]* %l1767, i64 0, i64 7
  %686 = load i32, i32* %arrayidx1768, align 4, !tbaa !14
  %xor1769 = xor i32 %685, %686
  %arraydecay1770 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1771 = bitcast %union.char64long16* %arraydecay1770 to [16 x i32]*
  %arrayidx1772 = getelementptr inbounds [16 x i32], [16 x i32]* %l1771, i64 0, i64 1
  %687 = load i32, i32* %arrayidx1772, align 4, !tbaa !14
  %xor1773 = xor i32 %xor1769, %687
  %arraydecay1774 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1775 = bitcast %union.char64long16* %arraydecay1774 to [16 x i32]*
  %arrayidx1776 = getelementptr inbounds [16 x i32], [16 x i32]* %l1775, i64 0, i64 15
  %688 = load i32, i32* %arrayidx1776, align 4, !tbaa !14
  %xor1777 = xor i32 %xor1773, %688
  %shr1778 = lshr i32 %xor1777, 31
  %or1779 = or i32 %shl1762, %shr1778
  %arraydecay1780 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1781 = bitcast %union.char64long16* %arraydecay1780 to [16 x i32]*
  %arrayidx1782 = getelementptr inbounds [16 x i32], [16 x i32]* %l1781, i64 0, i64 15
  store i32 %or1779, i32* %arrayidx1782, align 4, !tbaa !14
  %add1783 = add i32 %or1746, %or1779
  %add1784 = add i32 %add1783, -1894007588
  %689 = load i32, i32* %d, align 4, !tbaa !15
  %shl1785 = shl i32 %689, 5
  %690 = load i32, i32* %d, align 4, !tbaa !15
  %shr1786 = lshr i32 %690, 27
  %or1787 = or i32 %shl1785, %shr1786
  %add1788 = add i32 %add1784, %or1787
  %691 = load i32, i32* %c, align 4, !tbaa !15
  %add1789 = add i32 %691, %add1788
  store i32 %add1789, i32* %c, align 4, !tbaa !15
  %692 = load i32, i32* %e, align 4, !tbaa !15
  %shl1790 = shl i32 %692, 30
  %693 = load i32, i32* %e, align 4, !tbaa !15
  %shr1791 = lshr i32 %693, 2
  %or1792 = or i32 %shl1790, %shr1791
  store i32 %or1792, i32* %e, align 4, !tbaa !15
  %694 = load i32, i32* %d, align 4, !tbaa !15
  %695 = load i32, i32* %e, align 4, !tbaa !15
  %or1793 = or i32 %694, %695
  %696 = load i32, i32* %a, align 4, !tbaa !15
  %and1794 = and i32 %or1793, %696
  %697 = load i32, i32* %d, align 4, !tbaa !15
  %698 = load i32, i32* %e, align 4, !tbaa !15
  %and1795 = and i32 %697, %698
  %or1796 = or i32 %and1794, %and1795
  %arraydecay1797 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1798 = bitcast %union.char64long16* %arraydecay1797 to [16 x i32]*
  %arrayidx1799 = getelementptr inbounds [16 x i32], [16 x i32]* %l1798, i64 0, i64 13
  %699 = load i32, i32* %arrayidx1799, align 4, !tbaa !14
  %arraydecay1800 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1801 = bitcast %union.char64long16* %arraydecay1800 to [16 x i32]*
  %arrayidx1802 = getelementptr inbounds [16 x i32], [16 x i32]* %l1801, i64 0, i64 8
  %700 = load i32, i32* %arrayidx1802, align 16, !tbaa !14
  %xor1803 = xor i32 %699, %700
  %arraydecay1804 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1805 = bitcast %union.char64long16* %arraydecay1804 to [16 x i32]*
  %arrayidx1806 = getelementptr inbounds [16 x i32], [16 x i32]* %l1805, i64 0, i64 2
  %701 = load i32, i32* %arrayidx1806, align 8, !tbaa !14
  %xor1807 = xor i32 %xor1803, %701
  %arraydecay1808 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1809 = bitcast %union.char64long16* %arraydecay1808 to [16 x i32]*
  %arrayidx1810 = getelementptr inbounds [16 x i32], [16 x i32]* %l1809, i64 0, i64 0
  %702 = load i32, i32* %arrayidx1810, align 16, !tbaa !14
  %xor1811 = xor i32 %xor1807, %702
  %shl1812 = shl i32 %xor1811, 1
  %arraydecay1813 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1814 = bitcast %union.char64long16* %arraydecay1813 to [16 x i32]*
  %arrayidx1815 = getelementptr inbounds [16 x i32], [16 x i32]* %l1814, i64 0, i64 13
  %703 = load i32, i32* %arrayidx1815, align 4, !tbaa !14
  %arraydecay1816 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1817 = bitcast %union.char64long16* %arraydecay1816 to [16 x i32]*
  %arrayidx1818 = getelementptr inbounds [16 x i32], [16 x i32]* %l1817, i64 0, i64 8
  %704 = load i32, i32* %arrayidx1818, align 16, !tbaa !14
  %xor1819 = xor i32 %703, %704
  %arraydecay1820 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1821 = bitcast %union.char64long16* %arraydecay1820 to [16 x i32]*
  %arrayidx1822 = getelementptr inbounds [16 x i32], [16 x i32]* %l1821, i64 0, i64 2
  %705 = load i32, i32* %arrayidx1822, align 8, !tbaa !14
  %xor1823 = xor i32 %xor1819, %705
  %arraydecay1824 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1825 = bitcast %union.char64long16* %arraydecay1824 to [16 x i32]*
  %arrayidx1826 = getelementptr inbounds [16 x i32], [16 x i32]* %l1825, i64 0, i64 0
  %706 = load i32, i32* %arrayidx1826, align 16, !tbaa !14
  %xor1827 = xor i32 %xor1823, %706
  %shr1828 = lshr i32 %xor1827, 31
  %or1829 = or i32 %shl1812, %shr1828
  %arraydecay1830 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1831 = bitcast %union.char64long16* %arraydecay1830 to [16 x i32]*
  %arrayidx1832 = getelementptr inbounds [16 x i32], [16 x i32]* %l1831, i64 0, i64 0
  store i32 %or1829, i32* %arrayidx1832, align 16, !tbaa !14
  %add1833 = add i32 %or1796, %or1829
  %add1834 = add i32 %add1833, -1894007588
  %707 = load i32, i32* %c, align 4, !tbaa !15
  %shl1835 = shl i32 %707, 5
  %708 = load i32, i32* %c, align 4, !tbaa !15
  %shr1836 = lshr i32 %708, 27
  %or1837 = or i32 %shl1835, %shr1836
  %add1838 = add i32 %add1834, %or1837
  %709 = load i32, i32* %b, align 4, !tbaa !15
  %add1839 = add i32 %709, %add1838
  store i32 %add1839, i32* %b, align 4, !tbaa !15
  %710 = load i32, i32* %d, align 4, !tbaa !15
  %shl1840 = shl i32 %710, 30
  %711 = load i32, i32* %d, align 4, !tbaa !15
  %shr1841 = lshr i32 %711, 2
  %or1842 = or i32 %shl1840, %shr1841
  store i32 %or1842, i32* %d, align 4, !tbaa !15
  %712 = load i32, i32* %c, align 4, !tbaa !15
  %713 = load i32, i32* %d, align 4, !tbaa !15
  %or1843 = or i32 %712, %713
  %714 = load i32, i32* %e, align 4, !tbaa !15
  %and1844 = and i32 %or1843, %714
  %715 = load i32, i32* %c, align 4, !tbaa !15
  %716 = load i32, i32* %d, align 4, !tbaa !15
  %and1845 = and i32 %715, %716
  %or1846 = or i32 %and1844, %and1845
  %arraydecay1847 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1848 = bitcast %union.char64long16* %arraydecay1847 to [16 x i32]*
  %arrayidx1849 = getelementptr inbounds [16 x i32], [16 x i32]* %l1848, i64 0, i64 14
  %717 = load i32, i32* %arrayidx1849, align 8, !tbaa !14
  %arraydecay1850 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1851 = bitcast %union.char64long16* %arraydecay1850 to [16 x i32]*
  %arrayidx1852 = getelementptr inbounds [16 x i32], [16 x i32]* %l1851, i64 0, i64 9
  %718 = load i32, i32* %arrayidx1852, align 4, !tbaa !14
  %xor1853 = xor i32 %717, %718
  %arraydecay1854 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1855 = bitcast %union.char64long16* %arraydecay1854 to [16 x i32]*
  %arrayidx1856 = getelementptr inbounds [16 x i32], [16 x i32]* %l1855, i64 0, i64 3
  %719 = load i32, i32* %arrayidx1856, align 4, !tbaa !14
  %xor1857 = xor i32 %xor1853, %719
  %arraydecay1858 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1859 = bitcast %union.char64long16* %arraydecay1858 to [16 x i32]*
  %arrayidx1860 = getelementptr inbounds [16 x i32], [16 x i32]* %l1859, i64 0, i64 1
  %720 = load i32, i32* %arrayidx1860, align 4, !tbaa !14
  %xor1861 = xor i32 %xor1857, %720
  %shl1862 = shl i32 %xor1861, 1
  %arraydecay1863 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1864 = bitcast %union.char64long16* %arraydecay1863 to [16 x i32]*
  %arrayidx1865 = getelementptr inbounds [16 x i32], [16 x i32]* %l1864, i64 0, i64 14
  %721 = load i32, i32* %arrayidx1865, align 8, !tbaa !14
  %arraydecay1866 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1867 = bitcast %union.char64long16* %arraydecay1866 to [16 x i32]*
  %arrayidx1868 = getelementptr inbounds [16 x i32], [16 x i32]* %l1867, i64 0, i64 9
  %722 = load i32, i32* %arrayidx1868, align 4, !tbaa !14
  %xor1869 = xor i32 %721, %722
  %arraydecay1870 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1871 = bitcast %union.char64long16* %arraydecay1870 to [16 x i32]*
  %arrayidx1872 = getelementptr inbounds [16 x i32], [16 x i32]* %l1871, i64 0, i64 3
  %723 = load i32, i32* %arrayidx1872, align 4, !tbaa !14
  %xor1873 = xor i32 %xor1869, %723
  %arraydecay1874 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1875 = bitcast %union.char64long16* %arraydecay1874 to [16 x i32]*
  %arrayidx1876 = getelementptr inbounds [16 x i32], [16 x i32]* %l1875, i64 0, i64 1
  %724 = load i32, i32* %arrayidx1876, align 4, !tbaa !14
  %xor1877 = xor i32 %xor1873, %724
  %shr1878 = lshr i32 %xor1877, 31
  %or1879 = or i32 %shl1862, %shr1878
  %arraydecay1880 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1881 = bitcast %union.char64long16* %arraydecay1880 to [16 x i32]*
  %arrayidx1882 = getelementptr inbounds [16 x i32], [16 x i32]* %l1881, i64 0, i64 1
  store i32 %or1879, i32* %arrayidx1882, align 4, !tbaa !14
  %add1883 = add i32 %or1846, %or1879
  %add1884 = add i32 %add1883, -1894007588
  %725 = load i32, i32* %b, align 4, !tbaa !15
  %shl1885 = shl i32 %725, 5
  %726 = load i32, i32* %b, align 4, !tbaa !15
  %shr1886 = lshr i32 %726, 27
  %or1887 = or i32 %shl1885, %shr1886
  %add1888 = add i32 %add1884, %or1887
  %727 = load i32, i32* %a, align 4, !tbaa !15
  %add1889 = add i32 %727, %add1888
  store i32 %add1889, i32* %a, align 4, !tbaa !15
  %728 = load i32, i32* %c, align 4, !tbaa !15
  %shl1890 = shl i32 %728, 30
  %729 = load i32, i32* %c, align 4, !tbaa !15
  %shr1891 = lshr i32 %729, 2
  %or1892 = or i32 %shl1890, %shr1891
  store i32 %or1892, i32* %c, align 4, !tbaa !15
  %730 = load i32, i32* %b, align 4, !tbaa !15
  %731 = load i32, i32* %c, align 4, !tbaa !15
  %or1893 = or i32 %730, %731
  %732 = load i32, i32* %d, align 4, !tbaa !15
  %and1894 = and i32 %or1893, %732
  %733 = load i32, i32* %b, align 4, !tbaa !15
  %734 = load i32, i32* %c, align 4, !tbaa !15
  %and1895 = and i32 %733, %734
  %or1896 = or i32 %and1894, %and1895
  %arraydecay1897 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1898 = bitcast %union.char64long16* %arraydecay1897 to [16 x i32]*
  %arrayidx1899 = getelementptr inbounds [16 x i32], [16 x i32]* %l1898, i64 0, i64 15
  %735 = load i32, i32* %arrayidx1899, align 4, !tbaa !14
  %arraydecay1900 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1901 = bitcast %union.char64long16* %arraydecay1900 to [16 x i32]*
  %arrayidx1902 = getelementptr inbounds [16 x i32], [16 x i32]* %l1901, i64 0, i64 10
  %736 = load i32, i32* %arrayidx1902, align 8, !tbaa !14
  %xor1903 = xor i32 %735, %736
  %arraydecay1904 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1905 = bitcast %union.char64long16* %arraydecay1904 to [16 x i32]*
  %arrayidx1906 = getelementptr inbounds [16 x i32], [16 x i32]* %l1905, i64 0, i64 4
  %737 = load i32, i32* %arrayidx1906, align 16, !tbaa !14
  %xor1907 = xor i32 %xor1903, %737
  %arraydecay1908 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1909 = bitcast %union.char64long16* %arraydecay1908 to [16 x i32]*
  %arrayidx1910 = getelementptr inbounds [16 x i32], [16 x i32]* %l1909, i64 0, i64 2
  %738 = load i32, i32* %arrayidx1910, align 8, !tbaa !14
  %xor1911 = xor i32 %xor1907, %738
  %shl1912 = shl i32 %xor1911, 1
  %arraydecay1913 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1914 = bitcast %union.char64long16* %arraydecay1913 to [16 x i32]*
  %arrayidx1915 = getelementptr inbounds [16 x i32], [16 x i32]* %l1914, i64 0, i64 15
  %739 = load i32, i32* %arrayidx1915, align 4, !tbaa !14
  %arraydecay1916 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1917 = bitcast %union.char64long16* %arraydecay1916 to [16 x i32]*
  %arrayidx1918 = getelementptr inbounds [16 x i32], [16 x i32]* %l1917, i64 0, i64 10
  %740 = load i32, i32* %arrayidx1918, align 8, !tbaa !14
  %xor1919 = xor i32 %739, %740
  %arraydecay1920 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1921 = bitcast %union.char64long16* %arraydecay1920 to [16 x i32]*
  %arrayidx1922 = getelementptr inbounds [16 x i32], [16 x i32]* %l1921, i64 0, i64 4
  %741 = load i32, i32* %arrayidx1922, align 16, !tbaa !14
  %xor1923 = xor i32 %xor1919, %741
  %arraydecay1924 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1925 = bitcast %union.char64long16* %arraydecay1924 to [16 x i32]*
  %arrayidx1926 = getelementptr inbounds [16 x i32], [16 x i32]* %l1925, i64 0, i64 2
  %742 = load i32, i32* %arrayidx1926, align 8, !tbaa !14
  %xor1927 = xor i32 %xor1923, %742
  %shr1928 = lshr i32 %xor1927, 31
  %or1929 = or i32 %shl1912, %shr1928
  %arraydecay1930 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1931 = bitcast %union.char64long16* %arraydecay1930 to [16 x i32]*
  %arrayidx1932 = getelementptr inbounds [16 x i32], [16 x i32]* %l1931, i64 0, i64 2
  store i32 %or1929, i32* %arrayidx1932, align 8, !tbaa !14
  %add1933 = add i32 %or1896, %or1929
  %add1934 = add i32 %add1933, -1894007588
  %743 = load i32, i32* %a, align 4, !tbaa !15
  %shl1935 = shl i32 %743, 5
  %744 = load i32, i32* %a, align 4, !tbaa !15
  %shr1936 = lshr i32 %744, 27
  %or1937 = or i32 %shl1935, %shr1936
  %add1938 = add i32 %add1934, %or1937
  %745 = load i32, i32* %e, align 4, !tbaa !15
  %add1939 = add i32 %745, %add1938
  store i32 %add1939, i32* %e, align 4, !tbaa !15
  %746 = load i32, i32* %b, align 4, !tbaa !15
  %shl1940 = shl i32 %746, 30
  %747 = load i32, i32* %b, align 4, !tbaa !15
  %shr1941 = lshr i32 %747, 2
  %or1942 = or i32 %shl1940, %shr1941
  store i32 %or1942, i32* %b, align 4, !tbaa !15
  %748 = load i32, i32* %a, align 4, !tbaa !15
  %749 = load i32, i32* %b, align 4, !tbaa !15
  %or1943 = or i32 %748, %749
  %750 = load i32, i32* %c, align 4, !tbaa !15
  %and1944 = and i32 %or1943, %750
  %751 = load i32, i32* %a, align 4, !tbaa !15
  %752 = load i32, i32* %b, align 4, !tbaa !15
  %and1945 = and i32 %751, %752
  %or1946 = or i32 %and1944, %and1945
  %arraydecay1947 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1948 = bitcast %union.char64long16* %arraydecay1947 to [16 x i32]*
  %arrayidx1949 = getelementptr inbounds [16 x i32], [16 x i32]* %l1948, i64 0, i64 0
  %753 = load i32, i32* %arrayidx1949, align 16, !tbaa !14
  %arraydecay1950 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1951 = bitcast %union.char64long16* %arraydecay1950 to [16 x i32]*
  %arrayidx1952 = getelementptr inbounds [16 x i32], [16 x i32]* %l1951, i64 0, i64 11
  %754 = load i32, i32* %arrayidx1952, align 4, !tbaa !14
  %xor1953 = xor i32 %753, %754
  %arraydecay1954 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1955 = bitcast %union.char64long16* %arraydecay1954 to [16 x i32]*
  %arrayidx1956 = getelementptr inbounds [16 x i32], [16 x i32]* %l1955, i64 0, i64 5
  %755 = load i32, i32* %arrayidx1956, align 4, !tbaa !14
  %xor1957 = xor i32 %xor1953, %755
  %arraydecay1958 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1959 = bitcast %union.char64long16* %arraydecay1958 to [16 x i32]*
  %arrayidx1960 = getelementptr inbounds [16 x i32], [16 x i32]* %l1959, i64 0, i64 3
  %756 = load i32, i32* %arrayidx1960, align 4, !tbaa !14
  %xor1961 = xor i32 %xor1957, %756
  %shl1962 = shl i32 %xor1961, 1
  %arraydecay1963 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1964 = bitcast %union.char64long16* %arraydecay1963 to [16 x i32]*
  %arrayidx1965 = getelementptr inbounds [16 x i32], [16 x i32]* %l1964, i64 0, i64 0
  %757 = load i32, i32* %arrayidx1965, align 16, !tbaa !14
  %arraydecay1966 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1967 = bitcast %union.char64long16* %arraydecay1966 to [16 x i32]*
  %arrayidx1968 = getelementptr inbounds [16 x i32], [16 x i32]* %l1967, i64 0, i64 11
  %758 = load i32, i32* %arrayidx1968, align 4, !tbaa !14
  %xor1969 = xor i32 %757, %758
  %arraydecay1970 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1971 = bitcast %union.char64long16* %arraydecay1970 to [16 x i32]*
  %arrayidx1972 = getelementptr inbounds [16 x i32], [16 x i32]* %l1971, i64 0, i64 5
  %759 = load i32, i32* %arrayidx1972, align 4, !tbaa !14
  %xor1973 = xor i32 %xor1969, %759
  %arraydecay1974 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1975 = bitcast %union.char64long16* %arraydecay1974 to [16 x i32]*
  %arrayidx1976 = getelementptr inbounds [16 x i32], [16 x i32]* %l1975, i64 0, i64 3
  %760 = load i32, i32* %arrayidx1976, align 4, !tbaa !14
  %xor1977 = xor i32 %xor1973, %760
  %shr1978 = lshr i32 %xor1977, 31
  %or1979 = or i32 %shl1962, %shr1978
  %arraydecay1980 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1981 = bitcast %union.char64long16* %arraydecay1980 to [16 x i32]*
  %arrayidx1982 = getelementptr inbounds [16 x i32], [16 x i32]* %l1981, i64 0, i64 3
  store i32 %or1979, i32* %arrayidx1982, align 4, !tbaa !14
  %add1983 = add i32 %or1946, %or1979
  %add1984 = add i32 %add1983, -1894007588
  %761 = load i32, i32* %e, align 4, !tbaa !15
  %shl1985 = shl i32 %761, 5
  %762 = load i32, i32* %e, align 4, !tbaa !15
  %shr1986 = lshr i32 %762, 27
  %or1987 = or i32 %shl1985, %shr1986
  %add1988 = add i32 %add1984, %or1987
  %763 = load i32, i32* %d, align 4, !tbaa !15
  %add1989 = add i32 %763, %add1988
  store i32 %add1989, i32* %d, align 4, !tbaa !15
  %764 = load i32, i32* %a, align 4, !tbaa !15
  %shl1990 = shl i32 %764, 30
  %765 = load i32, i32* %a, align 4, !tbaa !15
  %shr1991 = lshr i32 %765, 2
  %or1992 = or i32 %shl1990, %shr1991
  store i32 %or1992, i32* %a, align 4, !tbaa !15
  %766 = load i32, i32* %e, align 4, !tbaa !15
  %767 = load i32, i32* %a, align 4, !tbaa !15
  %or1993 = or i32 %766, %767
  %768 = load i32, i32* %b, align 4, !tbaa !15
  %and1994 = and i32 %or1993, %768
  %769 = load i32, i32* %e, align 4, !tbaa !15
  %770 = load i32, i32* %a, align 4, !tbaa !15
  %and1995 = and i32 %769, %770
  %or1996 = or i32 %and1994, %and1995
  %arraydecay1997 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1998 = bitcast %union.char64long16* %arraydecay1997 to [16 x i32]*
  %arrayidx1999 = getelementptr inbounds [16 x i32], [16 x i32]* %l1998, i64 0, i64 1
  %771 = load i32, i32* %arrayidx1999, align 4, !tbaa !14
  %arraydecay2000 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2001 = bitcast %union.char64long16* %arraydecay2000 to [16 x i32]*
  %arrayidx2002 = getelementptr inbounds [16 x i32], [16 x i32]* %l2001, i64 0, i64 12
  %772 = load i32, i32* %arrayidx2002, align 16, !tbaa !14
  %xor2003 = xor i32 %771, %772
  %arraydecay2004 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2005 = bitcast %union.char64long16* %arraydecay2004 to [16 x i32]*
  %arrayidx2006 = getelementptr inbounds [16 x i32], [16 x i32]* %l2005, i64 0, i64 6
  %773 = load i32, i32* %arrayidx2006, align 8, !tbaa !14
  %xor2007 = xor i32 %xor2003, %773
  %arraydecay2008 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2009 = bitcast %union.char64long16* %arraydecay2008 to [16 x i32]*
  %arrayidx2010 = getelementptr inbounds [16 x i32], [16 x i32]* %l2009, i64 0, i64 4
  %774 = load i32, i32* %arrayidx2010, align 16, !tbaa !14
  %xor2011 = xor i32 %xor2007, %774
  %shl2012 = shl i32 %xor2011, 1
  %arraydecay2013 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2014 = bitcast %union.char64long16* %arraydecay2013 to [16 x i32]*
  %arrayidx2015 = getelementptr inbounds [16 x i32], [16 x i32]* %l2014, i64 0, i64 1
  %775 = load i32, i32* %arrayidx2015, align 4, !tbaa !14
  %arraydecay2016 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2017 = bitcast %union.char64long16* %arraydecay2016 to [16 x i32]*
  %arrayidx2018 = getelementptr inbounds [16 x i32], [16 x i32]* %l2017, i64 0, i64 12
  %776 = load i32, i32* %arrayidx2018, align 16, !tbaa !14
  %xor2019 = xor i32 %775, %776
  %arraydecay2020 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2021 = bitcast %union.char64long16* %arraydecay2020 to [16 x i32]*
  %arrayidx2022 = getelementptr inbounds [16 x i32], [16 x i32]* %l2021, i64 0, i64 6
  %777 = load i32, i32* %arrayidx2022, align 8, !tbaa !14
  %xor2023 = xor i32 %xor2019, %777
  %arraydecay2024 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2025 = bitcast %union.char64long16* %arraydecay2024 to [16 x i32]*
  %arrayidx2026 = getelementptr inbounds [16 x i32], [16 x i32]* %l2025, i64 0, i64 4
  %778 = load i32, i32* %arrayidx2026, align 16, !tbaa !14
  %xor2027 = xor i32 %xor2023, %778
  %shr2028 = lshr i32 %xor2027, 31
  %or2029 = or i32 %shl2012, %shr2028
  %arraydecay2030 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2031 = bitcast %union.char64long16* %arraydecay2030 to [16 x i32]*
  %arrayidx2032 = getelementptr inbounds [16 x i32], [16 x i32]* %l2031, i64 0, i64 4
  store i32 %or2029, i32* %arrayidx2032, align 16, !tbaa !14
  %add2033 = add i32 %or1996, %or2029
  %add2034 = add i32 %add2033, -1894007588
  %779 = load i32, i32* %d, align 4, !tbaa !15
  %shl2035 = shl i32 %779, 5
  %780 = load i32, i32* %d, align 4, !tbaa !15
  %shr2036 = lshr i32 %780, 27
  %or2037 = or i32 %shl2035, %shr2036
  %add2038 = add i32 %add2034, %or2037
  %781 = load i32, i32* %c, align 4, !tbaa !15
  %add2039 = add i32 %781, %add2038
  store i32 %add2039, i32* %c, align 4, !tbaa !15
  %782 = load i32, i32* %e, align 4, !tbaa !15
  %shl2040 = shl i32 %782, 30
  %783 = load i32, i32* %e, align 4, !tbaa !15
  %shr2041 = lshr i32 %783, 2
  %or2042 = or i32 %shl2040, %shr2041
  store i32 %or2042, i32* %e, align 4, !tbaa !15
  %784 = load i32, i32* %d, align 4, !tbaa !15
  %785 = load i32, i32* %e, align 4, !tbaa !15
  %or2043 = or i32 %784, %785
  %786 = load i32, i32* %a, align 4, !tbaa !15
  %and2044 = and i32 %or2043, %786
  %787 = load i32, i32* %d, align 4, !tbaa !15
  %788 = load i32, i32* %e, align 4, !tbaa !15
  %and2045 = and i32 %787, %788
  %or2046 = or i32 %and2044, %and2045
  %arraydecay2047 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2048 = bitcast %union.char64long16* %arraydecay2047 to [16 x i32]*
  %arrayidx2049 = getelementptr inbounds [16 x i32], [16 x i32]* %l2048, i64 0, i64 2
  %789 = load i32, i32* %arrayidx2049, align 8, !tbaa !14
  %arraydecay2050 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2051 = bitcast %union.char64long16* %arraydecay2050 to [16 x i32]*
  %arrayidx2052 = getelementptr inbounds [16 x i32], [16 x i32]* %l2051, i64 0, i64 13
  %790 = load i32, i32* %arrayidx2052, align 4, !tbaa !14
  %xor2053 = xor i32 %789, %790
  %arraydecay2054 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2055 = bitcast %union.char64long16* %arraydecay2054 to [16 x i32]*
  %arrayidx2056 = getelementptr inbounds [16 x i32], [16 x i32]* %l2055, i64 0, i64 7
  %791 = load i32, i32* %arrayidx2056, align 4, !tbaa !14
  %xor2057 = xor i32 %xor2053, %791
  %arraydecay2058 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2059 = bitcast %union.char64long16* %arraydecay2058 to [16 x i32]*
  %arrayidx2060 = getelementptr inbounds [16 x i32], [16 x i32]* %l2059, i64 0, i64 5
  %792 = load i32, i32* %arrayidx2060, align 4, !tbaa !14
  %xor2061 = xor i32 %xor2057, %792
  %shl2062 = shl i32 %xor2061, 1
  %arraydecay2063 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2064 = bitcast %union.char64long16* %arraydecay2063 to [16 x i32]*
  %arrayidx2065 = getelementptr inbounds [16 x i32], [16 x i32]* %l2064, i64 0, i64 2
  %793 = load i32, i32* %arrayidx2065, align 8, !tbaa !14
  %arraydecay2066 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2067 = bitcast %union.char64long16* %arraydecay2066 to [16 x i32]*
  %arrayidx2068 = getelementptr inbounds [16 x i32], [16 x i32]* %l2067, i64 0, i64 13
  %794 = load i32, i32* %arrayidx2068, align 4, !tbaa !14
  %xor2069 = xor i32 %793, %794
  %arraydecay2070 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2071 = bitcast %union.char64long16* %arraydecay2070 to [16 x i32]*
  %arrayidx2072 = getelementptr inbounds [16 x i32], [16 x i32]* %l2071, i64 0, i64 7
  %795 = load i32, i32* %arrayidx2072, align 4, !tbaa !14
  %xor2073 = xor i32 %xor2069, %795
  %arraydecay2074 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2075 = bitcast %union.char64long16* %arraydecay2074 to [16 x i32]*
  %arrayidx2076 = getelementptr inbounds [16 x i32], [16 x i32]* %l2075, i64 0, i64 5
  %796 = load i32, i32* %arrayidx2076, align 4, !tbaa !14
  %xor2077 = xor i32 %xor2073, %796
  %shr2078 = lshr i32 %xor2077, 31
  %or2079 = or i32 %shl2062, %shr2078
  %arraydecay2080 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2081 = bitcast %union.char64long16* %arraydecay2080 to [16 x i32]*
  %arrayidx2082 = getelementptr inbounds [16 x i32], [16 x i32]* %l2081, i64 0, i64 5
  store i32 %or2079, i32* %arrayidx2082, align 4, !tbaa !14
  %add2083 = add i32 %or2046, %or2079
  %add2084 = add i32 %add2083, -1894007588
  %797 = load i32, i32* %c, align 4, !tbaa !15
  %shl2085 = shl i32 %797, 5
  %798 = load i32, i32* %c, align 4, !tbaa !15
  %shr2086 = lshr i32 %798, 27
  %or2087 = or i32 %shl2085, %shr2086
  %add2088 = add i32 %add2084, %or2087
  %799 = load i32, i32* %b, align 4, !tbaa !15
  %add2089 = add i32 %799, %add2088
  store i32 %add2089, i32* %b, align 4, !tbaa !15
  %800 = load i32, i32* %d, align 4, !tbaa !15
  %shl2090 = shl i32 %800, 30
  %801 = load i32, i32* %d, align 4, !tbaa !15
  %shr2091 = lshr i32 %801, 2
  %or2092 = or i32 %shl2090, %shr2091
  store i32 %or2092, i32* %d, align 4, !tbaa !15
  %802 = load i32, i32* %c, align 4, !tbaa !15
  %803 = load i32, i32* %d, align 4, !tbaa !15
  %or2093 = or i32 %802, %803
  %804 = load i32, i32* %e, align 4, !tbaa !15
  %and2094 = and i32 %or2093, %804
  %805 = load i32, i32* %c, align 4, !tbaa !15
  %806 = load i32, i32* %d, align 4, !tbaa !15
  %and2095 = and i32 %805, %806
  %or2096 = or i32 %and2094, %and2095
  %arraydecay2097 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2098 = bitcast %union.char64long16* %arraydecay2097 to [16 x i32]*
  %arrayidx2099 = getelementptr inbounds [16 x i32], [16 x i32]* %l2098, i64 0, i64 3
  %807 = load i32, i32* %arrayidx2099, align 4, !tbaa !14
  %arraydecay2100 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2101 = bitcast %union.char64long16* %arraydecay2100 to [16 x i32]*
  %arrayidx2102 = getelementptr inbounds [16 x i32], [16 x i32]* %l2101, i64 0, i64 14
  %808 = load i32, i32* %arrayidx2102, align 8, !tbaa !14
  %xor2103 = xor i32 %807, %808
  %arraydecay2104 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2105 = bitcast %union.char64long16* %arraydecay2104 to [16 x i32]*
  %arrayidx2106 = getelementptr inbounds [16 x i32], [16 x i32]* %l2105, i64 0, i64 8
  %809 = load i32, i32* %arrayidx2106, align 16, !tbaa !14
  %xor2107 = xor i32 %xor2103, %809
  %arraydecay2108 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2109 = bitcast %union.char64long16* %arraydecay2108 to [16 x i32]*
  %arrayidx2110 = getelementptr inbounds [16 x i32], [16 x i32]* %l2109, i64 0, i64 6
  %810 = load i32, i32* %arrayidx2110, align 8, !tbaa !14
  %xor2111 = xor i32 %xor2107, %810
  %shl2112 = shl i32 %xor2111, 1
  %arraydecay2113 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2114 = bitcast %union.char64long16* %arraydecay2113 to [16 x i32]*
  %arrayidx2115 = getelementptr inbounds [16 x i32], [16 x i32]* %l2114, i64 0, i64 3
  %811 = load i32, i32* %arrayidx2115, align 4, !tbaa !14
  %arraydecay2116 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2117 = bitcast %union.char64long16* %arraydecay2116 to [16 x i32]*
  %arrayidx2118 = getelementptr inbounds [16 x i32], [16 x i32]* %l2117, i64 0, i64 14
  %812 = load i32, i32* %arrayidx2118, align 8, !tbaa !14
  %xor2119 = xor i32 %811, %812
  %arraydecay2120 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2121 = bitcast %union.char64long16* %arraydecay2120 to [16 x i32]*
  %arrayidx2122 = getelementptr inbounds [16 x i32], [16 x i32]* %l2121, i64 0, i64 8
  %813 = load i32, i32* %arrayidx2122, align 16, !tbaa !14
  %xor2123 = xor i32 %xor2119, %813
  %arraydecay2124 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2125 = bitcast %union.char64long16* %arraydecay2124 to [16 x i32]*
  %arrayidx2126 = getelementptr inbounds [16 x i32], [16 x i32]* %l2125, i64 0, i64 6
  %814 = load i32, i32* %arrayidx2126, align 8, !tbaa !14
  %xor2127 = xor i32 %xor2123, %814
  %shr2128 = lshr i32 %xor2127, 31
  %or2129 = or i32 %shl2112, %shr2128
  %arraydecay2130 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2131 = bitcast %union.char64long16* %arraydecay2130 to [16 x i32]*
  %arrayidx2132 = getelementptr inbounds [16 x i32], [16 x i32]* %l2131, i64 0, i64 6
  store i32 %or2129, i32* %arrayidx2132, align 8, !tbaa !14
  %add2133 = add i32 %or2096, %or2129
  %add2134 = add i32 %add2133, -1894007588
  %815 = load i32, i32* %b, align 4, !tbaa !15
  %shl2135 = shl i32 %815, 5
  %816 = load i32, i32* %b, align 4, !tbaa !15
  %shr2136 = lshr i32 %816, 27
  %or2137 = or i32 %shl2135, %shr2136
  %add2138 = add i32 %add2134, %or2137
  %817 = load i32, i32* %a, align 4, !tbaa !15
  %add2139 = add i32 %817, %add2138
  store i32 %add2139, i32* %a, align 4, !tbaa !15
  %818 = load i32, i32* %c, align 4, !tbaa !15
  %shl2140 = shl i32 %818, 30
  %819 = load i32, i32* %c, align 4, !tbaa !15
  %shr2141 = lshr i32 %819, 2
  %or2142 = or i32 %shl2140, %shr2141
  store i32 %or2142, i32* %c, align 4, !tbaa !15
  %820 = load i32, i32* %b, align 4, !tbaa !15
  %821 = load i32, i32* %c, align 4, !tbaa !15
  %or2143 = or i32 %820, %821
  %822 = load i32, i32* %d, align 4, !tbaa !15
  %and2144 = and i32 %or2143, %822
  %823 = load i32, i32* %b, align 4, !tbaa !15
  %824 = load i32, i32* %c, align 4, !tbaa !15
  %and2145 = and i32 %823, %824
  %or2146 = or i32 %and2144, %and2145
  %arraydecay2147 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2148 = bitcast %union.char64long16* %arraydecay2147 to [16 x i32]*
  %arrayidx2149 = getelementptr inbounds [16 x i32], [16 x i32]* %l2148, i64 0, i64 4
  %825 = load i32, i32* %arrayidx2149, align 16, !tbaa !14
  %arraydecay2150 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2151 = bitcast %union.char64long16* %arraydecay2150 to [16 x i32]*
  %arrayidx2152 = getelementptr inbounds [16 x i32], [16 x i32]* %l2151, i64 0, i64 15
  %826 = load i32, i32* %arrayidx2152, align 4, !tbaa !14
  %xor2153 = xor i32 %825, %826
  %arraydecay2154 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2155 = bitcast %union.char64long16* %arraydecay2154 to [16 x i32]*
  %arrayidx2156 = getelementptr inbounds [16 x i32], [16 x i32]* %l2155, i64 0, i64 9
  %827 = load i32, i32* %arrayidx2156, align 4, !tbaa !14
  %xor2157 = xor i32 %xor2153, %827
  %arraydecay2158 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2159 = bitcast %union.char64long16* %arraydecay2158 to [16 x i32]*
  %arrayidx2160 = getelementptr inbounds [16 x i32], [16 x i32]* %l2159, i64 0, i64 7
  %828 = load i32, i32* %arrayidx2160, align 4, !tbaa !14
  %xor2161 = xor i32 %xor2157, %828
  %shl2162 = shl i32 %xor2161, 1
  %arraydecay2163 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2164 = bitcast %union.char64long16* %arraydecay2163 to [16 x i32]*
  %arrayidx2165 = getelementptr inbounds [16 x i32], [16 x i32]* %l2164, i64 0, i64 4
  %829 = load i32, i32* %arrayidx2165, align 16, !tbaa !14
  %arraydecay2166 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2167 = bitcast %union.char64long16* %arraydecay2166 to [16 x i32]*
  %arrayidx2168 = getelementptr inbounds [16 x i32], [16 x i32]* %l2167, i64 0, i64 15
  %830 = load i32, i32* %arrayidx2168, align 4, !tbaa !14
  %xor2169 = xor i32 %829, %830
  %arraydecay2170 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2171 = bitcast %union.char64long16* %arraydecay2170 to [16 x i32]*
  %arrayidx2172 = getelementptr inbounds [16 x i32], [16 x i32]* %l2171, i64 0, i64 9
  %831 = load i32, i32* %arrayidx2172, align 4, !tbaa !14
  %xor2173 = xor i32 %xor2169, %831
  %arraydecay2174 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2175 = bitcast %union.char64long16* %arraydecay2174 to [16 x i32]*
  %arrayidx2176 = getelementptr inbounds [16 x i32], [16 x i32]* %l2175, i64 0, i64 7
  %832 = load i32, i32* %arrayidx2176, align 4, !tbaa !14
  %xor2177 = xor i32 %xor2173, %832
  %shr2178 = lshr i32 %xor2177, 31
  %or2179 = or i32 %shl2162, %shr2178
  %arraydecay2180 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2181 = bitcast %union.char64long16* %arraydecay2180 to [16 x i32]*
  %arrayidx2182 = getelementptr inbounds [16 x i32], [16 x i32]* %l2181, i64 0, i64 7
  store i32 %or2179, i32* %arrayidx2182, align 4, !tbaa !14
  %add2183 = add i32 %or2146, %or2179
  %add2184 = add i32 %add2183, -1894007588
  %833 = load i32, i32* %a, align 4, !tbaa !15
  %shl2185 = shl i32 %833, 5
  %834 = load i32, i32* %a, align 4, !tbaa !15
  %shr2186 = lshr i32 %834, 27
  %or2187 = or i32 %shl2185, %shr2186
  %add2188 = add i32 %add2184, %or2187
  %835 = load i32, i32* %e, align 4, !tbaa !15
  %add2189 = add i32 %835, %add2188
  store i32 %add2189, i32* %e, align 4, !tbaa !15
  %836 = load i32, i32* %b, align 4, !tbaa !15
  %shl2190 = shl i32 %836, 30
  %837 = load i32, i32* %b, align 4, !tbaa !15
  %shr2191 = lshr i32 %837, 2
  %or2192 = or i32 %shl2190, %shr2191
  store i32 %or2192, i32* %b, align 4, !tbaa !15
  %838 = load i32, i32* %a, align 4, !tbaa !15
  %839 = load i32, i32* %b, align 4, !tbaa !15
  %or2193 = or i32 %838, %839
  %840 = load i32, i32* %c, align 4, !tbaa !15
  %and2194 = and i32 %or2193, %840
  %841 = load i32, i32* %a, align 4, !tbaa !15
  %842 = load i32, i32* %b, align 4, !tbaa !15
  %and2195 = and i32 %841, %842
  %or2196 = or i32 %and2194, %and2195
  %arraydecay2197 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2198 = bitcast %union.char64long16* %arraydecay2197 to [16 x i32]*
  %arrayidx2199 = getelementptr inbounds [16 x i32], [16 x i32]* %l2198, i64 0, i64 5
  %843 = load i32, i32* %arrayidx2199, align 4, !tbaa !14
  %arraydecay2200 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2201 = bitcast %union.char64long16* %arraydecay2200 to [16 x i32]*
  %arrayidx2202 = getelementptr inbounds [16 x i32], [16 x i32]* %l2201, i64 0, i64 0
  %844 = load i32, i32* %arrayidx2202, align 16, !tbaa !14
  %xor2203 = xor i32 %843, %844
  %arraydecay2204 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2205 = bitcast %union.char64long16* %arraydecay2204 to [16 x i32]*
  %arrayidx2206 = getelementptr inbounds [16 x i32], [16 x i32]* %l2205, i64 0, i64 10
  %845 = load i32, i32* %arrayidx2206, align 8, !tbaa !14
  %xor2207 = xor i32 %xor2203, %845
  %arraydecay2208 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2209 = bitcast %union.char64long16* %arraydecay2208 to [16 x i32]*
  %arrayidx2210 = getelementptr inbounds [16 x i32], [16 x i32]* %l2209, i64 0, i64 8
  %846 = load i32, i32* %arrayidx2210, align 16, !tbaa !14
  %xor2211 = xor i32 %xor2207, %846
  %shl2212 = shl i32 %xor2211, 1
  %arraydecay2213 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2214 = bitcast %union.char64long16* %arraydecay2213 to [16 x i32]*
  %arrayidx2215 = getelementptr inbounds [16 x i32], [16 x i32]* %l2214, i64 0, i64 5
  %847 = load i32, i32* %arrayidx2215, align 4, !tbaa !14
  %arraydecay2216 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2217 = bitcast %union.char64long16* %arraydecay2216 to [16 x i32]*
  %arrayidx2218 = getelementptr inbounds [16 x i32], [16 x i32]* %l2217, i64 0, i64 0
  %848 = load i32, i32* %arrayidx2218, align 16, !tbaa !14
  %xor2219 = xor i32 %847, %848
  %arraydecay2220 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2221 = bitcast %union.char64long16* %arraydecay2220 to [16 x i32]*
  %arrayidx2222 = getelementptr inbounds [16 x i32], [16 x i32]* %l2221, i64 0, i64 10
  %849 = load i32, i32* %arrayidx2222, align 8, !tbaa !14
  %xor2223 = xor i32 %xor2219, %849
  %arraydecay2224 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2225 = bitcast %union.char64long16* %arraydecay2224 to [16 x i32]*
  %arrayidx2226 = getelementptr inbounds [16 x i32], [16 x i32]* %l2225, i64 0, i64 8
  %850 = load i32, i32* %arrayidx2226, align 16, !tbaa !14
  %xor2227 = xor i32 %xor2223, %850
  %shr2228 = lshr i32 %xor2227, 31
  %or2229 = or i32 %shl2212, %shr2228
  %arraydecay2230 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2231 = bitcast %union.char64long16* %arraydecay2230 to [16 x i32]*
  %arrayidx2232 = getelementptr inbounds [16 x i32], [16 x i32]* %l2231, i64 0, i64 8
  store i32 %or2229, i32* %arrayidx2232, align 16, !tbaa !14
  %add2233 = add i32 %or2196, %or2229
  %add2234 = add i32 %add2233, -1894007588
  %851 = load i32, i32* %e, align 4, !tbaa !15
  %shl2235 = shl i32 %851, 5
  %852 = load i32, i32* %e, align 4, !tbaa !15
  %shr2236 = lshr i32 %852, 27
  %or2237 = or i32 %shl2235, %shr2236
  %add2238 = add i32 %add2234, %or2237
  %853 = load i32, i32* %d, align 4, !tbaa !15
  %add2239 = add i32 %853, %add2238
  store i32 %add2239, i32* %d, align 4, !tbaa !15
  %854 = load i32, i32* %a, align 4, !tbaa !15
  %shl2240 = shl i32 %854, 30
  %855 = load i32, i32* %a, align 4, !tbaa !15
  %shr2241 = lshr i32 %855, 2
  %or2242 = or i32 %shl2240, %shr2241
  store i32 %or2242, i32* %a, align 4, !tbaa !15
  %856 = load i32, i32* %e, align 4, !tbaa !15
  %857 = load i32, i32* %a, align 4, !tbaa !15
  %or2243 = or i32 %856, %857
  %858 = load i32, i32* %b, align 4, !tbaa !15
  %and2244 = and i32 %or2243, %858
  %859 = load i32, i32* %e, align 4, !tbaa !15
  %860 = load i32, i32* %a, align 4, !tbaa !15
  %and2245 = and i32 %859, %860
  %or2246 = or i32 %and2244, %and2245
  %arraydecay2247 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2248 = bitcast %union.char64long16* %arraydecay2247 to [16 x i32]*
  %arrayidx2249 = getelementptr inbounds [16 x i32], [16 x i32]* %l2248, i64 0, i64 6
  %861 = load i32, i32* %arrayidx2249, align 8, !tbaa !14
  %arraydecay2250 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2251 = bitcast %union.char64long16* %arraydecay2250 to [16 x i32]*
  %arrayidx2252 = getelementptr inbounds [16 x i32], [16 x i32]* %l2251, i64 0, i64 1
  %862 = load i32, i32* %arrayidx2252, align 4, !tbaa !14
  %xor2253 = xor i32 %861, %862
  %arraydecay2254 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2255 = bitcast %union.char64long16* %arraydecay2254 to [16 x i32]*
  %arrayidx2256 = getelementptr inbounds [16 x i32], [16 x i32]* %l2255, i64 0, i64 11
  %863 = load i32, i32* %arrayidx2256, align 4, !tbaa !14
  %xor2257 = xor i32 %xor2253, %863
  %arraydecay2258 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2259 = bitcast %union.char64long16* %arraydecay2258 to [16 x i32]*
  %arrayidx2260 = getelementptr inbounds [16 x i32], [16 x i32]* %l2259, i64 0, i64 9
  %864 = load i32, i32* %arrayidx2260, align 4, !tbaa !14
  %xor2261 = xor i32 %xor2257, %864
  %shl2262 = shl i32 %xor2261, 1
  %arraydecay2263 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2264 = bitcast %union.char64long16* %arraydecay2263 to [16 x i32]*
  %arrayidx2265 = getelementptr inbounds [16 x i32], [16 x i32]* %l2264, i64 0, i64 6
  %865 = load i32, i32* %arrayidx2265, align 8, !tbaa !14
  %arraydecay2266 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2267 = bitcast %union.char64long16* %arraydecay2266 to [16 x i32]*
  %arrayidx2268 = getelementptr inbounds [16 x i32], [16 x i32]* %l2267, i64 0, i64 1
  %866 = load i32, i32* %arrayidx2268, align 4, !tbaa !14
  %xor2269 = xor i32 %865, %866
  %arraydecay2270 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2271 = bitcast %union.char64long16* %arraydecay2270 to [16 x i32]*
  %arrayidx2272 = getelementptr inbounds [16 x i32], [16 x i32]* %l2271, i64 0, i64 11
  %867 = load i32, i32* %arrayidx2272, align 4, !tbaa !14
  %xor2273 = xor i32 %xor2269, %867
  %arraydecay2274 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2275 = bitcast %union.char64long16* %arraydecay2274 to [16 x i32]*
  %arrayidx2276 = getelementptr inbounds [16 x i32], [16 x i32]* %l2275, i64 0, i64 9
  %868 = load i32, i32* %arrayidx2276, align 4, !tbaa !14
  %xor2277 = xor i32 %xor2273, %868
  %shr2278 = lshr i32 %xor2277, 31
  %or2279 = or i32 %shl2262, %shr2278
  %arraydecay2280 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2281 = bitcast %union.char64long16* %arraydecay2280 to [16 x i32]*
  %arrayidx2282 = getelementptr inbounds [16 x i32], [16 x i32]* %l2281, i64 0, i64 9
  store i32 %or2279, i32* %arrayidx2282, align 4, !tbaa !14
  %add2283 = add i32 %or2246, %or2279
  %add2284 = add i32 %add2283, -1894007588
  %869 = load i32, i32* %d, align 4, !tbaa !15
  %shl2285 = shl i32 %869, 5
  %870 = load i32, i32* %d, align 4, !tbaa !15
  %shr2286 = lshr i32 %870, 27
  %or2287 = or i32 %shl2285, %shr2286
  %add2288 = add i32 %add2284, %or2287
  %871 = load i32, i32* %c, align 4, !tbaa !15
  %add2289 = add i32 %871, %add2288
  store i32 %add2289, i32* %c, align 4, !tbaa !15
  %872 = load i32, i32* %e, align 4, !tbaa !15
  %shl2290 = shl i32 %872, 30
  %873 = load i32, i32* %e, align 4, !tbaa !15
  %shr2291 = lshr i32 %873, 2
  %or2292 = or i32 %shl2290, %shr2291
  store i32 %or2292, i32* %e, align 4, !tbaa !15
  %874 = load i32, i32* %d, align 4, !tbaa !15
  %875 = load i32, i32* %e, align 4, !tbaa !15
  %or2293 = or i32 %874, %875
  %876 = load i32, i32* %a, align 4, !tbaa !15
  %and2294 = and i32 %or2293, %876
  %877 = load i32, i32* %d, align 4, !tbaa !15
  %878 = load i32, i32* %e, align 4, !tbaa !15
  %and2295 = and i32 %877, %878
  %or2296 = or i32 %and2294, %and2295
  %arraydecay2297 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2298 = bitcast %union.char64long16* %arraydecay2297 to [16 x i32]*
  %arrayidx2299 = getelementptr inbounds [16 x i32], [16 x i32]* %l2298, i64 0, i64 7
  %879 = load i32, i32* %arrayidx2299, align 4, !tbaa !14
  %arraydecay2300 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2301 = bitcast %union.char64long16* %arraydecay2300 to [16 x i32]*
  %arrayidx2302 = getelementptr inbounds [16 x i32], [16 x i32]* %l2301, i64 0, i64 2
  %880 = load i32, i32* %arrayidx2302, align 8, !tbaa !14
  %xor2303 = xor i32 %879, %880
  %arraydecay2304 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2305 = bitcast %union.char64long16* %arraydecay2304 to [16 x i32]*
  %arrayidx2306 = getelementptr inbounds [16 x i32], [16 x i32]* %l2305, i64 0, i64 12
  %881 = load i32, i32* %arrayidx2306, align 16, !tbaa !14
  %xor2307 = xor i32 %xor2303, %881
  %arraydecay2308 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2309 = bitcast %union.char64long16* %arraydecay2308 to [16 x i32]*
  %arrayidx2310 = getelementptr inbounds [16 x i32], [16 x i32]* %l2309, i64 0, i64 10
  %882 = load i32, i32* %arrayidx2310, align 8, !tbaa !14
  %xor2311 = xor i32 %xor2307, %882
  %shl2312 = shl i32 %xor2311, 1
  %arraydecay2313 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2314 = bitcast %union.char64long16* %arraydecay2313 to [16 x i32]*
  %arrayidx2315 = getelementptr inbounds [16 x i32], [16 x i32]* %l2314, i64 0, i64 7
  %883 = load i32, i32* %arrayidx2315, align 4, !tbaa !14
  %arraydecay2316 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2317 = bitcast %union.char64long16* %arraydecay2316 to [16 x i32]*
  %arrayidx2318 = getelementptr inbounds [16 x i32], [16 x i32]* %l2317, i64 0, i64 2
  %884 = load i32, i32* %arrayidx2318, align 8, !tbaa !14
  %xor2319 = xor i32 %883, %884
  %arraydecay2320 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2321 = bitcast %union.char64long16* %arraydecay2320 to [16 x i32]*
  %arrayidx2322 = getelementptr inbounds [16 x i32], [16 x i32]* %l2321, i64 0, i64 12
  %885 = load i32, i32* %arrayidx2322, align 16, !tbaa !14
  %xor2323 = xor i32 %xor2319, %885
  %arraydecay2324 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2325 = bitcast %union.char64long16* %arraydecay2324 to [16 x i32]*
  %arrayidx2326 = getelementptr inbounds [16 x i32], [16 x i32]* %l2325, i64 0, i64 10
  %886 = load i32, i32* %arrayidx2326, align 8, !tbaa !14
  %xor2327 = xor i32 %xor2323, %886
  %shr2328 = lshr i32 %xor2327, 31
  %or2329 = or i32 %shl2312, %shr2328
  %arraydecay2330 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2331 = bitcast %union.char64long16* %arraydecay2330 to [16 x i32]*
  %arrayidx2332 = getelementptr inbounds [16 x i32], [16 x i32]* %l2331, i64 0, i64 10
  store i32 %or2329, i32* %arrayidx2332, align 8, !tbaa !14
  %add2333 = add i32 %or2296, %or2329
  %add2334 = add i32 %add2333, -1894007588
  %887 = load i32, i32* %c, align 4, !tbaa !15
  %shl2335 = shl i32 %887, 5
  %888 = load i32, i32* %c, align 4, !tbaa !15
  %shr2336 = lshr i32 %888, 27
  %or2337 = or i32 %shl2335, %shr2336
  %add2338 = add i32 %add2334, %or2337
  %889 = load i32, i32* %b, align 4, !tbaa !15
  %add2339 = add i32 %889, %add2338
  store i32 %add2339, i32* %b, align 4, !tbaa !15
  %890 = load i32, i32* %d, align 4, !tbaa !15
  %shl2340 = shl i32 %890, 30
  %891 = load i32, i32* %d, align 4, !tbaa !15
  %shr2341 = lshr i32 %891, 2
  %or2342 = or i32 %shl2340, %shr2341
  store i32 %or2342, i32* %d, align 4, !tbaa !15
  %892 = load i32, i32* %c, align 4, !tbaa !15
  %893 = load i32, i32* %d, align 4, !tbaa !15
  %or2343 = or i32 %892, %893
  %894 = load i32, i32* %e, align 4, !tbaa !15
  %and2344 = and i32 %or2343, %894
  %895 = load i32, i32* %c, align 4, !tbaa !15
  %896 = load i32, i32* %d, align 4, !tbaa !15
  %and2345 = and i32 %895, %896
  %or2346 = or i32 %and2344, %and2345
  %arraydecay2347 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2348 = bitcast %union.char64long16* %arraydecay2347 to [16 x i32]*
  %arrayidx2349 = getelementptr inbounds [16 x i32], [16 x i32]* %l2348, i64 0, i64 8
  %897 = load i32, i32* %arrayidx2349, align 16, !tbaa !14
  %arraydecay2350 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2351 = bitcast %union.char64long16* %arraydecay2350 to [16 x i32]*
  %arrayidx2352 = getelementptr inbounds [16 x i32], [16 x i32]* %l2351, i64 0, i64 3
  %898 = load i32, i32* %arrayidx2352, align 4, !tbaa !14
  %xor2353 = xor i32 %897, %898
  %arraydecay2354 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2355 = bitcast %union.char64long16* %arraydecay2354 to [16 x i32]*
  %arrayidx2356 = getelementptr inbounds [16 x i32], [16 x i32]* %l2355, i64 0, i64 13
  %899 = load i32, i32* %arrayidx2356, align 4, !tbaa !14
  %xor2357 = xor i32 %xor2353, %899
  %arraydecay2358 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2359 = bitcast %union.char64long16* %arraydecay2358 to [16 x i32]*
  %arrayidx2360 = getelementptr inbounds [16 x i32], [16 x i32]* %l2359, i64 0, i64 11
  %900 = load i32, i32* %arrayidx2360, align 4, !tbaa !14
  %xor2361 = xor i32 %xor2357, %900
  %shl2362 = shl i32 %xor2361, 1
  %arraydecay2363 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2364 = bitcast %union.char64long16* %arraydecay2363 to [16 x i32]*
  %arrayidx2365 = getelementptr inbounds [16 x i32], [16 x i32]* %l2364, i64 0, i64 8
  %901 = load i32, i32* %arrayidx2365, align 16, !tbaa !14
  %arraydecay2366 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2367 = bitcast %union.char64long16* %arraydecay2366 to [16 x i32]*
  %arrayidx2368 = getelementptr inbounds [16 x i32], [16 x i32]* %l2367, i64 0, i64 3
  %902 = load i32, i32* %arrayidx2368, align 4, !tbaa !14
  %xor2369 = xor i32 %901, %902
  %arraydecay2370 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2371 = bitcast %union.char64long16* %arraydecay2370 to [16 x i32]*
  %arrayidx2372 = getelementptr inbounds [16 x i32], [16 x i32]* %l2371, i64 0, i64 13
  %903 = load i32, i32* %arrayidx2372, align 4, !tbaa !14
  %xor2373 = xor i32 %xor2369, %903
  %arraydecay2374 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2375 = bitcast %union.char64long16* %arraydecay2374 to [16 x i32]*
  %arrayidx2376 = getelementptr inbounds [16 x i32], [16 x i32]* %l2375, i64 0, i64 11
  %904 = load i32, i32* %arrayidx2376, align 4, !tbaa !14
  %xor2377 = xor i32 %xor2373, %904
  %shr2378 = lshr i32 %xor2377, 31
  %or2379 = or i32 %shl2362, %shr2378
  %arraydecay2380 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2381 = bitcast %union.char64long16* %arraydecay2380 to [16 x i32]*
  %arrayidx2382 = getelementptr inbounds [16 x i32], [16 x i32]* %l2381, i64 0, i64 11
  store i32 %or2379, i32* %arrayidx2382, align 4, !tbaa !14
  %add2383 = add i32 %or2346, %or2379
  %add2384 = add i32 %add2383, -1894007588
  %905 = load i32, i32* %b, align 4, !tbaa !15
  %shl2385 = shl i32 %905, 5
  %906 = load i32, i32* %b, align 4, !tbaa !15
  %shr2386 = lshr i32 %906, 27
  %or2387 = or i32 %shl2385, %shr2386
  %add2388 = add i32 %add2384, %or2387
  %907 = load i32, i32* %a, align 4, !tbaa !15
  %add2389 = add i32 %907, %add2388
  store i32 %add2389, i32* %a, align 4, !tbaa !15
  %908 = load i32, i32* %c, align 4, !tbaa !15
  %shl2390 = shl i32 %908, 30
  %909 = load i32, i32* %c, align 4, !tbaa !15
  %shr2391 = lshr i32 %909, 2
  %or2392 = or i32 %shl2390, %shr2391
  store i32 %or2392, i32* %c, align 4, !tbaa !15
  %910 = load i32, i32* %b, align 4, !tbaa !15
  %911 = load i32, i32* %c, align 4, !tbaa !15
  %xor2393 = xor i32 %910, %911
  %912 = load i32, i32* %d, align 4, !tbaa !15
  %xor2394 = xor i32 %xor2393, %912
  %arraydecay2395 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2396 = bitcast %union.char64long16* %arraydecay2395 to [16 x i32]*
  %arrayidx2397 = getelementptr inbounds [16 x i32], [16 x i32]* %l2396, i64 0, i64 9
  %913 = load i32, i32* %arrayidx2397, align 4, !tbaa !14
  %arraydecay2398 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2399 = bitcast %union.char64long16* %arraydecay2398 to [16 x i32]*
  %arrayidx2400 = getelementptr inbounds [16 x i32], [16 x i32]* %l2399, i64 0, i64 4
  %914 = load i32, i32* %arrayidx2400, align 16, !tbaa !14
  %xor2401 = xor i32 %913, %914
  %arraydecay2402 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2403 = bitcast %union.char64long16* %arraydecay2402 to [16 x i32]*
  %arrayidx2404 = getelementptr inbounds [16 x i32], [16 x i32]* %l2403, i64 0, i64 14
  %915 = load i32, i32* %arrayidx2404, align 8, !tbaa !14
  %xor2405 = xor i32 %xor2401, %915
  %arraydecay2406 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2407 = bitcast %union.char64long16* %arraydecay2406 to [16 x i32]*
  %arrayidx2408 = getelementptr inbounds [16 x i32], [16 x i32]* %l2407, i64 0, i64 12
  %916 = load i32, i32* %arrayidx2408, align 16, !tbaa !14
  %xor2409 = xor i32 %xor2405, %916
  %shl2410 = shl i32 %xor2409, 1
  %arraydecay2411 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2412 = bitcast %union.char64long16* %arraydecay2411 to [16 x i32]*
  %arrayidx2413 = getelementptr inbounds [16 x i32], [16 x i32]* %l2412, i64 0, i64 9
  %917 = load i32, i32* %arrayidx2413, align 4, !tbaa !14
  %arraydecay2414 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2415 = bitcast %union.char64long16* %arraydecay2414 to [16 x i32]*
  %arrayidx2416 = getelementptr inbounds [16 x i32], [16 x i32]* %l2415, i64 0, i64 4
  %918 = load i32, i32* %arrayidx2416, align 16, !tbaa !14
  %xor2417 = xor i32 %917, %918
  %arraydecay2418 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2419 = bitcast %union.char64long16* %arraydecay2418 to [16 x i32]*
  %arrayidx2420 = getelementptr inbounds [16 x i32], [16 x i32]* %l2419, i64 0, i64 14
  %919 = load i32, i32* %arrayidx2420, align 8, !tbaa !14
  %xor2421 = xor i32 %xor2417, %919
  %arraydecay2422 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2423 = bitcast %union.char64long16* %arraydecay2422 to [16 x i32]*
  %arrayidx2424 = getelementptr inbounds [16 x i32], [16 x i32]* %l2423, i64 0, i64 12
  %920 = load i32, i32* %arrayidx2424, align 16, !tbaa !14
  %xor2425 = xor i32 %xor2421, %920
  %shr2426 = lshr i32 %xor2425, 31
  %or2427 = or i32 %shl2410, %shr2426
  %arraydecay2428 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2429 = bitcast %union.char64long16* %arraydecay2428 to [16 x i32]*
  %arrayidx2430 = getelementptr inbounds [16 x i32], [16 x i32]* %l2429, i64 0, i64 12
  store i32 %or2427, i32* %arrayidx2430, align 16, !tbaa !14
  %add2431 = add i32 %xor2394, %or2427
  %add2432 = add i32 %add2431, -899497514
  %921 = load i32, i32* %a, align 4, !tbaa !15
  %shl2433 = shl i32 %921, 5
  %922 = load i32, i32* %a, align 4, !tbaa !15
  %shr2434 = lshr i32 %922, 27
  %or2435 = or i32 %shl2433, %shr2434
  %add2436 = add i32 %add2432, %or2435
  %923 = load i32, i32* %e, align 4, !tbaa !15
  %add2437 = add i32 %923, %add2436
  store i32 %add2437, i32* %e, align 4, !tbaa !15
  %924 = load i32, i32* %b, align 4, !tbaa !15
  %shl2438 = shl i32 %924, 30
  %925 = load i32, i32* %b, align 4, !tbaa !15
  %shr2439 = lshr i32 %925, 2
  %or2440 = or i32 %shl2438, %shr2439
  store i32 %or2440, i32* %b, align 4, !tbaa !15
  %926 = load i32, i32* %a, align 4, !tbaa !15
  %927 = load i32, i32* %b, align 4, !tbaa !15
  %xor2441 = xor i32 %926, %927
  %928 = load i32, i32* %c, align 4, !tbaa !15
  %xor2442 = xor i32 %xor2441, %928
  %arraydecay2443 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2444 = bitcast %union.char64long16* %arraydecay2443 to [16 x i32]*
  %arrayidx2445 = getelementptr inbounds [16 x i32], [16 x i32]* %l2444, i64 0, i64 10
  %929 = load i32, i32* %arrayidx2445, align 8, !tbaa !14
  %arraydecay2446 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2447 = bitcast %union.char64long16* %arraydecay2446 to [16 x i32]*
  %arrayidx2448 = getelementptr inbounds [16 x i32], [16 x i32]* %l2447, i64 0, i64 5
  %930 = load i32, i32* %arrayidx2448, align 4, !tbaa !14
  %xor2449 = xor i32 %929, %930
  %arraydecay2450 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2451 = bitcast %union.char64long16* %arraydecay2450 to [16 x i32]*
  %arrayidx2452 = getelementptr inbounds [16 x i32], [16 x i32]* %l2451, i64 0, i64 15
  %931 = load i32, i32* %arrayidx2452, align 4, !tbaa !14
  %xor2453 = xor i32 %xor2449, %931
  %arraydecay2454 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2455 = bitcast %union.char64long16* %arraydecay2454 to [16 x i32]*
  %arrayidx2456 = getelementptr inbounds [16 x i32], [16 x i32]* %l2455, i64 0, i64 13
  %932 = load i32, i32* %arrayidx2456, align 4, !tbaa !14
  %xor2457 = xor i32 %xor2453, %932
  %shl2458 = shl i32 %xor2457, 1
  %arraydecay2459 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2460 = bitcast %union.char64long16* %arraydecay2459 to [16 x i32]*
  %arrayidx2461 = getelementptr inbounds [16 x i32], [16 x i32]* %l2460, i64 0, i64 10
  %933 = load i32, i32* %arrayidx2461, align 8, !tbaa !14
  %arraydecay2462 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2463 = bitcast %union.char64long16* %arraydecay2462 to [16 x i32]*
  %arrayidx2464 = getelementptr inbounds [16 x i32], [16 x i32]* %l2463, i64 0, i64 5
  %934 = load i32, i32* %arrayidx2464, align 4, !tbaa !14
  %xor2465 = xor i32 %933, %934
  %arraydecay2466 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2467 = bitcast %union.char64long16* %arraydecay2466 to [16 x i32]*
  %arrayidx2468 = getelementptr inbounds [16 x i32], [16 x i32]* %l2467, i64 0, i64 15
  %935 = load i32, i32* %arrayidx2468, align 4, !tbaa !14
  %xor2469 = xor i32 %xor2465, %935
  %arraydecay2470 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2471 = bitcast %union.char64long16* %arraydecay2470 to [16 x i32]*
  %arrayidx2472 = getelementptr inbounds [16 x i32], [16 x i32]* %l2471, i64 0, i64 13
  %936 = load i32, i32* %arrayidx2472, align 4, !tbaa !14
  %xor2473 = xor i32 %xor2469, %936
  %shr2474 = lshr i32 %xor2473, 31
  %or2475 = or i32 %shl2458, %shr2474
  %arraydecay2476 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2477 = bitcast %union.char64long16* %arraydecay2476 to [16 x i32]*
  %arrayidx2478 = getelementptr inbounds [16 x i32], [16 x i32]* %l2477, i64 0, i64 13
  store i32 %or2475, i32* %arrayidx2478, align 4, !tbaa !14
  %add2479 = add i32 %xor2442, %or2475
  %add2480 = add i32 %add2479, -899497514
  %937 = load i32, i32* %e, align 4, !tbaa !15
  %shl2481 = shl i32 %937, 5
  %938 = load i32, i32* %e, align 4, !tbaa !15
  %shr2482 = lshr i32 %938, 27
  %or2483 = or i32 %shl2481, %shr2482
  %add2484 = add i32 %add2480, %or2483
  %939 = load i32, i32* %d, align 4, !tbaa !15
  %add2485 = add i32 %939, %add2484
  store i32 %add2485, i32* %d, align 4, !tbaa !15
  %940 = load i32, i32* %a, align 4, !tbaa !15
  %shl2486 = shl i32 %940, 30
  %941 = load i32, i32* %a, align 4, !tbaa !15
  %shr2487 = lshr i32 %941, 2
  %or2488 = or i32 %shl2486, %shr2487
  store i32 %or2488, i32* %a, align 4, !tbaa !15
  %942 = load i32, i32* %e, align 4, !tbaa !15
  %943 = load i32, i32* %a, align 4, !tbaa !15
  %xor2489 = xor i32 %942, %943
  %944 = load i32, i32* %b, align 4, !tbaa !15
  %xor2490 = xor i32 %xor2489, %944
  %arraydecay2491 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2492 = bitcast %union.char64long16* %arraydecay2491 to [16 x i32]*
  %arrayidx2493 = getelementptr inbounds [16 x i32], [16 x i32]* %l2492, i64 0, i64 11
  %945 = load i32, i32* %arrayidx2493, align 4, !tbaa !14
  %arraydecay2494 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2495 = bitcast %union.char64long16* %arraydecay2494 to [16 x i32]*
  %arrayidx2496 = getelementptr inbounds [16 x i32], [16 x i32]* %l2495, i64 0, i64 6
  %946 = load i32, i32* %arrayidx2496, align 8, !tbaa !14
  %xor2497 = xor i32 %945, %946
  %arraydecay2498 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2499 = bitcast %union.char64long16* %arraydecay2498 to [16 x i32]*
  %arrayidx2500 = getelementptr inbounds [16 x i32], [16 x i32]* %l2499, i64 0, i64 0
  %947 = load i32, i32* %arrayidx2500, align 16, !tbaa !14
  %xor2501 = xor i32 %xor2497, %947
  %arraydecay2502 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2503 = bitcast %union.char64long16* %arraydecay2502 to [16 x i32]*
  %arrayidx2504 = getelementptr inbounds [16 x i32], [16 x i32]* %l2503, i64 0, i64 14
  %948 = load i32, i32* %arrayidx2504, align 8, !tbaa !14
  %xor2505 = xor i32 %xor2501, %948
  %shl2506 = shl i32 %xor2505, 1
  %arraydecay2507 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2508 = bitcast %union.char64long16* %arraydecay2507 to [16 x i32]*
  %arrayidx2509 = getelementptr inbounds [16 x i32], [16 x i32]* %l2508, i64 0, i64 11
  %949 = load i32, i32* %arrayidx2509, align 4, !tbaa !14
  %arraydecay2510 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2511 = bitcast %union.char64long16* %arraydecay2510 to [16 x i32]*
  %arrayidx2512 = getelementptr inbounds [16 x i32], [16 x i32]* %l2511, i64 0, i64 6
  %950 = load i32, i32* %arrayidx2512, align 8, !tbaa !14
  %xor2513 = xor i32 %949, %950
  %arraydecay2514 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2515 = bitcast %union.char64long16* %arraydecay2514 to [16 x i32]*
  %arrayidx2516 = getelementptr inbounds [16 x i32], [16 x i32]* %l2515, i64 0, i64 0
  %951 = load i32, i32* %arrayidx2516, align 16, !tbaa !14
  %xor2517 = xor i32 %xor2513, %951
  %arraydecay2518 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2519 = bitcast %union.char64long16* %arraydecay2518 to [16 x i32]*
  %arrayidx2520 = getelementptr inbounds [16 x i32], [16 x i32]* %l2519, i64 0, i64 14
  %952 = load i32, i32* %arrayidx2520, align 8, !tbaa !14
  %xor2521 = xor i32 %xor2517, %952
  %shr2522 = lshr i32 %xor2521, 31
  %or2523 = or i32 %shl2506, %shr2522
  %arraydecay2524 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2525 = bitcast %union.char64long16* %arraydecay2524 to [16 x i32]*
  %arrayidx2526 = getelementptr inbounds [16 x i32], [16 x i32]* %l2525, i64 0, i64 14
  store i32 %or2523, i32* %arrayidx2526, align 8, !tbaa !14
  %add2527 = add i32 %xor2490, %or2523
  %add2528 = add i32 %add2527, -899497514
  %953 = load i32, i32* %d, align 4, !tbaa !15
  %shl2529 = shl i32 %953, 5
  %954 = load i32, i32* %d, align 4, !tbaa !15
  %shr2530 = lshr i32 %954, 27
  %or2531 = or i32 %shl2529, %shr2530
  %add2532 = add i32 %add2528, %or2531
  %955 = load i32, i32* %c, align 4, !tbaa !15
  %add2533 = add i32 %955, %add2532
  store i32 %add2533, i32* %c, align 4, !tbaa !15
  %956 = load i32, i32* %e, align 4, !tbaa !15
  %shl2534 = shl i32 %956, 30
  %957 = load i32, i32* %e, align 4, !tbaa !15
  %shr2535 = lshr i32 %957, 2
  %or2536 = or i32 %shl2534, %shr2535
  store i32 %or2536, i32* %e, align 4, !tbaa !15
  %958 = load i32, i32* %d, align 4, !tbaa !15
  %959 = load i32, i32* %e, align 4, !tbaa !15
  %xor2537 = xor i32 %958, %959
  %960 = load i32, i32* %a, align 4, !tbaa !15
  %xor2538 = xor i32 %xor2537, %960
  %arraydecay2539 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2540 = bitcast %union.char64long16* %arraydecay2539 to [16 x i32]*
  %arrayidx2541 = getelementptr inbounds [16 x i32], [16 x i32]* %l2540, i64 0, i64 12
  %961 = load i32, i32* %arrayidx2541, align 16, !tbaa !14
  %arraydecay2542 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2543 = bitcast %union.char64long16* %arraydecay2542 to [16 x i32]*
  %arrayidx2544 = getelementptr inbounds [16 x i32], [16 x i32]* %l2543, i64 0, i64 7
  %962 = load i32, i32* %arrayidx2544, align 4, !tbaa !14
  %xor2545 = xor i32 %961, %962
  %arraydecay2546 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2547 = bitcast %union.char64long16* %arraydecay2546 to [16 x i32]*
  %arrayidx2548 = getelementptr inbounds [16 x i32], [16 x i32]* %l2547, i64 0, i64 1
  %963 = load i32, i32* %arrayidx2548, align 4, !tbaa !14
  %xor2549 = xor i32 %xor2545, %963
  %arraydecay2550 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2551 = bitcast %union.char64long16* %arraydecay2550 to [16 x i32]*
  %arrayidx2552 = getelementptr inbounds [16 x i32], [16 x i32]* %l2551, i64 0, i64 15
  %964 = load i32, i32* %arrayidx2552, align 4, !tbaa !14
  %xor2553 = xor i32 %xor2549, %964
  %shl2554 = shl i32 %xor2553, 1
  %arraydecay2555 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2556 = bitcast %union.char64long16* %arraydecay2555 to [16 x i32]*
  %arrayidx2557 = getelementptr inbounds [16 x i32], [16 x i32]* %l2556, i64 0, i64 12
  %965 = load i32, i32* %arrayidx2557, align 16, !tbaa !14
  %arraydecay2558 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2559 = bitcast %union.char64long16* %arraydecay2558 to [16 x i32]*
  %arrayidx2560 = getelementptr inbounds [16 x i32], [16 x i32]* %l2559, i64 0, i64 7
  %966 = load i32, i32* %arrayidx2560, align 4, !tbaa !14
  %xor2561 = xor i32 %965, %966
  %arraydecay2562 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2563 = bitcast %union.char64long16* %arraydecay2562 to [16 x i32]*
  %arrayidx2564 = getelementptr inbounds [16 x i32], [16 x i32]* %l2563, i64 0, i64 1
  %967 = load i32, i32* %arrayidx2564, align 4, !tbaa !14
  %xor2565 = xor i32 %xor2561, %967
  %arraydecay2566 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2567 = bitcast %union.char64long16* %arraydecay2566 to [16 x i32]*
  %arrayidx2568 = getelementptr inbounds [16 x i32], [16 x i32]* %l2567, i64 0, i64 15
  %968 = load i32, i32* %arrayidx2568, align 4, !tbaa !14
  %xor2569 = xor i32 %xor2565, %968
  %shr2570 = lshr i32 %xor2569, 31
  %or2571 = or i32 %shl2554, %shr2570
  %arraydecay2572 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2573 = bitcast %union.char64long16* %arraydecay2572 to [16 x i32]*
  %arrayidx2574 = getelementptr inbounds [16 x i32], [16 x i32]* %l2573, i64 0, i64 15
  store i32 %or2571, i32* %arrayidx2574, align 4, !tbaa !14
  %add2575 = add i32 %xor2538, %or2571
  %add2576 = add i32 %add2575, -899497514
  %969 = load i32, i32* %c, align 4, !tbaa !15
  %shl2577 = shl i32 %969, 5
  %970 = load i32, i32* %c, align 4, !tbaa !15
  %shr2578 = lshr i32 %970, 27
  %or2579 = or i32 %shl2577, %shr2578
  %add2580 = add i32 %add2576, %or2579
  %971 = load i32, i32* %b, align 4, !tbaa !15
  %add2581 = add i32 %971, %add2580
  store i32 %add2581, i32* %b, align 4, !tbaa !15
  %972 = load i32, i32* %d, align 4, !tbaa !15
  %shl2582 = shl i32 %972, 30
  %973 = load i32, i32* %d, align 4, !tbaa !15
  %shr2583 = lshr i32 %973, 2
  %or2584 = or i32 %shl2582, %shr2583
  store i32 %or2584, i32* %d, align 4, !tbaa !15
  %974 = load i32, i32* %c, align 4, !tbaa !15
  %975 = load i32, i32* %d, align 4, !tbaa !15
  %xor2585 = xor i32 %974, %975
  %976 = load i32, i32* %e, align 4, !tbaa !15
  %xor2586 = xor i32 %xor2585, %976
  %arraydecay2587 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2588 = bitcast %union.char64long16* %arraydecay2587 to [16 x i32]*
  %arrayidx2589 = getelementptr inbounds [16 x i32], [16 x i32]* %l2588, i64 0, i64 13
  %977 = load i32, i32* %arrayidx2589, align 4, !tbaa !14
  %arraydecay2590 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2591 = bitcast %union.char64long16* %arraydecay2590 to [16 x i32]*
  %arrayidx2592 = getelementptr inbounds [16 x i32], [16 x i32]* %l2591, i64 0, i64 8
  %978 = load i32, i32* %arrayidx2592, align 16, !tbaa !14
  %xor2593 = xor i32 %977, %978
  %arraydecay2594 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2595 = bitcast %union.char64long16* %arraydecay2594 to [16 x i32]*
  %arrayidx2596 = getelementptr inbounds [16 x i32], [16 x i32]* %l2595, i64 0, i64 2
  %979 = load i32, i32* %arrayidx2596, align 8, !tbaa !14
  %xor2597 = xor i32 %xor2593, %979
  %arraydecay2598 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2599 = bitcast %union.char64long16* %arraydecay2598 to [16 x i32]*
  %arrayidx2600 = getelementptr inbounds [16 x i32], [16 x i32]* %l2599, i64 0, i64 0
  %980 = load i32, i32* %arrayidx2600, align 16, !tbaa !14
  %xor2601 = xor i32 %xor2597, %980
  %shl2602 = shl i32 %xor2601, 1
  %arraydecay2603 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2604 = bitcast %union.char64long16* %arraydecay2603 to [16 x i32]*
  %arrayidx2605 = getelementptr inbounds [16 x i32], [16 x i32]* %l2604, i64 0, i64 13
  %981 = load i32, i32* %arrayidx2605, align 4, !tbaa !14
  %arraydecay2606 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2607 = bitcast %union.char64long16* %arraydecay2606 to [16 x i32]*
  %arrayidx2608 = getelementptr inbounds [16 x i32], [16 x i32]* %l2607, i64 0, i64 8
  %982 = load i32, i32* %arrayidx2608, align 16, !tbaa !14
  %xor2609 = xor i32 %981, %982
  %arraydecay2610 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2611 = bitcast %union.char64long16* %arraydecay2610 to [16 x i32]*
  %arrayidx2612 = getelementptr inbounds [16 x i32], [16 x i32]* %l2611, i64 0, i64 2
  %983 = load i32, i32* %arrayidx2612, align 8, !tbaa !14
  %xor2613 = xor i32 %xor2609, %983
  %arraydecay2614 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2615 = bitcast %union.char64long16* %arraydecay2614 to [16 x i32]*
  %arrayidx2616 = getelementptr inbounds [16 x i32], [16 x i32]* %l2615, i64 0, i64 0
  %984 = load i32, i32* %arrayidx2616, align 16, !tbaa !14
  %xor2617 = xor i32 %xor2613, %984
  %shr2618 = lshr i32 %xor2617, 31
  %or2619 = or i32 %shl2602, %shr2618
  %arraydecay2620 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2621 = bitcast %union.char64long16* %arraydecay2620 to [16 x i32]*
  %arrayidx2622 = getelementptr inbounds [16 x i32], [16 x i32]* %l2621, i64 0, i64 0
  store i32 %or2619, i32* %arrayidx2622, align 16, !tbaa !14
  %add2623 = add i32 %xor2586, %or2619
  %add2624 = add i32 %add2623, -899497514
  %985 = load i32, i32* %b, align 4, !tbaa !15
  %shl2625 = shl i32 %985, 5
  %986 = load i32, i32* %b, align 4, !tbaa !15
  %shr2626 = lshr i32 %986, 27
  %or2627 = or i32 %shl2625, %shr2626
  %add2628 = add i32 %add2624, %or2627
  %987 = load i32, i32* %a, align 4, !tbaa !15
  %add2629 = add i32 %987, %add2628
  store i32 %add2629, i32* %a, align 4, !tbaa !15
  %988 = load i32, i32* %c, align 4, !tbaa !15
  %shl2630 = shl i32 %988, 30
  %989 = load i32, i32* %c, align 4, !tbaa !15
  %shr2631 = lshr i32 %989, 2
  %or2632 = or i32 %shl2630, %shr2631
  store i32 %or2632, i32* %c, align 4, !tbaa !15
  %990 = load i32, i32* %b, align 4, !tbaa !15
  %991 = load i32, i32* %c, align 4, !tbaa !15
  %xor2633 = xor i32 %990, %991
  %992 = load i32, i32* %d, align 4, !tbaa !15
  %xor2634 = xor i32 %xor2633, %992
  %arraydecay2635 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2636 = bitcast %union.char64long16* %arraydecay2635 to [16 x i32]*
  %arrayidx2637 = getelementptr inbounds [16 x i32], [16 x i32]* %l2636, i64 0, i64 14
  %993 = load i32, i32* %arrayidx2637, align 8, !tbaa !14
  %arraydecay2638 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2639 = bitcast %union.char64long16* %arraydecay2638 to [16 x i32]*
  %arrayidx2640 = getelementptr inbounds [16 x i32], [16 x i32]* %l2639, i64 0, i64 9
  %994 = load i32, i32* %arrayidx2640, align 4, !tbaa !14
  %xor2641 = xor i32 %993, %994
  %arraydecay2642 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2643 = bitcast %union.char64long16* %arraydecay2642 to [16 x i32]*
  %arrayidx2644 = getelementptr inbounds [16 x i32], [16 x i32]* %l2643, i64 0, i64 3
  %995 = load i32, i32* %arrayidx2644, align 4, !tbaa !14
  %xor2645 = xor i32 %xor2641, %995
  %arraydecay2646 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2647 = bitcast %union.char64long16* %arraydecay2646 to [16 x i32]*
  %arrayidx2648 = getelementptr inbounds [16 x i32], [16 x i32]* %l2647, i64 0, i64 1
  %996 = load i32, i32* %arrayidx2648, align 4, !tbaa !14
  %xor2649 = xor i32 %xor2645, %996
  %shl2650 = shl i32 %xor2649, 1
  %arraydecay2651 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2652 = bitcast %union.char64long16* %arraydecay2651 to [16 x i32]*
  %arrayidx2653 = getelementptr inbounds [16 x i32], [16 x i32]* %l2652, i64 0, i64 14
  %997 = load i32, i32* %arrayidx2653, align 8, !tbaa !14
  %arraydecay2654 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2655 = bitcast %union.char64long16* %arraydecay2654 to [16 x i32]*
  %arrayidx2656 = getelementptr inbounds [16 x i32], [16 x i32]* %l2655, i64 0, i64 9
  %998 = load i32, i32* %arrayidx2656, align 4, !tbaa !14
  %xor2657 = xor i32 %997, %998
  %arraydecay2658 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2659 = bitcast %union.char64long16* %arraydecay2658 to [16 x i32]*
  %arrayidx2660 = getelementptr inbounds [16 x i32], [16 x i32]* %l2659, i64 0, i64 3
  %999 = load i32, i32* %arrayidx2660, align 4, !tbaa !14
  %xor2661 = xor i32 %xor2657, %999
  %arraydecay2662 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2663 = bitcast %union.char64long16* %arraydecay2662 to [16 x i32]*
  %arrayidx2664 = getelementptr inbounds [16 x i32], [16 x i32]* %l2663, i64 0, i64 1
  %1000 = load i32, i32* %arrayidx2664, align 4, !tbaa !14
  %xor2665 = xor i32 %xor2661, %1000
  %shr2666 = lshr i32 %xor2665, 31
  %or2667 = or i32 %shl2650, %shr2666
  %arraydecay2668 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2669 = bitcast %union.char64long16* %arraydecay2668 to [16 x i32]*
  %arrayidx2670 = getelementptr inbounds [16 x i32], [16 x i32]* %l2669, i64 0, i64 1
  store i32 %or2667, i32* %arrayidx2670, align 4, !tbaa !14
  %add2671 = add i32 %xor2634, %or2667
  %add2672 = add i32 %add2671, -899497514
  %1001 = load i32, i32* %a, align 4, !tbaa !15
  %shl2673 = shl i32 %1001, 5
  %1002 = load i32, i32* %a, align 4, !tbaa !15
  %shr2674 = lshr i32 %1002, 27
  %or2675 = or i32 %shl2673, %shr2674
  %add2676 = add i32 %add2672, %or2675
  %1003 = load i32, i32* %e, align 4, !tbaa !15
  %add2677 = add i32 %1003, %add2676
  store i32 %add2677, i32* %e, align 4, !tbaa !15
  %1004 = load i32, i32* %b, align 4, !tbaa !15
  %shl2678 = shl i32 %1004, 30
  %1005 = load i32, i32* %b, align 4, !tbaa !15
  %shr2679 = lshr i32 %1005, 2
  %or2680 = or i32 %shl2678, %shr2679
  store i32 %or2680, i32* %b, align 4, !tbaa !15
  %1006 = load i32, i32* %a, align 4, !tbaa !15
  %1007 = load i32, i32* %b, align 4, !tbaa !15
  %xor2681 = xor i32 %1006, %1007
  %1008 = load i32, i32* %c, align 4, !tbaa !15
  %xor2682 = xor i32 %xor2681, %1008
  %arraydecay2683 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2684 = bitcast %union.char64long16* %arraydecay2683 to [16 x i32]*
  %arrayidx2685 = getelementptr inbounds [16 x i32], [16 x i32]* %l2684, i64 0, i64 15
  %1009 = load i32, i32* %arrayidx2685, align 4, !tbaa !14
  %arraydecay2686 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2687 = bitcast %union.char64long16* %arraydecay2686 to [16 x i32]*
  %arrayidx2688 = getelementptr inbounds [16 x i32], [16 x i32]* %l2687, i64 0, i64 10
  %1010 = load i32, i32* %arrayidx2688, align 8, !tbaa !14
  %xor2689 = xor i32 %1009, %1010
  %arraydecay2690 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2691 = bitcast %union.char64long16* %arraydecay2690 to [16 x i32]*
  %arrayidx2692 = getelementptr inbounds [16 x i32], [16 x i32]* %l2691, i64 0, i64 4
  %1011 = load i32, i32* %arrayidx2692, align 16, !tbaa !14
  %xor2693 = xor i32 %xor2689, %1011
  %arraydecay2694 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2695 = bitcast %union.char64long16* %arraydecay2694 to [16 x i32]*
  %arrayidx2696 = getelementptr inbounds [16 x i32], [16 x i32]* %l2695, i64 0, i64 2
  %1012 = load i32, i32* %arrayidx2696, align 8, !tbaa !14
  %xor2697 = xor i32 %xor2693, %1012
  %shl2698 = shl i32 %xor2697, 1
  %arraydecay2699 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2700 = bitcast %union.char64long16* %arraydecay2699 to [16 x i32]*
  %arrayidx2701 = getelementptr inbounds [16 x i32], [16 x i32]* %l2700, i64 0, i64 15
  %1013 = load i32, i32* %arrayidx2701, align 4, !tbaa !14
  %arraydecay2702 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2703 = bitcast %union.char64long16* %arraydecay2702 to [16 x i32]*
  %arrayidx2704 = getelementptr inbounds [16 x i32], [16 x i32]* %l2703, i64 0, i64 10
  %1014 = load i32, i32* %arrayidx2704, align 8, !tbaa !14
  %xor2705 = xor i32 %1013, %1014
  %arraydecay2706 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2707 = bitcast %union.char64long16* %arraydecay2706 to [16 x i32]*
  %arrayidx2708 = getelementptr inbounds [16 x i32], [16 x i32]* %l2707, i64 0, i64 4
  %1015 = load i32, i32* %arrayidx2708, align 16, !tbaa !14
  %xor2709 = xor i32 %xor2705, %1015
  %arraydecay2710 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2711 = bitcast %union.char64long16* %arraydecay2710 to [16 x i32]*
  %arrayidx2712 = getelementptr inbounds [16 x i32], [16 x i32]* %l2711, i64 0, i64 2
  %1016 = load i32, i32* %arrayidx2712, align 8, !tbaa !14
  %xor2713 = xor i32 %xor2709, %1016
  %shr2714 = lshr i32 %xor2713, 31
  %or2715 = or i32 %shl2698, %shr2714
  %arraydecay2716 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2717 = bitcast %union.char64long16* %arraydecay2716 to [16 x i32]*
  %arrayidx2718 = getelementptr inbounds [16 x i32], [16 x i32]* %l2717, i64 0, i64 2
  store i32 %or2715, i32* %arrayidx2718, align 8, !tbaa !14
  %add2719 = add i32 %xor2682, %or2715
  %add2720 = add i32 %add2719, -899497514
  %1017 = load i32, i32* %e, align 4, !tbaa !15
  %shl2721 = shl i32 %1017, 5
  %1018 = load i32, i32* %e, align 4, !tbaa !15
  %shr2722 = lshr i32 %1018, 27
  %or2723 = or i32 %shl2721, %shr2722
  %add2724 = add i32 %add2720, %or2723
  %1019 = load i32, i32* %d, align 4, !tbaa !15
  %add2725 = add i32 %1019, %add2724
  store i32 %add2725, i32* %d, align 4, !tbaa !15
  %1020 = load i32, i32* %a, align 4, !tbaa !15
  %shl2726 = shl i32 %1020, 30
  %1021 = load i32, i32* %a, align 4, !tbaa !15
  %shr2727 = lshr i32 %1021, 2
  %or2728 = or i32 %shl2726, %shr2727
  store i32 %or2728, i32* %a, align 4, !tbaa !15
  %1022 = load i32, i32* %e, align 4, !tbaa !15
  %1023 = load i32, i32* %a, align 4, !tbaa !15
  %xor2729 = xor i32 %1022, %1023
  %1024 = load i32, i32* %b, align 4, !tbaa !15
  %xor2730 = xor i32 %xor2729, %1024
  %arraydecay2731 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2732 = bitcast %union.char64long16* %arraydecay2731 to [16 x i32]*
  %arrayidx2733 = getelementptr inbounds [16 x i32], [16 x i32]* %l2732, i64 0, i64 0
  %1025 = load i32, i32* %arrayidx2733, align 16, !tbaa !14
  %arraydecay2734 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2735 = bitcast %union.char64long16* %arraydecay2734 to [16 x i32]*
  %arrayidx2736 = getelementptr inbounds [16 x i32], [16 x i32]* %l2735, i64 0, i64 11
  %1026 = load i32, i32* %arrayidx2736, align 4, !tbaa !14
  %xor2737 = xor i32 %1025, %1026
  %arraydecay2738 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2739 = bitcast %union.char64long16* %arraydecay2738 to [16 x i32]*
  %arrayidx2740 = getelementptr inbounds [16 x i32], [16 x i32]* %l2739, i64 0, i64 5
  %1027 = load i32, i32* %arrayidx2740, align 4, !tbaa !14
  %xor2741 = xor i32 %xor2737, %1027
  %arraydecay2742 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2743 = bitcast %union.char64long16* %arraydecay2742 to [16 x i32]*
  %arrayidx2744 = getelementptr inbounds [16 x i32], [16 x i32]* %l2743, i64 0, i64 3
  %1028 = load i32, i32* %arrayidx2744, align 4, !tbaa !14
  %xor2745 = xor i32 %xor2741, %1028
  %shl2746 = shl i32 %xor2745, 1
  %arraydecay2747 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2748 = bitcast %union.char64long16* %arraydecay2747 to [16 x i32]*
  %arrayidx2749 = getelementptr inbounds [16 x i32], [16 x i32]* %l2748, i64 0, i64 0
  %1029 = load i32, i32* %arrayidx2749, align 16, !tbaa !14
  %arraydecay2750 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2751 = bitcast %union.char64long16* %arraydecay2750 to [16 x i32]*
  %arrayidx2752 = getelementptr inbounds [16 x i32], [16 x i32]* %l2751, i64 0, i64 11
  %1030 = load i32, i32* %arrayidx2752, align 4, !tbaa !14
  %xor2753 = xor i32 %1029, %1030
  %arraydecay2754 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2755 = bitcast %union.char64long16* %arraydecay2754 to [16 x i32]*
  %arrayidx2756 = getelementptr inbounds [16 x i32], [16 x i32]* %l2755, i64 0, i64 5
  %1031 = load i32, i32* %arrayidx2756, align 4, !tbaa !14
  %xor2757 = xor i32 %xor2753, %1031
  %arraydecay2758 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2759 = bitcast %union.char64long16* %arraydecay2758 to [16 x i32]*
  %arrayidx2760 = getelementptr inbounds [16 x i32], [16 x i32]* %l2759, i64 0, i64 3
  %1032 = load i32, i32* %arrayidx2760, align 4, !tbaa !14
  %xor2761 = xor i32 %xor2757, %1032
  %shr2762 = lshr i32 %xor2761, 31
  %or2763 = or i32 %shl2746, %shr2762
  %arraydecay2764 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2765 = bitcast %union.char64long16* %arraydecay2764 to [16 x i32]*
  %arrayidx2766 = getelementptr inbounds [16 x i32], [16 x i32]* %l2765, i64 0, i64 3
  store i32 %or2763, i32* %arrayidx2766, align 4, !tbaa !14
  %add2767 = add i32 %xor2730, %or2763
  %add2768 = add i32 %add2767, -899497514
  %1033 = load i32, i32* %d, align 4, !tbaa !15
  %shl2769 = shl i32 %1033, 5
  %1034 = load i32, i32* %d, align 4, !tbaa !15
  %shr2770 = lshr i32 %1034, 27
  %or2771 = or i32 %shl2769, %shr2770
  %add2772 = add i32 %add2768, %or2771
  %1035 = load i32, i32* %c, align 4, !tbaa !15
  %add2773 = add i32 %1035, %add2772
  store i32 %add2773, i32* %c, align 4, !tbaa !15
  %1036 = load i32, i32* %e, align 4, !tbaa !15
  %shl2774 = shl i32 %1036, 30
  %1037 = load i32, i32* %e, align 4, !tbaa !15
  %shr2775 = lshr i32 %1037, 2
  %or2776 = or i32 %shl2774, %shr2775
  store i32 %or2776, i32* %e, align 4, !tbaa !15
  %1038 = load i32, i32* %d, align 4, !tbaa !15
  %1039 = load i32, i32* %e, align 4, !tbaa !15
  %xor2777 = xor i32 %1038, %1039
  %1040 = load i32, i32* %a, align 4, !tbaa !15
  %xor2778 = xor i32 %xor2777, %1040
  %arraydecay2779 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2780 = bitcast %union.char64long16* %arraydecay2779 to [16 x i32]*
  %arrayidx2781 = getelementptr inbounds [16 x i32], [16 x i32]* %l2780, i64 0, i64 1
  %1041 = load i32, i32* %arrayidx2781, align 4, !tbaa !14
  %arraydecay2782 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2783 = bitcast %union.char64long16* %arraydecay2782 to [16 x i32]*
  %arrayidx2784 = getelementptr inbounds [16 x i32], [16 x i32]* %l2783, i64 0, i64 12
  %1042 = load i32, i32* %arrayidx2784, align 16, !tbaa !14
  %xor2785 = xor i32 %1041, %1042
  %arraydecay2786 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2787 = bitcast %union.char64long16* %arraydecay2786 to [16 x i32]*
  %arrayidx2788 = getelementptr inbounds [16 x i32], [16 x i32]* %l2787, i64 0, i64 6
  %1043 = load i32, i32* %arrayidx2788, align 8, !tbaa !14
  %xor2789 = xor i32 %xor2785, %1043
  %arraydecay2790 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2791 = bitcast %union.char64long16* %arraydecay2790 to [16 x i32]*
  %arrayidx2792 = getelementptr inbounds [16 x i32], [16 x i32]* %l2791, i64 0, i64 4
  %1044 = load i32, i32* %arrayidx2792, align 16, !tbaa !14
  %xor2793 = xor i32 %xor2789, %1044
  %shl2794 = shl i32 %xor2793, 1
  %arraydecay2795 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2796 = bitcast %union.char64long16* %arraydecay2795 to [16 x i32]*
  %arrayidx2797 = getelementptr inbounds [16 x i32], [16 x i32]* %l2796, i64 0, i64 1
  %1045 = load i32, i32* %arrayidx2797, align 4, !tbaa !14
  %arraydecay2798 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2799 = bitcast %union.char64long16* %arraydecay2798 to [16 x i32]*
  %arrayidx2800 = getelementptr inbounds [16 x i32], [16 x i32]* %l2799, i64 0, i64 12
  %1046 = load i32, i32* %arrayidx2800, align 16, !tbaa !14
  %xor2801 = xor i32 %1045, %1046
  %arraydecay2802 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2803 = bitcast %union.char64long16* %arraydecay2802 to [16 x i32]*
  %arrayidx2804 = getelementptr inbounds [16 x i32], [16 x i32]* %l2803, i64 0, i64 6
  %1047 = load i32, i32* %arrayidx2804, align 8, !tbaa !14
  %xor2805 = xor i32 %xor2801, %1047
  %arraydecay2806 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2807 = bitcast %union.char64long16* %arraydecay2806 to [16 x i32]*
  %arrayidx2808 = getelementptr inbounds [16 x i32], [16 x i32]* %l2807, i64 0, i64 4
  %1048 = load i32, i32* %arrayidx2808, align 16, !tbaa !14
  %xor2809 = xor i32 %xor2805, %1048
  %shr2810 = lshr i32 %xor2809, 31
  %or2811 = or i32 %shl2794, %shr2810
  %arraydecay2812 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2813 = bitcast %union.char64long16* %arraydecay2812 to [16 x i32]*
  %arrayidx2814 = getelementptr inbounds [16 x i32], [16 x i32]* %l2813, i64 0, i64 4
  store i32 %or2811, i32* %arrayidx2814, align 16, !tbaa !14
  %add2815 = add i32 %xor2778, %or2811
  %add2816 = add i32 %add2815, -899497514
  %1049 = load i32, i32* %c, align 4, !tbaa !15
  %shl2817 = shl i32 %1049, 5
  %1050 = load i32, i32* %c, align 4, !tbaa !15
  %shr2818 = lshr i32 %1050, 27
  %or2819 = or i32 %shl2817, %shr2818
  %add2820 = add i32 %add2816, %or2819
  %1051 = load i32, i32* %b, align 4, !tbaa !15
  %add2821 = add i32 %1051, %add2820
  store i32 %add2821, i32* %b, align 4, !tbaa !15
  %1052 = load i32, i32* %d, align 4, !tbaa !15
  %shl2822 = shl i32 %1052, 30
  %1053 = load i32, i32* %d, align 4, !tbaa !15
  %shr2823 = lshr i32 %1053, 2
  %or2824 = or i32 %shl2822, %shr2823
  store i32 %or2824, i32* %d, align 4, !tbaa !15
  %1054 = load i32, i32* %c, align 4, !tbaa !15
  %1055 = load i32, i32* %d, align 4, !tbaa !15
  %xor2825 = xor i32 %1054, %1055
  %1056 = load i32, i32* %e, align 4, !tbaa !15
  %xor2826 = xor i32 %xor2825, %1056
  %arraydecay2827 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2828 = bitcast %union.char64long16* %arraydecay2827 to [16 x i32]*
  %arrayidx2829 = getelementptr inbounds [16 x i32], [16 x i32]* %l2828, i64 0, i64 2
  %1057 = load i32, i32* %arrayidx2829, align 8, !tbaa !14
  %arraydecay2830 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2831 = bitcast %union.char64long16* %arraydecay2830 to [16 x i32]*
  %arrayidx2832 = getelementptr inbounds [16 x i32], [16 x i32]* %l2831, i64 0, i64 13
  %1058 = load i32, i32* %arrayidx2832, align 4, !tbaa !14
  %xor2833 = xor i32 %1057, %1058
  %arraydecay2834 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2835 = bitcast %union.char64long16* %arraydecay2834 to [16 x i32]*
  %arrayidx2836 = getelementptr inbounds [16 x i32], [16 x i32]* %l2835, i64 0, i64 7
  %1059 = load i32, i32* %arrayidx2836, align 4, !tbaa !14
  %xor2837 = xor i32 %xor2833, %1059
  %arraydecay2838 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2839 = bitcast %union.char64long16* %arraydecay2838 to [16 x i32]*
  %arrayidx2840 = getelementptr inbounds [16 x i32], [16 x i32]* %l2839, i64 0, i64 5
  %1060 = load i32, i32* %arrayidx2840, align 4, !tbaa !14
  %xor2841 = xor i32 %xor2837, %1060
  %shl2842 = shl i32 %xor2841, 1
  %arraydecay2843 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2844 = bitcast %union.char64long16* %arraydecay2843 to [16 x i32]*
  %arrayidx2845 = getelementptr inbounds [16 x i32], [16 x i32]* %l2844, i64 0, i64 2
  %1061 = load i32, i32* %arrayidx2845, align 8, !tbaa !14
  %arraydecay2846 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2847 = bitcast %union.char64long16* %arraydecay2846 to [16 x i32]*
  %arrayidx2848 = getelementptr inbounds [16 x i32], [16 x i32]* %l2847, i64 0, i64 13
  %1062 = load i32, i32* %arrayidx2848, align 4, !tbaa !14
  %xor2849 = xor i32 %1061, %1062
  %arraydecay2850 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2851 = bitcast %union.char64long16* %arraydecay2850 to [16 x i32]*
  %arrayidx2852 = getelementptr inbounds [16 x i32], [16 x i32]* %l2851, i64 0, i64 7
  %1063 = load i32, i32* %arrayidx2852, align 4, !tbaa !14
  %xor2853 = xor i32 %xor2849, %1063
  %arraydecay2854 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2855 = bitcast %union.char64long16* %arraydecay2854 to [16 x i32]*
  %arrayidx2856 = getelementptr inbounds [16 x i32], [16 x i32]* %l2855, i64 0, i64 5
  %1064 = load i32, i32* %arrayidx2856, align 4, !tbaa !14
  %xor2857 = xor i32 %xor2853, %1064
  %shr2858 = lshr i32 %xor2857, 31
  %or2859 = or i32 %shl2842, %shr2858
  %arraydecay2860 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2861 = bitcast %union.char64long16* %arraydecay2860 to [16 x i32]*
  %arrayidx2862 = getelementptr inbounds [16 x i32], [16 x i32]* %l2861, i64 0, i64 5
  store i32 %or2859, i32* %arrayidx2862, align 4, !tbaa !14
  %add2863 = add i32 %xor2826, %or2859
  %add2864 = add i32 %add2863, -899497514
  %1065 = load i32, i32* %b, align 4, !tbaa !15
  %shl2865 = shl i32 %1065, 5
  %1066 = load i32, i32* %b, align 4, !tbaa !15
  %shr2866 = lshr i32 %1066, 27
  %or2867 = or i32 %shl2865, %shr2866
  %add2868 = add i32 %add2864, %or2867
  %1067 = load i32, i32* %a, align 4, !tbaa !15
  %add2869 = add i32 %1067, %add2868
  store i32 %add2869, i32* %a, align 4, !tbaa !15
  %1068 = load i32, i32* %c, align 4, !tbaa !15
  %shl2870 = shl i32 %1068, 30
  %1069 = load i32, i32* %c, align 4, !tbaa !15
  %shr2871 = lshr i32 %1069, 2
  %or2872 = or i32 %shl2870, %shr2871
  store i32 %or2872, i32* %c, align 4, !tbaa !15
  %1070 = load i32, i32* %b, align 4, !tbaa !15
  %1071 = load i32, i32* %c, align 4, !tbaa !15
  %xor2873 = xor i32 %1070, %1071
  %1072 = load i32, i32* %d, align 4, !tbaa !15
  %xor2874 = xor i32 %xor2873, %1072
  %arraydecay2875 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2876 = bitcast %union.char64long16* %arraydecay2875 to [16 x i32]*
  %arrayidx2877 = getelementptr inbounds [16 x i32], [16 x i32]* %l2876, i64 0, i64 3
  %1073 = load i32, i32* %arrayidx2877, align 4, !tbaa !14
  %arraydecay2878 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2879 = bitcast %union.char64long16* %arraydecay2878 to [16 x i32]*
  %arrayidx2880 = getelementptr inbounds [16 x i32], [16 x i32]* %l2879, i64 0, i64 14
  %1074 = load i32, i32* %arrayidx2880, align 8, !tbaa !14
  %xor2881 = xor i32 %1073, %1074
  %arraydecay2882 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2883 = bitcast %union.char64long16* %arraydecay2882 to [16 x i32]*
  %arrayidx2884 = getelementptr inbounds [16 x i32], [16 x i32]* %l2883, i64 0, i64 8
  %1075 = load i32, i32* %arrayidx2884, align 16, !tbaa !14
  %xor2885 = xor i32 %xor2881, %1075
  %arraydecay2886 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2887 = bitcast %union.char64long16* %arraydecay2886 to [16 x i32]*
  %arrayidx2888 = getelementptr inbounds [16 x i32], [16 x i32]* %l2887, i64 0, i64 6
  %1076 = load i32, i32* %arrayidx2888, align 8, !tbaa !14
  %xor2889 = xor i32 %xor2885, %1076
  %shl2890 = shl i32 %xor2889, 1
  %arraydecay2891 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2892 = bitcast %union.char64long16* %arraydecay2891 to [16 x i32]*
  %arrayidx2893 = getelementptr inbounds [16 x i32], [16 x i32]* %l2892, i64 0, i64 3
  %1077 = load i32, i32* %arrayidx2893, align 4, !tbaa !14
  %arraydecay2894 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2895 = bitcast %union.char64long16* %arraydecay2894 to [16 x i32]*
  %arrayidx2896 = getelementptr inbounds [16 x i32], [16 x i32]* %l2895, i64 0, i64 14
  %1078 = load i32, i32* %arrayidx2896, align 8, !tbaa !14
  %xor2897 = xor i32 %1077, %1078
  %arraydecay2898 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2899 = bitcast %union.char64long16* %arraydecay2898 to [16 x i32]*
  %arrayidx2900 = getelementptr inbounds [16 x i32], [16 x i32]* %l2899, i64 0, i64 8
  %1079 = load i32, i32* %arrayidx2900, align 16, !tbaa !14
  %xor2901 = xor i32 %xor2897, %1079
  %arraydecay2902 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2903 = bitcast %union.char64long16* %arraydecay2902 to [16 x i32]*
  %arrayidx2904 = getelementptr inbounds [16 x i32], [16 x i32]* %l2903, i64 0, i64 6
  %1080 = load i32, i32* %arrayidx2904, align 8, !tbaa !14
  %xor2905 = xor i32 %xor2901, %1080
  %shr2906 = lshr i32 %xor2905, 31
  %or2907 = or i32 %shl2890, %shr2906
  %arraydecay2908 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2909 = bitcast %union.char64long16* %arraydecay2908 to [16 x i32]*
  %arrayidx2910 = getelementptr inbounds [16 x i32], [16 x i32]* %l2909, i64 0, i64 6
  store i32 %or2907, i32* %arrayidx2910, align 8, !tbaa !14
  %add2911 = add i32 %xor2874, %or2907
  %add2912 = add i32 %add2911, -899497514
  %1081 = load i32, i32* %a, align 4, !tbaa !15
  %shl2913 = shl i32 %1081, 5
  %1082 = load i32, i32* %a, align 4, !tbaa !15
  %shr2914 = lshr i32 %1082, 27
  %or2915 = or i32 %shl2913, %shr2914
  %add2916 = add i32 %add2912, %or2915
  %1083 = load i32, i32* %e, align 4, !tbaa !15
  %add2917 = add i32 %1083, %add2916
  store i32 %add2917, i32* %e, align 4, !tbaa !15
  %1084 = load i32, i32* %b, align 4, !tbaa !15
  %shl2918 = shl i32 %1084, 30
  %1085 = load i32, i32* %b, align 4, !tbaa !15
  %shr2919 = lshr i32 %1085, 2
  %or2920 = or i32 %shl2918, %shr2919
  store i32 %or2920, i32* %b, align 4, !tbaa !15
  %1086 = load i32, i32* %a, align 4, !tbaa !15
  %1087 = load i32, i32* %b, align 4, !tbaa !15
  %xor2921 = xor i32 %1086, %1087
  %1088 = load i32, i32* %c, align 4, !tbaa !15
  %xor2922 = xor i32 %xor2921, %1088
  %arraydecay2923 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2924 = bitcast %union.char64long16* %arraydecay2923 to [16 x i32]*
  %arrayidx2925 = getelementptr inbounds [16 x i32], [16 x i32]* %l2924, i64 0, i64 4
  %1089 = load i32, i32* %arrayidx2925, align 16, !tbaa !14
  %arraydecay2926 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2927 = bitcast %union.char64long16* %arraydecay2926 to [16 x i32]*
  %arrayidx2928 = getelementptr inbounds [16 x i32], [16 x i32]* %l2927, i64 0, i64 15
  %1090 = load i32, i32* %arrayidx2928, align 4, !tbaa !14
  %xor2929 = xor i32 %1089, %1090
  %arraydecay2930 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2931 = bitcast %union.char64long16* %arraydecay2930 to [16 x i32]*
  %arrayidx2932 = getelementptr inbounds [16 x i32], [16 x i32]* %l2931, i64 0, i64 9
  %1091 = load i32, i32* %arrayidx2932, align 4, !tbaa !14
  %xor2933 = xor i32 %xor2929, %1091
  %arraydecay2934 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2935 = bitcast %union.char64long16* %arraydecay2934 to [16 x i32]*
  %arrayidx2936 = getelementptr inbounds [16 x i32], [16 x i32]* %l2935, i64 0, i64 7
  %1092 = load i32, i32* %arrayidx2936, align 4, !tbaa !14
  %xor2937 = xor i32 %xor2933, %1092
  %shl2938 = shl i32 %xor2937, 1
  %arraydecay2939 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2940 = bitcast %union.char64long16* %arraydecay2939 to [16 x i32]*
  %arrayidx2941 = getelementptr inbounds [16 x i32], [16 x i32]* %l2940, i64 0, i64 4
  %1093 = load i32, i32* %arrayidx2941, align 16, !tbaa !14
  %arraydecay2942 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2943 = bitcast %union.char64long16* %arraydecay2942 to [16 x i32]*
  %arrayidx2944 = getelementptr inbounds [16 x i32], [16 x i32]* %l2943, i64 0, i64 15
  %1094 = load i32, i32* %arrayidx2944, align 4, !tbaa !14
  %xor2945 = xor i32 %1093, %1094
  %arraydecay2946 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2947 = bitcast %union.char64long16* %arraydecay2946 to [16 x i32]*
  %arrayidx2948 = getelementptr inbounds [16 x i32], [16 x i32]* %l2947, i64 0, i64 9
  %1095 = load i32, i32* %arrayidx2948, align 4, !tbaa !14
  %xor2949 = xor i32 %xor2945, %1095
  %arraydecay2950 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2951 = bitcast %union.char64long16* %arraydecay2950 to [16 x i32]*
  %arrayidx2952 = getelementptr inbounds [16 x i32], [16 x i32]* %l2951, i64 0, i64 7
  %1096 = load i32, i32* %arrayidx2952, align 4, !tbaa !14
  %xor2953 = xor i32 %xor2949, %1096
  %shr2954 = lshr i32 %xor2953, 31
  %or2955 = or i32 %shl2938, %shr2954
  %arraydecay2956 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2957 = bitcast %union.char64long16* %arraydecay2956 to [16 x i32]*
  %arrayidx2958 = getelementptr inbounds [16 x i32], [16 x i32]* %l2957, i64 0, i64 7
  store i32 %or2955, i32* %arrayidx2958, align 4, !tbaa !14
  %add2959 = add i32 %xor2922, %or2955
  %add2960 = add i32 %add2959, -899497514
  %1097 = load i32, i32* %e, align 4, !tbaa !15
  %shl2961 = shl i32 %1097, 5
  %1098 = load i32, i32* %e, align 4, !tbaa !15
  %shr2962 = lshr i32 %1098, 27
  %or2963 = or i32 %shl2961, %shr2962
  %add2964 = add i32 %add2960, %or2963
  %1099 = load i32, i32* %d, align 4, !tbaa !15
  %add2965 = add i32 %1099, %add2964
  store i32 %add2965, i32* %d, align 4, !tbaa !15
  %1100 = load i32, i32* %a, align 4, !tbaa !15
  %shl2966 = shl i32 %1100, 30
  %1101 = load i32, i32* %a, align 4, !tbaa !15
  %shr2967 = lshr i32 %1101, 2
  %or2968 = or i32 %shl2966, %shr2967
  store i32 %or2968, i32* %a, align 4, !tbaa !15
  %1102 = load i32, i32* %e, align 4, !tbaa !15
  %1103 = load i32, i32* %a, align 4, !tbaa !15
  %xor2969 = xor i32 %1102, %1103
  %1104 = load i32, i32* %b, align 4, !tbaa !15
  %xor2970 = xor i32 %xor2969, %1104
  %arraydecay2971 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2972 = bitcast %union.char64long16* %arraydecay2971 to [16 x i32]*
  %arrayidx2973 = getelementptr inbounds [16 x i32], [16 x i32]* %l2972, i64 0, i64 5
  %1105 = load i32, i32* %arrayidx2973, align 4, !tbaa !14
  %arraydecay2974 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2975 = bitcast %union.char64long16* %arraydecay2974 to [16 x i32]*
  %arrayidx2976 = getelementptr inbounds [16 x i32], [16 x i32]* %l2975, i64 0, i64 0
  %1106 = load i32, i32* %arrayidx2976, align 16, !tbaa !14
  %xor2977 = xor i32 %1105, %1106
  %arraydecay2978 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2979 = bitcast %union.char64long16* %arraydecay2978 to [16 x i32]*
  %arrayidx2980 = getelementptr inbounds [16 x i32], [16 x i32]* %l2979, i64 0, i64 10
  %1107 = load i32, i32* %arrayidx2980, align 8, !tbaa !14
  %xor2981 = xor i32 %xor2977, %1107
  %arraydecay2982 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2983 = bitcast %union.char64long16* %arraydecay2982 to [16 x i32]*
  %arrayidx2984 = getelementptr inbounds [16 x i32], [16 x i32]* %l2983, i64 0, i64 8
  %1108 = load i32, i32* %arrayidx2984, align 16, !tbaa !14
  %xor2985 = xor i32 %xor2981, %1108
  %shl2986 = shl i32 %xor2985, 1
  %arraydecay2987 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2988 = bitcast %union.char64long16* %arraydecay2987 to [16 x i32]*
  %arrayidx2989 = getelementptr inbounds [16 x i32], [16 x i32]* %l2988, i64 0, i64 5
  %1109 = load i32, i32* %arrayidx2989, align 4, !tbaa !14
  %arraydecay2990 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2991 = bitcast %union.char64long16* %arraydecay2990 to [16 x i32]*
  %arrayidx2992 = getelementptr inbounds [16 x i32], [16 x i32]* %l2991, i64 0, i64 0
  %1110 = load i32, i32* %arrayidx2992, align 16, !tbaa !14
  %xor2993 = xor i32 %1109, %1110
  %arraydecay2994 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2995 = bitcast %union.char64long16* %arraydecay2994 to [16 x i32]*
  %arrayidx2996 = getelementptr inbounds [16 x i32], [16 x i32]* %l2995, i64 0, i64 10
  %1111 = load i32, i32* %arrayidx2996, align 8, !tbaa !14
  %xor2997 = xor i32 %xor2993, %1111
  %arraydecay2998 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2999 = bitcast %union.char64long16* %arraydecay2998 to [16 x i32]*
  %arrayidx3000 = getelementptr inbounds [16 x i32], [16 x i32]* %l2999, i64 0, i64 8
  %1112 = load i32, i32* %arrayidx3000, align 16, !tbaa !14
  %xor3001 = xor i32 %xor2997, %1112
  %shr3002 = lshr i32 %xor3001, 31
  %or3003 = or i32 %shl2986, %shr3002
  %arraydecay3004 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3005 = bitcast %union.char64long16* %arraydecay3004 to [16 x i32]*
  %arrayidx3006 = getelementptr inbounds [16 x i32], [16 x i32]* %l3005, i64 0, i64 8
  store i32 %or3003, i32* %arrayidx3006, align 16, !tbaa !14
  %add3007 = add i32 %xor2970, %or3003
  %add3008 = add i32 %add3007, -899497514
  %1113 = load i32, i32* %d, align 4, !tbaa !15
  %shl3009 = shl i32 %1113, 5
  %1114 = load i32, i32* %d, align 4, !tbaa !15
  %shr3010 = lshr i32 %1114, 27
  %or3011 = or i32 %shl3009, %shr3010
  %add3012 = add i32 %add3008, %or3011
  %1115 = load i32, i32* %c, align 4, !tbaa !15
  %add3013 = add i32 %1115, %add3012
  store i32 %add3013, i32* %c, align 4, !tbaa !15
  %1116 = load i32, i32* %e, align 4, !tbaa !15
  %shl3014 = shl i32 %1116, 30
  %1117 = load i32, i32* %e, align 4, !tbaa !15
  %shr3015 = lshr i32 %1117, 2
  %or3016 = or i32 %shl3014, %shr3015
  store i32 %or3016, i32* %e, align 4, !tbaa !15
  %1118 = load i32, i32* %d, align 4, !tbaa !15
  %1119 = load i32, i32* %e, align 4, !tbaa !15
  %xor3017 = xor i32 %1118, %1119
  %1120 = load i32, i32* %a, align 4, !tbaa !15
  %xor3018 = xor i32 %xor3017, %1120
  %arraydecay3019 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3020 = bitcast %union.char64long16* %arraydecay3019 to [16 x i32]*
  %arrayidx3021 = getelementptr inbounds [16 x i32], [16 x i32]* %l3020, i64 0, i64 6
  %1121 = load i32, i32* %arrayidx3021, align 8, !tbaa !14
  %arraydecay3022 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3023 = bitcast %union.char64long16* %arraydecay3022 to [16 x i32]*
  %arrayidx3024 = getelementptr inbounds [16 x i32], [16 x i32]* %l3023, i64 0, i64 1
  %1122 = load i32, i32* %arrayidx3024, align 4, !tbaa !14
  %xor3025 = xor i32 %1121, %1122
  %arraydecay3026 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3027 = bitcast %union.char64long16* %arraydecay3026 to [16 x i32]*
  %arrayidx3028 = getelementptr inbounds [16 x i32], [16 x i32]* %l3027, i64 0, i64 11
  %1123 = load i32, i32* %arrayidx3028, align 4, !tbaa !14
  %xor3029 = xor i32 %xor3025, %1123
  %arraydecay3030 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3031 = bitcast %union.char64long16* %arraydecay3030 to [16 x i32]*
  %arrayidx3032 = getelementptr inbounds [16 x i32], [16 x i32]* %l3031, i64 0, i64 9
  %1124 = load i32, i32* %arrayidx3032, align 4, !tbaa !14
  %xor3033 = xor i32 %xor3029, %1124
  %shl3034 = shl i32 %xor3033, 1
  %arraydecay3035 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3036 = bitcast %union.char64long16* %arraydecay3035 to [16 x i32]*
  %arrayidx3037 = getelementptr inbounds [16 x i32], [16 x i32]* %l3036, i64 0, i64 6
  %1125 = load i32, i32* %arrayidx3037, align 8, !tbaa !14
  %arraydecay3038 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3039 = bitcast %union.char64long16* %arraydecay3038 to [16 x i32]*
  %arrayidx3040 = getelementptr inbounds [16 x i32], [16 x i32]* %l3039, i64 0, i64 1
  %1126 = load i32, i32* %arrayidx3040, align 4, !tbaa !14
  %xor3041 = xor i32 %1125, %1126
  %arraydecay3042 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3043 = bitcast %union.char64long16* %arraydecay3042 to [16 x i32]*
  %arrayidx3044 = getelementptr inbounds [16 x i32], [16 x i32]* %l3043, i64 0, i64 11
  %1127 = load i32, i32* %arrayidx3044, align 4, !tbaa !14
  %xor3045 = xor i32 %xor3041, %1127
  %arraydecay3046 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3047 = bitcast %union.char64long16* %arraydecay3046 to [16 x i32]*
  %arrayidx3048 = getelementptr inbounds [16 x i32], [16 x i32]* %l3047, i64 0, i64 9
  %1128 = load i32, i32* %arrayidx3048, align 4, !tbaa !14
  %xor3049 = xor i32 %xor3045, %1128
  %shr3050 = lshr i32 %xor3049, 31
  %or3051 = or i32 %shl3034, %shr3050
  %arraydecay3052 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3053 = bitcast %union.char64long16* %arraydecay3052 to [16 x i32]*
  %arrayidx3054 = getelementptr inbounds [16 x i32], [16 x i32]* %l3053, i64 0, i64 9
  store i32 %or3051, i32* %arrayidx3054, align 4, !tbaa !14
  %add3055 = add i32 %xor3018, %or3051
  %add3056 = add i32 %add3055, -899497514
  %1129 = load i32, i32* %c, align 4, !tbaa !15
  %shl3057 = shl i32 %1129, 5
  %1130 = load i32, i32* %c, align 4, !tbaa !15
  %shr3058 = lshr i32 %1130, 27
  %or3059 = or i32 %shl3057, %shr3058
  %add3060 = add i32 %add3056, %or3059
  %1131 = load i32, i32* %b, align 4, !tbaa !15
  %add3061 = add i32 %1131, %add3060
  store i32 %add3061, i32* %b, align 4, !tbaa !15
  %1132 = load i32, i32* %d, align 4, !tbaa !15
  %shl3062 = shl i32 %1132, 30
  %1133 = load i32, i32* %d, align 4, !tbaa !15
  %shr3063 = lshr i32 %1133, 2
  %or3064 = or i32 %shl3062, %shr3063
  store i32 %or3064, i32* %d, align 4, !tbaa !15
  %1134 = load i32, i32* %c, align 4, !tbaa !15
  %1135 = load i32, i32* %d, align 4, !tbaa !15
  %xor3065 = xor i32 %1134, %1135
  %1136 = load i32, i32* %e, align 4, !tbaa !15
  %xor3066 = xor i32 %xor3065, %1136
  %arraydecay3067 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3068 = bitcast %union.char64long16* %arraydecay3067 to [16 x i32]*
  %arrayidx3069 = getelementptr inbounds [16 x i32], [16 x i32]* %l3068, i64 0, i64 7
  %1137 = load i32, i32* %arrayidx3069, align 4, !tbaa !14
  %arraydecay3070 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3071 = bitcast %union.char64long16* %arraydecay3070 to [16 x i32]*
  %arrayidx3072 = getelementptr inbounds [16 x i32], [16 x i32]* %l3071, i64 0, i64 2
  %1138 = load i32, i32* %arrayidx3072, align 8, !tbaa !14
  %xor3073 = xor i32 %1137, %1138
  %arraydecay3074 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3075 = bitcast %union.char64long16* %arraydecay3074 to [16 x i32]*
  %arrayidx3076 = getelementptr inbounds [16 x i32], [16 x i32]* %l3075, i64 0, i64 12
  %1139 = load i32, i32* %arrayidx3076, align 16, !tbaa !14
  %xor3077 = xor i32 %xor3073, %1139
  %arraydecay3078 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3079 = bitcast %union.char64long16* %arraydecay3078 to [16 x i32]*
  %arrayidx3080 = getelementptr inbounds [16 x i32], [16 x i32]* %l3079, i64 0, i64 10
  %1140 = load i32, i32* %arrayidx3080, align 8, !tbaa !14
  %xor3081 = xor i32 %xor3077, %1140
  %shl3082 = shl i32 %xor3081, 1
  %arraydecay3083 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3084 = bitcast %union.char64long16* %arraydecay3083 to [16 x i32]*
  %arrayidx3085 = getelementptr inbounds [16 x i32], [16 x i32]* %l3084, i64 0, i64 7
  %1141 = load i32, i32* %arrayidx3085, align 4, !tbaa !14
  %arraydecay3086 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3087 = bitcast %union.char64long16* %arraydecay3086 to [16 x i32]*
  %arrayidx3088 = getelementptr inbounds [16 x i32], [16 x i32]* %l3087, i64 0, i64 2
  %1142 = load i32, i32* %arrayidx3088, align 8, !tbaa !14
  %xor3089 = xor i32 %1141, %1142
  %arraydecay3090 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3091 = bitcast %union.char64long16* %arraydecay3090 to [16 x i32]*
  %arrayidx3092 = getelementptr inbounds [16 x i32], [16 x i32]* %l3091, i64 0, i64 12
  %1143 = load i32, i32* %arrayidx3092, align 16, !tbaa !14
  %xor3093 = xor i32 %xor3089, %1143
  %arraydecay3094 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3095 = bitcast %union.char64long16* %arraydecay3094 to [16 x i32]*
  %arrayidx3096 = getelementptr inbounds [16 x i32], [16 x i32]* %l3095, i64 0, i64 10
  %1144 = load i32, i32* %arrayidx3096, align 8, !tbaa !14
  %xor3097 = xor i32 %xor3093, %1144
  %shr3098 = lshr i32 %xor3097, 31
  %or3099 = or i32 %shl3082, %shr3098
  %arraydecay3100 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3101 = bitcast %union.char64long16* %arraydecay3100 to [16 x i32]*
  %arrayidx3102 = getelementptr inbounds [16 x i32], [16 x i32]* %l3101, i64 0, i64 10
  store i32 %or3099, i32* %arrayidx3102, align 8, !tbaa !14
  %add3103 = add i32 %xor3066, %or3099
  %add3104 = add i32 %add3103, -899497514
  %1145 = load i32, i32* %b, align 4, !tbaa !15
  %shl3105 = shl i32 %1145, 5
  %1146 = load i32, i32* %b, align 4, !tbaa !15
  %shr3106 = lshr i32 %1146, 27
  %or3107 = or i32 %shl3105, %shr3106
  %add3108 = add i32 %add3104, %or3107
  %1147 = load i32, i32* %a, align 4, !tbaa !15
  %add3109 = add i32 %1147, %add3108
  store i32 %add3109, i32* %a, align 4, !tbaa !15
  %1148 = load i32, i32* %c, align 4, !tbaa !15
  %shl3110 = shl i32 %1148, 30
  %1149 = load i32, i32* %c, align 4, !tbaa !15
  %shr3111 = lshr i32 %1149, 2
  %or3112 = or i32 %shl3110, %shr3111
  store i32 %or3112, i32* %c, align 4, !tbaa !15
  %1150 = load i32, i32* %b, align 4, !tbaa !15
  %1151 = load i32, i32* %c, align 4, !tbaa !15
  %xor3113 = xor i32 %1150, %1151
  %1152 = load i32, i32* %d, align 4, !tbaa !15
  %xor3114 = xor i32 %xor3113, %1152
  %arraydecay3115 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3116 = bitcast %union.char64long16* %arraydecay3115 to [16 x i32]*
  %arrayidx3117 = getelementptr inbounds [16 x i32], [16 x i32]* %l3116, i64 0, i64 8
  %1153 = load i32, i32* %arrayidx3117, align 16, !tbaa !14
  %arraydecay3118 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3119 = bitcast %union.char64long16* %arraydecay3118 to [16 x i32]*
  %arrayidx3120 = getelementptr inbounds [16 x i32], [16 x i32]* %l3119, i64 0, i64 3
  %1154 = load i32, i32* %arrayidx3120, align 4, !tbaa !14
  %xor3121 = xor i32 %1153, %1154
  %arraydecay3122 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3123 = bitcast %union.char64long16* %arraydecay3122 to [16 x i32]*
  %arrayidx3124 = getelementptr inbounds [16 x i32], [16 x i32]* %l3123, i64 0, i64 13
  %1155 = load i32, i32* %arrayidx3124, align 4, !tbaa !14
  %xor3125 = xor i32 %xor3121, %1155
  %arraydecay3126 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3127 = bitcast %union.char64long16* %arraydecay3126 to [16 x i32]*
  %arrayidx3128 = getelementptr inbounds [16 x i32], [16 x i32]* %l3127, i64 0, i64 11
  %1156 = load i32, i32* %arrayidx3128, align 4, !tbaa !14
  %xor3129 = xor i32 %xor3125, %1156
  %shl3130 = shl i32 %xor3129, 1
  %arraydecay3131 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3132 = bitcast %union.char64long16* %arraydecay3131 to [16 x i32]*
  %arrayidx3133 = getelementptr inbounds [16 x i32], [16 x i32]* %l3132, i64 0, i64 8
  %1157 = load i32, i32* %arrayidx3133, align 16, !tbaa !14
  %arraydecay3134 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3135 = bitcast %union.char64long16* %arraydecay3134 to [16 x i32]*
  %arrayidx3136 = getelementptr inbounds [16 x i32], [16 x i32]* %l3135, i64 0, i64 3
  %1158 = load i32, i32* %arrayidx3136, align 4, !tbaa !14
  %xor3137 = xor i32 %1157, %1158
  %arraydecay3138 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3139 = bitcast %union.char64long16* %arraydecay3138 to [16 x i32]*
  %arrayidx3140 = getelementptr inbounds [16 x i32], [16 x i32]* %l3139, i64 0, i64 13
  %1159 = load i32, i32* %arrayidx3140, align 4, !tbaa !14
  %xor3141 = xor i32 %xor3137, %1159
  %arraydecay3142 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3143 = bitcast %union.char64long16* %arraydecay3142 to [16 x i32]*
  %arrayidx3144 = getelementptr inbounds [16 x i32], [16 x i32]* %l3143, i64 0, i64 11
  %1160 = load i32, i32* %arrayidx3144, align 4, !tbaa !14
  %xor3145 = xor i32 %xor3141, %1160
  %shr3146 = lshr i32 %xor3145, 31
  %or3147 = or i32 %shl3130, %shr3146
  %arraydecay3148 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3149 = bitcast %union.char64long16* %arraydecay3148 to [16 x i32]*
  %arrayidx3150 = getelementptr inbounds [16 x i32], [16 x i32]* %l3149, i64 0, i64 11
  store i32 %or3147, i32* %arrayidx3150, align 4, !tbaa !14
  %add3151 = add i32 %xor3114, %or3147
  %add3152 = add i32 %add3151, -899497514
  %1161 = load i32, i32* %a, align 4, !tbaa !15
  %shl3153 = shl i32 %1161, 5
  %1162 = load i32, i32* %a, align 4, !tbaa !15
  %shr3154 = lshr i32 %1162, 27
  %or3155 = or i32 %shl3153, %shr3154
  %add3156 = add i32 %add3152, %or3155
  %1163 = load i32, i32* %e, align 4, !tbaa !15
  %add3157 = add i32 %1163, %add3156
  store i32 %add3157, i32* %e, align 4, !tbaa !15
  %1164 = load i32, i32* %b, align 4, !tbaa !15
  %shl3158 = shl i32 %1164, 30
  %1165 = load i32, i32* %b, align 4, !tbaa !15
  %shr3159 = lshr i32 %1165, 2
  %or3160 = or i32 %shl3158, %shr3159
  store i32 %or3160, i32* %b, align 4, !tbaa !15
  %1166 = load i32, i32* %a, align 4, !tbaa !15
  %1167 = load i32, i32* %b, align 4, !tbaa !15
  %xor3161 = xor i32 %1166, %1167
  %1168 = load i32, i32* %c, align 4, !tbaa !15
  %xor3162 = xor i32 %xor3161, %1168
  %arraydecay3163 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3164 = bitcast %union.char64long16* %arraydecay3163 to [16 x i32]*
  %arrayidx3165 = getelementptr inbounds [16 x i32], [16 x i32]* %l3164, i64 0, i64 9
  %1169 = load i32, i32* %arrayidx3165, align 4, !tbaa !14
  %arraydecay3166 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3167 = bitcast %union.char64long16* %arraydecay3166 to [16 x i32]*
  %arrayidx3168 = getelementptr inbounds [16 x i32], [16 x i32]* %l3167, i64 0, i64 4
  %1170 = load i32, i32* %arrayidx3168, align 16, !tbaa !14
  %xor3169 = xor i32 %1169, %1170
  %arraydecay3170 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3171 = bitcast %union.char64long16* %arraydecay3170 to [16 x i32]*
  %arrayidx3172 = getelementptr inbounds [16 x i32], [16 x i32]* %l3171, i64 0, i64 14
  %1171 = load i32, i32* %arrayidx3172, align 8, !tbaa !14
  %xor3173 = xor i32 %xor3169, %1171
  %arraydecay3174 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3175 = bitcast %union.char64long16* %arraydecay3174 to [16 x i32]*
  %arrayidx3176 = getelementptr inbounds [16 x i32], [16 x i32]* %l3175, i64 0, i64 12
  %1172 = load i32, i32* %arrayidx3176, align 16, !tbaa !14
  %xor3177 = xor i32 %xor3173, %1172
  %shl3178 = shl i32 %xor3177, 1
  %arraydecay3179 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3180 = bitcast %union.char64long16* %arraydecay3179 to [16 x i32]*
  %arrayidx3181 = getelementptr inbounds [16 x i32], [16 x i32]* %l3180, i64 0, i64 9
  %1173 = load i32, i32* %arrayidx3181, align 4, !tbaa !14
  %arraydecay3182 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3183 = bitcast %union.char64long16* %arraydecay3182 to [16 x i32]*
  %arrayidx3184 = getelementptr inbounds [16 x i32], [16 x i32]* %l3183, i64 0, i64 4
  %1174 = load i32, i32* %arrayidx3184, align 16, !tbaa !14
  %xor3185 = xor i32 %1173, %1174
  %arraydecay3186 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3187 = bitcast %union.char64long16* %arraydecay3186 to [16 x i32]*
  %arrayidx3188 = getelementptr inbounds [16 x i32], [16 x i32]* %l3187, i64 0, i64 14
  %1175 = load i32, i32* %arrayidx3188, align 8, !tbaa !14
  %xor3189 = xor i32 %xor3185, %1175
  %arraydecay3190 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3191 = bitcast %union.char64long16* %arraydecay3190 to [16 x i32]*
  %arrayidx3192 = getelementptr inbounds [16 x i32], [16 x i32]* %l3191, i64 0, i64 12
  %1176 = load i32, i32* %arrayidx3192, align 16, !tbaa !14
  %xor3193 = xor i32 %xor3189, %1176
  %shr3194 = lshr i32 %xor3193, 31
  %or3195 = or i32 %shl3178, %shr3194
  %arraydecay3196 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3197 = bitcast %union.char64long16* %arraydecay3196 to [16 x i32]*
  %arrayidx3198 = getelementptr inbounds [16 x i32], [16 x i32]* %l3197, i64 0, i64 12
  store i32 %or3195, i32* %arrayidx3198, align 16, !tbaa !14
  %add3199 = add i32 %xor3162, %or3195
  %add3200 = add i32 %add3199, -899497514
  %1177 = load i32, i32* %e, align 4, !tbaa !15
  %shl3201 = shl i32 %1177, 5
  %1178 = load i32, i32* %e, align 4, !tbaa !15
  %shr3202 = lshr i32 %1178, 27
  %or3203 = or i32 %shl3201, %shr3202
  %add3204 = add i32 %add3200, %or3203
  %1179 = load i32, i32* %d, align 4, !tbaa !15
  %add3205 = add i32 %1179, %add3204
  store i32 %add3205, i32* %d, align 4, !tbaa !15
  %1180 = load i32, i32* %a, align 4, !tbaa !15
  %shl3206 = shl i32 %1180, 30
  %1181 = load i32, i32* %a, align 4, !tbaa !15
  %shr3207 = lshr i32 %1181, 2
  %or3208 = or i32 %shl3206, %shr3207
  store i32 %or3208, i32* %a, align 4, !tbaa !15
  %1182 = load i32, i32* %e, align 4, !tbaa !15
  %1183 = load i32, i32* %a, align 4, !tbaa !15
  %xor3209 = xor i32 %1182, %1183
  %1184 = load i32, i32* %b, align 4, !tbaa !15
  %xor3210 = xor i32 %xor3209, %1184
  %arraydecay3211 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3212 = bitcast %union.char64long16* %arraydecay3211 to [16 x i32]*
  %arrayidx3213 = getelementptr inbounds [16 x i32], [16 x i32]* %l3212, i64 0, i64 10
  %1185 = load i32, i32* %arrayidx3213, align 8, !tbaa !14
  %arraydecay3214 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3215 = bitcast %union.char64long16* %arraydecay3214 to [16 x i32]*
  %arrayidx3216 = getelementptr inbounds [16 x i32], [16 x i32]* %l3215, i64 0, i64 5
  %1186 = load i32, i32* %arrayidx3216, align 4, !tbaa !14
  %xor3217 = xor i32 %1185, %1186
  %arraydecay3218 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3219 = bitcast %union.char64long16* %arraydecay3218 to [16 x i32]*
  %arrayidx3220 = getelementptr inbounds [16 x i32], [16 x i32]* %l3219, i64 0, i64 15
  %1187 = load i32, i32* %arrayidx3220, align 4, !tbaa !14
  %xor3221 = xor i32 %xor3217, %1187
  %arraydecay3222 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3223 = bitcast %union.char64long16* %arraydecay3222 to [16 x i32]*
  %arrayidx3224 = getelementptr inbounds [16 x i32], [16 x i32]* %l3223, i64 0, i64 13
  %1188 = load i32, i32* %arrayidx3224, align 4, !tbaa !14
  %xor3225 = xor i32 %xor3221, %1188
  %shl3226 = shl i32 %xor3225, 1
  %arraydecay3227 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3228 = bitcast %union.char64long16* %arraydecay3227 to [16 x i32]*
  %arrayidx3229 = getelementptr inbounds [16 x i32], [16 x i32]* %l3228, i64 0, i64 10
  %1189 = load i32, i32* %arrayidx3229, align 8, !tbaa !14
  %arraydecay3230 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3231 = bitcast %union.char64long16* %arraydecay3230 to [16 x i32]*
  %arrayidx3232 = getelementptr inbounds [16 x i32], [16 x i32]* %l3231, i64 0, i64 5
  %1190 = load i32, i32* %arrayidx3232, align 4, !tbaa !14
  %xor3233 = xor i32 %1189, %1190
  %arraydecay3234 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3235 = bitcast %union.char64long16* %arraydecay3234 to [16 x i32]*
  %arrayidx3236 = getelementptr inbounds [16 x i32], [16 x i32]* %l3235, i64 0, i64 15
  %1191 = load i32, i32* %arrayidx3236, align 4, !tbaa !14
  %xor3237 = xor i32 %xor3233, %1191
  %arraydecay3238 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3239 = bitcast %union.char64long16* %arraydecay3238 to [16 x i32]*
  %arrayidx3240 = getelementptr inbounds [16 x i32], [16 x i32]* %l3239, i64 0, i64 13
  %1192 = load i32, i32* %arrayidx3240, align 4, !tbaa !14
  %xor3241 = xor i32 %xor3237, %1192
  %shr3242 = lshr i32 %xor3241, 31
  %or3243 = or i32 %shl3226, %shr3242
  %arraydecay3244 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3245 = bitcast %union.char64long16* %arraydecay3244 to [16 x i32]*
  %arrayidx3246 = getelementptr inbounds [16 x i32], [16 x i32]* %l3245, i64 0, i64 13
  store i32 %or3243, i32* %arrayidx3246, align 4, !tbaa !14
  %add3247 = add i32 %xor3210, %or3243
  %add3248 = add i32 %add3247, -899497514
  %1193 = load i32, i32* %d, align 4, !tbaa !15
  %shl3249 = shl i32 %1193, 5
  %1194 = load i32, i32* %d, align 4, !tbaa !15
  %shr3250 = lshr i32 %1194, 27
  %or3251 = or i32 %shl3249, %shr3250
  %add3252 = add i32 %add3248, %or3251
  %1195 = load i32, i32* %c, align 4, !tbaa !15
  %add3253 = add i32 %1195, %add3252
  store i32 %add3253, i32* %c, align 4, !tbaa !15
  %1196 = load i32, i32* %e, align 4, !tbaa !15
  %shl3254 = shl i32 %1196, 30
  %1197 = load i32, i32* %e, align 4, !tbaa !15
  %shr3255 = lshr i32 %1197, 2
  %or3256 = or i32 %shl3254, %shr3255
  store i32 %or3256, i32* %e, align 4, !tbaa !15
  %1198 = load i32, i32* %d, align 4, !tbaa !15
  %1199 = load i32, i32* %e, align 4, !tbaa !15
  %xor3257 = xor i32 %1198, %1199
  %1200 = load i32, i32* %a, align 4, !tbaa !15
  %xor3258 = xor i32 %xor3257, %1200
  %arraydecay3259 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3260 = bitcast %union.char64long16* %arraydecay3259 to [16 x i32]*
  %arrayidx3261 = getelementptr inbounds [16 x i32], [16 x i32]* %l3260, i64 0, i64 11
  %1201 = load i32, i32* %arrayidx3261, align 4, !tbaa !14
  %arraydecay3262 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3263 = bitcast %union.char64long16* %arraydecay3262 to [16 x i32]*
  %arrayidx3264 = getelementptr inbounds [16 x i32], [16 x i32]* %l3263, i64 0, i64 6
  %1202 = load i32, i32* %arrayidx3264, align 8, !tbaa !14
  %xor3265 = xor i32 %1201, %1202
  %arraydecay3266 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3267 = bitcast %union.char64long16* %arraydecay3266 to [16 x i32]*
  %arrayidx3268 = getelementptr inbounds [16 x i32], [16 x i32]* %l3267, i64 0, i64 0
  %1203 = load i32, i32* %arrayidx3268, align 16, !tbaa !14
  %xor3269 = xor i32 %xor3265, %1203
  %arraydecay3270 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3271 = bitcast %union.char64long16* %arraydecay3270 to [16 x i32]*
  %arrayidx3272 = getelementptr inbounds [16 x i32], [16 x i32]* %l3271, i64 0, i64 14
  %1204 = load i32, i32* %arrayidx3272, align 8, !tbaa !14
  %xor3273 = xor i32 %xor3269, %1204
  %shl3274 = shl i32 %xor3273, 1
  %arraydecay3275 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3276 = bitcast %union.char64long16* %arraydecay3275 to [16 x i32]*
  %arrayidx3277 = getelementptr inbounds [16 x i32], [16 x i32]* %l3276, i64 0, i64 11
  %1205 = load i32, i32* %arrayidx3277, align 4, !tbaa !14
  %arraydecay3278 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3279 = bitcast %union.char64long16* %arraydecay3278 to [16 x i32]*
  %arrayidx3280 = getelementptr inbounds [16 x i32], [16 x i32]* %l3279, i64 0, i64 6
  %1206 = load i32, i32* %arrayidx3280, align 8, !tbaa !14
  %xor3281 = xor i32 %1205, %1206
  %arraydecay3282 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3283 = bitcast %union.char64long16* %arraydecay3282 to [16 x i32]*
  %arrayidx3284 = getelementptr inbounds [16 x i32], [16 x i32]* %l3283, i64 0, i64 0
  %1207 = load i32, i32* %arrayidx3284, align 16, !tbaa !14
  %xor3285 = xor i32 %xor3281, %1207
  %arraydecay3286 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3287 = bitcast %union.char64long16* %arraydecay3286 to [16 x i32]*
  %arrayidx3288 = getelementptr inbounds [16 x i32], [16 x i32]* %l3287, i64 0, i64 14
  %1208 = load i32, i32* %arrayidx3288, align 8, !tbaa !14
  %xor3289 = xor i32 %xor3285, %1208
  %shr3290 = lshr i32 %xor3289, 31
  %or3291 = or i32 %shl3274, %shr3290
  %arraydecay3292 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3293 = bitcast %union.char64long16* %arraydecay3292 to [16 x i32]*
  %arrayidx3294 = getelementptr inbounds [16 x i32], [16 x i32]* %l3293, i64 0, i64 14
  store i32 %or3291, i32* %arrayidx3294, align 8, !tbaa !14
  %add3295 = add i32 %xor3258, %or3291
  %add3296 = add i32 %add3295, -899497514
  %1209 = load i32, i32* %c, align 4, !tbaa !15
  %shl3297 = shl i32 %1209, 5
  %1210 = load i32, i32* %c, align 4, !tbaa !15
  %shr3298 = lshr i32 %1210, 27
  %or3299 = or i32 %shl3297, %shr3298
  %add3300 = add i32 %add3296, %or3299
  %1211 = load i32, i32* %b, align 4, !tbaa !15
  %add3301 = add i32 %1211, %add3300
  store i32 %add3301, i32* %b, align 4, !tbaa !15
  %1212 = load i32, i32* %d, align 4, !tbaa !15
  %shl3302 = shl i32 %1212, 30
  %1213 = load i32, i32* %d, align 4, !tbaa !15
  %shr3303 = lshr i32 %1213, 2
  %or3304 = or i32 %shl3302, %shr3303
  store i32 %or3304, i32* %d, align 4, !tbaa !15
  %1214 = load i32, i32* %c, align 4, !tbaa !15
  %1215 = load i32, i32* %d, align 4, !tbaa !15
  %xor3305 = xor i32 %1214, %1215
  %1216 = load i32, i32* %e, align 4, !tbaa !15
  %xor3306 = xor i32 %xor3305, %1216
  %arraydecay3307 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3308 = bitcast %union.char64long16* %arraydecay3307 to [16 x i32]*
  %arrayidx3309 = getelementptr inbounds [16 x i32], [16 x i32]* %l3308, i64 0, i64 12
  %1217 = load i32, i32* %arrayidx3309, align 16, !tbaa !14
  %arraydecay3310 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3311 = bitcast %union.char64long16* %arraydecay3310 to [16 x i32]*
  %arrayidx3312 = getelementptr inbounds [16 x i32], [16 x i32]* %l3311, i64 0, i64 7
  %1218 = load i32, i32* %arrayidx3312, align 4, !tbaa !14
  %xor3313 = xor i32 %1217, %1218
  %arraydecay3314 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3315 = bitcast %union.char64long16* %arraydecay3314 to [16 x i32]*
  %arrayidx3316 = getelementptr inbounds [16 x i32], [16 x i32]* %l3315, i64 0, i64 1
  %1219 = load i32, i32* %arrayidx3316, align 4, !tbaa !14
  %xor3317 = xor i32 %xor3313, %1219
  %arraydecay3318 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3319 = bitcast %union.char64long16* %arraydecay3318 to [16 x i32]*
  %arrayidx3320 = getelementptr inbounds [16 x i32], [16 x i32]* %l3319, i64 0, i64 15
  %1220 = load i32, i32* %arrayidx3320, align 4, !tbaa !14
  %xor3321 = xor i32 %xor3317, %1220
  %shl3322 = shl i32 %xor3321, 1
  %arraydecay3323 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3324 = bitcast %union.char64long16* %arraydecay3323 to [16 x i32]*
  %arrayidx3325 = getelementptr inbounds [16 x i32], [16 x i32]* %l3324, i64 0, i64 12
  %1221 = load i32, i32* %arrayidx3325, align 16, !tbaa !14
  %arraydecay3326 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3327 = bitcast %union.char64long16* %arraydecay3326 to [16 x i32]*
  %arrayidx3328 = getelementptr inbounds [16 x i32], [16 x i32]* %l3327, i64 0, i64 7
  %1222 = load i32, i32* %arrayidx3328, align 4, !tbaa !14
  %xor3329 = xor i32 %1221, %1222
  %arraydecay3330 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3331 = bitcast %union.char64long16* %arraydecay3330 to [16 x i32]*
  %arrayidx3332 = getelementptr inbounds [16 x i32], [16 x i32]* %l3331, i64 0, i64 1
  %1223 = load i32, i32* %arrayidx3332, align 4, !tbaa !14
  %xor3333 = xor i32 %xor3329, %1223
  %arraydecay3334 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3335 = bitcast %union.char64long16* %arraydecay3334 to [16 x i32]*
  %arrayidx3336 = getelementptr inbounds [16 x i32], [16 x i32]* %l3335, i64 0, i64 15
  %1224 = load i32, i32* %arrayidx3336, align 4, !tbaa !14
  %xor3337 = xor i32 %xor3333, %1224
  %shr3338 = lshr i32 %xor3337, 31
  %or3339 = or i32 %shl3322, %shr3338
  %arraydecay3340 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3341 = bitcast %union.char64long16* %arraydecay3340 to [16 x i32]*
  %arrayidx3342 = getelementptr inbounds [16 x i32], [16 x i32]* %l3341, i64 0, i64 15
  store i32 %or3339, i32* %arrayidx3342, align 4, !tbaa !14
  %add3343 = add i32 %xor3306, %or3339
  %add3344 = add i32 %add3343, -899497514
  %1225 = load i32, i32* %b, align 4, !tbaa !15
  %shl3345 = shl i32 %1225, 5
  %1226 = load i32, i32* %b, align 4, !tbaa !15
  %shr3346 = lshr i32 %1226, 27
  %or3347 = or i32 %shl3345, %shr3346
  %add3348 = add i32 %add3344, %or3347
  %1227 = load i32, i32* %a, align 4, !tbaa !15
  %add3349 = add i32 %1227, %add3348
  store i32 %add3349, i32* %a, align 4, !tbaa !15
  %1228 = load i32, i32* %c, align 4, !tbaa !15
  %shl3350 = shl i32 %1228, 30
  %1229 = load i32, i32* %c, align 4, !tbaa !15
  %shr3351 = lshr i32 %1229, 2
  %or3352 = or i32 %shl3350, %shr3351
  store i32 %or3352, i32* %c, align 4, !tbaa !15
  %1230 = load i32, i32* %a, align 4, !tbaa !15
  %1231 = load i32*, i32** %state.addr, align 8, !tbaa !3
  %arrayidx3353 = getelementptr inbounds i32, i32* %1231, i64 0
  %1232 = load i32, i32* %arrayidx3353, align 4, !tbaa !15
  %add3354 = add i32 %1232, %1230
  store i32 %add3354, i32* %arrayidx3353, align 4, !tbaa !15
  %1233 = load i32, i32* %b, align 4, !tbaa !15
  %1234 = load i32*, i32** %state.addr, align 8, !tbaa !3
  %arrayidx3355 = getelementptr inbounds i32, i32* %1234, i64 1
  %1235 = load i32, i32* %arrayidx3355, align 4, !tbaa !15
  %add3356 = add i32 %1235, %1233
  store i32 %add3356, i32* %arrayidx3355, align 4, !tbaa !15
  %1236 = load i32, i32* %c, align 4, !tbaa !15
  %1237 = load i32*, i32** %state.addr, align 8, !tbaa !3
  %arrayidx3357 = getelementptr inbounds i32, i32* %1237, i64 2
  %1238 = load i32, i32* %arrayidx3357, align 4, !tbaa !15
  %add3358 = add i32 %1238, %1236
  store i32 %add3358, i32* %arrayidx3357, align 4, !tbaa !15
  %1239 = load i32, i32* %d, align 4, !tbaa !15
  %1240 = load i32*, i32** %state.addr, align 8, !tbaa !3
  %arrayidx3359 = getelementptr inbounds i32, i32* %1240, i64 3
  %1241 = load i32, i32* %arrayidx3359, align 4, !tbaa !15
  %add3360 = add i32 %1241, %1239
  store i32 %add3360, i32* %arrayidx3359, align 4, !tbaa !15
  %1242 = load i32, i32* %e, align 4, !tbaa !15
  %1243 = load i32*, i32** %state.addr, align 8, !tbaa !3
  %arrayidx3361 = getelementptr inbounds i32, i32* %1243, i64 4
  %1244 = load i32, i32* %arrayidx3361, align 4, !tbaa !15
  %add3362 = add i32 %1244, %1242
  store i32 %add3362, i32* %arrayidx3361, align 4, !tbaa !15
  %arraydecay3363 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %1245 = bitcast %union.char64long16* %arraydecay3363 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %1245, i8 0, i64 64, i1 false)
  store i32 0, i32* %e, align 4, !tbaa !15
  store i32 0, i32* %d, align 4, !tbaa !15
  store i32 0, i32* %c, align 4, !tbaa !15
  store i32 0, i32* %b, align 4, !tbaa !15
  store i32 0, i32* %a, align 4, !tbaa !15
  %1246 = load i32, i32* %a, align 4, !tbaa !15
  %1247 = load i32, i32* %b, align 4, !tbaa !15
  %1248 = load i32, i32* %c, align 4, !tbaa !15
  %1249 = load i32, i32* %d, align 4, !tbaa !15
  %1250 = load i32, i32* %e, align 4, !tbaa !15
  %1251 = bitcast [1 x %union.char64long16]* %block to i8*
  call void @llvm.lifetime.end.p0i8(i64 64, i8* %1251) #5
  %1252 = bitcast i32* %e to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1252) #5
  %1253 = bitcast i32* %d to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1253) #5
  %1254 = bitcast i32* %c to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1254) #5
  %1255 = bitcast i32* %b to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1255) #5
  %1256 = bitcast i32* %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1256) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @blk0(%union.char64long16* %block, i32 %i) #0 {
entry:
  %block.addr = alloca %union.char64long16*, align 8
  %i.addr = alloca i32, align 4
  store %union.char64long16* %block, %union.char64long16** %block.addr, align 8, !tbaa !3
  store i32 %i, i32* %i.addr, align 4, !tbaa !15
  %0 = load %union.char64long16*, %union.char64long16** %block.addr, align 8, !tbaa !3
  %l = bitcast %union.char64long16* %0 to [16 x i32]*
  %1 = load i32, i32* %i.addr, align 4, !tbaa !15
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [16 x i32], [16 x i32]* %l, i64 0, i64 %idxprom
  %2 = load i32, i32* %arrayidx, align 4, !tbaa !14
  %shl = shl i32 %2, 24
  %3 = load %union.char64long16*, %union.char64long16** %block.addr, align 8, !tbaa !3
  %l1 = bitcast %union.char64long16* %3 to [16 x i32]*
  %4 = load i32, i32* %i.addr, align 4, !tbaa !15
  %idxprom2 = sext i32 %4 to i64
  %arrayidx3 = getelementptr inbounds [16 x i32], [16 x i32]* %l1, i64 0, i64 %idxprom2
  %5 = load i32, i32* %arrayidx3, align 4, !tbaa !14
  %shr = lshr i32 %5, 8
  %or = or i32 %shl, %shr
  %and = and i32 %or, -16711936
  %6 = load %union.char64long16*, %union.char64long16** %block.addr, align 8, !tbaa !3
  %l4 = bitcast %union.char64long16* %6 to [16 x i32]*
  %7 = load i32, i32* %i.addr, align 4, !tbaa !15
  %idxprom5 = sext i32 %7 to i64
  %arrayidx6 = getelementptr inbounds [16 x i32], [16 x i32]* %l4, i64 0, i64 %idxprom5
  %8 = load i32, i32* %arrayidx6, align 4, !tbaa !14
  %shl7 = shl i32 %8, 8
  %9 = load %union.char64long16*, %union.char64long16** %block.addr, align 8, !tbaa !3
  %l8 = bitcast %union.char64long16* %9 to [16 x i32]*
  %10 = load i32, i32* %i.addr, align 4, !tbaa !15
  %idxprom9 = sext i32 %10 to i64
  %arrayidx10 = getelementptr inbounds [16 x i32], [16 x i32]* %l8, i64 0, i64 %idxprom9
  %11 = load i32, i32* %arrayidx10, align 4, !tbaa !14
  %shr11 = lshr i32 %11, 24
  %or12 = or i32 %shl7, %shr11
  %and13 = and i32 %or12, 16711935
  %or14 = or i32 %and, %and13
  %12 = load %union.char64long16*, %union.char64long16** %block.addr, align 8, !tbaa !3
  %l15 = bitcast %union.char64long16* %12 to [16 x i32]*
  %13 = load i32, i32* %i.addr, align 4, !tbaa !15
  %idxprom16 = sext i32 %13 to i64
  %arrayidx17 = getelementptr inbounds [16 x i32], [16 x i32]* %l15, i64 0, i64 %idxprom16
  store i32 %or14, i32* %arrayidx17, align 4, !tbaa !14
  %14 = load %union.char64long16*, %union.char64long16** %block.addr, align 8, !tbaa !3
  %l18 = bitcast %union.char64long16* %14 to [16 x i32]*
  %15 = load i32, i32* %i.addr, align 4, !tbaa !15
  %idxprom19 = sext i32 %15 to i64
  %arrayidx20 = getelementptr inbounds [16 x i32], [16 x i32]* %l18, i64 0, i64 %idxprom19
  %16 = load i32, i32* %arrayidx20, align 4, !tbaa !14
  ret i32 %16
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #1

; Function Attrs: nounwind ssp uwtable
define void @cs_sha1_init(%struct.cs_sha1_ctx* %context) #0 {
entry:
  %context.addr = alloca %struct.cs_sha1_ctx*, align 8
  store %struct.cs_sha1_ctx* %context, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %0 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %state = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %state, i64 0, i64 0
  store i32 1732584193, i32* %arrayidx, align 4, !tbaa !15
  %1 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %state1 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %1, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [5 x i32], [5 x i32]* %state1, i64 0, i64 1
  store i32 -271733879, i32* %arrayidx2, align 4, !tbaa !15
  %2 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %state3 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %2, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [5 x i32], [5 x i32]* %state3, i64 0, i64 2
  store i32 -1732584194, i32* %arrayidx4, align 4, !tbaa !15
  %3 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %state5 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %3, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [5 x i32], [5 x i32]* %state5, i64 0, i64 3
  store i32 271733878, i32* %arrayidx6, align 4, !tbaa !15
  %4 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %state7 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %4, i32 0, i32 0
  %arrayidx8 = getelementptr inbounds [5 x i32], [5 x i32]* %state7, i64 0, i64 4
  store i32 -1009589776, i32* %arrayidx8, align 4, !tbaa !15
  %5 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %count = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %5, i32 0, i32 1
  %arrayidx9 = getelementptr inbounds [2 x i32], [2 x i32]* %count, i64 0, i64 1
  store i32 0, i32* %arrayidx9, align 4, !tbaa !15
  %6 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %count10 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %6, i32 0, i32 1
  %arrayidx11 = getelementptr inbounds [2 x i32], [2 x i32]* %count10, i64 0, i64 0
  store i32 0, i32* %arrayidx11, align 4, !tbaa !15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @cs_sha1_update(%struct.cs_sha1_ctx* %context, i8* %data, i32 %len) #0 {
entry:
  %context.addr = alloca %struct.cs_sha1_ctx*, align 8
  %data.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.cs_sha1_ctx* %context, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  store i8* %data, i8** %data.addr, align 8, !tbaa !3
  store i32 %len, i32* %len.addr, align 4, !tbaa !15
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = bitcast i32* %j to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  %2 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %count = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %count, i64 0, i64 0
  %3 = load i32, i32* %arrayidx, align 4, !tbaa !15
  store i32 %3, i32* %j, align 4, !tbaa !15
  %4 = load i32, i32* %len.addr, align 4, !tbaa !15
  %shl = shl i32 %4, 3
  %5 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %count1 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %5, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [2 x i32], [2 x i32]* %count1, i64 0, i64 0
  %6 = load i32, i32* %arrayidx2, align 4, !tbaa !15
  %add = add i32 %6, %shl
  store i32 %add, i32* %arrayidx2, align 4, !tbaa !15
  %7 = load i32, i32* %j, align 4, !tbaa !15
  %cmp = icmp ult i32 %add, %7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %count3 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %8, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [2 x i32], [2 x i32]* %count3, i64 0, i64 1
  %9 = load i32, i32* %arrayidx4, align 4, !tbaa !15
  %inc = add i32 %9, 1
  store i32 %inc, i32* %arrayidx4, align 4, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load i32, i32* %len.addr, align 4, !tbaa !15
  %shr = lshr i32 %10, 29
  %11 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %count5 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %11, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [2 x i32], [2 x i32]* %count5, i64 0, i64 1
  %12 = load i32, i32* %arrayidx6, align 4, !tbaa !15
  %add7 = add i32 %12, %shr
  store i32 %add7, i32* %arrayidx6, align 4, !tbaa !15
  %13 = load i32, i32* %j, align 4, !tbaa !15
  %shr8 = lshr i32 %13, 3
  %and = and i32 %shr8, 63
  store i32 %and, i32* %j, align 4, !tbaa !15
  %14 = load i32, i32* %j, align 4, !tbaa !15
  %15 = load i32, i32* %len.addr, align 4, !tbaa !15
  %add9 = add i32 %14, %15
  %cmp10 = icmp ugt i32 %add9, 63
  br i1 %cmp10, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.end
  %16 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %buffer = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %16, i32 0, i32 2
  %17 = load i32, i32* %j, align 4, !tbaa !15
  %idxprom = zext i32 %17 to i64
  %arrayidx12 = getelementptr inbounds [64 x i8], [64 x i8]* %buffer, i64 0, i64 %idxprom
  %18 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %19 = load i32, i32* %j, align 4, !tbaa !15
  %sub = sub i32 64, %19
  store i32 %sub, i32* %i, align 4, !tbaa !15
  %conv = zext i32 %sub to i64
  %20 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %buffer13 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %20, i32 0, i32 2
  %21 = load i32, i32* %j, align 4, !tbaa !15
  %idxprom14 = zext i32 %21 to i64
  %arrayidx15 = getelementptr inbounds [64 x i8], [64 x i8]* %buffer13, i64 0, i64 %idxprom14
  %22 = call i64 @llvm.objectsize.i64.p0i8(i8* %arrayidx15, i1 false, i1 true)
  %call = call i8* @__memcpy_chk(i8* %arrayidx12, i8* %18, i64 %conv, i64 %22) #5
  %23 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %state = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %23, i32 0, i32 0
  %arraydecay = getelementptr inbounds [5 x i32], [5 x i32]* %state, i32 0, i32 0
  %24 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %buffer16 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %24, i32 0, i32 2
  %arraydecay17 = getelementptr inbounds [64 x i8], [64 x i8]* %buffer16, i32 0, i32 0
  call void @cs_sha1_transform(i32* %arraydecay, i8* %arraydecay17)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then11
  %25 = load i32, i32* %i, align 4, !tbaa !15
  %add18 = add i32 %25, 63
  %26 = load i32, i32* %len.addr, align 4, !tbaa !15
  %cmp19 = icmp ult i32 %add18, %26
  br i1 %cmp19, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %27 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %state21 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %27, i32 0, i32 0
  %arraydecay22 = getelementptr inbounds [5 x i32], [5 x i32]* %state21, i32 0, i32 0
  %28 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %29 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom23 = zext i32 %29 to i64
  %arrayidx24 = getelementptr inbounds i8, i8* %28, i64 %idxprom23
  call void @cs_sha1_transform(i32* %arraydecay22, i8* %arrayidx24)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %30 = load i32, i32* %i, align 4, !tbaa !15
  %add25 = add i32 %30, 64
  store i32 %add25, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4, !tbaa !15
  br label %if.end26

if.else:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4, !tbaa !15
  br label %if.end26

if.end26:                                         ; preds = %if.else, %for.end
  %31 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %buffer27 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %31, i32 0, i32 2
  %32 = load i32, i32* %j, align 4, !tbaa !15
  %idxprom28 = zext i32 %32 to i64
  %arrayidx29 = getelementptr inbounds [64 x i8], [64 x i8]* %buffer27, i64 0, i64 %idxprom28
  %33 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %34 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom30 = zext i32 %34 to i64
  %arrayidx31 = getelementptr inbounds i8, i8* %33, i64 %idxprom30
  %35 = load i32, i32* %len.addr, align 4, !tbaa !15
  %36 = load i32, i32* %i, align 4, !tbaa !15
  %sub32 = sub i32 %35, %36
  %conv33 = zext i32 %sub32 to i64
  %37 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %buffer34 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %37, i32 0, i32 2
  %38 = load i32, i32* %j, align 4, !tbaa !15
  %idxprom35 = zext i32 %38 to i64
  %arrayidx36 = getelementptr inbounds [64 x i8], [64 x i8]* %buffer34, i64 0, i64 %idxprom35
  %39 = call i64 @llvm.objectsize.i64.p0i8(i8* %arrayidx36, i1 false, i1 true)
  %call37 = call i8* @__memcpy_chk(i8* %arrayidx29, i8* %arrayidx31, i64 %conv33, i64 %39) #5
  %40 = bitcast i32* %j to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %40) #5
  %41 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %41) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @cs_sha1_final(i8* %digest, %struct.cs_sha1_ctx* %context) #0 {
entry:
  %digest.addr = alloca i8*, align 8
  %context.addr = alloca %struct.cs_sha1_ctx*, align 8
  %i = alloca i32, align 4
  %finalcount = alloca [8 x i8], align 1
  %c = alloca i8, align 1
  store i8* %digest, i8** %digest.addr, align 8, !tbaa !3
  store %struct.cs_sha1_ctx* %context, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = bitcast [8 x i8]* %finalcount to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %c) #5
  store i32 0, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !tbaa !15
  %cmp = icmp ult i32 %2, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %count = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %3, i32 0, i32 1
  %4 = load i32, i32* %i, align 4, !tbaa !15
  %cmp1 = icmp uge i32 %4, 4
  %5 = zext i1 %cmp1 to i64
  %cond = select i1 %cmp1, i32 0, i32 1
  %idxprom = sext i32 %cond to i64
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %count, i64 0, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4, !tbaa !15
  %7 = load i32, i32* %i, align 4, !tbaa !15
  %and = and i32 %7, 3
  %sub = sub i32 3, %and
  %mul = mul i32 %sub, 8
  %shr = lshr i32 %6, %mul
  %and2 = and i32 %shr, 255
  %conv = trunc i32 %and2 to i8
  %8 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom3 = zext i32 %8 to i64
  %arrayidx4 = getelementptr inbounds [8 x i8], [8 x i8]* %finalcount, i64 0, i64 %idxprom3
  store i8 %conv, i8* %arrayidx4, align 1, !tbaa !14
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !tbaa !15
  %inc = add i32 %9, 1
  store i32 %inc, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i8 -128, i8* %c, align 1, !tbaa !14
  %10 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  call void @cs_sha1_update(%struct.cs_sha1_ctx* %10, i8* %c, i32 1)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %11 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %count5 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %11, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [2 x i32], [2 x i32]* %count5, i64 0, i64 0
  %12 = load i32, i32* %arrayidx6, align 4, !tbaa !15
  %and7 = and i32 %12, 504
  %cmp8 = icmp ne i32 %and7, 448
  br i1 %cmp8, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i8 0, i8* %c, align 1, !tbaa !14
  %13 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  call void @cs_sha1_update(%struct.cs_sha1_ctx* %13, i8* %c, i32 1)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %14 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %finalcount, i32 0, i32 0
  call void @cs_sha1_update(%struct.cs_sha1_ctx* %14, i8* %arraydecay, i32 8)
  store i32 0, i32* %i, align 4, !tbaa !15
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc25, %while.end
  %15 = load i32, i32* %i, align 4, !tbaa !15
  %cmp11 = icmp ult i32 %15, 20
  br i1 %cmp11, label %for.body13, label %for.end27

for.body13:                                       ; preds = %for.cond10
  %16 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %state = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %16, i32 0, i32 0
  %17 = load i32, i32* %i, align 4, !tbaa !15
  %shr14 = lshr i32 %17, 2
  %idxprom15 = zext i32 %shr14 to i64
  %arrayidx16 = getelementptr inbounds [5 x i32], [5 x i32]* %state, i64 0, i64 %idxprom15
  %18 = load i32, i32* %arrayidx16, align 4, !tbaa !15
  %19 = load i32, i32* %i, align 4, !tbaa !15
  %and17 = and i32 %19, 3
  %sub18 = sub i32 3, %and17
  %mul19 = mul i32 %sub18, 8
  %shr20 = lshr i32 %18, %mul19
  %and21 = and i32 %shr20, 255
  %conv22 = trunc i32 %and21 to i8
  %20 = load i8*, i8** %digest.addr, align 8, !tbaa !3
  %21 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom23 = zext i32 %21 to i64
  %arrayidx24 = getelementptr inbounds i8, i8* %20, i64 %idxprom23
  store i8 %conv22, i8* %arrayidx24, align 1, !tbaa !14
  br label %for.inc25

for.inc25:                                        ; preds = %for.body13
  %22 = load i32, i32* %i, align 4, !tbaa !15
  %inc26 = add i32 %22, 1
  store i32 %inc26, i32* %i, align 4, !tbaa !15
  br label %for.cond10

for.end27:                                        ; preds = %for.cond10
  %23 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %24 = bitcast %struct.cs_sha1_ctx* %23 to i8*
  %25 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8, !tbaa !3
  %26 = bitcast %struct.cs_sha1_ctx* %25 to i8*
  %27 = call i64 @llvm.objectsize.i64.p0i8(i8* %26, i1 false, i1 true)
  %call = call i8* @__memset_chk(i8* %24, i32 0, i64 92, i64 %27) #5
  %28 = bitcast [8 x i8]* %finalcount to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 0, i64 8, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %c) #5
  %29 = bitcast [8 x i8]* %finalcount to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %29) #5
  %30 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %30) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @cs_hmac_sha1(i8* %key, i64 %keylen, i8* %data, i64 %datalen, i8* %out) #0 {
entry:
  %key.addr = alloca i8*, align 8
  %keylen.addr = alloca i64, align 8
  %data.addr = alloca i8*, align 8
  %datalen.addr = alloca i64, align 8
  %out.addr = alloca i8*, align 8
  %ctx = alloca %struct.cs_sha1_ctx, align 4
  %buf1 = alloca [64 x i8], align 16
  %buf2 = alloca [64 x i8], align 16
  %tmp_key = alloca [20 x i8], align 16
  %i = alloca i8, align 1
  store i8* %key, i8** %key.addr, align 8, !tbaa !3
  store i64 %keylen, i64* %keylen.addr, align 8, !tbaa !12
  store i8* %data, i8** %data.addr, align 8, !tbaa !3
  store i64 %datalen, i64* %datalen.addr, align 8, !tbaa !12
  store i8* %out, i8** %out.addr, align 8, !tbaa !3
  %0 = bitcast %struct.cs_sha1_ctx* %ctx to i8*
  call void @llvm.lifetime.start.p0i8(i64 92, i8* %0) #5
  %1 = bitcast [64 x i8]* %buf1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* %1) #5
  %2 = bitcast [64 x i8]* %buf2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* %2) #5
  %3 = bitcast [20 x i8]* %tmp_key to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* %3) #5
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %i) #5
  %4 = load i64, i64* %keylen.addr, align 8, !tbaa !12
  %cmp = icmp ugt i64 %4, 64
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @cs_sha1_init(%struct.cs_sha1_ctx* %ctx)
  %5 = load i8*, i8** %key.addr, align 8, !tbaa !3
  %6 = load i64, i64* %keylen.addr, align 8, !tbaa !12
  %conv = trunc i64 %6 to i32
  call void @cs_sha1_update(%struct.cs_sha1_ctx* %ctx, i8* %5, i32 %conv)
  %arraydecay = getelementptr inbounds [20 x i8], [20 x i8]* %tmp_key, i32 0, i32 0
  call void @cs_sha1_final(i8* %arraydecay, %struct.cs_sha1_ctx* %ctx)
  %arraydecay1 = getelementptr inbounds [20 x i8], [20 x i8]* %tmp_key, i32 0, i32 0
  store i8* %arraydecay1, i8** %key.addr, align 8, !tbaa !3
  store i64 20, i64* %keylen.addr, align 8, !tbaa !12
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arraydecay2 = getelementptr inbounds [64 x i8], [64 x i8]* %buf1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %arraydecay2, i8 0, i64 64, i1 false)
  %arraydecay3 = getelementptr inbounds [64 x i8], [64 x i8]* %buf2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %arraydecay3, i8 0, i64 64, i1 false)
  %arraydecay4 = getelementptr inbounds [64 x i8], [64 x i8]* %buf1, i32 0, i32 0
  %7 = load i8*, i8** %key.addr, align 8, !tbaa !3
  %8 = load i64, i64* %keylen.addr, align 8, !tbaa !12
  %call = call i8* @__memcpy_chk(i8* %arraydecay4, i8* %7, i64 %8, i64 64) #5
  %arraydecay5 = getelementptr inbounds [64 x i8], [64 x i8]* %buf2, i32 0, i32 0
  %9 = load i8*, i8** %key.addr, align 8, !tbaa !3
  %10 = load i64, i64* %keylen.addr, align 8, !tbaa !12
  %call6 = call i8* @__memcpy_chk(i8* %arraydecay5, i8* %9, i64 %10, i64 64) #5
  store i8 0, i8* %i, align 1, !tbaa !14
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %11 = load i8, i8* %i, align 1, !tbaa !14
  %conv7 = zext i8 %11 to i64
  %cmp8 = icmp ult i64 %conv7, 64
  br i1 %cmp8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i8, i8* %i, align 1, !tbaa !14
  %idxprom = zext i8 %12 to i64
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* %buf1, i64 0, i64 %idxprom
  %13 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv10 = zext i8 %13 to i32
  %xor = xor i32 %conv10, 54
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx, align 1, !tbaa !14
  %14 = load i8, i8* %i, align 1, !tbaa !14
  %idxprom12 = zext i8 %14 to i64
  %arrayidx13 = getelementptr inbounds [64 x i8], [64 x i8]* %buf2, i64 0, i64 %idxprom12
  %15 = load i8, i8* %arrayidx13, align 1, !tbaa !14
  %conv14 = zext i8 %15 to i32
  %xor15 = xor i32 %conv14, 92
  %conv16 = trunc i32 %xor15 to i8
  store i8 %conv16, i8* %arrayidx13, align 1, !tbaa !14
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i8, i8* %i, align 1, !tbaa !14
  %inc = add i8 %16, 1
  store i8 %inc, i8* %i, align 1, !tbaa !14
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @cs_sha1_init(%struct.cs_sha1_ctx* %ctx)
  %arraydecay17 = getelementptr inbounds [64 x i8], [64 x i8]* %buf1, i32 0, i32 0
  call void @cs_sha1_update(%struct.cs_sha1_ctx* %ctx, i8* %arraydecay17, i32 64)
  %17 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %18 = load i64, i64* %datalen.addr, align 8, !tbaa !12
  %conv18 = trunc i64 %18 to i32
  call void @cs_sha1_update(%struct.cs_sha1_ctx* %ctx, i8* %17, i32 %conv18)
  %19 = load i8*, i8** %out.addr, align 8, !tbaa !3
  call void @cs_sha1_final(i8* %19, %struct.cs_sha1_ctx* %ctx)
  call void @cs_sha1_init(%struct.cs_sha1_ctx* %ctx)
  %arraydecay19 = getelementptr inbounds [64 x i8], [64 x i8]* %buf2, i32 0, i32 0
  call void @cs_sha1_update(%struct.cs_sha1_ctx* %ctx, i8* %arraydecay19, i32 64)
  %20 = load i8*, i8** %out.addr, align 8, !tbaa !3
  call void @cs_sha1_update(%struct.cs_sha1_ctx* %ctx, i8* %20, i32 20)
  %21 = load i8*, i8** %out.addr, align 8, !tbaa !3
  call void @cs_sha1_final(i8* %21, %struct.cs_sha1_ctx* %ctx)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %i) #5
  %22 = bitcast [20 x i8]* %tmp_key to i8*
  call void @llvm.lifetime.end.p0i8(i64 20, i8* %22) #5
  %23 = bitcast [64 x i8]* %buf2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 64, i8* %23) #5
  %24 = bitcast [64 x i8]* %buf1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 64, i8* %24) #5
  %25 = bitcast %struct.cs_sha1_ctx* %ctx to i8*
  call void @llvm.lifetime.end.p0i8(i64 92, i8* %25) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak void @mbuf_init(%struct.mbuf* %mbuf, i64 %initial_size) #0 {
entry:
  %mbuf.addr = alloca %struct.mbuf*, align 8
  %initial_size.addr = alloca i64, align 8
  store %struct.mbuf* %mbuf, %struct.mbuf** %mbuf.addr, align 8, !tbaa !3
  store i64 %initial_size, i64* %initial_size.addr, align 8, !tbaa !12
  %0 = load %struct.mbuf*, %struct.mbuf** %mbuf.addr, align 8, !tbaa !3
  %size = getelementptr inbounds %struct.mbuf, %struct.mbuf* %0, i32 0, i32 2
  store i64 0, i64* %size, align 8, !tbaa !37
  %1 = load %struct.mbuf*, %struct.mbuf** %mbuf.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %1, i32 0, i32 1
  store i64 0, i64* %len, align 8, !tbaa !39
  %2 = load %struct.mbuf*, %struct.mbuf** %mbuf.addr, align 8, !tbaa !3
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %2, i32 0, i32 0
  store i8* null, i8** %buf, align 8, !tbaa !40
  %3 = load %struct.mbuf*, %struct.mbuf** %mbuf.addr, align 8, !tbaa !3
  %4 = load i64, i64* %initial_size.addr, align 8, !tbaa !12
  call void @mbuf_resize(%struct.mbuf* %3, i64 %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak void @mbuf_resize(%struct.mbuf* %a, i64 %new_size) #0 {
entry:
  %a.addr = alloca %struct.mbuf*, align 8
  %new_size.addr = alloca i64, align 8
  %buf = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mbuf* %a, %struct.mbuf** %a.addr, align 8, !tbaa !3
  store i64 %new_size, i64* %new_size.addr, align 8, !tbaa !12
  %0 = load i64, i64* %new_size.addr, align 8, !tbaa !12
  %1 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %size = getelementptr inbounds %struct.mbuf, %struct.mbuf* %1, i32 0, i32 2
  %2 = load i64, i64* %size, align 8, !tbaa !37
  %cmp = icmp ugt i64 %0, %2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load i64, i64* %new_size.addr, align 8, !tbaa !12
  %4 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %size1 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %4, i32 0, i32 2
  %5 = load i64, i64* %size1, align 8, !tbaa !37
  %cmp2 = icmp ult i64 %3, %5
  br i1 %cmp2, label %land.lhs.true, label %if.end11

land.lhs.true:                                    ; preds = %lor.lhs.false
  %6 = load i64, i64* %new_size.addr, align 8, !tbaa !12
  %7 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %7, i32 0, i32 1
  %8 = load i64, i64* %len, align 8, !tbaa !39
  %cmp3 = icmp uge i64 %6, %8
  br i1 %cmp3, label %if.then, label %if.end11

if.then:                                          ; preds = %land.lhs.true, %entry
  %9 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #5
  %10 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %buf4 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %10, i32 0, i32 0
  %11 = load i8*, i8** %buf4, align 8, !tbaa !40
  %12 = load i64, i64* %new_size.addr, align 8, !tbaa !12
  %call = call i8* @realloc(i8* %11, i64 %12) #16
  store i8* %call, i8** %buf, align 8, !tbaa !3
  %13 = load i8*, i8** %buf, align 8, !tbaa !3
  %cmp5 = icmp eq i8* %13, null
  br i1 %cmp5, label %land.lhs.true6, label %if.end

land.lhs.true6:                                   ; preds = %if.then
  %14 = load i64, i64* %new_size.addr, align 8, !tbaa !12
  %cmp7 = icmp ne i64 %14, 0
  br i1 %cmp7, label %if.then8, label %if.end

if.then8:                                         ; preds = %land.lhs.true6
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true6, %if.then
  %15 = load i8*, i8** %buf, align 8, !tbaa !3
  %16 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %buf9 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %16, i32 0, i32 0
  store i8* %15, i8** %buf9, align 8, !tbaa !40
  %17 = load i64, i64* %new_size.addr, align 8, !tbaa !12
  %18 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %size10 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %18, i32 0, i32 2
  store i64 %17, i64* %size10, align 8, !tbaa !37
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then8
  %19 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %19) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %if.end11
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end11

if.end11:                                         ; preds = %cleanup, %cleanup.cont, %land.lhs.true, %lor.lhs.false
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define weak void @mbuf_free(%struct.mbuf* %mbuf) #0 {
entry:
  %mbuf.addr = alloca %struct.mbuf*, align 8
  store %struct.mbuf* %mbuf, %struct.mbuf** %mbuf.addr, align 8, !tbaa !3
  %0 = load %struct.mbuf*, %struct.mbuf** %mbuf.addr, align 8, !tbaa !3
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %0, i32 0, i32 0
  %1 = load i8*, i8** %buf, align 8, !tbaa !40
  %cmp = icmp ne i8* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.mbuf*, %struct.mbuf** %mbuf.addr, align 8, !tbaa !3
  %buf1 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %2, i32 0, i32 0
  %3 = load i8*, i8** %buf1, align 8, !tbaa !40
  call void @free(i8* %3)
  %4 = load %struct.mbuf*, %struct.mbuf** %mbuf.addr, align 8, !tbaa !3
  call void @mbuf_init(%struct.mbuf* %4, i64 0)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: allocsize(1)
declare i8* @realloc(i8*, i64) #6

; Function Attrs: nounwind ssp uwtable
define weak void @mbuf_trim(%struct.mbuf* %mbuf) #0 {
entry:
  %mbuf.addr = alloca %struct.mbuf*, align 8
  store %struct.mbuf* %mbuf, %struct.mbuf** %mbuf.addr, align 8, !tbaa !3
  %0 = load %struct.mbuf*, %struct.mbuf** %mbuf.addr, align 8, !tbaa !3
  %1 = load %struct.mbuf*, %struct.mbuf** %mbuf.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %1, i32 0, i32 1
  %2 = load i64, i64* %len, align 8, !tbaa !39
  call void @mbuf_resize(%struct.mbuf* %0, i64 %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @mbuf_insert(%struct.mbuf* %a, i64 %off, i8* %buf, i64 %len) #0 {
entry:
  %retval = alloca i64, align 8
  %a.addr = alloca %struct.mbuf*, align 8
  %off.addr = alloca i64, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %p = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %min_size = alloca i64, align 8
  %new_size = alloca i64, align 8
  store %struct.mbuf* %a, %struct.mbuf** %a.addr, align 8, !tbaa !3
  store i64 %off, i64* %off.addr, align 8, !tbaa !12
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  %0 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  store i8* null, i8** %p, align 8, !tbaa !3
  %1 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %cmp = icmp ne %struct.mbuf* %1, null
  %lnot = xor i1 %cmp, true
  %lnot.ext = zext i1 %lnot to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  call void @__assert_rtn(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.mbuf_insert, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 1456, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i32 0, i32 0)) #17
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %2
  %3 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %len1 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %3, i32 0, i32 1
  %4 = load i64, i64* %len1, align 8, !tbaa !39
  %5 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %size = getelementptr inbounds %struct.mbuf, %struct.mbuf* %5, i32 0, i32 2
  %6 = load i64, i64* %size, align 8, !tbaa !37
  %cmp2 = icmp ule i64 %4, %6
  %lnot4 = xor i1 %cmp2, true
  %lnot.ext5 = zext i1 %lnot4 to i32
  %conv6 = sext i32 %lnot.ext5 to i64
  %expval7 = call i64 @llvm.expect.i64(i64 %conv6, i64 0)
  %tobool8 = icmp ne i64 %expval7, 0
  br i1 %tobool8, label %cond.true9, label %cond.false10

cond.true9:                                       ; preds = %cond.end
  call void @__assert_rtn(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.mbuf_insert, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 1457, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i32 0, i32 0)) #17
  unreachable
                                                  ; No predecessors!
  br label %cond.end11

cond.false10:                                     ; preds = %cond.end
  br label %cond.end11

cond.end11:                                       ; preds = %cond.false10, %7
  %8 = load i64, i64* %off.addr, align 8, !tbaa !12
  %9 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %len12 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %9, i32 0, i32 1
  %10 = load i64, i64* %len12, align 8, !tbaa !39
  %cmp13 = icmp ule i64 %8, %10
  %lnot15 = xor i1 %cmp13, true
  %lnot.ext16 = zext i1 %lnot15 to i32
  %conv17 = sext i32 %lnot.ext16 to i64
  %expval18 = call i64 @llvm.expect.i64(i64 %conv17, i64 0)
  %tobool19 = icmp ne i64 %expval18, 0
  br i1 %tobool19, label %cond.true20, label %cond.false21

cond.true20:                                      ; preds = %cond.end11
  call void @__assert_rtn(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.mbuf_insert, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 1458, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0)) #17
  unreachable
                                                  ; No predecessors!
  br label %cond.end22

cond.false21:                                     ; preds = %cond.end11
  br label %cond.end22

cond.end22:                                       ; preds = %cond.false21, %11
  %12 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %buf23 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %12, i32 0, i32 0
  %13 = load i8*, i8** %buf23, align 8, !tbaa !40
  %14 = ptrtoint i8* %13 to i64
  %sub = sub i64 -1, %14
  %15 = load i64, i64* %len.addr, align 8, !tbaa !12
  %cmp24 = icmp ult i64 %sub, %15
  br i1 %cmp24, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end22
  store i64 0, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %cond.end22
  %16 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %len26 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %16, i32 0, i32 1
  %17 = load i64, i64* %len26, align 8, !tbaa !39
  %18 = load i64, i64* %len.addr, align 8, !tbaa !12
  %add = add i64 %17, %18
  %19 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %size27 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %19, i32 0, i32 2
  %20 = load i64, i64* %size27, align 8, !tbaa !37
  %cmp28 = icmp ule i64 %add, %20
  br i1 %cmp28, label %if.then30, label %if.else

if.then30:                                        ; preds = %if.end
  %21 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %buf31 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %21, i32 0, i32 0
  %22 = load i8*, i8** %buf31, align 8, !tbaa !40
  %23 = load i64, i64* %off.addr, align 8, !tbaa !12
  %add.ptr = getelementptr inbounds i8, i8* %22, i64 %23
  %24 = load i64, i64* %len.addr, align 8, !tbaa !12
  %add.ptr32 = getelementptr inbounds i8, i8* %add.ptr, i64 %24
  %25 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %buf33 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %25, i32 0, i32 0
  %26 = load i8*, i8** %buf33, align 8, !tbaa !40
  %27 = load i64, i64* %off.addr, align 8, !tbaa !12
  %add.ptr34 = getelementptr inbounds i8, i8* %26, i64 %27
  %28 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %len35 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %28, i32 0, i32 1
  %29 = load i64, i64* %len35, align 8, !tbaa !39
  %30 = load i64, i64* %off.addr, align 8, !tbaa !12
  %sub36 = sub i64 %29, %30
  %31 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %buf37 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %31, i32 0, i32 0
  %32 = load i8*, i8** %buf37, align 8, !tbaa !40
  %33 = load i64, i64* %off.addr, align 8, !tbaa !12
  %add.ptr38 = getelementptr inbounds i8, i8* %32, i64 %33
  %34 = load i64, i64* %len.addr, align 8, !tbaa !12
  %add.ptr39 = getelementptr inbounds i8, i8* %add.ptr38, i64 %34
  %35 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr39, i1 false, i1 true)
  %call = call i8* @__memmove_chk(i8* %add.ptr32, i8* %add.ptr34, i64 %sub36, i64 %35) #5
  %36 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %cmp40 = icmp ne i8* %36, null
  br i1 %cmp40, label %if.then42, label %if.end48

if.then42:                                        ; preds = %if.then30
  %37 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %buf43 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %37, i32 0, i32 0
  %38 = load i8*, i8** %buf43, align 8, !tbaa !40
  %39 = load i64, i64* %off.addr, align 8, !tbaa !12
  %add.ptr44 = getelementptr inbounds i8, i8* %38, i64 %39
  %40 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %41 = load i64, i64* %len.addr, align 8, !tbaa !12
  %42 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %buf45 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %42, i32 0, i32 0
  %43 = load i8*, i8** %buf45, align 8, !tbaa !40
  %44 = load i64, i64* %off.addr, align 8, !tbaa !12
  %add.ptr46 = getelementptr inbounds i8, i8* %43, i64 %44
  %45 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr46, i1 false, i1 true)
  %call47 = call i8* @__memcpy_chk(i8* %add.ptr44, i8* %40, i64 %41, i64 %45) #5
  br label %if.end48

if.end48:                                         ; preds = %if.then42, %if.then30
  %46 = load i64, i64* %len.addr, align 8, !tbaa !12
  %47 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %len49 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %47, i32 0, i32 1
  %48 = load i64, i64* %len49, align 8, !tbaa !39
  %add50 = add i64 %48, %46
  store i64 %add50, i64* %len49, align 8, !tbaa !39
  br label %if.end105

if.else:                                          ; preds = %if.end
  %49 = bitcast i64* %min_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %49) #5
  %50 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %len51 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %50, i32 0, i32 1
  %51 = load i64, i64* %len51, align 8, !tbaa !39
  %52 = load i64, i64* %len.addr, align 8, !tbaa !12
  %add52 = add i64 %51, %52
  store i64 %add52, i64* %min_size, align 8, !tbaa !12
  %53 = bitcast i64* %new_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %53) #5
  %54 = load i64, i64* %min_size, align 8, !tbaa !12
  %conv53 = uitofp i64 %54 to double
  %mul = fmul double %conv53, 1.500000e+00
  %conv54 = fptoui double %mul to i64
  store i64 %conv54, i64* %new_size, align 8, !tbaa !12
  %55 = load i64, i64* %new_size, align 8, !tbaa !12
  %56 = load i64, i64* %min_size, align 8, !tbaa !12
  %sub55 = sub i64 %55, %56
  %cmp56 = icmp ugt i64 %sub55, 1024
  br i1 %cmp56, label %if.then58, label %if.end60

if.then58:                                        ; preds = %if.else
  %57 = load i64, i64* %min_size, align 8, !tbaa !12
  %add59 = add i64 %57, 1024
  store i64 %add59, i64* %new_size, align 8, !tbaa !12
  br label %if.end60

if.end60:                                         ; preds = %if.then58, %if.else
  %58 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %buf61 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %58, i32 0, i32 0
  %59 = load i8*, i8** %buf61, align 8, !tbaa !40
  %60 = load i64, i64* %new_size, align 8, !tbaa !12
  %call62 = call i8* @realloc(i8* %59, i64 %60) #16
  store i8* %call62, i8** %p, align 8, !tbaa !3
  %61 = load i8*, i8** %p, align 8, !tbaa !3
  %cmp63 = icmp eq i8* %61, null
  br i1 %cmp63, label %land.lhs.true, label %if.end70

land.lhs.true:                                    ; preds = %if.end60
  %62 = load i64, i64* %new_size, align 8, !tbaa !12
  %63 = load i64, i64* %min_size, align 8, !tbaa !12
  %cmp65 = icmp ne i64 %62, %63
  br i1 %cmp65, label %if.then67, label %if.end70

if.then67:                                        ; preds = %land.lhs.true
  %64 = load i64, i64* %min_size, align 8, !tbaa !12
  store i64 %64, i64* %new_size, align 8, !tbaa !12
  %65 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %buf68 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %65, i32 0, i32 0
  %66 = load i8*, i8** %buf68, align 8, !tbaa !40
  %67 = load i64, i64* %new_size, align 8, !tbaa !12
  %call69 = call i8* @realloc(i8* %66, i64 %67) #16
  store i8* %call69, i8** %p, align 8, !tbaa !3
  br label %if.end70

if.end70:                                         ; preds = %if.then67, %land.lhs.true, %if.end60
  %68 = load i8*, i8** %p, align 8, !tbaa !3
  %cmp71 = icmp ne i8* %68, null
  br i1 %cmp71, label %if.then73, label %if.else103

if.then73:                                        ; preds = %if.end70
  %69 = load i8*, i8** %p, align 8, !tbaa !3
  %70 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %buf74 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %70, i32 0, i32 0
  store i8* %69, i8** %buf74, align 8, !tbaa !40
  %71 = load i64, i64* %off.addr, align 8, !tbaa !12
  %72 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %len75 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %72, i32 0, i32 1
  %73 = load i64, i64* %len75, align 8, !tbaa !39
  %cmp76 = icmp ne i64 %71, %73
  br i1 %cmp76, label %if.then78, label %if.end90

if.then78:                                        ; preds = %if.then73
  %74 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %buf79 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %74, i32 0, i32 0
  %75 = load i8*, i8** %buf79, align 8, !tbaa !40
  %76 = load i64, i64* %off.addr, align 8, !tbaa !12
  %add.ptr80 = getelementptr inbounds i8, i8* %75, i64 %76
  %77 = load i64, i64* %len.addr, align 8, !tbaa !12
  %add.ptr81 = getelementptr inbounds i8, i8* %add.ptr80, i64 %77
  %78 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %buf82 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %78, i32 0, i32 0
  %79 = load i8*, i8** %buf82, align 8, !tbaa !40
  %80 = load i64, i64* %off.addr, align 8, !tbaa !12
  %add.ptr83 = getelementptr inbounds i8, i8* %79, i64 %80
  %81 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %len84 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %81, i32 0, i32 1
  %82 = load i64, i64* %len84, align 8, !tbaa !39
  %83 = load i64, i64* %off.addr, align 8, !tbaa !12
  %sub85 = sub i64 %82, %83
  %84 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %buf86 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %84, i32 0, i32 0
  %85 = load i8*, i8** %buf86, align 8, !tbaa !40
  %86 = load i64, i64* %off.addr, align 8, !tbaa !12
  %add.ptr87 = getelementptr inbounds i8, i8* %85, i64 %86
  %87 = load i64, i64* %len.addr, align 8, !tbaa !12
  %add.ptr88 = getelementptr inbounds i8, i8* %add.ptr87, i64 %87
  %88 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr88, i1 false, i1 true)
  %call89 = call i8* @__memmove_chk(i8* %add.ptr81, i8* %add.ptr83, i64 %sub85, i64 %88) #5
  br label %if.end90

if.end90:                                         ; preds = %if.then78, %if.then73
  %89 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %cmp91 = icmp ne i8* %89, null
  br i1 %cmp91, label %if.then93, label %if.end99

if.then93:                                        ; preds = %if.end90
  %90 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %buf94 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %90, i32 0, i32 0
  %91 = load i8*, i8** %buf94, align 8, !tbaa !40
  %92 = load i64, i64* %off.addr, align 8, !tbaa !12
  %add.ptr95 = getelementptr inbounds i8, i8* %91, i64 %92
  %93 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %94 = load i64, i64* %len.addr, align 8, !tbaa !12
  %95 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %buf96 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %95, i32 0, i32 0
  %96 = load i8*, i8** %buf96, align 8, !tbaa !40
  %97 = load i64, i64* %off.addr, align 8, !tbaa !12
  %add.ptr97 = getelementptr inbounds i8, i8* %96, i64 %97
  %98 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr97, i1 false, i1 true)
  %call98 = call i8* @__memcpy_chk(i8* %add.ptr95, i8* %93, i64 %94, i64 %98) #5
  br label %if.end99

if.end99:                                         ; preds = %if.then93, %if.end90
  %99 = load i64, i64* %len.addr, align 8, !tbaa !12
  %100 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %len100 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %100, i32 0, i32 1
  %101 = load i64, i64* %len100, align 8, !tbaa !39
  %add101 = add i64 %101, %99
  store i64 %add101, i64* %len100, align 8, !tbaa !39
  %102 = load i64, i64* %new_size, align 8, !tbaa !12
  %103 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %size102 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %103, i32 0, i32 2
  store i64 %102, i64* %size102, align 8, !tbaa !37
  br label %if.end104

if.else103:                                       ; preds = %if.end70
  store i64 0, i64* %len.addr, align 8, !tbaa !12
  br label %if.end104

if.end104:                                        ; preds = %if.else103, %if.end99
  %104 = bitcast i64* %new_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %104) #5
  %105 = bitcast i64* %min_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %105) #5
  br label %if.end105

if.end105:                                        ; preds = %if.end104, %if.end48
  %106 = load i64, i64* %len.addr, align 8, !tbaa !12
  store i64 %106, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end105, %if.then
  %107 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %107) #5
  %108 = load i64, i64* %retval, align 8
  ret i64 %108
}

; Function Attrs: nounwind readnone
declare i64 @llvm.expect.i64(i64, i64) #7

; Function Attrs: cold noreturn
declare void @__assert_rtn(i8*, i8*, i32, i8*) #8

; Function Attrs: nounwind
declare i8* @__memmove_chk(i8*, i8*, i64, i64) #2

; Function Attrs: nounwind ssp uwtable
define weak i64 @mbuf_append(%struct.mbuf* %a, i8* %buf, i64 %len) #0 {
entry:
  %a.addr = alloca %struct.mbuf*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  store %struct.mbuf* %a, %struct.mbuf** %a.addr, align 8, !tbaa !3
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  %0 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %1 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %len1 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %1, i32 0, i32 1
  %2 = load i64, i64* %len1, align 8, !tbaa !39
  %3 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %4 = load i64, i64* %len.addr, align 8, !tbaa !12
  %call = call i64 @mbuf_insert(%struct.mbuf* %0, i64 %2, i8* %3, i64 %4)
  ret i64 %call
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @mbuf_append_and_free(%struct.mbuf* %a, i8* %data, i64 %len) #0 {
entry:
  %retval = alloca i64, align 8
  %a.addr = alloca %struct.mbuf*, align 8
  %data.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %ret = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mbuf* %a, %struct.mbuf** %a.addr, align 8, !tbaa !3
  store i8* %data, i8** %data.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  %0 = bitcast i64* %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %len1 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %1, i32 0, i32 1
  %2 = load i64, i64* %len1, align 8, !tbaa !39
  %cmp = icmp eq i64 %2, 0
  br i1 %cmp, label %if.then, label %if.end7

if.then:                                          ; preds = %entry
  %3 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %3, i32 0, i32 0
  %4 = load i8*, i8** %buf, align 8, !tbaa !40
  %cmp2 = icmp ne i8* %4, null
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  %5 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %buf4 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %5, i32 0, i32 0
  %6 = load i8*, i8** %buf4, align 8, !tbaa !40
  call void @free(i8* %6)
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.then
  %7 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %8 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %buf5 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %8, i32 0, i32 0
  store i8* %7, i8** %buf5, align 8, !tbaa !40
  %9 = load i64, i64* %len.addr, align 8, !tbaa !12
  %10 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %size = getelementptr inbounds %struct.mbuf, %struct.mbuf* %10, i32 0, i32 2
  store i64 %9, i64* %size, align 8, !tbaa !37
  %11 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %len6 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %11, i32 0, i32 1
  store i64 %9, i64* %len6, align 8, !tbaa !39
  %12 = load i64, i64* %len.addr, align 8, !tbaa !12
  store i64 %12, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end7:                                          ; preds = %entry
  %13 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %14 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8, !tbaa !3
  %len8 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %14, i32 0, i32 1
  %15 = load i64, i64* %len8, align 8, !tbaa !39
  %16 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %17 = load i64, i64* %len.addr, align 8, !tbaa !12
  %call = call i64 @mbuf_insert(%struct.mbuf* %13, i64 %15, i8* %16, i64 %17)
  store i64 %call, i64* %ret, align 8, !tbaa !12
  %18 = load i8*, i8** %data.addr, align 8, !tbaa !3
  call void @free(i8* %18)
  %19 = load i64, i64* %ret, align 8, !tbaa !12
  store i64 %19, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.end
  %20 = bitcast i64* %ret to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %20) #5
  %21 = load i64, i64* %retval, align 8
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define weak void @mbuf_remove(%struct.mbuf* %mb, i64 %n) #0 {
entry:
  %mb.addr = alloca %struct.mbuf*, align 8
  %n.addr = alloca i64, align 8
  store %struct.mbuf* %mb, %struct.mbuf** %mb.addr, align 8, !tbaa !3
  store i64 %n, i64* %n.addr, align 8, !tbaa !12
  %0 = load i64, i64* %n.addr, align 8, !tbaa !12
  %cmp = icmp ugt i64 %0, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %n.addr, align 8, !tbaa !12
  %2 = load %struct.mbuf*, %struct.mbuf** %mb.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %2, i32 0, i32 1
  %3 = load i64, i64* %len, align 8, !tbaa !39
  %cmp1 = icmp ule i64 %1, %3
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.mbuf*, %struct.mbuf** %mb.addr, align 8, !tbaa !3
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %4, i32 0, i32 0
  %5 = load i8*, i8** %buf, align 8, !tbaa !40
  %6 = load %struct.mbuf*, %struct.mbuf** %mb.addr, align 8, !tbaa !3
  %buf2 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %6, i32 0, i32 0
  %7 = load i8*, i8** %buf2, align 8, !tbaa !40
  %8 = load i64, i64* %n.addr, align 8, !tbaa !12
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %8
  %9 = load %struct.mbuf*, %struct.mbuf** %mb.addr, align 8, !tbaa !3
  %len3 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %9, i32 0, i32 1
  %10 = load i64, i64* %len3, align 8, !tbaa !39
  %11 = load i64, i64* %n.addr, align 8, !tbaa !12
  %sub = sub i64 %10, %11
  %12 = load %struct.mbuf*, %struct.mbuf** %mb.addr, align 8, !tbaa !3
  %buf4 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %12, i32 0, i32 0
  %13 = load i8*, i8** %buf4, align 8, !tbaa !40
  %14 = call i64 @llvm.objectsize.i64.p0i8(i8* %13, i1 false, i1 true)
  %call = call i8* @__memmove_chk(i8* %5, i8* %add.ptr, i64 %sub, i64 %14) #5
  %15 = load i64, i64* %n.addr, align 8, !tbaa !12
  %16 = load %struct.mbuf*, %struct.mbuf** %mb.addr, align 8, !tbaa !3
  %len5 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %16, i32 0, i32 1
  %17 = load i64, i64* %len5, align 8, !tbaa !39
  %sub6 = sub i64 %17, %15
  store i64 %sub6, i64* %len5, align 8, !tbaa !39
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak void @mbuf_clear(%struct.mbuf* %mb) #0 {
entry:
  %mb.addr = alloca %struct.mbuf*, align 8
  store %struct.mbuf* %mb, %struct.mbuf** %mb.addr, align 8, !tbaa !3
  %0 = load %struct.mbuf*, %struct.mbuf** %mb.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %0, i32 0, i32 1
  store i64 0, i64* %len, align 8, !tbaa !39
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak void @mbuf_move(%struct.mbuf* %from, %struct.mbuf* %to) #0 {
entry:
  %from.addr = alloca %struct.mbuf*, align 8
  %to.addr = alloca %struct.mbuf*, align 8
  store %struct.mbuf* %from, %struct.mbuf** %from.addr, align 8, !tbaa !3
  store %struct.mbuf* %to, %struct.mbuf** %to.addr, align 8, !tbaa !3
  %0 = load %struct.mbuf*, %struct.mbuf** %to.addr, align 8, !tbaa !3
  %1 = bitcast %struct.mbuf* %0 to i8*
  %2 = load %struct.mbuf*, %struct.mbuf** %from.addr, align 8, !tbaa !3
  %3 = bitcast %struct.mbuf* %2 to i8*
  %4 = load %struct.mbuf*, %struct.mbuf** %to.addr, align 8, !tbaa !3
  %5 = bitcast %struct.mbuf* %4 to i8*
  %6 = call i64 @llvm.objectsize.i64.p0i8(i8* %5, i1 false, i1 true)
  %call = call i8* @__memcpy_chk(i8* %1, i8* %3, i64 24, i64 %6) #5
  %7 = load %struct.mbuf*, %struct.mbuf** %from.addr, align 8, !tbaa !3
  %8 = bitcast %struct.mbuf* %7 to i8*
  %9 = load %struct.mbuf*, %struct.mbuf** %from.addr, align 8, !tbaa !3
  %10 = bitcast %struct.mbuf* %9 to i8*
  %11 = call i64 @llvm.objectsize.i64.p0i8(i8* %10, i1 false, i1 true)
  %call1 = call i8* @__memset_chk(i8* %8, i32 0, i64 24, i64 %11) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak { i8*, i64 } @mg_mk_str_n(i8* %s, i64 %len) #0 {
entry:
  %retval = alloca %struct.mg_str, align 8
  %s.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  store i8* %s, i8** %s.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %retval, i32 0, i32 0
  %0 = load i8*, i8** %s.addr, align 8, !tbaa !3
  store i8* %0, i8** %p, align 8, !tbaa !16
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %retval, i32 0, i32 1
  %1 = load i64, i64* %len.addr, align 8, !tbaa !12
  store i64 %1, i64* %len1, align 8, !tbaa !18
  %2 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %3 = load { i8*, i64 }, { i8*, i64 }* %2, align 8
  ret { i8*, i64 } %3
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @mg_vcmp(%struct.mg_str* %str1, i8* %str2) #0 {
entry:
  %retval = alloca i32, align 4
  %str1.addr = alloca %struct.mg_str*, align 8
  %str2.addr = alloca i8*, align 8
  %n2 = alloca i64, align 8
  %n1 = alloca i64, align 8
  %r = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_str* %str1, %struct.mg_str** %str1.addr, align 8, !tbaa !3
  store i8* %str2, i8** %str2.addr, align 8, !tbaa !3
  %0 = bitcast i64* %n2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load i8*, i8** %str2.addr, align 8, !tbaa !3
  %call = call i64 @strlen(i8* %1)
  store i64 %call, i64* %n2, align 8, !tbaa !12
  %2 = bitcast i64* %n1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  %3 = load %struct.mg_str*, %struct.mg_str** %str1.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %3, i32 0, i32 1
  %4 = load i64, i64* %len, align 8, !tbaa !18
  store i64 %4, i64* %n1, align 8, !tbaa !12
  %5 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #5
  %6 = load %struct.mg_str*, %struct.mg_str** %str1.addr, align 8, !tbaa !3
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %6, i32 0, i32 0
  %7 = load i8*, i8** %p, align 8, !tbaa !16
  %8 = load i8*, i8** %str2.addr, align 8, !tbaa !3
  %9 = load i64, i64* %n1, align 8, !tbaa !12
  %10 = load i64, i64* %n2, align 8, !tbaa !12
  %cmp = icmp ult i64 %9, %10
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %11 = load i64, i64* %n1, align 8, !tbaa !12
  br label %cond.end

cond.false:                                       ; preds = %entry
  %12 = load i64, i64* %n2, align 8, !tbaa !12
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %11, %cond.true ], [ %12, %cond.false ]
  %call1 = call i32 @strncmp(i8* %7, i8* %8, i64 %cond)
  store i32 %call1, i32* %r, align 4, !tbaa !15
  %13 = load i32, i32* %r, align 4, !tbaa !15
  %cmp2 = icmp eq i32 %13, 0
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %14 = load i64, i64* %n1, align 8, !tbaa !12
  %15 = load i64, i64* %n2, align 8, !tbaa !12
  %sub = sub i64 %14, %15
  %conv = trunc i64 %sub to i32
  store i32 %conv, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %cond.end
  %16 = load i32, i32* %r, align 4, !tbaa !15
  store i32 %16, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %17 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %17) #5
  %18 = bitcast i64* %n1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %18) #5
  %19 = bitcast i64* %n2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %19) #5
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

declare i32 @strncmp(i8*, i8*, i64) #4

; Function Attrs: nounwind ssp uwtable
define weak i32 @mg_vcasecmp(%struct.mg_str* %str1, i8* %str2) #0 {
entry:
  %retval = alloca i32, align 4
  %str1.addr = alloca %struct.mg_str*, align 8
  %str2.addr = alloca i8*, align 8
  %n2 = alloca i64, align 8
  %n1 = alloca i64, align 8
  %r = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_str* %str1, %struct.mg_str** %str1.addr, align 8, !tbaa !3
  store i8* %str2, i8** %str2.addr, align 8, !tbaa !3
  %0 = bitcast i64* %n2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load i8*, i8** %str2.addr, align 8, !tbaa !3
  %call = call i64 @strlen(i8* %1)
  store i64 %call, i64* %n2, align 8, !tbaa !12
  %2 = bitcast i64* %n1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  %3 = load %struct.mg_str*, %struct.mg_str** %str1.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %3, i32 0, i32 1
  %4 = load i64, i64* %len, align 8, !tbaa !18
  store i64 %4, i64* %n1, align 8, !tbaa !12
  %5 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #5
  %6 = load %struct.mg_str*, %struct.mg_str** %str1.addr, align 8, !tbaa !3
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %6, i32 0, i32 0
  %7 = load i8*, i8** %p, align 8, !tbaa !16
  %8 = load i8*, i8** %str2.addr, align 8, !tbaa !3
  %9 = load i64, i64* %n1, align 8, !tbaa !12
  %10 = load i64, i64* %n2, align 8, !tbaa !12
  %cmp = icmp ult i64 %9, %10
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %11 = load i64, i64* %n1, align 8, !tbaa !12
  br label %cond.end

cond.false:                                       ; preds = %entry
  %12 = load i64, i64* %n2, align 8, !tbaa !12
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %11, %cond.true ], [ %12, %cond.false ]
  %call1 = call i32 @mg_ncasecmp(i8* %7, i8* %8, i64 %cond)
  store i32 %call1, i32* %r, align 4, !tbaa !15
  %13 = load i32, i32* %r, align 4, !tbaa !15
  %cmp2 = icmp eq i32 %13, 0
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %14 = load i64, i64* %n1, align 8, !tbaa !12
  %15 = load i64, i64* %n2, align 8, !tbaa !12
  %sub = sub i64 %14, %15
  %conv = trunc i64 %sub to i32
  store i32 %conv, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %cond.end
  %16 = load i32, i32* %r, align 4, !tbaa !15
  store i32 %16, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %17 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %17) #5
  %18 = bitcast i64* %n1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %18) #5
  %19 = bitcast i64* %n2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %19) #5
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @mg_ncasecmp(i8* %s1, i8* %s2, i64 %len) #0 {
entry:
  %s1.addr = alloca i8*, align 8
  %s2.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %diff = alloca i32, align 4
  store i8* %s1, i8** %s1.addr, align 8, !tbaa !3
  store i8* %s2, i8** %s2.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  %0 = bitcast i32* %diff to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  store i32 0, i32* %diff, align 4, !tbaa !15
  %1 = load i64, i64* %len.addr, align 8, !tbaa !12
  %cmp = icmp ugt i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %land.end, %if.then
  %2 = load i8*, i8** %s1.addr, align 8, !tbaa !3
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr, i8** %s1.addr, align 8, !tbaa !3
  %call = call i32 @str_util_lowercase(i8* %2)
  %3 = load i8*, i8** %s2.addr, align 8, !tbaa !3
  %incdec.ptr1 = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr1, i8** %s2.addr, align 8, !tbaa !3
  %call2 = call i32 @str_util_lowercase(i8* %3)
  %sub = sub nsw i32 %call, %call2
  store i32 %sub, i32* %diff, align 4, !tbaa !15
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %4 = load i32, i32* %diff, align 4, !tbaa !15
  %cmp3 = icmp eq i32 %4, 0
  br i1 %cmp3, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %do.cond
  %5 = load i8*, i8** %s1.addr, align 8, !tbaa !3
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 -1
  %6 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = sext i8 %6 to i32
  %cmp4 = icmp ne i32 %conv, 0
  br i1 %cmp4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %7 = load i64, i64* %len.addr, align 8, !tbaa !12
  %dec = add i64 %7, -1
  store i64 %dec, i64* %len.addr, align 8, !tbaa !12
  %cmp6 = icmp ugt i64 %dec, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %do.cond
  %8 = phi i1 [ false, %land.lhs.true ], [ false, %do.cond ], [ %cmp6, %land.rhs ]
  br i1 %8, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  %9 = load i32, i32* %diff, align 4, !tbaa !15
  %10 = bitcast i32* %diff to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %10) #5
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define weak { i8*, i64 } @mg_strdup(i8* %s.coerce0, i64 %s.coerce1) #0 {
entry:
  %retval = alloca %struct.mg_str, align 8
  %s = alloca %struct.mg_str, align 8
  %0 = bitcast %struct.mg_str* %s to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %s.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %s.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %s to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  %call = call { i8*, i64 } @mg_strdup_common(i8* %5, i64 %7, i32 0)
  %8 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 0
  %10 = extractvalue { i8*, i64 } %call, 0
  store i8* %10, i8** %9, align 8
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 1
  %12 = extractvalue { i8*, i64 } %call, 1
  store i64 %12, i64* %11, align 8
  %13 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %14 = load { i8*, i64 }, { i8*, i64 }* %13, align 8
  ret { i8*, i64 } %14
}

; Function Attrs: nounwind ssp uwtable
define internal { i8*, i64 } @mg_strdup_common(i8* %s.coerce0, i64 %s.coerce1, i32 %nul_terminate) #0 {
entry:
  %retval = alloca %struct.mg_str, align 8
  %s = alloca %struct.mg_str, align 8
  %nul_terminate.addr = alloca i32, align 4
  %sc = alloca i8*, align 8
  %0 = bitcast %struct.mg_str* %s to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %s.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %s.coerce1, i64* %2, align 8
  store i32 %nul_terminate, i32* %nul_terminate.addr, align 4, !tbaa !15
  %3 = bitcast %struct.mg_str* %retval to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 16, i1 false)
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  %4 = load i64, i64* %len, align 8, !tbaa !18
  %cmp = icmp ugt i64 %4, 0
  br i1 %cmp, label %land.lhs.true, label %if.end16

land.lhs.true:                                    ; preds = %entry
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 0
  %5 = load i8*, i8** %p, align 8, !tbaa !16
  %cmp1 = icmp ne i8* %5, null
  br i1 %cmp1, label %if.then, label %if.end16

if.then:                                          ; preds = %land.lhs.true
  %6 = bitcast i8** %sc to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #5
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  %7 = load i64, i64* %len2, align 8, !tbaa !18
  %8 = load i32, i32* %nul_terminate.addr, align 4, !tbaa !15
  %tobool = icmp ne i32 %8, 0
  %9 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1, i32 0
  %conv = sext i32 %cond to i64
  %add = add i64 %7, %conv
  %call = call i8* @malloc(i64 %add) #18
  store i8* %call, i8** %sc, align 8, !tbaa !3
  %10 = load i8*, i8** %sc, align 8, !tbaa !3
  %cmp3 = icmp ne i8* %10, null
  br i1 %cmp3, label %if.then5, label %if.end15

if.then5:                                         ; preds = %if.then
  %11 = load i8*, i8** %sc, align 8, !tbaa !3
  %p6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 0
  %12 = load i8*, i8** %p6, align 8, !tbaa !16
  %len7 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  %13 = load i64, i64* %len7, align 8, !tbaa !18
  %14 = load i8*, i8** %sc, align 8, !tbaa !3
  %15 = call i64 @llvm.objectsize.i64.p0i8(i8* %14, i1 false, i1 true)
  %call8 = call i8* @__memcpy_chk(i8* %11, i8* %12, i64 %13, i64 %15) #5
  %16 = load i32, i32* %nul_terminate.addr, align 4, !tbaa !15
  %tobool9 = icmp ne i32 %16, 0
  br i1 %tobool9, label %if.then10, label %if.end

if.then10:                                        ; preds = %if.then5
  %17 = load i8*, i8** %sc, align 8, !tbaa !3
  %len11 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  %18 = load i64, i64* %len11, align 8, !tbaa !18
  %arrayidx = getelementptr inbounds i8, i8* %17, i64 %18
  store i8 0, i8* %arrayidx, align 1, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then10, %if.then5
  %19 = load i8*, i8** %sc, align 8, !tbaa !3
  %p12 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %retval, i32 0, i32 0
  store i8* %19, i8** %p12, align 8, !tbaa !16
  %len13 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  %20 = load i64, i64* %len13, align 8, !tbaa !18
  %len14 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %retval, i32 0, i32 1
  store i64 %20, i64* %len14, align 8, !tbaa !18
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  %21 = bitcast i8** %sc to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %21) #5
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %land.lhs.true, %entry
  %22 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %23 = load { i8*, i64 }, { i8*, i64 }* %22, align 8
  ret { i8*, i64 } %23
}

; Function Attrs: nounwind ssp uwtable
define weak { i8*, i64 } @mg_strdup_nul(i8* %s.coerce0, i64 %s.coerce1) #0 {
entry:
  %retval = alloca %struct.mg_str, align 8
  %s = alloca %struct.mg_str, align 8
  %0 = bitcast %struct.mg_str* %s to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %s.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %s.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %s to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  %call = call { i8*, i64 } @mg_strdup_common(i8* %5, i64 %7, i32 1)
  %8 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 0
  %10 = extractvalue { i8*, i64 } %call, 0
  store i8* %10, i8** %9, align 8
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 1
  %12 = extractvalue { i8*, i64 } %call, 1
  store i64 %12, i64* %11, align 8
  %13 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %14 = load { i8*, i64 }, { i8*, i64 }* %13, align 8
  ret { i8*, i64 } %14
}

; Function Attrs: nounwind ssp uwtable
define weak i8* @mg_strchr(i8* %s.coerce0, i64 %s.coerce1, i32 %c) #0 {
entry:
  %retval = alloca i8*, align 8
  %s = alloca %struct.mg_str, align 8
  %c.addr = alloca i32, align 4
  %i = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %0 = bitcast %struct.mg_str* %s to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %s.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %s.coerce1, i64* %2, align 8
  store i32 %c, i32* %c.addr, align 4, !tbaa !15
  %3 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  store i64 0, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i64, i64* %i, align 8, !tbaa !12
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  %5 = load i64, i64* %len, align 8, !tbaa !18
  %cmp = icmp ult i64 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 0
  %6 = load i8*, i8** %p, align 8, !tbaa !16
  %7 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %7
  %8 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = sext i8 %8 to i32
  %9 = load i32, i32* %c.addr, align 4, !tbaa !15
  %cmp1 = icmp eq i32 %conv, %9
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %p3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 0
  %10 = load i8*, i8** %p3, align 8, !tbaa !16
  %11 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx4 = getelementptr inbounds i8, i8* %10, i64 %11
  store i8* %arrayidx4, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %12 = load i64, i64* %i, align 8, !tbaa !12
  %inc = add i64 %12, 1
  store i64 %inc, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then
  %13 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %13) #5
  %14 = load i8*, i8** %retval, align 8
  ret i8* %14
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @mg_strcmp(i8* %str1.coerce0, i64 %str1.coerce1, i8* %str2.coerce0, i64 %str2.coerce1) #0 {
entry:
  %retval = alloca i32, align 4
  %str1 = alloca %struct.mg_str, align 8
  %str2 = alloca %struct.mg_str, align 8
  %i = alloca i64, align 8
  %c1 = alloca i32, align 4
  %c2 = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %0 = bitcast %struct.mg_str* %str1 to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %str1.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %str1.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %str2 to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %str2.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %str2.coerce1, i64* %5, align 8
  %6 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #5
  store i64 0, i64* %i, align 8, !tbaa !12
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont, %entry
  %7 = load i64, i64* %i, align 8, !tbaa !12
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str1, i32 0, i32 1
  %8 = load i64, i64* %len, align 8, !tbaa !18
  %cmp = icmp ult i64 %7, %8
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %9 = load i64, i64* %i, align 8, !tbaa !12
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str2, i32 0, i32 1
  %10 = load i64, i64* %len1, align 8, !tbaa !18
  %cmp2 = icmp ult i64 %9, %10
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %11 = phi i1 [ false, %while.cond ], [ %cmp2, %land.rhs ]
  br i1 %11, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %12 = bitcast i32* %c1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %12) #5
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str1, i32 0, i32 0
  %13 = load i8*, i8** %p, align 8, !tbaa !16
  %14 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx = getelementptr inbounds i8, i8* %13, i64 %14
  %15 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = sext i8 %15 to i32
  store i32 %conv, i32* %c1, align 4, !tbaa !15
  %16 = bitcast i32* %c2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %16) #5
  %p3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str2, i32 0, i32 0
  %17 = load i8*, i8** %p3, align 8, !tbaa !16
  %18 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx4 = getelementptr inbounds i8, i8* %17, i64 %18
  %19 = load i8, i8* %arrayidx4, align 1, !tbaa !14
  %conv5 = sext i8 %19 to i32
  store i32 %conv5, i32* %c2, align 4, !tbaa !15
  %20 = load i32, i32* %c1, align 4, !tbaa !15
  %21 = load i32, i32* %c2, align 4, !tbaa !15
  %cmp6 = icmp slt i32 %20, %21
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %while.body
  %22 = load i32, i32* %c1, align 4, !tbaa !15
  %23 = load i32, i32* %c2, align 4, !tbaa !15
  %cmp8 = icmp sgt i32 %22, %23
  br i1 %cmp8, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end11:                                         ; preds = %if.end
  %24 = load i64, i64* %i, align 8, !tbaa !12
  %inc = add i64 %24, 1
  store i64 %inc, i64* %i, align 8, !tbaa !12
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end11, %if.then10, %if.then
  %25 = bitcast i32* %c2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %25) #5
  %26 = bitcast i32* %c1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %26) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup23 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %while.cond

while.end:                                        ; preds = %land.end
  %27 = load i64, i64* %i, align 8, !tbaa !12
  %len13 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str1, i32 0, i32 1
  %28 = load i64, i64* %len13, align 8, !tbaa !18
  %cmp14 = icmp ult i64 %27, %28
  br i1 %cmp14, label %if.then16, label %if.end17

if.then16:                                        ; preds = %while.end
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup23

if.end17:                                         ; preds = %while.end
  %29 = load i64, i64* %i, align 8, !tbaa !12
  %len18 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str2, i32 0, i32 1
  %30 = load i64, i64* %len18, align 8, !tbaa !18
  %cmp19 = icmp ult i64 %29, %30
  br i1 %cmp19, label %if.then21, label %if.end22

if.then21:                                        ; preds = %if.end17
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup23

if.end22:                                         ; preds = %if.end17
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup23

cleanup23:                                        ; preds = %if.end22, %if.then21, %if.then16, %cleanup
  %31 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %31) #5
  %32 = load i32, i32* %retval, align 4
  ret i32 %32
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @mg_strncmp(i8* %str1.coerce0, i64 %str1.coerce1, i8* %str2.coerce0, i64 %str2.coerce1, i64 %n) #0 {
entry:
  %str1 = alloca %struct.mg_str, align 8
  %str2 = alloca %struct.mg_str, align 8
  %n.addr = alloca i64, align 8
  %s1 = alloca %struct.mg_str, align 8
  %s2 = alloca %struct.mg_str, align 8
  %0 = bitcast %struct.mg_str* %str1 to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %str1.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %str1.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %str2 to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %str2.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %str2.coerce1, i64* %5, align 8
  store i64 %n, i64* %n.addr, align 8, !tbaa !12
  %6 = bitcast %struct.mg_str* %s1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %6) #5
  %7 = bitcast %struct.mg_str* %s1 to i8*
  %8 = bitcast %struct.mg_str* %str1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 16, i1 false), !tbaa.struct !19
  %9 = bitcast %struct.mg_str* %s2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %9) #5
  %10 = bitcast %struct.mg_str* %s2 to i8*
  %11 = bitcast %struct.mg_str* %str2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 16, i1 false), !tbaa.struct !19
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s1, i32 0, i32 1
  %12 = load i64, i64* %len, align 8, !tbaa !18
  %13 = load i64, i64* %n.addr, align 8, !tbaa !12
  %cmp = icmp ugt i64 %12, %13
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %14 = load i64, i64* %n.addr, align 8, !tbaa !12
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s1, i32 0, i32 1
  store i64 %14, i64* %len1, align 8, !tbaa !18
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s2, i32 0, i32 1
  %15 = load i64, i64* %len2, align 8, !tbaa !18
  %16 = load i64, i64* %n.addr, align 8, !tbaa !12
  %cmp3 = icmp ugt i64 %15, %16
  br i1 %cmp3, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.end
  %17 = load i64, i64* %n.addr, align 8, !tbaa !12
  %len5 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s2, i32 0, i32 1
  store i64 %17, i64* %len5, align 8, !tbaa !18
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %if.end
  %18 = bitcast %struct.mg_str* %s1 to { i8*, i64 }*
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %18, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %18, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %struct.mg_str* %s2 to { i8*, i64 }*
  %24 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %23, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %23, i32 0, i32 1
  %27 = load i64, i64* %26, align 8
  %call = call i32 @mg_strcmp(i8* %20, i64 %22, i8* %25, i64 %27)
  %28 = bitcast %struct.mg_str* %s2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %28) #5
  %29 = bitcast %struct.mg_str* %s1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %29) #5
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @mg_strcasecmp(i8* %str1.coerce0, i64 %str1.coerce1, i8* %str2.coerce0, i64 %str2.coerce1) #0 {
entry:
  %retval = alloca i32, align 4
  %str1 = alloca %struct.mg_str, align 8
  %str2 = alloca %struct.mg_str, align 8
  %i = alloca i64, align 8
  %c1 = alloca i32, align 4
  %c2 = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %0 = bitcast %struct.mg_str* %str1 to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %str1.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %str1.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %str2 to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %str2.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %str2.coerce1, i64* %5, align 8
  %6 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #5
  store i64 0, i64* %i, align 8, !tbaa !12
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont, %entry
  %7 = load i64, i64* %i, align 8, !tbaa !12
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str1, i32 0, i32 1
  %8 = load i64, i64* %len, align 8, !tbaa !18
  %cmp = icmp ult i64 %7, %8
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %9 = load i64, i64* %i, align 8, !tbaa !12
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str2, i32 0, i32 1
  %10 = load i64, i64* %len1, align 8, !tbaa !18
  %cmp2 = icmp ult i64 %9, %10
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %11 = phi i1 [ false, %while.cond ], [ %cmp2, %land.rhs ]
  br i1 %11, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %12 = bitcast i32* %c1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %12) #5
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str1, i32 0, i32 0
  %13 = load i8*, i8** %p, align 8, !tbaa !16
  %14 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx = getelementptr inbounds i8, i8* %13, i64 %14
  %15 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = sext i8 %15 to i32
  %call = call i32 @tolower(i32 %conv) #19
  store i32 %call, i32* %c1, align 4, !tbaa !15
  %16 = bitcast i32* %c2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %16) #5
  %p3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str2, i32 0, i32 0
  %17 = load i8*, i8** %p3, align 8, !tbaa !16
  %18 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx4 = getelementptr inbounds i8, i8* %17, i64 %18
  %19 = load i8, i8* %arrayidx4, align 1, !tbaa !14
  %conv5 = sext i8 %19 to i32
  %call6 = call i32 @tolower(i32 %conv5) #19
  store i32 %call6, i32* %c2, align 4, !tbaa !15
  %20 = load i32, i32* %c1, align 4, !tbaa !15
  %21 = load i32, i32* %c2, align 4, !tbaa !15
  %cmp7 = icmp slt i32 %20, %21
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %while.body
  %22 = load i32, i32* %c1, align 4, !tbaa !15
  %23 = load i32, i32* %c2, align 4, !tbaa !15
  %cmp9 = icmp sgt i32 %22, %23
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end12:                                         ; preds = %if.end
  %24 = load i64, i64* %i, align 8, !tbaa !12
  %inc = add i64 %24, 1
  store i64 %inc, i64* %i, align 8, !tbaa !12
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end12, %if.then11, %if.then
  %25 = bitcast i32* %c2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %25) #5
  %26 = bitcast i32* %c1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %26) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup24 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %while.cond

while.end:                                        ; preds = %land.end
  %27 = load i64, i64* %i, align 8, !tbaa !12
  %len14 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str1, i32 0, i32 1
  %28 = load i64, i64* %len14, align 8, !tbaa !18
  %cmp15 = icmp ult i64 %27, %28
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %while.end
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup24

if.end18:                                         ; preds = %while.end
  %29 = load i64, i64* %i, align 8, !tbaa !12
  %len19 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str2, i32 0, i32 1
  %30 = load i64, i64* %len19, align 8, !tbaa !18
  %cmp20 = icmp ult i64 %29, %30
  br i1 %cmp20, label %if.then22, label %if.end23

if.then22:                                        ; preds = %if.end18
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup24

if.end23:                                         ; preds = %if.end18
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup24

cleanup24:                                        ; preds = %if.end23, %if.then22, %if.then17, %cleanup
  %31 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %31) #5
  %32 = load i32, i32* %retval, align 4
  ret i32 %32
}

; Function Attrs: inlinehint nounwind readonly ssp uwtable
define available_externally i32 @tolower(i32 %_c) #9 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4, !tbaa !15
  %0 = load i32, i32* %_c.addr, align 4, !tbaa !15
  %call = call i32 @__tolower(i32 %0)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define weak void @mg_strfree(%struct.mg_str* %s) #0 {
entry:
  %s.addr = alloca %struct.mg_str*, align 8
  %sp = alloca i8*, align 8
  store %struct.mg_str* %s, %struct.mg_str** %s.addr, align 8, !tbaa !3
  %0 = bitcast i8** %sp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.mg_str*, %struct.mg_str** %s.addr, align 8, !tbaa !3
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %1, i32 0, i32 0
  %2 = load i8*, i8** %p, align 8, !tbaa !16
  store i8* %2, i8** %sp, align 8, !tbaa !3
  %3 = load %struct.mg_str*, %struct.mg_str** %s.addr, align 8, !tbaa !3
  %p1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %3, i32 0, i32 0
  store i8* null, i8** %p1, align 8, !tbaa !16
  %4 = load %struct.mg_str*, %struct.mg_str** %s.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %4, i32 0, i32 1
  store i64 0, i64* %len, align 8, !tbaa !18
  %5 = load i8*, i8** %sp, align 8, !tbaa !3
  %cmp = icmp ne i8* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load i8*, i8** %sp, align 8, !tbaa !3
  call void @free(i8* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = bitcast i8** %sp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %7) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak i8* @mg_strstr(i8* %haystack.coerce0, i64 %haystack.coerce1, i8* %needle.coerce0, i64 %needle.coerce1) #0 {
entry:
  %retval = alloca i8*, align 8
  %haystack = alloca %struct.mg_str, align 8
  %needle = alloca %struct.mg_str, align 8
  %i = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %0 = bitcast %struct.mg_str* %haystack to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %haystack.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %haystack.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %needle to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %needle.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %needle.coerce1, i64* %5, align 8
  %6 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #5
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %needle, i32 0, i32 1
  %7 = load i64, i64* %len, align 8, !tbaa !18
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %haystack, i32 0, i32 1
  %8 = load i64, i64* %len1, align 8, !tbaa !18
  %cmp = icmp ugt i64 %7, %8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  store i64 0, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i64, i64* %i, align 8, !tbaa !12
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %haystack, i32 0, i32 1
  %10 = load i64, i64* %len2, align 8, !tbaa !18
  %len3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %needle, i32 0, i32 1
  %11 = load i64, i64* %len3, align 8, !tbaa !18
  %sub = sub i64 %10, %11
  %cmp4 = icmp ule i64 %9, %sub
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %haystack, i32 0, i32 0
  %12 = load i8*, i8** %p, align 8, !tbaa !16
  %13 = load i64, i64* %i, align 8, !tbaa !12
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 %13
  %p5 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %needle, i32 0, i32 0
  %14 = load i8*, i8** %p5, align 8, !tbaa !16
  %len6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %needle, i32 0, i32 1
  %15 = load i64, i64* %len6, align 8, !tbaa !18
  %call = call i32 @memcmp(i8* %add.ptr, i8* %14, i64 %15)
  %cmp7 = icmp eq i32 %call, 0
  br i1 %cmp7, label %if.then8, label %if.end11

if.then8:                                         ; preds = %for.body
  %p9 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %haystack, i32 0, i32 0
  %16 = load i8*, i8** %p9, align 8, !tbaa !16
  %17 = load i64, i64* %i, align 8, !tbaa !12
  %add.ptr10 = getelementptr inbounds i8, i8* %16, i64 %17
  store i8* %add.ptr10, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end11:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end11
  %18 = load i64, i64* %i, align 8, !tbaa !12
  %inc = add i64 %18, 1
  store i64 %inc, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then8, %if.then
  %19 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %19) #5
  %20 = load i8*, i8** %retval, align 8
  ret i8* %20
}

declare i32 @memcmp(i8*, i8*, i64) #4

; Function Attrs: nounwind ssp uwtable
define weak { i8*, i64 } @mg_strstrip(i8* %s.coerce0, i64 %s.coerce1) #0 {
entry:
  %retval = alloca %struct.mg_str, align 8
  %s = alloca %struct.mg_str, align 8
  %0 = bitcast %struct.mg_str* %s to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %s.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %s.coerce1, i64* %2, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  %3 = load i64, i64* %len, align 8, !tbaa !18
  %cmp = icmp ugt i64 %3, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 0
  %4 = load i8*, i8** %p, align 8, !tbaa !16
  %5 = load i8, i8* %4, align 1, !tbaa !14
  %conv = sext i8 %5 to i32
  %call = call i32 @isspace(i32 %conv) #19
  %tobool = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %6 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %6, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %p1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 0
  %7 = load i8*, i8** %p1, align 8, !tbaa !16
  %incdec.ptr = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr, i8** %p1, align 8, !tbaa !16
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  %8 = load i64, i64* %len2, align 8, !tbaa !18
  %dec = add i64 %8, -1
  store i64 %dec, i64* %len2, align 8, !tbaa !18
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %while.cond3

while.cond3:                                      ; preds = %while.body15, %while.end
  %len4 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  %9 = load i64, i64* %len4, align 8, !tbaa !18
  %cmp5 = icmp ugt i64 %9, 0
  br i1 %cmp5, label %land.rhs7, label %land.end14

land.rhs7:                                        ; preds = %while.cond3
  %p8 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 0
  %10 = load i8*, i8** %p8, align 8, !tbaa !16
  %len9 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  %11 = load i64, i64* %len9, align 8, !tbaa !18
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %11
  %add.ptr10 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  %12 = load i8, i8* %add.ptr10, align 1, !tbaa !14
  %conv11 = sext i8 %12 to i32
  %call12 = call i32 @isspace(i32 %conv11) #19
  %tobool13 = icmp ne i32 %call12, 0
  br label %land.end14

land.end14:                                       ; preds = %land.rhs7, %while.cond3
  %13 = phi i1 [ false, %while.cond3 ], [ %tobool13, %land.rhs7 ]
  br i1 %13, label %while.body15, label %while.end18

while.body15:                                     ; preds = %land.end14
  %len16 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  %14 = load i64, i64* %len16, align 8, !tbaa !18
  %dec17 = add i64 %14, -1
  store i64 %dec17, i64* %len16, align 8, !tbaa !18
  br label %while.cond3

while.end18:                                      ; preds = %land.end14
  %15 = bitcast %struct.mg_str* %retval to i8*
  %16 = bitcast %struct.mg_str* %s to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 16, i1 false), !tbaa.struct !19
  %17 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %18 = load { i8*, i64 }, { i8*, i64 }* %17, align 8
  ret { i8*, i64 } %18
}

; Function Attrs: inlinehint nounwind readonly ssp uwtable
define available_externally i32 @isspace(i32 %_c) #9 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4, !tbaa !15
  %0 = load i32, i32* %_c.addr, align 4, !tbaa !15
  %call = call i32 @__istype(i32 %0, i64 16384)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @c_strnlen(i8* %s, i64 %maxlen) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %maxlen.addr = alloca i64, align 8
  %l = alloca i64, align 8
  store i8* %s, i8** %s.addr, align 8, !tbaa !3
  store i64 %maxlen, i64* %maxlen.addr, align 8, !tbaa !12
  %0 = bitcast i64* %l to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  store i64 0, i64* %l, align 8, !tbaa !12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %l, align 8, !tbaa !12
  %2 = load i64, i64* %maxlen.addr, align 8, !tbaa !12
  %cmp = icmp ult i64 %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %3 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %4 = load i64, i64* %l, align 8, !tbaa !12
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %4
  %5 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = sext i8 %5 to i32
  %cmp1 = icmp ne i32 %conv, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %6 = phi i1 [ false, %for.cond ], [ %cmp1, %land.rhs ]
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i64, i64* %l, align 8, !tbaa !12
  %inc = add i64 %7, 1
  store i64 %inc, i64* %l, align 8, !tbaa !12
  br label %for.cond

for.end:                                          ; preds = %land.end
  %8 = load i64, i64* %l, align 8, !tbaa !12
  %9 = bitcast i64* %l to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %9) #5
  ret i64 %8
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @c_vsnprintf(i8* %buf, i64 %buf_size, i8* %fmt, %struct.__va_list_tag* %ap) #0 {
entry:
  %buf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %fmt.addr = alloca i8*, align 8
  %ap.addr = alloca %struct.__va_list_tag*, align 8
  %ch = alloca i32, align 4
  %i = alloca i32, align 4
  %len_mod = alloca i32, align 4
  %flags = alloca i32, align 4
  %precision = alloca i32, align 4
  %field_width = alloca i32, align 4
  %s = alloca i8*, align 8
  %j = alloca i32, align 4
  %pad = alloca i32, align 4
  %num = alloca i64, align 8
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %buf_size, i64* %buf_size.addr, align 8, !tbaa !12
  store i8* %fmt, i8** %fmt.addr, align 8, !tbaa !3
  store %struct.__va_list_tag* %ap, %struct.__va_list_tag** %ap.addr, align 8, !tbaa !3
  %0 = bitcast i32* %ch to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  store i32 0, i32* %i, align 4, !tbaa !15
  %2 = bitcast i32* %len_mod to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  %3 = bitcast i32* %flags to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  %4 = bitcast i32* %precision to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #5
  %5 = bitcast i32* %field_width to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #5
  br label %while.cond

while.cond:                                       ; preds = %if.end420, %entry
  %6 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %fmt.addr, align 8, !tbaa !3
  %7 = load i8, i8* %6, align 1, !tbaa !14
  %conv = sext i8 %7 to i32
  store i32 %conv, i32* %ch, align 4, !tbaa !15
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end421

while.body:                                       ; preds = %while.cond
  %8 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp2 = icmp ne i32 %8, 37
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  br label %do.body

do.body:                                          ; preds = %if.then
  %9 = load i32, i32* %i, align 4, !tbaa !15
  %10 = load i64, i64* %buf_size.addr, align 8, !tbaa !12
  %conv4 = trunc i64 %10 to i32
  %cmp5 = icmp slt i32 %9, %conv4
  br i1 %cmp5, label %if.then7, label %if.end

if.then7:                                         ; preds = %do.body
  %11 = load i32, i32* %ch, align 4, !tbaa !15
  %conv8 = trunc i32 %11 to i8
  %12 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %13 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom = sext i32 %13 to i64
  %arrayidx = getelementptr inbounds i8, i8* %12, i64 %idxprom
  store i8 %conv8, i8* %arrayidx, align 1, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then7, %do.body
  %14 = load i32, i32* %i, align 4, !tbaa !15
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4, !tbaa !15
  br label %do.cond

do.cond:                                          ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end420

if.else:                                          ; preds = %while.body
  store i32 0, i32* %len_mod, align 4, !tbaa !15
  store i32 0, i32* %precision, align 4, !tbaa !15
  store i32 0, i32* %field_width, align 4, !tbaa !15
  store i32 0, i32* %flags, align 4, !tbaa !15
  %15 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %16 = load i8, i8* %15, align 1, !tbaa !14
  %conv9 = sext i8 %16 to i32
  %cmp10 = icmp eq i32 %conv9, 48
  br i1 %cmp10, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.else
  %17 = load i32, i32* %flags, align 4, !tbaa !15
  %or = or i32 %17, 1
  store i32 %or, i32* %flags, align 4, !tbaa !15
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %if.else
  br label %while.cond14

while.cond14:                                     ; preds = %while.body21, %if.end13
  %18 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %19 = load i8, i8* %18, align 1, !tbaa !14
  %conv15 = sext i8 %19 to i32
  %cmp16 = icmp sge i32 %conv15, 48
  br i1 %cmp16, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond14
  %20 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %21 = load i8, i8* %20, align 1, !tbaa !14
  %conv18 = sext i8 %21 to i32
  %cmp19 = icmp sle i32 %conv18, 57
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond14
  %22 = phi i1 [ false, %while.cond14 ], [ %cmp19, %land.rhs ]
  br i1 %22, label %while.body21, label %while.end

while.body21:                                     ; preds = %land.end
  %23 = load i32, i32* %field_width, align 4, !tbaa !15
  %mul = mul nsw i32 %23, 10
  store i32 %mul, i32* %field_width, align 4, !tbaa !15
  %24 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %incdec.ptr22 = getelementptr inbounds i8, i8* %24, i32 1
  store i8* %incdec.ptr22, i8** %fmt.addr, align 8, !tbaa !3
  %25 = load i8, i8* %24, align 1, !tbaa !14
  %conv23 = sext i8 %25 to i32
  %sub = sub nsw i32 %conv23, 48
  %26 = load i32, i32* %field_width, align 4, !tbaa !15
  %add = add nsw i32 %26, %sub
  store i32 %add, i32* %field_width, align 4, !tbaa !15
  br label %while.cond14

while.end:                                        ; preds = %land.end
  %27 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %28 = load i8, i8* %27, align 1, !tbaa !14
  %conv24 = sext i8 %28 to i32
  %cmp25 = icmp eq i32 %conv24, 42
  br i1 %cmp25, label %if.then27, label %if.end29

if.then27:                                        ; preds = %while.end
  %29 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8, !tbaa !3
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %29, i32 0, i32 0
  %gp_offset = load i32, i32* %gp_offset_p, align 8
  %fits_in_gp = icmp ule i32 %gp_offset, 40
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %if.then27
  %30 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %29, i32 0, i32 3
  %reg_save_area = load i8*, i8** %30, align 8
  %31 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset
  %32 = bitcast i8* %31 to i32*
  %33 = add i32 %gp_offset, 8
  store i32 %33, i32* %gp_offset_p, align 8
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %if.then27
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %29, i32 0, i32 2
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8
  %34 = bitcast i8* %overflow_arg_area to i32*
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi i32* [ %32, %vaarg.in_reg ], [ %34, %vaarg.in_mem ]
  %35 = load i32, i32* %vaarg.addr, align 4
  store i32 %35, i32* %field_width, align 4, !tbaa !15
  %36 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %incdec.ptr28 = getelementptr inbounds i8, i8* %36, i32 1
  store i8* %incdec.ptr28, i8** %fmt.addr, align 8, !tbaa !3
  br label %if.end29

if.end29:                                         ; preds = %vaarg.end, %while.end
  %37 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %38 = load i8, i8* %37, align 1, !tbaa !14
  %conv30 = sext i8 %38 to i32
  %cmp31 = icmp eq i32 %conv30, 46
  br i1 %cmp31, label %if.then33, label %if.end69

if.then33:                                        ; preds = %if.end29
  %39 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %incdec.ptr34 = getelementptr inbounds i8, i8* %39, i32 1
  store i8* %incdec.ptr34, i8** %fmt.addr, align 8, !tbaa !3
  %40 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %41 = load i8, i8* %40, align 1, !tbaa !14
  %conv35 = sext i8 %41 to i32
  %cmp36 = icmp eq i32 %conv35, 42
  br i1 %cmp36, label %if.then38, label %if.else51

if.then38:                                        ; preds = %if.then33
  %42 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8, !tbaa !3
  %gp_offset_p39 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %42, i32 0, i32 0
  %gp_offset40 = load i32, i32* %gp_offset_p39, align 8
  %fits_in_gp41 = icmp ule i32 %gp_offset40, 40
  br i1 %fits_in_gp41, label %vaarg.in_reg42, label %vaarg.in_mem44

vaarg.in_reg42:                                   ; preds = %if.then38
  %43 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %42, i32 0, i32 3
  %reg_save_area43 = load i8*, i8** %43, align 8
  %44 = getelementptr i8, i8* %reg_save_area43, i32 %gp_offset40
  %45 = bitcast i8* %44 to i32*
  %46 = add i32 %gp_offset40, 8
  store i32 %46, i32* %gp_offset_p39, align 8
  br label %vaarg.end48

vaarg.in_mem44:                                   ; preds = %if.then38
  %overflow_arg_area_p45 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %42, i32 0, i32 2
  %overflow_arg_area46 = load i8*, i8** %overflow_arg_area_p45, align 8
  %47 = bitcast i8* %overflow_arg_area46 to i32*
  %overflow_arg_area.next47 = getelementptr i8, i8* %overflow_arg_area46, i32 8
  store i8* %overflow_arg_area.next47, i8** %overflow_arg_area_p45, align 8
  br label %vaarg.end48

vaarg.end48:                                      ; preds = %vaarg.in_mem44, %vaarg.in_reg42
  %vaarg.addr49 = phi i32* [ %45, %vaarg.in_reg42 ], [ %47, %vaarg.in_mem44 ]
  %48 = load i32, i32* %vaarg.addr49, align 4
  store i32 %48, i32* %precision, align 4, !tbaa !15
  %49 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %incdec.ptr50 = getelementptr inbounds i8, i8* %49, i32 1
  store i8* %incdec.ptr50, i8** %fmt.addr, align 8, !tbaa !3
  br label %if.end68

if.else51:                                        ; preds = %if.then33
  br label %while.cond52

while.cond52:                                     ; preds = %while.body61, %if.else51
  %50 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %51 = load i8, i8* %50, align 1, !tbaa !14
  %conv53 = sext i8 %51 to i32
  %cmp54 = icmp sge i32 %conv53, 48
  br i1 %cmp54, label %land.rhs56, label %land.end60

land.rhs56:                                       ; preds = %while.cond52
  %52 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %53 = load i8, i8* %52, align 1, !tbaa !14
  %conv57 = sext i8 %53 to i32
  %cmp58 = icmp sle i32 %conv57, 57
  br label %land.end60

land.end60:                                       ; preds = %land.rhs56, %while.cond52
  %54 = phi i1 [ false, %while.cond52 ], [ %cmp58, %land.rhs56 ]
  br i1 %54, label %while.body61, label %while.end67

while.body61:                                     ; preds = %land.end60
  %55 = load i32, i32* %precision, align 4, !tbaa !15
  %mul62 = mul nsw i32 %55, 10
  store i32 %mul62, i32* %precision, align 4, !tbaa !15
  %56 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %incdec.ptr63 = getelementptr inbounds i8, i8* %56, i32 1
  store i8* %incdec.ptr63, i8** %fmt.addr, align 8, !tbaa !3
  %57 = load i8, i8* %56, align 1, !tbaa !14
  %conv64 = sext i8 %57 to i32
  %sub65 = sub nsw i32 %conv64, 48
  %58 = load i32, i32* %precision, align 4, !tbaa !15
  %add66 = add nsw i32 %58, %sub65
  store i32 %add66, i32* %precision, align 4, !tbaa !15
  br label %while.cond52

while.end67:                                      ; preds = %land.end60
  br label %if.end68

if.end68:                                         ; preds = %while.end67, %vaarg.end48
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.end29
  %59 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %60 = load i8, i8* %59, align 1, !tbaa !14
  %conv70 = sext i8 %60 to i32
  switch i32 %conv70, label %sw.epilog [
    i32 104, label %sw.bb
    i32 108, label %sw.bb
    i32 76, label %sw.bb
    i32 73, label %sw.bb
    i32 113, label %sw.bb
    i32 106, label %sw.bb
    i32 122, label %sw.bb
    i32 116, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.end69, %if.end69, %if.end69, %if.end69, %if.end69, %if.end69, %if.end69, %if.end69
  %61 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %incdec.ptr71 = getelementptr inbounds i8, i8* %61, i32 1
  store i8* %incdec.ptr71, i8** %fmt.addr, align 8, !tbaa !3
  %62 = load i8, i8* %61, align 1, !tbaa !14
  %conv72 = sext i8 %62 to i32
  store i32 %conv72, i32* %len_mod, align 4, !tbaa !15
  %63 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %64 = load i8, i8* %63, align 1, !tbaa !14
  %conv73 = sext i8 %64 to i32
  %cmp74 = icmp eq i32 %conv73, 104
  br i1 %cmp74, label %if.then76, label %if.end78

if.then76:                                        ; preds = %sw.bb
  store i32 72, i32* %len_mod, align 4, !tbaa !15
  %65 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %incdec.ptr77 = getelementptr inbounds i8, i8* %65, i32 1
  store i8* %incdec.ptr77, i8** %fmt.addr, align 8, !tbaa !3
  br label %if.end78

if.end78:                                         ; preds = %if.then76, %sw.bb
  %66 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %67 = load i8, i8* %66, align 1, !tbaa !14
  %conv79 = sext i8 %67 to i32
  %cmp80 = icmp eq i32 %conv79, 108
  br i1 %cmp80, label %if.then82, label %if.end84

if.then82:                                        ; preds = %if.end78
  store i32 113, i32* %len_mod, align 4, !tbaa !15
  %68 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %incdec.ptr83 = getelementptr inbounds i8, i8* %68, i32 1
  store i8* %incdec.ptr83, i8** %fmt.addr, align 8, !tbaa !3
  br label %if.end84

if.end84:                                         ; preds = %if.then82, %if.end78
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end69, %if.end84
  %69 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %incdec.ptr85 = getelementptr inbounds i8, i8* %69, i32 1
  store i8* %incdec.ptr85, i8** %fmt.addr, align 8, !tbaa !3
  %70 = load i8, i8* %69, align 1, !tbaa !14
  %conv86 = sext i8 %70 to i32
  store i32 %conv86, i32* %ch, align 4, !tbaa !15
  %71 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp87 = icmp eq i32 %71, 115
  br i1 %cmp87, label %if.then89, label %if.else154

if.then89:                                        ; preds = %sw.epilog
  %72 = bitcast i8** %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %72) #5
  %73 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8, !tbaa !3
  %gp_offset_p90 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %73, i32 0, i32 0
  %gp_offset91 = load i32, i32* %gp_offset_p90, align 8
  %fits_in_gp92 = icmp ule i32 %gp_offset91, 40
  br i1 %fits_in_gp92, label %vaarg.in_reg93, label %vaarg.in_mem95

vaarg.in_reg93:                                   ; preds = %if.then89
  %74 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %73, i32 0, i32 3
  %reg_save_area94 = load i8*, i8** %74, align 8
  %75 = getelementptr i8, i8* %reg_save_area94, i32 %gp_offset91
  %76 = bitcast i8* %75 to i8**
  %77 = add i32 %gp_offset91, 8
  store i32 %77, i32* %gp_offset_p90, align 8
  br label %vaarg.end99

vaarg.in_mem95:                                   ; preds = %if.then89
  %overflow_arg_area_p96 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %73, i32 0, i32 2
  %overflow_arg_area97 = load i8*, i8** %overflow_arg_area_p96, align 8
  %78 = bitcast i8* %overflow_arg_area97 to i8**
  %overflow_arg_area.next98 = getelementptr i8, i8* %overflow_arg_area97, i32 8
  store i8* %overflow_arg_area.next98, i8** %overflow_arg_area_p96, align 8
  br label %vaarg.end99

vaarg.end99:                                      ; preds = %vaarg.in_mem95, %vaarg.in_reg93
  %vaarg.addr100 = phi i8** [ %76, %vaarg.in_reg93 ], [ %78, %vaarg.in_mem95 ]
  %79 = load i8*, i8** %vaarg.addr100, align 8
  store i8* %79, i8** %s, align 8, !tbaa !3
  %80 = bitcast i32* %j to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %80) #5
  %81 = bitcast i32* %pad to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %81) #5
  %82 = load i32, i32* %field_width, align 4, !tbaa !15
  %conv101 = sext i32 %82 to i64
  %83 = load i32, i32* %precision, align 4, !tbaa !15
  %cmp102 = icmp sge i32 %83, 0
  br i1 %cmp102, label %cond.true, label %cond.false

cond.true:                                        ; preds = %vaarg.end99
  %84 = load i8*, i8** %s, align 8, !tbaa !3
  %85 = load i32, i32* %precision, align 4, !tbaa !15
  %conv104 = sext i32 %85 to i64
  %call = call i64 @c_strnlen(i8* %84, i64 %conv104)
  br label %cond.end

cond.false:                                       ; preds = %vaarg.end99
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call, %cond.true ], [ 0, %cond.false ]
  %sub105 = sub i64 %conv101, %cond
  %conv106 = trunc i64 %sub105 to i32
  store i32 %conv106, i32* %pad, align 4, !tbaa !15
  store i32 0, i32* %j, align 4, !tbaa !15
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %86 = load i32, i32* %j, align 4, !tbaa !15
  %87 = load i32, i32* %pad, align 4, !tbaa !15
  %cmp107 = icmp slt i32 %86, %87
  br i1 %cmp107, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body109

do.body109:                                       ; preds = %for.body
  %88 = load i32, i32* %i, align 4, !tbaa !15
  %89 = load i64, i64* %buf_size.addr, align 8, !tbaa !12
  %conv110 = trunc i64 %89 to i32
  %cmp111 = icmp slt i32 %88, %conv110
  br i1 %cmp111, label %if.then113, label %if.end116

if.then113:                                       ; preds = %do.body109
  %90 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %91 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom114 = sext i32 %91 to i64
  %arrayidx115 = getelementptr inbounds i8, i8* %90, i64 %idxprom114
  store i8 32, i8* %arrayidx115, align 1, !tbaa !14
  br label %if.end116

if.end116:                                        ; preds = %if.then113, %do.body109
  %92 = load i32, i32* %i, align 4, !tbaa !15
  %inc117 = add nsw i32 %92, 1
  store i32 %inc117, i32* %i, align 4, !tbaa !15
  br label %do.cond118

do.cond118:                                       ; preds = %if.end116
  br label %do.end119

do.end119:                                        ; preds = %do.cond118
  br label %for.inc

for.inc:                                          ; preds = %do.end119
  %93 = load i32, i32* %j, align 4, !tbaa !15
  %inc120 = add nsw i32 %93, 1
  store i32 %inc120, i32* %j, align 4, !tbaa !15
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %94 = load i8*, i8** %s, align 8, !tbaa !3
  %cmp121 = icmp ne i8* %94, null
  br i1 %cmp121, label %if.then123, label %if.end153

if.then123:                                       ; preds = %for.end
  store i32 0, i32* %j, align 4, !tbaa !15
  br label %for.cond124

for.cond124:                                      ; preds = %for.inc150, %if.then123
  %95 = load i32, i32* %precision, align 4, !tbaa !15
  %cmp125 = icmp sle i32 %95, 0
  br i1 %cmp125, label %land.rhs129, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.cond124
  %96 = load i32, i32* %j, align 4, !tbaa !15
  %97 = load i32, i32* %precision, align 4, !tbaa !15
  %cmp127 = icmp slt i32 %96, %97
  br i1 %cmp127, label %land.rhs129, label %land.end135

land.rhs129:                                      ; preds = %lor.lhs.false, %for.cond124
  %98 = load i8*, i8** %s, align 8, !tbaa !3
  %99 = load i32, i32* %j, align 4, !tbaa !15
  %idxprom130 = sext i32 %99 to i64
  %arrayidx131 = getelementptr inbounds i8, i8* %98, i64 %idxprom130
  %100 = load i8, i8* %arrayidx131, align 1, !tbaa !14
  %conv132 = sext i8 %100 to i32
  %cmp133 = icmp ne i32 %conv132, 0
  br label %land.end135

land.end135:                                      ; preds = %land.rhs129, %lor.lhs.false
  %101 = phi i1 [ false, %lor.lhs.false ], [ %cmp133, %land.rhs129 ]
  br i1 %101, label %for.body136, label %for.end152

for.body136:                                      ; preds = %land.end135
  br label %do.body137

do.body137:                                       ; preds = %for.body136
  %102 = load i32, i32* %i, align 4, !tbaa !15
  %103 = load i64, i64* %buf_size.addr, align 8, !tbaa !12
  %conv138 = trunc i64 %103 to i32
  %cmp139 = icmp slt i32 %102, %conv138
  br i1 %cmp139, label %if.then141, label %if.end146

if.then141:                                       ; preds = %do.body137
  %104 = load i8*, i8** %s, align 8, !tbaa !3
  %105 = load i32, i32* %j, align 4, !tbaa !15
  %idxprom142 = sext i32 %105 to i64
  %arrayidx143 = getelementptr inbounds i8, i8* %104, i64 %idxprom142
  %106 = load i8, i8* %arrayidx143, align 1, !tbaa !14
  %107 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %108 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom144 = sext i32 %108 to i64
  %arrayidx145 = getelementptr inbounds i8, i8* %107, i64 %idxprom144
  store i8 %106, i8* %arrayidx145, align 1, !tbaa !14
  br label %if.end146

if.end146:                                        ; preds = %if.then141, %do.body137
  %109 = load i32, i32* %i, align 4, !tbaa !15
  %inc147 = add nsw i32 %109, 1
  store i32 %inc147, i32* %i, align 4, !tbaa !15
  br label %do.cond148

do.cond148:                                       ; preds = %if.end146
  br label %do.end149

do.end149:                                        ; preds = %do.cond148
  br label %for.inc150

for.inc150:                                       ; preds = %do.end149
  %110 = load i32, i32* %j, align 4, !tbaa !15
  %inc151 = add nsw i32 %110, 1
  store i32 %inc151, i32* %j, align 4, !tbaa !15
  br label %for.cond124

for.end152:                                       ; preds = %land.end135
  br label %if.end153

if.end153:                                        ; preds = %for.end152, %for.end
  %111 = bitcast i32* %pad to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %111) #5
  %112 = bitcast i32* %j to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %112) #5
  %113 = bitcast i8** %s to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %113) #5
  br label %if.end419

if.else154:                                       ; preds = %sw.epilog
  %114 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp155 = icmp eq i32 %114, 99
  br i1 %cmp155, label %if.then157, label %if.else181

if.then157:                                       ; preds = %if.else154
  %115 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8, !tbaa !3
  %gp_offset_p158 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %115, i32 0, i32 0
  %gp_offset159 = load i32, i32* %gp_offset_p158, align 8
  %fits_in_gp160 = icmp ule i32 %gp_offset159, 40
  br i1 %fits_in_gp160, label %vaarg.in_reg161, label %vaarg.in_mem163

vaarg.in_reg161:                                  ; preds = %if.then157
  %116 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %115, i32 0, i32 3
  %reg_save_area162 = load i8*, i8** %116, align 8
  %117 = getelementptr i8, i8* %reg_save_area162, i32 %gp_offset159
  %118 = bitcast i8* %117 to i32*
  %119 = add i32 %gp_offset159, 8
  store i32 %119, i32* %gp_offset_p158, align 8
  br label %vaarg.end167

vaarg.in_mem163:                                  ; preds = %if.then157
  %overflow_arg_area_p164 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %115, i32 0, i32 2
  %overflow_arg_area165 = load i8*, i8** %overflow_arg_area_p164, align 8
  %120 = bitcast i8* %overflow_arg_area165 to i32*
  %overflow_arg_area.next166 = getelementptr i8, i8* %overflow_arg_area165, i32 8
  store i8* %overflow_arg_area.next166, i8** %overflow_arg_area_p164, align 8
  br label %vaarg.end167

vaarg.end167:                                     ; preds = %vaarg.in_mem163, %vaarg.in_reg161
  %vaarg.addr168 = phi i32* [ %118, %vaarg.in_reg161 ], [ %120, %vaarg.in_mem163 ]
  %121 = load i32, i32* %vaarg.addr168, align 4
  store i32 %121, i32* %ch, align 4, !tbaa !15
  br label %do.body169

do.body169:                                       ; preds = %vaarg.end167
  %122 = load i32, i32* %i, align 4, !tbaa !15
  %123 = load i64, i64* %buf_size.addr, align 8, !tbaa !12
  %conv170 = trunc i64 %123 to i32
  %cmp171 = icmp slt i32 %122, %conv170
  br i1 %cmp171, label %if.then173, label %if.end177

if.then173:                                       ; preds = %do.body169
  %124 = load i32, i32* %ch, align 4, !tbaa !15
  %conv174 = trunc i32 %124 to i8
  %125 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %126 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom175 = sext i32 %126 to i64
  %arrayidx176 = getelementptr inbounds i8, i8* %125, i64 %idxprom175
  store i8 %conv174, i8* %arrayidx176, align 1, !tbaa !14
  br label %if.end177

if.end177:                                        ; preds = %if.then173, %do.body169
  %127 = load i32, i32* %i, align 4, !tbaa !15
  %inc178 = add nsw i32 %127, 1
  store i32 %inc178, i32* %i, align 4, !tbaa !15
  br label %do.cond179

do.cond179:                                       ; preds = %if.end177
  br label %do.end180

do.end180:                                        ; preds = %do.cond179
  br label %if.end418

if.else181:                                       ; preds = %if.else154
  %128 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp182 = icmp eq i32 %128, 100
  br i1 %cmp182, label %land.lhs.true, label %if.else203

land.lhs.true:                                    ; preds = %if.else181
  %129 = load i32, i32* %len_mod, align 4, !tbaa !15
  %cmp184 = icmp eq i32 %129, 0
  br i1 %cmp184, label %if.then186, label %if.else203

if.then186:                                       ; preds = %land.lhs.true
  %130 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %131 = load i32, i32* %i, align 4, !tbaa !15
  %idx.ext = sext i32 %131 to i64
  %add.ptr = getelementptr inbounds i8, i8* %130, i64 %idx.ext
  %132 = load i64, i64* %buf_size.addr, align 8, !tbaa !12
  %133 = load i32, i32* %i, align 4, !tbaa !15
  %conv187 = sext i32 %133 to i64
  %sub188 = sub i64 %132, %conv187
  %134 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8, !tbaa !3
  %gp_offset_p189 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %134, i32 0, i32 0
  %gp_offset190 = load i32, i32* %gp_offset_p189, align 8
  %fits_in_gp191 = icmp ule i32 %gp_offset190, 40
  br i1 %fits_in_gp191, label %vaarg.in_reg192, label %vaarg.in_mem194

vaarg.in_reg192:                                  ; preds = %if.then186
  %135 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %134, i32 0, i32 3
  %reg_save_area193 = load i8*, i8** %135, align 8
  %136 = getelementptr i8, i8* %reg_save_area193, i32 %gp_offset190
  %137 = bitcast i8* %136 to i32*
  %138 = add i32 %gp_offset190, 8
  store i32 %138, i32* %gp_offset_p189, align 8
  br label %vaarg.end198

vaarg.in_mem194:                                  ; preds = %if.then186
  %overflow_arg_area_p195 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %134, i32 0, i32 2
  %overflow_arg_area196 = load i8*, i8** %overflow_arg_area_p195, align 8
  %139 = bitcast i8* %overflow_arg_area196 to i32*
  %overflow_arg_area.next197 = getelementptr i8, i8* %overflow_arg_area196, i32 8
  store i8* %overflow_arg_area.next197, i8** %overflow_arg_area_p195, align 8
  br label %vaarg.end198

vaarg.end198:                                     ; preds = %vaarg.in_mem194, %vaarg.in_reg192
  %vaarg.addr199 = phi i32* [ %137, %vaarg.in_reg192 ], [ %139, %vaarg.in_mem194 ]
  %140 = load i32, i32* %vaarg.addr199, align 4
  %conv200 = sext i32 %140 to i64
  %141 = load i32, i32* %flags, align 4, !tbaa !15
  %142 = load i32, i32* %field_width, align 4, !tbaa !15
  %call201 = call i32 @c_itoa(i8* %add.ptr, i64 %sub188, i64 %conv200, i32 10, i32 %141, i32 %142)
  %143 = load i32, i32* %i, align 4, !tbaa !15
  %add202 = add nsw i32 %143, %call201
  store i32 %add202, i32* %i, align 4, !tbaa !15
  br label %if.end417

if.else203:                                       ; preds = %land.lhs.true, %if.else181
  %144 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp204 = icmp eq i32 %144, 100
  br i1 %cmp204, label %land.lhs.true206, label %if.else227

land.lhs.true206:                                 ; preds = %if.else203
  %145 = load i32, i32* %len_mod, align 4, !tbaa !15
  %cmp207 = icmp eq i32 %145, 108
  br i1 %cmp207, label %if.then209, label %if.else227

if.then209:                                       ; preds = %land.lhs.true206
  %146 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %147 = load i32, i32* %i, align 4, !tbaa !15
  %idx.ext210 = sext i32 %147 to i64
  %add.ptr211 = getelementptr inbounds i8, i8* %146, i64 %idx.ext210
  %148 = load i64, i64* %buf_size.addr, align 8, !tbaa !12
  %149 = load i32, i32* %i, align 4, !tbaa !15
  %conv212 = sext i32 %149 to i64
  %sub213 = sub i64 %148, %conv212
  %150 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8, !tbaa !3
  %gp_offset_p214 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %150, i32 0, i32 0
  %gp_offset215 = load i32, i32* %gp_offset_p214, align 8
  %fits_in_gp216 = icmp ule i32 %gp_offset215, 40
  br i1 %fits_in_gp216, label %vaarg.in_reg217, label %vaarg.in_mem219

vaarg.in_reg217:                                  ; preds = %if.then209
  %151 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %150, i32 0, i32 3
  %reg_save_area218 = load i8*, i8** %151, align 8
  %152 = getelementptr i8, i8* %reg_save_area218, i32 %gp_offset215
  %153 = bitcast i8* %152 to i64*
  %154 = add i32 %gp_offset215, 8
  store i32 %154, i32* %gp_offset_p214, align 8
  br label %vaarg.end223

vaarg.in_mem219:                                  ; preds = %if.then209
  %overflow_arg_area_p220 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %150, i32 0, i32 2
  %overflow_arg_area221 = load i8*, i8** %overflow_arg_area_p220, align 8
  %155 = bitcast i8* %overflow_arg_area221 to i64*
  %overflow_arg_area.next222 = getelementptr i8, i8* %overflow_arg_area221, i32 8
  store i8* %overflow_arg_area.next222, i8** %overflow_arg_area_p220, align 8
  br label %vaarg.end223

vaarg.end223:                                     ; preds = %vaarg.in_mem219, %vaarg.in_reg217
  %vaarg.addr224 = phi i64* [ %153, %vaarg.in_reg217 ], [ %155, %vaarg.in_mem219 ]
  %156 = load i64, i64* %vaarg.addr224, align 8
  %157 = load i32, i32* %flags, align 4, !tbaa !15
  %158 = load i32, i32* %field_width, align 4, !tbaa !15
  %call225 = call i32 @c_itoa(i8* %add.ptr211, i64 %sub213, i64 %156, i32 10, i32 %157, i32 %158)
  %159 = load i32, i32* %i, align 4, !tbaa !15
  %add226 = add nsw i32 %159, %call225
  store i32 %add226, i32* %i, align 4, !tbaa !15
  br label %if.end416

if.else227:                                       ; preds = %land.lhs.true206, %if.else203
  %160 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp228 = icmp eq i32 %160, 100
  br i1 %cmp228, label %land.lhs.true230, label %if.else251

land.lhs.true230:                                 ; preds = %if.else227
  %161 = load i32, i32* %len_mod, align 4, !tbaa !15
  %cmp231 = icmp eq i32 %161, 122
  br i1 %cmp231, label %if.then233, label %if.else251

if.then233:                                       ; preds = %land.lhs.true230
  %162 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %163 = load i32, i32* %i, align 4, !tbaa !15
  %idx.ext234 = sext i32 %163 to i64
  %add.ptr235 = getelementptr inbounds i8, i8* %162, i64 %idx.ext234
  %164 = load i64, i64* %buf_size.addr, align 8, !tbaa !12
  %165 = load i32, i32* %i, align 4, !tbaa !15
  %conv236 = sext i32 %165 to i64
  %sub237 = sub i64 %164, %conv236
  %166 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8, !tbaa !3
  %gp_offset_p238 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %166, i32 0, i32 0
  %gp_offset239 = load i32, i32* %gp_offset_p238, align 8
  %fits_in_gp240 = icmp ule i32 %gp_offset239, 40
  br i1 %fits_in_gp240, label %vaarg.in_reg241, label %vaarg.in_mem243

vaarg.in_reg241:                                  ; preds = %if.then233
  %167 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %166, i32 0, i32 3
  %reg_save_area242 = load i8*, i8** %167, align 8
  %168 = getelementptr i8, i8* %reg_save_area242, i32 %gp_offset239
  %169 = bitcast i8* %168 to i64*
  %170 = add i32 %gp_offset239, 8
  store i32 %170, i32* %gp_offset_p238, align 8
  br label %vaarg.end247

vaarg.in_mem243:                                  ; preds = %if.then233
  %overflow_arg_area_p244 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %166, i32 0, i32 2
  %overflow_arg_area245 = load i8*, i8** %overflow_arg_area_p244, align 8
  %171 = bitcast i8* %overflow_arg_area245 to i64*
  %overflow_arg_area.next246 = getelementptr i8, i8* %overflow_arg_area245, i32 8
  store i8* %overflow_arg_area.next246, i8** %overflow_arg_area_p244, align 8
  br label %vaarg.end247

vaarg.end247:                                     ; preds = %vaarg.in_mem243, %vaarg.in_reg241
  %vaarg.addr248 = phi i64* [ %169, %vaarg.in_reg241 ], [ %171, %vaarg.in_mem243 ]
  %172 = load i64, i64* %vaarg.addr248, align 8
  %173 = load i32, i32* %flags, align 4, !tbaa !15
  %174 = load i32, i32* %field_width, align 4, !tbaa !15
  %call249 = call i32 @c_itoa(i8* %add.ptr235, i64 %sub237, i64 %172, i32 10, i32 %173, i32 %174)
  %175 = load i32, i32* %i, align 4, !tbaa !15
  %add250 = add nsw i32 %175, %call249
  store i32 %add250, i32* %i, align 4, !tbaa !15
  br label %if.end415

if.else251:                                       ; preds = %land.lhs.true230, %if.else227
  %176 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp252 = icmp eq i32 %176, 100
  br i1 %cmp252, label %land.lhs.true254, label %if.else275

land.lhs.true254:                                 ; preds = %if.else251
  %177 = load i32, i32* %len_mod, align 4, !tbaa !15
  %cmp255 = icmp eq i32 %177, 113
  br i1 %cmp255, label %if.then257, label %if.else275

if.then257:                                       ; preds = %land.lhs.true254
  %178 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %179 = load i32, i32* %i, align 4, !tbaa !15
  %idx.ext258 = sext i32 %179 to i64
  %add.ptr259 = getelementptr inbounds i8, i8* %178, i64 %idx.ext258
  %180 = load i64, i64* %buf_size.addr, align 8, !tbaa !12
  %181 = load i32, i32* %i, align 4, !tbaa !15
  %conv260 = sext i32 %181 to i64
  %sub261 = sub i64 %180, %conv260
  %182 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8, !tbaa !3
  %gp_offset_p262 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %182, i32 0, i32 0
  %gp_offset263 = load i32, i32* %gp_offset_p262, align 8
  %fits_in_gp264 = icmp ule i32 %gp_offset263, 40
  br i1 %fits_in_gp264, label %vaarg.in_reg265, label %vaarg.in_mem267

vaarg.in_reg265:                                  ; preds = %if.then257
  %183 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %182, i32 0, i32 3
  %reg_save_area266 = load i8*, i8** %183, align 8
  %184 = getelementptr i8, i8* %reg_save_area266, i32 %gp_offset263
  %185 = bitcast i8* %184 to i64*
  %186 = add i32 %gp_offset263, 8
  store i32 %186, i32* %gp_offset_p262, align 8
  br label %vaarg.end271

vaarg.in_mem267:                                  ; preds = %if.then257
  %overflow_arg_area_p268 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %182, i32 0, i32 2
  %overflow_arg_area269 = load i8*, i8** %overflow_arg_area_p268, align 8
  %187 = bitcast i8* %overflow_arg_area269 to i64*
  %overflow_arg_area.next270 = getelementptr i8, i8* %overflow_arg_area269, i32 8
  store i8* %overflow_arg_area.next270, i8** %overflow_arg_area_p268, align 8
  br label %vaarg.end271

vaarg.end271:                                     ; preds = %vaarg.in_mem267, %vaarg.in_reg265
  %vaarg.addr272 = phi i64* [ %185, %vaarg.in_reg265 ], [ %187, %vaarg.in_mem267 ]
  %188 = load i64, i64* %vaarg.addr272, align 8
  %189 = load i32, i32* %flags, align 4, !tbaa !15
  %190 = load i32, i32* %field_width, align 4, !tbaa !15
  %call273 = call i32 @c_itoa(i8* %add.ptr259, i64 %sub261, i64 %188, i32 10, i32 %189, i32 %190)
  %191 = load i32, i32* %i, align 4, !tbaa !15
  %add274 = add nsw i32 %191, %call273
  store i32 %add274, i32* %i, align 4, !tbaa !15
  br label %if.end414

if.else275:                                       ; preds = %land.lhs.true254, %if.else251
  %192 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp276 = icmp eq i32 %192, 120
  br i1 %cmp276, label %land.lhs.true281, label %lor.lhs.false278

lor.lhs.false278:                                 ; preds = %if.else275
  %193 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp279 = icmp eq i32 %193, 117
  br i1 %cmp279, label %land.lhs.true281, label %if.else306

land.lhs.true281:                                 ; preds = %lor.lhs.false278, %if.else275
  %194 = load i32, i32* %len_mod, align 4, !tbaa !15
  %cmp282 = icmp eq i32 %194, 0
  br i1 %cmp282, label %if.then284, label %if.else306

if.then284:                                       ; preds = %land.lhs.true281
  %195 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %196 = load i32, i32* %i, align 4, !tbaa !15
  %idx.ext285 = sext i32 %196 to i64
  %add.ptr286 = getelementptr inbounds i8, i8* %195, i64 %idx.ext285
  %197 = load i64, i64* %buf_size.addr, align 8, !tbaa !12
  %198 = load i32, i32* %i, align 4, !tbaa !15
  %conv287 = sext i32 %198 to i64
  %sub288 = sub i64 %197, %conv287
  %199 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8, !tbaa !3
  %gp_offset_p289 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %199, i32 0, i32 0
  %gp_offset290 = load i32, i32* %gp_offset_p289, align 8
  %fits_in_gp291 = icmp ule i32 %gp_offset290, 40
  br i1 %fits_in_gp291, label %vaarg.in_reg292, label %vaarg.in_mem294

vaarg.in_reg292:                                  ; preds = %if.then284
  %200 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %199, i32 0, i32 3
  %reg_save_area293 = load i8*, i8** %200, align 8
  %201 = getelementptr i8, i8* %reg_save_area293, i32 %gp_offset290
  %202 = bitcast i8* %201 to i32*
  %203 = add i32 %gp_offset290, 8
  store i32 %203, i32* %gp_offset_p289, align 8
  br label %vaarg.end298

vaarg.in_mem294:                                  ; preds = %if.then284
  %overflow_arg_area_p295 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %199, i32 0, i32 2
  %overflow_arg_area296 = load i8*, i8** %overflow_arg_area_p295, align 8
  %204 = bitcast i8* %overflow_arg_area296 to i32*
  %overflow_arg_area.next297 = getelementptr i8, i8* %overflow_arg_area296, i32 8
  store i8* %overflow_arg_area.next297, i8** %overflow_arg_area_p295, align 8
  br label %vaarg.end298

vaarg.end298:                                     ; preds = %vaarg.in_mem294, %vaarg.in_reg292
  %vaarg.addr299 = phi i32* [ %202, %vaarg.in_reg292 ], [ %204, %vaarg.in_mem294 ]
  %205 = load i32, i32* %vaarg.addr299, align 4
  %conv300 = zext i32 %205 to i64
  %206 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp301 = icmp eq i32 %206, 120
  %207 = zext i1 %cmp301 to i64
  %cond303 = select i1 %cmp301, i32 16, i32 10
  %208 = load i32, i32* %flags, align 4, !tbaa !15
  %209 = load i32, i32* %field_width, align 4, !tbaa !15
  %call304 = call i32 @c_itoa(i8* %add.ptr286, i64 %sub288, i64 %conv300, i32 %cond303, i32 %208, i32 %209)
  %210 = load i32, i32* %i, align 4, !tbaa !15
  %add305 = add nsw i32 %210, %call304
  store i32 %add305, i32* %i, align 4, !tbaa !15
  br label %if.end413

if.else306:                                       ; preds = %land.lhs.true281, %lor.lhs.false278
  %211 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp307 = icmp eq i32 %211, 120
  br i1 %cmp307, label %land.lhs.true312, label %lor.lhs.false309

lor.lhs.false309:                                 ; preds = %if.else306
  %212 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp310 = icmp eq i32 %212, 117
  br i1 %cmp310, label %land.lhs.true312, label %if.else336

land.lhs.true312:                                 ; preds = %lor.lhs.false309, %if.else306
  %213 = load i32, i32* %len_mod, align 4, !tbaa !15
  %cmp313 = icmp eq i32 %213, 108
  br i1 %cmp313, label %if.then315, label %if.else336

if.then315:                                       ; preds = %land.lhs.true312
  %214 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %215 = load i32, i32* %i, align 4, !tbaa !15
  %idx.ext316 = sext i32 %215 to i64
  %add.ptr317 = getelementptr inbounds i8, i8* %214, i64 %idx.ext316
  %216 = load i64, i64* %buf_size.addr, align 8, !tbaa !12
  %217 = load i32, i32* %i, align 4, !tbaa !15
  %conv318 = sext i32 %217 to i64
  %sub319 = sub i64 %216, %conv318
  %218 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8, !tbaa !3
  %gp_offset_p320 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %218, i32 0, i32 0
  %gp_offset321 = load i32, i32* %gp_offset_p320, align 8
  %fits_in_gp322 = icmp ule i32 %gp_offset321, 40
  br i1 %fits_in_gp322, label %vaarg.in_reg323, label %vaarg.in_mem325

vaarg.in_reg323:                                  ; preds = %if.then315
  %219 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %218, i32 0, i32 3
  %reg_save_area324 = load i8*, i8** %219, align 8
  %220 = getelementptr i8, i8* %reg_save_area324, i32 %gp_offset321
  %221 = bitcast i8* %220 to i64*
  %222 = add i32 %gp_offset321, 8
  store i32 %222, i32* %gp_offset_p320, align 8
  br label %vaarg.end329

vaarg.in_mem325:                                  ; preds = %if.then315
  %overflow_arg_area_p326 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %218, i32 0, i32 2
  %overflow_arg_area327 = load i8*, i8** %overflow_arg_area_p326, align 8
  %223 = bitcast i8* %overflow_arg_area327 to i64*
  %overflow_arg_area.next328 = getelementptr i8, i8* %overflow_arg_area327, i32 8
  store i8* %overflow_arg_area.next328, i8** %overflow_arg_area_p326, align 8
  br label %vaarg.end329

vaarg.end329:                                     ; preds = %vaarg.in_mem325, %vaarg.in_reg323
  %vaarg.addr330 = phi i64* [ %221, %vaarg.in_reg323 ], [ %223, %vaarg.in_mem325 ]
  %224 = load i64, i64* %vaarg.addr330, align 8
  %225 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp331 = icmp eq i32 %225, 120
  %226 = zext i1 %cmp331 to i64
  %cond333 = select i1 %cmp331, i32 16, i32 10
  %227 = load i32, i32* %flags, align 4, !tbaa !15
  %228 = load i32, i32* %field_width, align 4, !tbaa !15
  %call334 = call i32 @c_itoa(i8* %add.ptr317, i64 %sub319, i64 %224, i32 %cond333, i32 %227, i32 %228)
  %229 = load i32, i32* %i, align 4, !tbaa !15
  %add335 = add nsw i32 %229, %call334
  store i32 %add335, i32* %i, align 4, !tbaa !15
  br label %if.end412

if.else336:                                       ; preds = %land.lhs.true312, %lor.lhs.false309
  %230 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp337 = icmp eq i32 %230, 120
  br i1 %cmp337, label %land.lhs.true342, label %lor.lhs.false339

lor.lhs.false339:                                 ; preds = %if.else336
  %231 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp340 = icmp eq i32 %231, 117
  br i1 %cmp340, label %land.lhs.true342, label %if.else366

land.lhs.true342:                                 ; preds = %lor.lhs.false339, %if.else336
  %232 = load i32, i32* %len_mod, align 4, !tbaa !15
  %cmp343 = icmp eq i32 %232, 122
  br i1 %cmp343, label %if.then345, label %if.else366

if.then345:                                       ; preds = %land.lhs.true342
  %233 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %234 = load i32, i32* %i, align 4, !tbaa !15
  %idx.ext346 = sext i32 %234 to i64
  %add.ptr347 = getelementptr inbounds i8, i8* %233, i64 %idx.ext346
  %235 = load i64, i64* %buf_size.addr, align 8, !tbaa !12
  %236 = load i32, i32* %i, align 4, !tbaa !15
  %conv348 = sext i32 %236 to i64
  %sub349 = sub i64 %235, %conv348
  %237 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8, !tbaa !3
  %gp_offset_p350 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %237, i32 0, i32 0
  %gp_offset351 = load i32, i32* %gp_offset_p350, align 8
  %fits_in_gp352 = icmp ule i32 %gp_offset351, 40
  br i1 %fits_in_gp352, label %vaarg.in_reg353, label %vaarg.in_mem355

vaarg.in_reg353:                                  ; preds = %if.then345
  %238 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %237, i32 0, i32 3
  %reg_save_area354 = load i8*, i8** %238, align 8
  %239 = getelementptr i8, i8* %reg_save_area354, i32 %gp_offset351
  %240 = bitcast i8* %239 to i64*
  %241 = add i32 %gp_offset351, 8
  store i32 %241, i32* %gp_offset_p350, align 8
  br label %vaarg.end359

vaarg.in_mem355:                                  ; preds = %if.then345
  %overflow_arg_area_p356 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %237, i32 0, i32 2
  %overflow_arg_area357 = load i8*, i8** %overflow_arg_area_p356, align 8
  %242 = bitcast i8* %overflow_arg_area357 to i64*
  %overflow_arg_area.next358 = getelementptr i8, i8* %overflow_arg_area357, i32 8
  store i8* %overflow_arg_area.next358, i8** %overflow_arg_area_p356, align 8
  br label %vaarg.end359

vaarg.end359:                                     ; preds = %vaarg.in_mem355, %vaarg.in_reg353
  %vaarg.addr360 = phi i64* [ %240, %vaarg.in_reg353 ], [ %242, %vaarg.in_mem355 ]
  %243 = load i64, i64* %vaarg.addr360, align 8
  %244 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp361 = icmp eq i32 %244, 120
  %245 = zext i1 %cmp361 to i64
  %cond363 = select i1 %cmp361, i32 16, i32 10
  %246 = load i32, i32* %flags, align 4, !tbaa !15
  %247 = load i32, i32* %field_width, align 4, !tbaa !15
  %call364 = call i32 @c_itoa(i8* %add.ptr347, i64 %sub349, i64 %243, i32 %cond363, i32 %246, i32 %247)
  %248 = load i32, i32* %i, align 4, !tbaa !15
  %add365 = add nsw i32 %248, %call364
  store i32 %add365, i32* %i, align 4, !tbaa !15
  br label %if.end411

if.else366:                                       ; preds = %land.lhs.true342, %lor.lhs.false339
  %249 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp367 = icmp eq i32 %249, 112
  br i1 %cmp367, label %if.then369, label %if.else409

if.then369:                                       ; preds = %if.else366
  %250 = bitcast i64* %num to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %250) #5
  %251 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8, !tbaa !3
  %gp_offset_p370 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %251, i32 0, i32 0
  %gp_offset371 = load i32, i32* %gp_offset_p370, align 8
  %fits_in_gp372 = icmp ule i32 %gp_offset371, 40
  br i1 %fits_in_gp372, label %vaarg.in_reg373, label %vaarg.in_mem375

vaarg.in_reg373:                                  ; preds = %if.then369
  %252 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %251, i32 0, i32 3
  %reg_save_area374 = load i8*, i8** %252, align 8
  %253 = getelementptr i8, i8* %reg_save_area374, i32 %gp_offset371
  %254 = bitcast i8* %253 to i8**
  %255 = add i32 %gp_offset371, 8
  store i32 %255, i32* %gp_offset_p370, align 8
  br label %vaarg.end379

vaarg.in_mem375:                                  ; preds = %if.then369
  %overflow_arg_area_p376 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %251, i32 0, i32 2
  %overflow_arg_area377 = load i8*, i8** %overflow_arg_area_p376, align 8
  %256 = bitcast i8* %overflow_arg_area377 to i8**
  %overflow_arg_area.next378 = getelementptr i8, i8* %overflow_arg_area377, i32 8
  store i8* %overflow_arg_area.next378, i8** %overflow_arg_area_p376, align 8
  br label %vaarg.end379

vaarg.end379:                                     ; preds = %vaarg.in_mem375, %vaarg.in_reg373
  %vaarg.addr380 = phi i8** [ %254, %vaarg.in_reg373 ], [ %256, %vaarg.in_mem375 ]
  %257 = load i8*, i8** %vaarg.addr380, align 8
  %258 = ptrtoint i8* %257 to i64
  store i64 %258, i64* %num, align 8, !tbaa !12
  br label %do.body381

do.body381:                                       ; preds = %vaarg.end379
  %259 = load i32, i32* %i, align 4, !tbaa !15
  %260 = load i64, i64* %buf_size.addr, align 8, !tbaa !12
  %conv382 = trunc i64 %260 to i32
  %cmp383 = icmp slt i32 %259, %conv382
  br i1 %cmp383, label %if.then385, label %if.end388

if.then385:                                       ; preds = %do.body381
  %261 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %262 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom386 = sext i32 %262 to i64
  %arrayidx387 = getelementptr inbounds i8, i8* %261, i64 %idxprom386
  store i8 48, i8* %arrayidx387, align 1, !tbaa !14
  br label %if.end388

if.end388:                                        ; preds = %if.then385, %do.body381
  %263 = load i32, i32* %i, align 4, !tbaa !15
  %inc389 = add nsw i32 %263, 1
  store i32 %inc389, i32* %i, align 4, !tbaa !15
  br label %do.cond390

do.cond390:                                       ; preds = %if.end388
  br label %do.end391

do.end391:                                        ; preds = %do.cond390
  br label %do.body392

do.body392:                                       ; preds = %do.end391
  %264 = load i32, i32* %i, align 4, !tbaa !15
  %265 = load i64, i64* %buf_size.addr, align 8, !tbaa !12
  %conv393 = trunc i64 %265 to i32
  %cmp394 = icmp slt i32 %264, %conv393
  br i1 %cmp394, label %if.then396, label %if.end399

if.then396:                                       ; preds = %do.body392
  %266 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %267 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom397 = sext i32 %267 to i64
  %arrayidx398 = getelementptr inbounds i8, i8* %266, i64 %idxprom397
  store i8 120, i8* %arrayidx398, align 1, !tbaa !14
  br label %if.end399

if.end399:                                        ; preds = %if.then396, %do.body392
  %268 = load i32, i32* %i, align 4, !tbaa !15
  %inc400 = add nsw i32 %268, 1
  store i32 %inc400, i32* %i, align 4, !tbaa !15
  br label %do.cond401

do.cond401:                                       ; preds = %if.end399
  br label %do.end402

do.end402:                                        ; preds = %do.cond401
  %269 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %270 = load i32, i32* %i, align 4, !tbaa !15
  %idx.ext403 = sext i32 %270 to i64
  %add.ptr404 = getelementptr inbounds i8, i8* %269, i64 %idx.ext403
  %271 = load i64, i64* %buf_size.addr, align 8, !tbaa !12
  %272 = load i32, i32* %i, align 4, !tbaa !15
  %conv405 = sext i32 %272 to i64
  %sub406 = sub i64 %271, %conv405
  %273 = load i64, i64* %num, align 8, !tbaa !12
  %274 = load i32, i32* %flags, align 4, !tbaa !15
  %call407 = call i32 @c_itoa(i8* %add.ptr404, i64 %sub406, i64 %273, i32 16, i32 %274, i32 0)
  %275 = load i32, i32* %i, align 4, !tbaa !15
  %add408 = add nsw i32 %275, %call407
  store i32 %add408, i32* %i, align 4, !tbaa !15
  %276 = bitcast i64* %num to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %276) #5
  br label %if.end410

if.else409:                                       ; preds = %if.else366
  call void @abort() #17
  unreachable

if.end410:                                        ; preds = %do.end402
  br label %if.end411

if.end411:                                        ; preds = %if.end410, %vaarg.end359
  br label %if.end412

if.end412:                                        ; preds = %if.end411, %vaarg.end329
  br label %if.end413

if.end413:                                        ; preds = %if.end412, %vaarg.end298
  br label %if.end414

if.end414:                                        ; preds = %if.end413, %vaarg.end271
  br label %if.end415

if.end415:                                        ; preds = %if.end414, %vaarg.end247
  br label %if.end416

if.end416:                                        ; preds = %if.end415, %vaarg.end223
  br label %if.end417

if.end417:                                        ; preds = %if.end416, %vaarg.end198
  br label %if.end418

if.end418:                                        ; preds = %if.end417, %do.end180
  br label %if.end419

if.end419:                                        ; preds = %if.end418, %if.end153
  br label %if.end420

if.end420:                                        ; preds = %if.end419, %do.end
  br label %while.cond

while.end421:                                     ; preds = %while.cond
  %277 = load i64, i64* %buf_size.addr, align 8, !tbaa !12
  %cmp422 = icmp ugt i64 %277, 0
  br i1 %cmp422, label %if.then424, label %if.end436

if.then424:                                       ; preds = %while.end421
  %278 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %279 = load i32, i32* %i, align 4, !tbaa !15
  %280 = load i64, i64* %buf_size.addr, align 8, !tbaa !12
  %conv425 = trunc i64 %280 to i32
  %cmp426 = icmp slt i32 %279, %conv425
  br i1 %cmp426, label %cond.true428, label %cond.false429

cond.true428:                                     ; preds = %if.then424
  %281 = load i32, i32* %i, align 4, !tbaa !15
  br label %cond.end432

cond.false429:                                    ; preds = %if.then424
  %282 = load i64, i64* %buf_size.addr, align 8, !tbaa !12
  %conv430 = trunc i64 %282 to i32
  %sub431 = sub nsw i32 %conv430, 1
  br label %cond.end432

cond.end432:                                      ; preds = %cond.false429, %cond.true428
  %cond433 = phi i32 [ %281, %cond.true428 ], [ %sub431, %cond.false429 ]
  %idxprom434 = sext i32 %cond433 to i64
  %arrayidx435 = getelementptr inbounds i8, i8* %278, i64 %idxprom434
  store i8 0, i8* %arrayidx435, align 1, !tbaa !14
  br label %if.end436

if.end436:                                        ; preds = %cond.end432, %while.end421
  %283 = load i32, i32* %i, align 4, !tbaa !15
  %284 = bitcast i32* %field_width to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %284) #5
  %285 = bitcast i32* %precision to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %285) #5
  %286 = bitcast i32* %flags to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %286) #5
  %287 = bitcast i32* %len_mod to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %287) #5
  %288 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %288) #5
  %289 = bitcast i32* %ch to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %289) #5
  ret i32 %283
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @c_itoa(i8* %buf, i64 %buf_size, i64 %num, i32 %base, i32 %flags, i32 %field_width) #0 {
entry:
  %buf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %num.addr = alloca i64, align 8
  %base.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %field_width.addr = alloca i32, align 4
  %tmp = alloca [40 x i8], align 16
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %neg = alloca i32, align 4
  %rem = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %buf_size, i64* %buf_size.addr, align 8, !tbaa !12
  store i64 %num, i64* %num.addr, align 8, !tbaa !35
  store i32 %base, i32* %base.addr, align 4, !tbaa !15
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !15
  store i32 %field_width, i32* %field_width.addr, align 4, !tbaa !15
  %0 = bitcast [40 x i8]* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* %0) #5
  %1 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  store i32 0, i32* %i, align 4, !tbaa !15
  %2 = bitcast i32* %k to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  store i32 0, i32* %k, align 4, !tbaa !15
  %3 = bitcast i32* %neg to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  store i32 0, i32* %neg, align 4, !tbaa !15
  %4 = load i64, i64* %num.addr, align 8, !tbaa !35
  %cmp = icmp slt i64 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %neg, align 4, !tbaa !15
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %neg, align 4, !tbaa !15
  %6 = load i64, i64* %num.addr, align 8, !tbaa !35
  %sub = sub nsw i64 0, %6
  store i64 %sub, i64* %num.addr, align 8, !tbaa !35
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %7 = bitcast i32* %rem to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %7) #5
  %8 = load i64, i64* %num.addr, align 8, !tbaa !35
  %9 = load i32, i32* %base.addr, align 4, !tbaa !15
  %conv = sext i32 %9 to i64
  %rem1 = srem i64 %8, %conv
  %conv2 = trunc i64 %rem1 to i32
  store i32 %conv2, i32* %rem, align 4, !tbaa !15
  %10 = load i32, i32* %rem, align 4, !tbaa !15
  %cmp3 = icmp slt i32 %10, 10
  br i1 %cmp3, label %if.then5, label %if.else

if.then5:                                         ; preds = %do.body
  %11 = load i32, i32* %rem, align 4, !tbaa !15
  %add = add nsw i32 48, %11
  %conv6 = trunc i32 %add to i8
  %12 = load i32, i32* %k, align 4, !tbaa !15
  %inc7 = add nsw i32 %12, 1
  store i32 %inc7, i32* %k, align 4, !tbaa !15
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds [40 x i8], [40 x i8]* %tmp, i64 0, i64 %idxprom
  store i8 %conv6, i8* %arrayidx, align 1, !tbaa !14
  br label %if.end14

if.else:                                          ; preds = %do.body
  %13 = load i32, i32* %rem, align 4, !tbaa !15
  %sub8 = sub nsw i32 %13, 10
  %add9 = add nsw i32 97, %sub8
  %conv10 = trunc i32 %add9 to i8
  %14 = load i32, i32* %k, align 4, !tbaa !15
  %inc11 = add nsw i32 %14, 1
  store i32 %inc11, i32* %k, align 4, !tbaa !15
  %idxprom12 = sext i32 %14 to i64
  %arrayidx13 = getelementptr inbounds [40 x i8], [40 x i8]* %tmp, i64 0, i64 %idxprom12
  store i8 %conv10, i8* %arrayidx13, align 1, !tbaa !14
  br label %if.end14

if.end14:                                         ; preds = %if.else, %if.then5
  %15 = load i32, i32* %base.addr, align 4, !tbaa !15
  %conv15 = sext i32 %15 to i64
  %16 = load i64, i64* %num.addr, align 8, !tbaa !35
  %div = sdiv i64 %16, %conv15
  store i64 %div, i64* %num.addr, align 8, !tbaa !35
  %17 = bitcast i32* %rem to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %17) #5
  br label %do.cond

do.cond:                                          ; preds = %if.end14
  %18 = load i64, i64* %num.addr, align 8, !tbaa !35
  %cmp16 = icmp sgt i64 %18, 0
  br i1 %cmp16, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %19 = load i32, i32* %flags.addr, align 4, !tbaa !15
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %if.then18, label %if.end26

if.then18:                                        ; preds = %do.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then18
  %20 = load i32, i32* %k, align 4, !tbaa !15
  %21 = load i32, i32* %field_width.addr, align 4, !tbaa !15
  %cmp19 = icmp slt i32 %20, %21
  br i1 %cmp19, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %22 = load i32, i32* %k, align 4, !tbaa !15
  %cmp21 = icmp slt i32 %22, 39
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %23 = phi i1 [ false, %while.cond ], [ %cmp21, %land.rhs ]
  br i1 %23, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %24 = load i32, i32* %k, align 4, !tbaa !15
  %inc23 = add nsw i32 %24, 1
  store i32 %inc23, i32* %k, align 4, !tbaa !15
  %idxprom24 = sext i32 %24 to i64
  %arrayidx25 = getelementptr inbounds [40 x i8], [40 x i8]* %tmp, i64 0, i64 %idxprom24
  store i8 48, i8* %arrayidx25, align 1, !tbaa !14
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %if.end26

if.end26:                                         ; preds = %while.end, %do.end
  %25 = load i32, i32* %neg, align 4, !tbaa !15
  %tobool27 = icmp ne i32 %25, 0
  br i1 %tobool27, label %if.then28, label %if.end32

if.then28:                                        ; preds = %if.end26
  %26 = load i32, i32* %k, align 4, !tbaa !15
  %inc29 = add nsw i32 %26, 1
  store i32 %inc29, i32* %k, align 4, !tbaa !15
  %idxprom30 = sext i32 %26 to i64
  %arrayidx31 = getelementptr inbounds [40 x i8], [40 x i8]* %tmp, i64 0, i64 %idxprom30
  store i8 45, i8* %arrayidx31, align 1, !tbaa !14
  br label %if.end32

if.end32:                                         ; preds = %if.then28, %if.end26
  br label %while.cond33

while.cond33:                                     ; preds = %do.end49, %if.end32
  %27 = load i32, i32* %k, align 4, !tbaa !15
  %dec = add nsw i32 %27, -1
  store i32 %dec, i32* %k, align 4, !tbaa !15
  %cmp34 = icmp sge i32 %dec, 0
  br i1 %cmp34, label %while.body36, label %while.end50

while.body36:                                     ; preds = %while.cond33
  br label %do.body37

do.body37:                                        ; preds = %while.body36
  %28 = load i32, i32* %i, align 4, !tbaa !15
  %29 = load i64, i64* %buf_size.addr, align 8, !tbaa !12
  %conv38 = trunc i64 %29 to i32
  %cmp39 = icmp slt i32 %28, %conv38
  br i1 %cmp39, label %if.then41, label %if.end46

if.then41:                                        ; preds = %do.body37
  %30 = load i32, i32* %k, align 4, !tbaa !15
  %idxprom42 = sext i32 %30 to i64
  %arrayidx43 = getelementptr inbounds [40 x i8], [40 x i8]* %tmp, i64 0, i64 %idxprom42
  %31 = load i8, i8* %arrayidx43, align 1, !tbaa !14
  %32 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %33 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom44 = sext i32 %33 to i64
  %arrayidx45 = getelementptr inbounds i8, i8* %32, i64 %idxprom44
  store i8 %31, i8* %arrayidx45, align 1, !tbaa !14
  br label %if.end46

if.end46:                                         ; preds = %if.then41, %do.body37
  %34 = load i32, i32* %i, align 4, !tbaa !15
  %inc47 = add nsw i32 %34, 1
  store i32 %inc47, i32* %i, align 4, !tbaa !15
  br label %do.cond48

do.cond48:                                        ; preds = %if.end46
  br label %do.end49

do.end49:                                         ; preds = %do.cond48
  br label %while.cond33

while.end50:                                      ; preds = %while.cond33
  %35 = load i32, i32* %i, align 4, !tbaa !15
  %36 = bitcast i32* %neg to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %36) #5
  %37 = bitcast i32* %k to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %37) #5
  %38 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %38) #5
  %39 = bitcast [40 x i8]* %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 40, i8* %39) #5
  ret i32 %35
}

; Function Attrs: cold noreturn
declare void @abort() #10

; Function Attrs: nounwind ssp uwtable
define weak i32 @c_snprintf(i8* %buf, i64 %buf_size, i8* %fmt, ...) #0 {
entry:
  %buf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %fmt.addr = alloca i8*, align 8
  %result = alloca i32, align 4
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %buf_size, i64* %buf_size.addr, align 8, !tbaa !12
  store i8* %fmt, i8** %fmt.addr, align 8, !tbaa !3
  %0 = bitcast i32* %result to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %1) #5
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %2 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %3 = load i64, i64* %buf_size.addr, align 8, !tbaa !12
  %4 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %call = call i32 @c_vsnprintf(i8* %2, i64 %3, i8* %4, %struct.__va_list_tag* %arraydecay2)
  store i32 %call, i32* %result, align 4, !tbaa !15
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*
  call void @llvm.va_end(i8* %arraydecay34)
  %5 = load i32, i32* %result, align 4, !tbaa !15
  %6 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %6) #5
  %7 = bitcast i32* %result to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %7) #5
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define weak i8* @c_strnstr(i8* %s, i8* %find, i64 %slen) #0 {
entry:
  %retval = alloca i8*, align 8
  %s.addr = alloca i8*, align 8
  %find.addr = alloca i8*, align 8
  %slen.addr = alloca i64, align 8
  %find_length = alloca i64, align 8
  %i = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 8, !tbaa !3
  store i8* %find, i8** %find.addr, align 8, !tbaa !3
  store i64 %slen, i64* %slen.addr, align 8, !tbaa !12
  %0 = bitcast i64* %find_length to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load i8*, i8** %find.addr, align 8, !tbaa !3
  %call = call i64 @strlen(i8* %1)
  store i64 %call, i64* %find_length, align 8, !tbaa !12
  %2 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  store i64 0, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i64, i64* %i, align 8, !tbaa !12
  %4 = load i64, i64* %slen.addr, align 8, !tbaa !12
  %cmp = icmp ult i64 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i64, i64* %i, align 8, !tbaa !12
  %6 = load i64, i64* %find_length, align 8, !tbaa !12
  %add = add i64 %5, %6
  %7 = load i64, i64* %slen.addr, align 8, !tbaa !12
  %cmp1 = icmp ugt i64 %add, %7
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %for.body
  %8 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %9 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx = getelementptr inbounds i8, i8* %8, i64 %9
  %10 = load i8*, i8** %find.addr, align 8, !tbaa !3
  %11 = load i64, i64* %find_length, align 8, !tbaa !12
  %call2 = call i32 @strncmp(i8* %arrayidx, i8* %10, i64 %11)
  %cmp3 = icmp eq i32 %call2, 0
  br i1 %cmp3, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.end
  %12 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %13 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx5 = getelementptr inbounds i8, i8* %12, i64 %13
  store i8* %arrayidx5, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end6:                                          ; preds = %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %14 = load i64, i64* %i, align 8, !tbaa !12
  %inc = add i64 %14, 1
  store i64 %inc, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then4, %if.then
  %15 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %15) #5
  %16 = bitcast i64* %find_length to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %16) #5
  %17 = load i8*, i8** %retval, align 8
  ret i8* %17
}

; Function Attrs: nounwind ssp uwtable
define weak void @cs_to_hex(i8* %to, i8* %p, i64 %len) #0 {
entry:
  %to.addr = alloca i8*, align 8
  %p.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  store i8* %to, i8** %to.addr, align 8, !tbaa !3
  store i8* %p, i8** %p.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %len.addr, align 8, !tbaa !12
  %dec = add i64 %0, -1
  store i64 %dec, i64* %len.addr, align 8, !tbaa !12
  %tobool = icmp ne i64 %0, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i8*, i8** @cs_to_hex.hex, align 8, !tbaa !3
  %2 = load i8*, i8** %p.addr, align 8, !tbaa !3
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = zext i8 %3 to i32
  %shr = ashr i32 %conv, 4
  %idxprom = sext i32 %shr to i64
  %arrayidx1 = getelementptr inbounds i8, i8* %1, i64 %idxprom
  %4 = load i8, i8* %arrayidx1, align 1, !tbaa !14
  %5 = load i8*, i8** %to.addr, align 8, !tbaa !3
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %to.addr, align 8, !tbaa !3
  store i8 %4, i8* %5, align 1, !tbaa !14
  %6 = load i8*, i8** @cs_to_hex.hex, align 8, !tbaa !3
  %7 = load i8*, i8** %p.addr, align 8, !tbaa !3
  %arrayidx2 = getelementptr inbounds i8, i8* %7, i64 0
  %8 = load i8, i8* %arrayidx2, align 1, !tbaa !14
  %conv3 = zext i8 %8 to i32
  %and = and i32 %conv3, 15
  %idxprom4 = sext i32 %and to i64
  %arrayidx5 = getelementptr inbounds i8, i8* %6, i64 %idxprom4
  %9 = load i8, i8* %arrayidx5, align 1, !tbaa !14
  %10 = load i8*, i8** %to.addr, align 8, !tbaa !3
  %incdec.ptr6 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr6, i8** %to.addr, align 8, !tbaa !3
  store i8 %9, i8* %10, align 1, !tbaa !14
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i8*, i8** %p.addr, align 8, !tbaa !3
  %incdec.ptr7 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr7, i8** %p.addr, align 8, !tbaa !3
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i8*, i8** %to.addr, align 8, !tbaa !3
  store i8 0, i8* %12, align 1, !tbaa !14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak void @cs_from_hex(i8* %to, i8* %p, i64 %len) #0 {
entry:
  %to.addr = alloca i8*, align 8
  %p.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %i = alloca i64, align 8
  store i8* %to, i8** %to.addr, align 8, !tbaa !3
  store i8* %p, i8** %p.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  store i64 0, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i, align 8, !tbaa !12
  %2 = load i64, i64* %len.addr, align 8, !tbaa !12
  %cmp = icmp ult i64 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %p.addr, align 8, !tbaa !3
  %4 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %4
  %5 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = sext i8 %5 to i32
  %call = call i32 @fourbit(i32 %conv)
  %shl = shl i32 %call, 4
  %6 = load i8*, i8** %p.addr, align 8, !tbaa !3
  %7 = load i64, i64* %i, align 8, !tbaa !12
  %add = add i64 %7, 1
  %arrayidx1 = getelementptr inbounds i8, i8* %6, i64 %add
  %8 = load i8, i8* %arrayidx1, align 1, !tbaa !14
  %conv2 = sext i8 %8 to i32
  %call3 = call i32 @fourbit(i32 %conv2)
  %add4 = add nsw i32 %shl, %call3
  %conv5 = trunc i32 %add4 to i8
  %9 = load i8*, i8** %to.addr, align 8, !tbaa !3
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %to.addr, align 8, !tbaa !3
  store i8 %conv5, i8* %9, align 1, !tbaa !14
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i64, i64* %i, align 8, !tbaa !12
  %add6 = add i64 %10, 2
  store i64 %add6, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i8*, i8** %to.addr, align 8, !tbaa !3
  store i8 0, i8* %11, align 1, !tbaa !14
  %12 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %12) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @fourbit(i32 %ch) #0 {
entry:
  %retval = alloca i32, align 4
  %ch.addr = alloca i32, align 4
  store i32 %ch, i32* %ch.addr, align 4, !tbaa !15
  %0 = load i32, i32* %ch.addr, align 4, !tbaa !15
  %cmp = icmp sge i32 %0, 48
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ch.addr, align 4, !tbaa !15
  %cmp1 = icmp sle i32 %1, 57
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %2 = load i32, i32* %ch.addr, align 4, !tbaa !15
  %sub = sub nsw i32 %2, 48
  store i32 %sub, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  %3 = load i32, i32* %ch.addr, align 4, !tbaa !15
  %cmp2 = icmp sge i32 %3, 97
  br i1 %cmp2, label %land.lhs.true3, label %if.else7

land.lhs.true3:                                   ; preds = %if.else
  %4 = load i32, i32* %ch.addr, align 4, !tbaa !15
  %cmp4 = icmp sle i32 %4, 102
  br i1 %cmp4, label %if.then5, label %if.else7

if.then5:                                         ; preds = %land.lhs.true3
  %5 = load i32, i32* %ch.addr, align 4, !tbaa !15
  %sub6 = sub nsw i32 %5, 97
  %add = add nsw i32 %sub6, 10
  store i32 %add, i32* %retval, align 4
  br label %return

if.else7:                                         ; preds = %land.lhs.true3, %if.else
  %6 = load i32, i32* %ch.addr, align 4, !tbaa !15
  %cmp8 = icmp sge i32 %6, 65
  br i1 %cmp8, label %land.lhs.true9, label %if.end

land.lhs.true9:                                   ; preds = %if.else7
  %7 = load i32, i32* %ch.addr, align 4, !tbaa !15
  %cmp10 = icmp sle i32 %7, 70
  br i1 %cmp10, label %if.then11, label %if.end

if.then11:                                        ; preds = %land.lhs.true9
  %8 = load i32, i32* %ch.addr, align 4, !tbaa !15
  %sub12 = sub nsw i32 %8, 65
  %add13 = add nsw i32 %sub12, 10
  store i32 %add13, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true9, %if.else7
  br label %if.end14

if.end14:                                         ; preds = %if.end
  br label %if.end15

if.end15:                                         ; preds = %if.end14
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end15, %if.then11, %if.then5, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @str_util_lowercase(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 8
  store i8* %s, i8** %s.addr, align 8, !tbaa !3
  %0 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %1 = load i8, i8* %0, align 1, !tbaa !14
  %conv = zext i8 %1 to i32
  %call = call i32 @tolower(i32 %conv) #19
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @mg_casecmp(i8* %s1, i8* %s2) #0 {
entry:
  %s1.addr = alloca i8*, align 8
  %s2.addr = alloca i8*, align 8
  store i8* %s1, i8** %s1.addr, align 8, !tbaa !3
  store i8* %s2, i8** %s2.addr, align 8, !tbaa !3
  %0 = load i8*, i8** %s1.addr, align 8, !tbaa !3
  %1 = load i8*, i8** %s2.addr, align 8, !tbaa !3
  %call = call i32 @mg_ncasecmp(i8* %0, i8* %1, i64 -1)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @mg_asprintf(i8** %buf, i64 %size, i8* %fmt, ...) #0 {
entry:
  %buf.addr = alloca i8**, align 8
  %size.addr = alloca i64, align 8
  %fmt.addr = alloca i8*, align 8
  %ret = alloca i32, align 4
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store i8** %buf, i8*** %buf.addr, align 8, !tbaa !3
  store i64 %size, i64* %size.addr, align 8, !tbaa !12
  store i8* %fmt, i8** %fmt.addr, align 8, !tbaa !3
  %0 = bitcast i32* %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %1) #5
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %2 = load i8**, i8*** %buf.addr, align 8, !tbaa !3
  %3 = load i64, i64* %size.addr, align 8, !tbaa !12
  %4 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %call = call i32 @mg_avprintf(i8** %2, i64 %3, i8* %4, %struct.__va_list_tag* %arraydecay2)
  store i32 %call, i32* %ret, align 4, !tbaa !15
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*
  call void @llvm.va_end(i8* %arraydecay34)
  %5 = load i32, i32* %ret, align 4, !tbaa !15
  %6 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %6) #5
  %7 = bitcast i32* %ret to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %7) #5
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @mg_avprintf(i8** %buf, i64 %size, i8* %fmt, %struct.__va_list_tag* %ap) #0 {
entry:
  %buf.addr = alloca i8**, align 8
  %size.addr = alloca i64, align 8
  %fmt.addr = alloca i8*, align 8
  %ap.addr = alloca %struct.__va_list_tag*, align 8
  %ap_copy = alloca [1 x %struct.__va_list_tag], align 16
  %len = alloca i32, align 4
  store i8** %buf, i8*** %buf.addr, align 8, !tbaa !3
  store i64 %size, i64* %size.addr, align 8, !tbaa !12
  store i8* %fmt, i8** %fmt.addr, align 8, !tbaa !3
  store %struct.__va_list_tag* %ap, %struct.__va_list_tag** %ap.addr, align 8, !tbaa !3
  %0 = bitcast [1 x %struct.__va_list_tag]* %ap_copy to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %0) #5
  %1 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap_copy, i32 0, i32 0
  %2 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8, !tbaa !3
  %3 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  %4 = bitcast %struct.__va_list_tag* %2 to i8*
  call void @llvm.va_copy(i8* %3, i8* %4)
  %5 = load i8**, i8*** %buf.addr, align 8, !tbaa !3
  %6 = load i8*, i8** %5, align 8, !tbaa !3
  %7 = load i64, i64* %size.addr, align 8, !tbaa !12
  %8 = load i8**, i8*** %buf.addr, align 8, !tbaa !3
  %9 = load i8*, i8** %8, align 8, !tbaa !3
  %10 = call i64 @llvm.objectsize.i64.p0i8(i8* %9, i1 false, i1 true)
  %11 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %arraydecay1 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap_copy, i32 0, i32 0
  %call = call i32 @__vsnprintf_chk(i8* %6, i64 %7, i32 0, i64 %10, i8* %11, %struct.__va_list_tag* %arraydecay1)
  store i32 %call, i32* %len, align 4, !tbaa !15
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap_copy, i32 0, i32 0
  %arraydecay23 = bitcast %struct.__va_list_tag* %arraydecay2 to i8*
  call void @llvm.va_end(i8* %arraydecay23)
  %12 = load i32, i32* %len, align 4, !tbaa !15
  %cmp = icmp slt i32 %12, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %13 = load i8**, i8*** %buf.addr, align 8, !tbaa !3
  store i8* null, i8** %13, align 8, !tbaa !3
  br label %while.cond

while.cond:                                       ; preds = %if.end10, %if.then
  %14 = load i32, i32* %len, align 4, !tbaa !15
  %cmp4 = icmp slt i32 %14, 0
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %15 = load i8**, i8*** %buf.addr, align 8, !tbaa !3
  %16 = load i8*, i8** %15, align 8, !tbaa !3
  call void @free(i8* %16)
  %17 = load i64, i64* %size.addr, align 8, !tbaa !12
  %cmp5 = icmp eq i64 %17, 0
  br i1 %cmp5, label %if.then6, label %if.end

if.then6:                                         ; preds = %while.body
  store i64 5, i64* %size.addr, align 8, !tbaa !12
  br label %if.end

if.end:                                           ; preds = %if.then6, %while.body
  %18 = load i64, i64* %size.addr, align 8, !tbaa !12
  %mul = mul i64 %18, 2
  store i64 %mul, i64* %size.addr, align 8, !tbaa !12
  %19 = load i64, i64* %size.addr, align 8, !tbaa !12
  %call7 = call i8* @malloc(i64 %19) #18
  %20 = load i8**, i8*** %buf.addr, align 8, !tbaa !3
  store i8* %call7, i8** %20, align 8, !tbaa !3
  %cmp8 = icmp eq i8* %call7, null
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end
  store i32 -1, i32* %len, align 4, !tbaa !15
  br label %while.end

if.end10:                                         ; preds = %if.end
  %arraydecay11 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap_copy, i32 0, i32 0
  %21 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8, !tbaa !3
  %22 = bitcast %struct.__va_list_tag* %arraydecay11 to i8*
  %23 = bitcast %struct.__va_list_tag* %21 to i8*
  call void @llvm.va_copy(i8* %22, i8* %23)
  %24 = load i8**, i8*** %buf.addr, align 8, !tbaa !3
  %25 = load i8*, i8** %24, align 8, !tbaa !3
  %26 = load i64, i64* %size.addr, align 8, !tbaa !12
  %sub = sub i64 %26, 1
  %27 = load i8**, i8*** %buf.addr, align 8, !tbaa !3
  %28 = load i8*, i8** %27, align 8, !tbaa !3
  %29 = call i64 @llvm.objectsize.i64.p0i8(i8* %28, i1 false, i1 true)
  %30 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %arraydecay12 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap_copy, i32 0, i32 0
  %call13 = call i32 @__vsnprintf_chk(i8* %25, i64 %sub, i32 0, i64 %29, i8* %30, %struct.__va_list_tag* %arraydecay12)
  store i32 %call13, i32* %len, align 4, !tbaa !15
  %arraydecay14 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap_copy, i32 0, i32 0
  %arraydecay1415 = bitcast %struct.__va_list_tag* %arraydecay14 to i8*
  call void @llvm.va_end(i8* %arraydecay1415)
  br label %while.cond

while.end:                                        ; preds = %if.then9, %while.cond
  %31 = load i8**, i8*** %buf.addr, align 8, !tbaa !3
  %32 = load i8*, i8** %31, align 8, !tbaa !3
  %33 = load i32, i32* %len, align 4, !tbaa !15
  %idxprom = sext i32 %33 to i64
  %arrayidx = getelementptr inbounds i8, i8* %32, i64 %idxprom
  store i8 0, i8* %arrayidx, align 1, !tbaa !14
  br label %if.end34

if.else:                                          ; preds = %entry
  %34 = load i32, i32* %len, align 4, !tbaa !15
  %35 = load i64, i64* %size.addr, align 8, !tbaa !12
  %conv = trunc i64 %35 to i32
  %cmp16 = icmp sge i32 %34, %conv
  br i1 %cmp16, label %if.then18, label %if.end33

if.then18:                                        ; preds = %if.else
  %36 = load i32, i32* %len, align 4, !tbaa !15
  %add = add nsw i32 %36, 1
  %conv19 = sext i32 %add to i64
  %call20 = call i8* @malloc(i64 %conv19) #18
  %37 = load i8**, i8*** %buf.addr, align 8, !tbaa !3
  store i8* %call20, i8** %37, align 8, !tbaa !3
  %cmp21 = icmp eq i8* %call20, null
  br i1 %cmp21, label %if.then23, label %if.else24

if.then23:                                        ; preds = %if.then18
  store i32 -1, i32* %len, align 4, !tbaa !15
  br label %if.end32

if.else24:                                        ; preds = %if.then18
  %arraydecay25 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap_copy, i32 0, i32 0
  %38 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8, !tbaa !3
  %39 = bitcast %struct.__va_list_tag* %arraydecay25 to i8*
  %40 = bitcast %struct.__va_list_tag* %38 to i8*
  call void @llvm.va_copy(i8* %39, i8* %40)
  %41 = load i8**, i8*** %buf.addr, align 8, !tbaa !3
  %42 = load i8*, i8** %41, align 8, !tbaa !3
  %43 = load i32, i32* %len, align 4, !tbaa !15
  %add26 = add nsw i32 %43, 1
  %conv27 = sext i32 %add26 to i64
  %44 = load i8**, i8*** %buf.addr, align 8, !tbaa !3
  %45 = load i8*, i8** %44, align 8, !tbaa !3
  %46 = call i64 @llvm.objectsize.i64.p0i8(i8* %45, i1 false, i1 true)
  %47 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %arraydecay28 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap_copy, i32 0, i32 0
  %call29 = call i32 @__vsnprintf_chk(i8* %42, i64 %conv27, i32 0, i64 %46, i8* %47, %struct.__va_list_tag* %arraydecay28)
  store i32 %call29, i32* %len, align 4, !tbaa !15
  %arraydecay30 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap_copy, i32 0, i32 0
  %arraydecay3031 = bitcast %struct.__va_list_tag* %arraydecay30 to i8*
  call void @llvm.va_end(i8* %arraydecay3031)
  br label %if.end32

if.end32:                                         ; preds = %if.else24, %if.then23
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.else
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %while.end
  %48 = load i32, i32* %len, align 4, !tbaa !15
  %49 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %49) #5
  %50 = bitcast [1 x %struct.__va_list_tag]* %ap_copy to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %50) #5
  ret i32 %48
}

; Function Attrs: nounwind
declare void @llvm.va_copy(i8*, i8*) #5

declare i32 @__vsnprintf_chk(i8*, i64, i32, i64, i8*, %struct.__va_list_tag*) #4

; Function Attrs: allocsize(0)
declare i8* @malloc(i64) #11

; Function Attrs: nounwind ssp uwtable
define weak i8* @mg_next_comma_list_entry(i8* %list, %struct.mg_str* %val, %struct.mg_str* %eq_val) #0 {
entry:
  %list.addr = alloca i8*, align 8
  %val.addr = alloca %struct.mg_str*, align 8
  %eq_val.addr = alloca %struct.mg_str*, align 8
  %ret = alloca %struct.mg_str, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  store i8* %list, i8** %list.addr, align 8, !tbaa !3
  store %struct.mg_str* %val, %struct.mg_str** %val.addr, align 8, !tbaa !3
  store %struct.mg_str* %eq_val, %struct.mg_str** %eq_val.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_str* %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %0) #5
  %1 = load i8*, i8** %list.addr, align 8, !tbaa !3
  %call = call { i8*, i64 } @mg_mk_str(i8* %1)
  %2 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %3 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %2, i32 0, i32 0
  %4 = extractvalue { i8*, i64 } %call, 0
  store i8* %4, i8** %3, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %2, i32 0, i32 1
  %6 = extractvalue { i8*, i64 } %call, 1
  store i64 %6, i64* %5, align 8
  %7 = load %struct.mg_str*, %struct.mg_str** %val.addr, align 8, !tbaa !3
  %8 = load %struct.mg_str*, %struct.mg_str** %eq_val.addr, align 8, !tbaa !3
  %9 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %10 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %9, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %9, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %call1 = call { i8*, i64 } @mg_next_comma_list_entry_n(i8* %11, i64 %13, %struct.mg_str* %7, %struct.mg_str* %8)
  %14 = bitcast %struct.mg_str* %ret to { i8*, i64 }*
  %15 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %16 = extractvalue { i8*, i64 } %call1, 0
  store i8* %16, i8** %15, align 8
  %17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %18 = extractvalue { i8*, i64 } %call1, 1
  store i64 %18, i64* %17, align 8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ret, i32 0, i32 0
  %19 = load i8*, i8** %p, align 8, !tbaa !16
  %20 = bitcast %struct.mg_str* %ret to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %20) #5
  ret i8* %19
}

declare i8* @memchr(i8*, i32, i64) #4

; Function Attrs: nounwind ssp uwtable
define weak i64 @mg_match_prefix_n(i8* %pattern.coerce0, i64 %pattern.coerce1, i8* %str.coerce0, i64 %str.coerce1) #0 {
entry:
  %retval = alloca i64, align 8
  %pattern = alloca %struct.mg_str, align 8
  %str = alloca %struct.mg_str, align 8
  %or_str = alloca i8*, align 8
  %res = alloca i64, align 8
  %len = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %pstr = alloca %struct.mg_str, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %pstr80 = alloca %struct.mg_str, align 8
  %sstr = alloca %struct.mg_str, align 8
  %0 = bitcast %struct.mg_str* %pattern to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %pattern.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %pattern.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %str to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %str.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %str.coerce1, i64* %5, align 8
  %6 = bitcast i8** %or_str to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #5
  %7 = bitcast i64* %res to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #5
  store i64 0, i64* %res, align 8, !tbaa !12
  %8 = bitcast i64* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #5
  store i64 0, i64* %len, align 8, !tbaa !12
  %9 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #5
  store i64 0, i64* %i, align 8, !tbaa !12
  %10 = bitcast i64* %j to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #5
  store i64 0, i64* %j, align 8, !tbaa !12
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 0
  %11 = load i8*, i8** %p, align 8, !tbaa !16
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 1
  %12 = load i64, i64* %len1, align 8, !tbaa !18
  %call = call i8* @memchr(i8* %11, i32 124, i64 %12)
  store i8* %call, i8** %or_str, align 8, !tbaa !3
  %cmp = icmp ne i8* %call, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %p2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 0
  %13 = load i8*, i8** %p2, align 8, !tbaa !16
  %len3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 1
  %14 = load i64, i64* %len3, align 8, !tbaa !18
  %call4 = call i8* @memchr(i8* %13, i32 44, i64 %14)
  store i8* %call4, i8** %or_str, align 8, !tbaa !3
  %cmp5 = icmp ne i8* %call4, null
  br i1 %cmp5, label %if.then, label %if.end23

if.then:                                          ; preds = %lor.lhs.false, %entry
  %15 = bitcast %struct.mg_str* %pstr to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %15) #5
  %p6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pstr, i32 0, i32 0
  %p7 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 0
  %16 = load i8*, i8** %p7, align 8, !tbaa !16
  store i8* %16, i8** %p6, align 8, !tbaa !16
  %len8 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pstr, i32 0, i32 1
  %17 = load i8*, i8** %or_str, align 8, !tbaa !3
  %p9 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 0
  %18 = load i8*, i8** %p9, align 8, !tbaa !16
  %sub.ptr.lhs.cast = ptrtoint i8* %17 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %18 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %len8, align 8, !tbaa !18
  %19 = bitcast %struct.mg_str* %pstr to { i8*, i64 }*
  %20 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %19, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %19, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = bitcast %struct.mg_str* %str to { i8*, i64 }*
  %25 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %24, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %24, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %call10 = call i64 @mg_match_prefix_n(i8* %21, i64 %23, i8* %26, i64 %28)
  store i64 %call10, i64* %res, align 8, !tbaa !12
  %29 = load i64, i64* %res, align 8, !tbaa !12
  %cmp11 = icmp ugt i64 %29, 0
  br i1 %cmp11, label %if.then12, label %if.end

if.then12:                                        ; preds = %if.then
  %30 = load i64, i64* %res, align 8, !tbaa !12
  store i64 %30, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %if.then
  %31 = load i8*, i8** %or_str, align 8, !tbaa !3
  %add.ptr = getelementptr inbounds i8, i8* %31, i64 1
  %p13 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pstr, i32 0, i32 0
  store i8* %add.ptr, i8** %p13, align 8, !tbaa !16
  %p14 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 0
  %32 = load i8*, i8** %p14, align 8, !tbaa !16
  %len15 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 1
  %33 = load i64, i64* %len15, align 8, !tbaa !18
  %add.ptr16 = getelementptr inbounds i8, i8* %32, i64 %33
  %34 = load i8*, i8** %or_str, align 8, !tbaa !3
  %add.ptr17 = getelementptr inbounds i8, i8* %34, i64 1
  %sub.ptr.lhs.cast18 = ptrtoint i8* %add.ptr16 to i64
  %sub.ptr.rhs.cast19 = ptrtoint i8* %add.ptr17 to i64
  %sub.ptr.sub20 = sub i64 %sub.ptr.lhs.cast18, %sub.ptr.rhs.cast19
  %len21 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pstr, i32 0, i32 1
  store i64 %sub.ptr.sub20, i64* %len21, align 8, !tbaa !18
  %35 = bitcast %struct.mg_str* %pstr to { i8*, i64 }*
  %36 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %35, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %35, i32 0, i32 1
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %struct.mg_str* %str to { i8*, i64 }*
  %41 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 1
  %44 = load i64, i64* %43, align 8
  %call22 = call i64 @mg_match_prefix_n(i8* %37, i64 %39, i8* %42, i64 %44)
  store i64 %call22, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then12
  %45 = bitcast %struct.mg_str* %pstr to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %45) #5
  br label %cleanup150

if.end23:                                         ; preds = %lor.lhs.false
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end23
  %46 = load i64, i64* %i, align 8, !tbaa !12
  %len24 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 1
  %47 = load i64, i64* %len24, align 8, !tbaa !18
  %cmp25 = icmp ult i64 %46, %47
  br i1 %cmp25, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %48 = load i64, i64* %j, align 8, !tbaa !12
  %len26 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str, i32 0, i32 1
  %49 = load i64, i64* %len26, align 8, !tbaa !18
  %cmp27 = icmp ult i64 %48, %49
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %50 = phi i1 [ false, %for.cond ], [ %cmp27, %land.rhs ]
  br i1 %50, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %p28 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 0
  %51 = load i8*, i8** %p28, align 8, !tbaa !16
  %52 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx = getelementptr inbounds i8, i8* %51, i64 %52
  %53 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = sext i8 %53 to i32
  %cmp29 = icmp eq i32 %conv, 63
  br i1 %cmp29, label %if.then31, label %if.else

if.then31:                                        ; preds = %for.body
  br label %for.inc

if.else:                                          ; preds = %for.body
  %p32 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 0
  %54 = load i8*, i8** %p32, align 8, !tbaa !16
  %55 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx33 = getelementptr inbounds i8, i8* %54, i64 %55
  %56 = load i8, i8* %arrayidx33, align 1, !tbaa !14
  %conv34 = sext i8 %56 to i32
  %cmp35 = icmp eq i32 %conv34, 42
  br i1 %cmp35, label %if.then37, label %if.else109

if.then37:                                        ; preds = %if.else
  %57 = load i64, i64* %i, align 8, !tbaa !12
  %inc = add i64 %57, 1
  store i64 %inc, i64* %i, align 8, !tbaa !12
  %58 = load i64, i64* %i, align 8, !tbaa !12
  %len38 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 1
  %59 = load i64, i64* %len38, align 8, !tbaa !18
  %cmp39 = icmp ult i64 %58, %59
  br i1 %cmp39, label %land.lhs.true, label %if.else49

land.lhs.true:                                    ; preds = %if.then37
  %p41 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 0
  %60 = load i8*, i8** %p41, align 8, !tbaa !16
  %61 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx42 = getelementptr inbounds i8, i8* %60, i64 %61
  %62 = load i8, i8* %arrayidx42, align 1, !tbaa !14
  %conv43 = sext i8 %62 to i32
  %cmp44 = icmp eq i32 %conv43, 42
  br i1 %cmp44, label %if.then46, label %if.else49

if.then46:                                        ; preds = %land.lhs.true
  %63 = load i64, i64* %i, align 8, !tbaa !12
  %inc47 = add i64 %63, 1
  store i64 %inc47, i64* %i, align 8, !tbaa !12
  %len48 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str, i32 0, i32 1
  %64 = load i64, i64* %len48, align 8, !tbaa !18
  %65 = load i64, i64* %j, align 8, !tbaa !12
  %sub = sub i64 %64, %65
  store i64 %sub, i64* %len, align 8, !tbaa !12
  br label %if.end62

if.else49:                                        ; preds = %land.lhs.true, %if.then37
  store i64 0, i64* %len, align 8, !tbaa !12
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else49
  %66 = load i64, i64* %j, align 8, !tbaa !12
  %67 = load i64, i64* %len, align 8, !tbaa !12
  %add = add i64 %66, %67
  %len50 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str, i32 0, i32 1
  %68 = load i64, i64* %len50, align 8, !tbaa !18
  %cmp51 = icmp ult i64 %add, %68
  br i1 %cmp51, label %land.rhs53, label %land.end60

land.rhs53:                                       ; preds = %while.cond
  %p54 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str, i32 0, i32 0
  %69 = load i8*, i8** %p54, align 8, !tbaa !16
  %70 = load i64, i64* %j, align 8, !tbaa !12
  %71 = load i64, i64* %len, align 8, !tbaa !12
  %add55 = add i64 %70, %71
  %arrayidx56 = getelementptr inbounds i8, i8* %69, i64 %add55
  %72 = load i8, i8* %arrayidx56, align 1, !tbaa !14
  %conv57 = sext i8 %72 to i32
  %cmp58 = icmp ne i32 %conv57, 47
  br label %land.end60

land.end60:                                       ; preds = %land.rhs53, %while.cond
  %73 = phi i1 [ false, %while.cond ], [ %cmp58, %land.rhs53 ]
  br i1 %73, label %while.body, label %while.end

while.body:                                       ; preds = %land.end60
  %74 = load i64, i64* %len, align 8, !tbaa !12
  %inc61 = add i64 %74, 1
  store i64 %inc61, i64* %len, align 8, !tbaa !12
  br label %while.cond

while.end:                                        ; preds = %land.end60
  br label %if.end62

if.end62:                                         ; preds = %while.end, %if.then46
  %75 = load i64, i64* %i, align 8, !tbaa !12
  %len63 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 1
  %76 = load i64, i64* %len63, align 8, !tbaa !18
  %cmp64 = icmp eq i64 %75, %76
  br i1 %cmp64, label %if.then77, label %lor.lhs.false66

lor.lhs.false66:                                  ; preds = %if.end62
  %p67 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 0
  %77 = load i8*, i8** %p67, align 8, !tbaa !16
  %78 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx68 = getelementptr inbounds i8, i8* %77, i64 %78
  %79 = load i8, i8* %arrayidx68, align 1, !tbaa !14
  %conv69 = sext i8 %79 to i32
  %cmp70 = icmp eq i32 %conv69, 36
  br i1 %cmp70, label %land.lhs.true72, label %if.end79

land.lhs.true72:                                  ; preds = %lor.lhs.false66
  %80 = load i64, i64* %i, align 8, !tbaa !12
  %len73 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 1
  %81 = load i64, i64* %len73, align 8, !tbaa !18
  %sub74 = sub i64 %81, 1
  %cmp75 = icmp eq i64 %80, %sub74
  br i1 %cmp75, label %if.then77, label %if.end79

if.then77:                                        ; preds = %land.lhs.true72, %if.end62
  %82 = load i64, i64* %j, align 8, !tbaa !12
  %83 = load i64, i64* %len, align 8, !tbaa !12
  %add78 = add i64 %82, %83
  store i64 %add78, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup150

if.end79:                                         ; preds = %land.lhs.true72, %lor.lhs.false66
  br label %do.body

do.body:                                          ; preds = %land.end104, %if.end79
  %84 = bitcast %struct.mg_str* %pstr80 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %84) #5
  %p81 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pstr80, i32 0, i32 0
  %p82 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 0
  %85 = load i8*, i8** %p82, align 8, !tbaa !16
  %86 = load i64, i64* %i, align 8, !tbaa !12
  %add.ptr83 = getelementptr inbounds i8, i8* %85, i64 %86
  store i8* %add.ptr83, i8** %p81, align 8, !tbaa !16
  %len84 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pstr80, i32 0, i32 1
  %len85 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 1
  %87 = load i64, i64* %len85, align 8, !tbaa !18
  %88 = load i64, i64* %i, align 8, !tbaa !12
  %sub86 = sub i64 %87, %88
  store i64 %sub86, i64* %len84, align 8, !tbaa !18
  %89 = bitcast %struct.mg_str* %sstr to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %89) #5
  %p87 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %sstr, i32 0, i32 0
  %p88 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str, i32 0, i32 0
  %90 = load i8*, i8** %p88, align 8, !tbaa !16
  %91 = load i64, i64* %j, align 8, !tbaa !12
  %add.ptr89 = getelementptr inbounds i8, i8* %90, i64 %91
  %92 = load i64, i64* %len, align 8, !tbaa !12
  %add.ptr90 = getelementptr inbounds i8, i8* %add.ptr89, i64 %92
  store i8* %add.ptr90, i8** %p87, align 8, !tbaa !16
  %len91 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %sstr, i32 0, i32 1
  %len92 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str, i32 0, i32 1
  %93 = load i64, i64* %len92, align 8, !tbaa !18
  %94 = load i64, i64* %j, align 8, !tbaa !12
  %sub93 = sub i64 %93, %94
  %95 = load i64, i64* %len, align 8, !tbaa !12
  %sub94 = sub i64 %sub93, %95
  store i64 %sub94, i64* %len91, align 8, !tbaa !18
  %96 = bitcast %struct.mg_str* %pstr80 to { i8*, i64 }*
  %97 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %96, i32 0, i32 0
  %98 = load i8*, i8** %97, align 8
  %99 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %96, i32 0, i32 1
  %100 = load i64, i64* %99, align 8
  %101 = bitcast %struct.mg_str* %sstr to { i8*, i64 }*
  %102 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %101, i32 0, i32 0
  %103 = load i8*, i8** %102, align 8
  %104 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %101, i32 0, i32 1
  %105 = load i64, i64* %104, align 8
  %call95 = call i64 @mg_match_prefix_n(i8* %98, i64 %100, i8* %103, i64 %105)
  store i64 %call95, i64* %res, align 8, !tbaa !12
  %106 = bitcast %struct.mg_str* %sstr to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %106) #5
  %107 = bitcast %struct.mg_str* %pstr80 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %107) #5
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %108 = load i64, i64* %res, align 8, !tbaa !12
  %cmp96 = icmp eq i64 %108, 0
  br i1 %cmp96, label %land.lhs.true98, label %land.end104

land.lhs.true98:                                  ; preds = %do.cond
  %109 = load i64, i64* %len, align 8, !tbaa !12
  %cmp99 = icmp ne i64 %109, 0
  br i1 %cmp99, label %land.rhs101, label %land.end104

land.rhs101:                                      ; preds = %land.lhs.true98
  %110 = load i64, i64* %len, align 8, !tbaa !12
  %dec = add i64 %110, -1
  store i64 %dec, i64* %len, align 8, !tbaa !12
  %cmp102 = icmp ugt i64 %110, 0
  br label %land.end104

land.end104:                                      ; preds = %land.rhs101, %land.lhs.true98, %do.cond
  %111 = phi i1 [ false, %land.lhs.true98 ], [ false, %do.cond ], [ %cmp102, %land.rhs101 ]
  br i1 %111, label %do.body, label %do.end

do.end:                                           ; preds = %land.end104
  %112 = load i64, i64* %res, align 8, !tbaa !12
  %cmp105 = icmp eq i64 %112, 0
  br i1 %cmp105, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end
  br label %cond.end

cond.false:                                       ; preds = %do.end
  %113 = load i64, i64* %j, align 8, !tbaa !12
  %114 = load i64, i64* %res, align 8, !tbaa !12
  %add107 = add i64 %113, %114
  %115 = load i64, i64* %len, align 8, !tbaa !12
  %add108 = add i64 %add107, %115
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %add108, %cond.false ]
  store i64 %cond, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup150

if.else109:                                       ; preds = %if.else
  %p110 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 0
  %116 = load i8*, i8** %p110, align 8, !tbaa !16
  %117 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx111 = getelementptr inbounds i8, i8* %116, i64 %117
  %call112 = call i32 @str_util_lowercase(i8* %arrayidx111)
  %p113 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str, i32 0, i32 0
  %118 = load i8*, i8** %p113, align 8, !tbaa !16
  %119 = load i64, i64* %j, align 8, !tbaa !12
  %arrayidx114 = getelementptr inbounds i8, i8* %118, i64 %119
  %call115 = call i32 @str_util_lowercase(i8* %arrayidx114)
  %cmp116 = icmp ne i32 %call112, %call115
  br i1 %cmp116, label %if.then118, label %if.end119

if.then118:                                       ; preds = %if.else109
  br label %for.end

if.end119:                                        ; preds = %if.else109
  br label %if.end120

if.end120:                                        ; preds = %if.end119
  br label %if.end121

if.end121:                                        ; preds = %if.end120
  br label %for.inc

for.inc:                                          ; preds = %if.end121, %if.then31
  %120 = load i64, i64* %i, align 8, !tbaa !12
  %inc122 = add i64 %120, 1
  store i64 %inc122, i64* %i, align 8, !tbaa !12
  %121 = load i64, i64* %j, align 8, !tbaa !12
  %inc123 = add i64 %121, 1
  store i64 %inc123, i64* %j, align 8, !tbaa !12
  br label %for.cond

for.end:                                          ; preds = %if.then118, %land.end
  %122 = load i64, i64* %i, align 8, !tbaa !12
  %len124 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 1
  %123 = load i64, i64* %len124, align 8, !tbaa !18
  %cmp125 = icmp ult i64 %122, %123
  br i1 %cmp125, label %land.lhs.true127, label %if.end142

land.lhs.true127:                                 ; preds = %for.end
  %p128 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 0
  %124 = load i8*, i8** %p128, align 8, !tbaa !16
  %125 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx129 = getelementptr inbounds i8, i8* %124, i64 %125
  %126 = load i8, i8* %arrayidx129, align 1, !tbaa !14
  %conv130 = sext i8 %126 to i32
  %cmp131 = icmp eq i32 %conv130, 36
  br i1 %cmp131, label %if.then133, label %if.end142

if.then133:                                       ; preds = %land.lhs.true127
  %127 = load i64, i64* %j, align 8, !tbaa !12
  %len134 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str, i32 0, i32 1
  %128 = load i64, i64* %len134, align 8, !tbaa !18
  %cmp135 = icmp eq i64 %127, %128
  br i1 %cmp135, label %cond.true137, label %cond.false139

cond.true137:                                     ; preds = %if.then133
  %len138 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str, i32 0, i32 1
  %129 = load i64, i64* %len138, align 8, !tbaa !18
  br label %cond.end140

cond.false139:                                    ; preds = %if.then133
  br label %cond.end140

cond.end140:                                      ; preds = %cond.false139, %cond.true137
  %cond141 = phi i64 [ %129, %cond.true137 ], [ 0, %cond.false139 ]
  store i64 %cond141, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup150

if.end142:                                        ; preds = %land.lhs.true127, %for.end
  %130 = load i64, i64* %i, align 8, !tbaa !12
  %len143 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 1
  %131 = load i64, i64* %len143, align 8, !tbaa !18
  %cmp144 = icmp eq i64 %130, %131
  br i1 %cmp144, label %cond.true146, label %cond.false147

cond.true146:                                     ; preds = %if.end142
  %132 = load i64, i64* %j, align 8, !tbaa !12
  br label %cond.end148

cond.false147:                                    ; preds = %if.end142
  br label %cond.end148

cond.end148:                                      ; preds = %cond.false147, %cond.true146
  %cond149 = phi i64 [ %132, %cond.true146 ], [ 0, %cond.false147 ]
  store i64 %cond149, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup150

cleanup150:                                       ; preds = %cond.end148, %cond.end140, %cond.end, %if.then77, %cleanup
  %133 = bitcast i64* %j to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %133) #5
  %134 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %134) #5
  %135 = bitcast i64* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %135) #5
  %136 = bitcast i64* %res to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %136) #5
  %137 = bitcast i8** %or_str to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %137) #5
  %138 = load i64, i64* %retval, align 8
  ret i64 %138
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @mg_match_prefix(i8* %pattern, i32 %pattern_len, i8* %str) #0 {
entry:
  %pattern.addr = alloca i8*, align 8
  %pattern_len.addr = alloca i32, align 4
  %str.addr = alloca i8*, align 8
  %pstr = alloca %struct.mg_str, align 8
  %s = alloca %struct.mg_str, align 8
  store i8* %pattern, i8** %pattern.addr, align 8, !tbaa !3
  store i32 %pattern_len, i32* %pattern_len.addr, align 4, !tbaa !15
  store i8* %str, i8** %str.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_str* %pstr to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %0) #5
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pstr, i32 0, i32 0
  %1 = load i8*, i8** %pattern.addr, align 8, !tbaa !3
  store i8* %1, i8** %p, align 8, !tbaa !16
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pstr, i32 0, i32 1
  %2 = load i32, i32* %pattern_len.addr, align 4, !tbaa !15
  %conv = sext i32 %2 to i64
  store i64 %conv, i64* %len, align 8, !tbaa !18
  %3 = bitcast %struct.mg_str* %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %3) #5
  %p1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 0
  %4 = load i8*, i8** %str.addr, align 8, !tbaa !3
  store i8* %4, i8** %p1, align 8, !tbaa !16
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  store i64 0, i64* %len2, align 8, !tbaa !18
  %5 = load i8*, i8** %str.addr, align 8, !tbaa !3
  %cmp = icmp ne i8* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load i8*, i8** %str.addr, align 8, !tbaa !3
  %call = call i64 @strlen(i8* %6)
  %len4 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  store i64 %call, i64* %len4, align 8, !tbaa !18
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = bitcast %struct.mg_str* %pstr to { i8*, i64 }*
  %8 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %struct.mg_str* %s to { i8*, i64 }*
  %13 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %12, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %12, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %call5 = call i64 @mg_match_prefix_n(i8* %9, i64 %11, i8* %14, i64 %16)
  %17 = bitcast %struct.mg_str* %s to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %17) #5
  %18 = bitcast %struct.mg_str* %pstr to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %18) #5
  ret i64 %call5
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_if_poll(%struct.mg_connection* %nc, double %now) #0 {
entry:
  %retval = alloca i32, align 4
  %nc.addr = alloca %struct.mg_connection*, align 8
  %now.addr = alloca double, align 8
  %now_t = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store double %now, double* %now.addr, align 8, !tbaa !26
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 21
  %1 = load i64, i64* %flags, align 8, !tbaa !41
  %and = and i64 %1, 2048
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_close_conn(%struct.mg_connection* %2)
  store i32 0, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 21
  %4 = load i64, i64* %flags1, align 8, !tbaa !41
  %and2 = and i64 %4, 1024
  %tobool3 = icmp ne i64 %and2, 0
  br i1 %tobool3, label %if.then4, label %if.else7

if.then4:                                         ; preds = %if.else
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 9
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %send_mbuf, i32 0, i32 1
  %6 = load i64, i64* %len, align 8, !tbaa !43
  %cmp = icmp eq i64 %6, 0
  br i1 %cmp, label %if.then5, label %if.end

if.then5:                                         ; preds = %if.then4
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags6 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %7, i32 0, i32 21
  %8 = load i64, i64* %flags6, align 8, !tbaa !41
  %or = or i64 %8, 2048
  store i64 %or, i64* %flags6, align 8, !tbaa !41
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_close_conn(%struct.mg_connection* %9)
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then4
  br label %if.end13

if.else7:                                         ; preds = %if.else
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags8 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 21
  %11 = load i64, i64* %flags8, align 8, !tbaa !41
  %and9 = and i64 %11, 512
  %tobool10 = icmp ne i64 %and9, 0
  br i1 %tobool10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.else7
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_close_conn(%struct.mg_connection* %12)
  store i32 0, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.else7
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.end
  br label %if.end14

if.end14:                                         ; preds = %if.end13
  %13 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %14 = load double, double* %now.addr, align 8, !tbaa !26
  call void @mg_timer(%struct.mg_connection* %13, double %14)
  %15 = bitcast i64* %now_t to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %15) #5
  %16 = load double, double* %now.addr, align 8, !tbaa !26
  %conv = fptosi double %16 to i64
  store i64 %conv, i64* %now_t, align 8, !tbaa !12
  %17 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %18 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %18, i32 0, i32 16
  %19 = load i8*, i8** %user_data, align 8, !tbaa !44
  %20 = bitcast i64* %now_t to i8*
  call void @mg_call(%struct.mg_connection* %17, void (%struct.mg_connection*, i32, i8*)* null, i8* %19, i32 0, i8* %20)
  %21 = bitcast i64* %now_t to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %21) #5
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end14, %if.then11, %if.then5, %if.then
  %22 = load i32, i32* %retval, align 4
  ret i32 %22
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_close_conn(%struct.mg_connection* %conn) #0 {
entry:
  %conn.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %conn, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 4
  %1 = load i32, i32* %sock, align 8, !tbaa !45
  %cmp = icmp ne i32 %1, -1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %call = call i32 @mg_do_recv(%struct.mg_connection* %2)
  %cmp1 = icmp eq i32 %call, -2
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 21
  %4 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %4, 512
  store i64 %or, i64* %flags, align 8, !tbaa !41
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %5 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %flags2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 21
  %6 = load i64, i64* %flags2, align 8, !tbaa !41
  %or3 = or i64 %6, 2048
  store i64 %or3, i64* %flags2, align 8, !tbaa !41
  %7 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  call void @mg_remove_conn(%struct.mg_connection* %7)
  %8 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %8, i32 0, i32 20
  %9 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8, !tbaa !46
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %9, i32 0, i32 2
  %10 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8, !tbaa !47
  %destroy_conn = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %10, i32 0, i32 14
  %11 = load void (%struct.mg_connection*)*, void (%struct.mg_connection*)** %destroy_conn, align 8, !tbaa !49
  %12 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  call void %11(%struct.mg_connection* %12)
  %13 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %14 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 16
  %15 = load i8*, i8** %user_data, align 8, !tbaa !44
  call void @mg_call(%struct.mg_connection* %13, void (%struct.mg_connection*, i32, i8*)* null, i8* %15, i32 5, i8* null)
  %16 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  call void @mg_destroy_conn(%struct.mg_connection* %16, i32 0)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_timer(%struct.mg_connection* %c, double %now) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %now.addr = alloca double, align 8
  %old_value = alloca double, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  store double %now, double* %now.addr, align 8, !tbaa !26
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %ev_timer_time = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 11
  %1 = load double, double* %ev_timer_time, align 8, !tbaa !51
  %cmp = fcmp ogt double %1, 0.000000e+00
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load double, double* %now.addr, align 8, !tbaa !26
  %3 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %ev_timer_time1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 11
  %4 = load double, double* %ev_timer_time1, align 8, !tbaa !51
  %cmp2 = fcmp oge double %2, %4
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %5 = bitcast double* %old_value to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #5
  %6 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %ev_timer_time3 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 11
  %7 = load double, double* %ev_timer_time3, align 8, !tbaa !51
  store double %7, double* %old_value, align 8, !tbaa !26
  %8 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %ev_timer_time4 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %8, i32 0, i32 11
  store double 0.000000e+00, double* %ev_timer_time4, align 8, !tbaa !51
  %9 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %10 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 16
  %11 = load i8*, i8** %user_data, align 8, !tbaa !44
  %12 = bitcast double* %old_value to i8*
  call void @mg_call(%struct.mg_connection* %9, void (%struct.mg_connection*, i32, i8*)* null, i8* %11, i32 6, i8* %12)
  %13 = bitcast double* %old_value to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %13) #5
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_call(%struct.mg_connection* %nc, void (%struct.mg_connection*, i32, i8*)* %ev_handler, i8* %user_data, i32 %ev, i8* %ev_data) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %ev_handler.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %user_data.addr = alloca i8*, align 8
  %ev.addr = alloca i32, align 4
  %ev_data.addr = alloca i8*, align 8
  %flags_before = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store void (%struct.mg_connection*, i32, i8*)* %ev_handler, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8, !tbaa !3
  store i8* %user_data, i8** %user_data.addr, align 8, !tbaa !3
  store i32 %ev, i32* %ev.addr, align 4, !tbaa !15
  store i8* %ev_data, i8** %ev_data.addr, align 8, !tbaa !3
  %0 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8, !tbaa !3
  %cmp = icmp eq void (%struct.mg_connection*, i32, i8*)* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %proto_handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 12
  %2 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %proto_handler, align 8, !tbaa !52
  %tobool = icmp ne void (%struct.mg_connection*, i32, i8*)* %2, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %proto_handler1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 12
  %4 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %proto_handler1, align 8, !tbaa !52
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 15
  %6 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler, align 8, !tbaa !53
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi void (%struct.mg_connection*, i32, i8*)* [ %4, %cond.true ], [ %6, %cond.false ]
  store void (%struct.mg_connection*, i32, i8*)* %cond, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %7 = load i32, i32* %ev.addr, align 4, !tbaa !15
  %cmp2 = icmp ne i32 %7, 0
  br i1 %cmp2, label %if.then3, label %if.end12

if.then3:                                         ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then3
  %call = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 2290)
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %if.then5, label %if.end11

if.then5:                                         ; preds = %do.body
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %9 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8, !tbaa !3
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %handler6 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 15
  %11 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler6, align 8, !tbaa !53
  %cmp7 = icmp eq void (%struct.mg_connection*, i32, i8*)* %9, %11
  %12 = zext i1 %cmp7 to i64
  %cond8 = select i1 %cmp7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.170, i32 0, i32 0)
  %13 = load i32, i32* %ev.addr, align 4, !tbaa !15
  %14 = load i8*, i8** %ev_data.addr, align 8, !tbaa !3
  %15 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %15, i32 0, i32 21
  %16 = load i64, i64* %flags, align 8, !tbaa !41
  %17 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %17, i32 0, i32 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf, i32 0, i32 1
  %18 = load i64, i64* %len, align 8, !tbaa !54
  %conv = trunc i64 %18 to i32
  %19 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %19, i32 0, i32 9
  %len9 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %send_mbuf, i32 0, i32 1
  %20 = load i64, i64* %len9, align 8, !tbaa !43
  %conv10 = trunc i64 %20 to i32
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.168, i32 0, i32 0), %struct.mg_connection* %8, i8* %cond8, i32 %13, i8* %14, i64 %16, i32 %conv, i32 %conv10)
  br label %if.end11

if.end11:                                         ; preds = %if.then5, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end11
  br label %if.end12

if.end12:                                         ; preds = %do.end, %if.end
  %21 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %mgr = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %21, i32 0, i32 3
  %22 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8, !tbaa !55
  %hexdump_file = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %22, i32 0, i32 1
  %23 = load i8*, i8** %hexdump_file, align 8, !tbaa !56
  %cmp13 = icmp ne i8* %23, null
  br i1 %cmp13, label %land.lhs.true, label %if.end26

land.lhs.true:                                    ; preds = %if.end12
  %24 = load i32, i32* %ev.addr, align 4, !tbaa !15
  %cmp15 = icmp ne i32 %24, 0
  br i1 %cmp15, label %land.lhs.true17, label %if.end26

land.lhs.true17:                                  ; preds = %land.lhs.true
  %25 = load i32, i32* %ev.addr, align 4, !tbaa !15
  %cmp18 = icmp ne i32 %25, 3
  br i1 %cmp18, label %land.lhs.true20, label %if.end26

land.lhs.true20:                                  ; preds = %land.lhs.true17
  %26 = load i32, i32* %ev.addr, align 4, !tbaa !15
  %cmp21 = icmp ne i32 %26, 4
  br i1 %cmp21, label %if.then23, label %if.end26

if.then23:                                        ; preds = %land.lhs.true20
  %27 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %28 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %mgr24 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %28, i32 0, i32 3
  %29 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr24, align 8, !tbaa !55
  %hexdump_file25 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %29, i32 0, i32 1
  %30 = load i8*, i8** %hexdump_file25, align 8, !tbaa !56
  %31 = load i32, i32* %ev.addr, align 4, !tbaa !15
  call void @mg_hexdump_connection(%struct.mg_connection* %27, i8* %30, i8* null, i32 0, i32 %31)
  br label %if.end26

if.end26:                                         ; preds = %if.then23, %land.lhs.true20, %land.lhs.true17, %land.lhs.true, %if.end12
  %32 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8, !tbaa !3
  %cmp27 = icmp ne void (%struct.mg_connection*, i32, i8*)* %32, null
  br i1 %cmp27, label %if.then29, label %if.end43

if.then29:                                        ; preds = %if.end26
  %33 = bitcast i64* %flags_before to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %33) #5
  %34 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags30 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %34, i32 0, i32 21
  %35 = load i64, i64* %flags30, align 8, !tbaa !41
  store i64 %35, i64* %flags_before, align 8, !tbaa !12
  %36 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8, !tbaa !3
  %37 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %38 = load i32, i32* %ev.addr, align 4, !tbaa !15
  %39 = load i8*, i8** %ev_data.addr, align 8, !tbaa !3
  call void %36(%struct.mg_connection* %37, i32 %38, i8* %39)
  %40 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8, !tbaa !3
  %41 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %handler31 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %41, i32 0, i32 15
  %42 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler31, align 8, !tbaa !53
  %cmp32 = icmp eq void (%struct.mg_connection*, i32, i8*)* %40, %42
  br i1 %cmp32, label %land.lhs.true34, label %if.end42

land.lhs.true34:                                  ; preds = %if.then29
  %43 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags35 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %43, i32 0, i32 21
  %44 = load i64, i64* %flags35, align 8, !tbaa !41
  %45 = load i64, i64* %flags_before, align 8, !tbaa !12
  %cmp36 = icmp ne i64 %44, %45
  br i1 %cmp36, label %if.then38, label %if.end42

if.then38:                                        ; preds = %land.lhs.true34
  %46 = load i64, i64* %flags_before, align 8, !tbaa !12
  %and = and i64 %46, -66075905
  %47 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags39 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %47, i32 0, i32 21
  %48 = load i64, i64* %flags39, align 8, !tbaa !41
  %and40 = and i64 %48, 66075904
  %or = or i64 %and, %and40
  %49 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags41 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %49, i32 0, i32 21
  store i64 %or, i64* %flags41, align 8, !tbaa !41
  br label %if.end42

if.end42:                                         ; preds = %if.then38, %land.lhs.true34, %if.then29
  %50 = bitcast i64* %flags_before to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %50) #5
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.end26
  %51 = load i32, i32* %ev.addr, align 4, !tbaa !15
  %cmp44 = icmp ne i32 %51, 0
  br i1 %cmp44, label %if.then46, label %if.end48

if.then46:                                        ; preds = %if.end43
  %52 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %mgr47 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %52, i32 0, i32 3
  %53 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr47, align 8, !tbaa !55
  %num_calls = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %53, i32 0, i32 5
  %54 = load i32, i32* %num_calls, align 4, !tbaa !58
  %inc = add nsw i32 %54, 1
  store i32 %inc, i32* %num_calls, align 4, !tbaa !58
  br label %if.end48

if.end48:                                         ; preds = %if.then46, %if.end43
  %55 = load i32, i32* %ev.addr, align 4, !tbaa !15
  %cmp49 = icmp ne i32 %55, 0
  br i1 %cmp49, label %if.then51, label %if.end69

if.then51:                                        ; preds = %if.end48
  br label %do.body52

do.body52:                                        ; preds = %if.then51
  %call53 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 2312)
  %tobool54 = icmp ne i32 %call53, 0
  br i1 %tobool54, label %if.then55, label %if.end67

if.then55:                                        ; preds = %do.body52
  %56 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %57 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8, !tbaa !3
  %58 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %handler56 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %58, i32 0, i32 15
  %59 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler56, align 8, !tbaa !53
  %cmp57 = icmp eq void (%struct.mg_connection*, i32, i8*)* %57, %59
  %60 = zext i1 %cmp57 to i64
  %cond59 = select i1 %cmp57, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.170, i32 0, i32 0)
  %61 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags60 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %61, i32 0, i32 21
  %62 = load i64, i64* %flags60, align 8, !tbaa !41
  %63 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf61 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %63, i32 0, i32 8
  %len62 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf61, i32 0, i32 1
  %64 = load i64, i64* %len62, align 8, !tbaa !54
  %conv63 = trunc i64 %64 to i32
  %65 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %send_mbuf64 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %65, i32 0, i32 9
  %len65 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %send_mbuf64, i32 0, i32 1
  %66 = load i64, i64* %len65, align 8, !tbaa !43
  %conv66 = trunc i64 %66 to i32
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.171, i32 0, i32 0), %struct.mg_connection* %56, i8* %cond59, i64 %62, i32 %conv63, i32 %conv66)
  br label %if.end67

if.end67:                                         ; preds = %if.then55, %do.body52
  br label %do.end68

do.end68:                                         ; preds = %if.end67
  br label %if.end69

if.end69:                                         ; preds = %do.end68, %if.end48
  %67 = load i8*, i8** %user_data.addr, align 8, !tbaa !3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_destroy_conn(%struct.mg_connection* %conn, i32 %destroy_if) #0 {
entry:
  %conn.addr = alloca %struct.mg_connection*, align 8
  %destroy_if.addr = alloca i32, align 4
  store %struct.mg_connection* %conn, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  store i32 %destroy_if, i32* %destroy_if.addr, align 4, !tbaa !15
  %0 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 4
  %1 = load i32, i32* %sock, align 8, !tbaa !45
  %cmp = icmp ne i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end2

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %call = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 2372)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then1, label %if.end

if.then1:                                         ; preds = %do.body
  %2 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %3 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 21
  %4 = load i64, i64* %flags, align 8, !tbaa !41
  %5 = load i32, i32* %destroy_if.addr, align 4, !tbaa !15
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i32 0, i32 0), %struct.mg_connection* %2, i64 %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then1, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end2

if.end2:                                          ; preds = %do.end, %entry
  %6 = load i32, i32* %destroy_if.addr, align 4, !tbaa !15
  %tobool3 = icmp ne i32 %6, 0
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end2
  %7 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %7, i32 0, i32 20
  %8 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8, !tbaa !46
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %8, i32 0, i32 2
  %9 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8, !tbaa !47
  %destroy_conn = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %9, i32 0, i32 14
  %10 = load void (%struct.mg_connection*)*, void (%struct.mg_connection*)** %destroy_conn, align 8, !tbaa !49
  %11 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  call void %10(%struct.mg_connection* %11)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end2
  %12 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %proto_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %12, i32 0, i32 13
  %13 = load i8*, i8** %proto_data, align 8, !tbaa !59
  %cmp6 = icmp ne i8* %13, null
  br i1 %cmp6, label %land.lhs.true, label %if.end11

land.lhs.true:                                    ; preds = %if.end5
  %14 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %proto_data_destructor = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 14
  %15 = load void (i8*)*, void (i8*)** %proto_data_destructor, align 8, !tbaa !60
  %cmp7 = icmp ne void (i8*)* %15, null
  br i1 %cmp7, label %if.then8, label %if.end11

if.then8:                                         ; preds = %land.lhs.true
  %16 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %proto_data_destructor9 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %16, i32 0, i32 14
  %17 = load void (i8*)*, void (i8*)** %proto_data_destructor9, align 8, !tbaa !60
  %18 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %proto_data10 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %18, i32 0, i32 13
  %19 = load i8*, i8** %proto_data10, align 8, !tbaa !59
  call void %17(i8* %19)
  br label %if.end11

if.end11:                                         ; preds = %if.then8, %land.lhs.true, %if.end5
  %20 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %20, i32 0, i32 8
  call void @mbuf_free(%struct.mbuf* %recv_mbuf)
  %21 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %21, i32 0, i32 9
  call void @mbuf_free(%struct.mbuf* %send_mbuf)
  %22 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %23 = bitcast %struct.mg_connection* %22 to i8*
  %24 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %25 = bitcast %struct.mg_connection* %24 to i8*
  %26 = call i64 @llvm.objectsize.i64.p0i8(i8* %25, i1 false, i1 true)
  %call12 = call i8* @__memset_chk(i8* %23, i32 0, i64 216, i64 %26) #5
  %27 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %28 = bitcast %struct.mg_connection* %27 to i8*
  call void @free(i8* %28)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_mgr_init(%struct.mg_mgr* %m, i8* %user_data) #0 {
entry:
  %m.addr = alloca %struct.mg_mgr*, align 8
  %user_data.addr = alloca i8*, align 8
  %opts = alloca %struct.mg_mgr_init_opts, align 8
  store %struct.mg_mgr* %m, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  store i8* %user_data, i8** %user_data.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_mgr_init_opts* %opts to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %0) #5
  %1 = bitcast %struct.mg_mgr_init_opts* %opts to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 32, i1 false)
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %3 = load i8*, i8** %user_data.addr, align 8, !tbaa !3
  call void @mg_mgr_init_opt(%struct.mg_mgr* %2, i8* %3, %struct.mg_mgr_init_opts* byval align 8 %opts)
  %4 = bitcast %struct.mg_mgr_init_opts* %opts to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %4) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_mgr_init_opt(%struct.mg_mgr* %m, i8* %user_data, %struct.mg_mgr_init_opts* byval align 8 %opts) #0 {
entry:
  %m.addr = alloca %struct.mg_mgr*, align 8
  %user_data.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  store %struct.mg_mgr* %m, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  store i8* %user_data, i8** %user_data.addr, align 8, !tbaa !3
  %0 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %1 = bitcast %struct.mg_mgr* %0 to i8*
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %3 = bitcast %struct.mg_mgr* %2 to i8*
  %4 = call i64 @llvm.objectsize.i64.p0i8(i8* %3, i1 false, i1 true)
  %call = call i8* @__memset_chk(i8* %1, i32 0, i64 56, i64 %4) #5
  %5 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %ctl = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %5, i32 0, i32 2
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %ctl, i64 0, i64 1
  store i32 -1, i32* %arrayidx, align 4, !tbaa !15
  %6 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %ctl1 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %6, i32 0, i32 2
  %arrayidx2 = getelementptr inbounds [2 x i32], [2 x i32]* %ctl1, i64 0, i64 0
  store i32 -1, i32* %arrayidx2, align 8, !tbaa !15
  %7 = load i8*, i8** %user_data.addr, align 8, !tbaa !3
  %8 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %user_data3 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %8, i32 0, i32 3
  store i8* %7, i8** %user_data3, align 8, !tbaa !61
  %9 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %9) #5
  %num_ifaces = getelementptr inbounds %struct.mg_mgr_init_opts, %struct.mg_mgr_init_opts* %opts, i32 0, i32 1
  %10 = load i32, i32* %num_ifaces, align 8, !tbaa !62
  %cmp = icmp eq i32 %10, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %11 = load i32, i32* @mg_num_ifaces, align 4, !tbaa !15
  %num_ifaces4 = getelementptr inbounds %struct.mg_mgr_init_opts, %struct.mg_mgr_init_opts* %opts, i32 0, i32 1
  store i32 %11, i32* %num_ifaces4, align 8, !tbaa !62
  %ifaces = getelementptr inbounds %struct.mg_mgr_init_opts, %struct.mg_mgr_init_opts* %opts, i32 0, i32 2
  store %struct.mg_iface_vtable** getelementptr inbounds ([1 x %struct.mg_iface_vtable*], [1 x %struct.mg_iface_vtable*]* @mg_ifaces, i32 0, i32 0), %struct.mg_iface_vtable*** %ifaces, align 8, !tbaa !64
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %main_iface = getelementptr inbounds %struct.mg_mgr_init_opts, %struct.mg_mgr_init_opts* %opts, i32 0, i32 0
  %12 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %main_iface, align 8, !tbaa !65
  %cmp5 = icmp ne %struct.mg_iface_vtable* %12, null
  br i1 %cmp5, label %if.then6, label %if.end10

if.then6:                                         ; preds = %if.end
  %main_iface7 = getelementptr inbounds %struct.mg_mgr_init_opts, %struct.mg_mgr_init_opts* %opts, i32 0, i32 0
  %13 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %main_iface7, align 8, !tbaa !65
  %ifaces8 = getelementptr inbounds %struct.mg_mgr_init_opts, %struct.mg_mgr_init_opts* %opts, i32 0, i32 2
  %14 = load %struct.mg_iface_vtable**, %struct.mg_iface_vtable*** %ifaces8, align 8, !tbaa !64
  %arrayidx9 = getelementptr inbounds %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %14, i64 0
  store %struct.mg_iface_vtable* %13, %struct.mg_iface_vtable** %arrayidx9, align 8, !tbaa !3
  br label %if.end10

if.end10:                                         ; preds = %if.then6, %if.end
  %num_ifaces11 = getelementptr inbounds %struct.mg_mgr_init_opts, %struct.mg_mgr_init_opts* %opts, i32 0, i32 1
  %15 = load i32, i32* %num_ifaces11, align 8, !tbaa !62
  %16 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %num_ifaces12 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %16, i32 0, i32 4
  store i32 %15, i32* %num_ifaces12, align 8, !tbaa !66
  %num_ifaces13 = getelementptr inbounds %struct.mg_mgr_init_opts, %struct.mg_mgr_init_opts* %opts, i32 0, i32 1
  %17 = load i32, i32* %num_ifaces13, align 8, !tbaa !62
  %conv = sext i32 %17 to i64
  %mul = mul i64 8, %conv
  %call14 = call i8* @malloc(i64 %mul) #18
  %18 = bitcast i8* %call14 to %struct.mg_iface**
  %19 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %ifaces15 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %19, i32 0, i32 6
  store %struct.mg_iface** %18, %struct.mg_iface*** %ifaces15, align 8, !tbaa !67
  store i32 0, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end10
  %20 = load i32, i32* %i, align 4, !tbaa !15
  %num_ifaces16 = getelementptr inbounds %struct.mg_mgr_init_opts, %struct.mg_mgr_init_opts* %opts, i32 0, i32 1
  %21 = load i32, i32* %num_ifaces16, align 8, !tbaa !62
  %cmp17 = icmp slt i32 %20, %21
  br i1 %cmp17, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %ifaces19 = getelementptr inbounds %struct.mg_mgr_init_opts, %struct.mg_mgr_init_opts* %opts, i32 0, i32 2
  %22 = load %struct.mg_iface_vtable**, %struct.mg_iface_vtable*** %ifaces19, align 8, !tbaa !64
  %23 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom = sext i32 %23 to i64
  %arrayidx20 = getelementptr inbounds %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %22, i64 %idxprom
  %24 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %arrayidx20, align 8, !tbaa !3
  %25 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %call21 = call %struct.mg_iface* @mg_if_create_iface(%struct.mg_iface_vtable* %24, %struct.mg_mgr* %25)
  %26 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %ifaces22 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %26, i32 0, i32 6
  %27 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces22, align 8, !tbaa !67
  %28 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom23 = sext i32 %28 to i64
  %arrayidx24 = getelementptr inbounds %struct.mg_iface*, %struct.mg_iface** %27, i64 %idxprom23
  store %struct.mg_iface* %call21, %struct.mg_iface** %arrayidx24, align 8, !tbaa !3
  %29 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %ifaces25 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %29, i32 0, i32 6
  %30 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces25, align 8, !tbaa !67
  %31 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom26 = sext i32 %31 to i64
  %arrayidx27 = getelementptr inbounds %struct.mg_iface*, %struct.mg_iface** %30, i64 %idxprom26
  %32 = load %struct.mg_iface*, %struct.mg_iface** %arrayidx27, align 8, !tbaa !3
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %32, i32 0, i32 2
  %33 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8, !tbaa !47
  %init = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %33, i32 0, i32 0
  %34 = load void (%struct.mg_iface*)*, void (%struct.mg_iface*)** %init, align 8, !tbaa !68
  %35 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %ifaces28 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %35, i32 0, i32 6
  %36 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces28, align 8, !tbaa !67
  %37 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom29 = sext i32 %37 to i64
  %arrayidx30 = getelementptr inbounds %struct.mg_iface*, %struct.mg_iface** %36, i64 %idxprom29
  %38 = load %struct.mg_iface*, %struct.mg_iface** %arrayidx30, align 8, !tbaa !3
  call void %34(%struct.mg_iface* %38)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %39 = load i32, i32* %i, align 4, !tbaa !15
  %inc = add nsw i32 %39, 1
  store i32 %inc, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %40 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %40) #5
  %nameserver = getelementptr inbounds %struct.mg_mgr_init_opts, %struct.mg_mgr_init_opts* %opts, i32 0, i32 3
  %41 = load i8*, i8** %nameserver, align 8, !tbaa !69
  %cmp31 = icmp ne i8* %41, null
  br i1 %cmp31, label %if.then33, label %if.end37

if.then33:                                        ; preds = %for.end
  %nameserver34 = getelementptr inbounds %struct.mg_mgr_init_opts, %struct.mg_mgr_init_opts* %opts, i32 0, i32 3
  %42 = load i8*, i8** %nameserver34, align 8, !tbaa !69
  %call35 = call i8* @strdup(i8* %42)
  %43 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %nameserver36 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %43, i32 0, i32 7
  store i8* %call35, i8** %nameserver36, align 8, !tbaa !70
  br label %if.end37

if.end37:                                         ; preds = %if.then33, %for.end
  br label %do.body

do.body:                                          ; preds = %if.end37
  %call38 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 2457)
  %tobool = icmp ne i32 %call38, 0
  br i1 %tobool, label %if.then39, label %if.end40

if.then39:                                        ; preds = %do.body
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8, i32 0, i32 0))
  br label %if.end40

if.end40:                                         ; preds = %if.then39, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end40
  br label %do.body41

do.body41:                                        ; preds = %do.end
  %call42 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 2458)
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.then44, label %if.end45

if.then44:                                        ; preds = %do.body41
  %44 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i32 0, i32 0), %struct.mg_mgr* %44)
  br label %if.end45

if.end45:                                         ; preds = %if.then44, %do.body41
  br label %do.end46

do.end46:                                         ; preds = %if.end45
  ret void
}

; Function Attrs: nounwind ssp uwtable
define %struct.mg_iface* @mg_if_create_iface(%struct.mg_iface_vtable* %vtable, %struct.mg_mgr* %mgr) #0 {
entry:
  %vtable.addr = alloca %struct.mg_iface_vtable*, align 8
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %iface = alloca %struct.mg_iface*, align 8
  store %struct.mg_iface_vtable* %vtable, %struct.mg_iface_vtable** %vtable.addr, align 8, !tbaa !3
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_iface** %iface to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %call = call i8* @calloc(i64 1, i64 24) #20
  %1 = bitcast i8* %call to %struct.mg_iface*
  store %struct.mg_iface* %1, %struct.mg_iface** %iface, align 8, !tbaa !3
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %3 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8, !tbaa !3
  %mgr1 = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %3, i32 0, i32 0
  store %struct.mg_mgr* %2, %struct.mg_mgr** %mgr1, align 8, !tbaa !71
  %4 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8, !tbaa !3
  %data = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %4, i32 0, i32 1
  store i8* null, i8** %data, align 8, !tbaa !72
  %5 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable.addr, align 8, !tbaa !3
  %6 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8, !tbaa !3
  %vtable2 = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %6, i32 0, i32 2
  store %struct.mg_iface_vtable* %5, %struct.mg_iface_vtable** %vtable2, align 8, !tbaa !47
  %7 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8, !tbaa !3
  %8 = bitcast %struct.mg_iface** %iface to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %8) #5
  ret %struct.mg_iface* %7
}

; Function Attrs: nounwind ssp uwtable
define void @mg_mgr_free(%struct.mg_mgr* %m) #0 {
entry:
  %m.addr = alloca %struct.mg_mgr*, align 8
  %conn = alloca %struct.mg_connection*, align 8
  %tmp_conn = alloca %struct.mg_connection*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.mg_mgr* %m, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_connection** %conn to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = bitcast %struct.mg_connection** %tmp_conn to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 2473)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0), %struct.mg_mgr* %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %do.cond
  %3 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %cmp = icmp eq %struct.mg_mgr* %3, null
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %do.end
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end2:                                          ; preds = %do.end
  %4 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %call3 = call i32 @mg_mgr_poll(%struct.mg_mgr* %4, i32 0)
  %5 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %ctl = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %5, i32 0, i32 2
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %ctl, i64 0, i64 0
  %6 = load i32, i32* %arrayidx, align 8, !tbaa !15
  %cmp4 = icmp ne i32 %6, -1
  br i1 %cmp4, label %if.then5, label %if.end9

if.then5:                                         ; preds = %if.end2
  %7 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %ctl6 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %7, i32 0, i32 2
  %arrayidx7 = getelementptr inbounds [2 x i32], [2 x i32]* %ctl6, i64 0, i64 0
  %8 = load i32, i32* %arrayidx7, align 8, !tbaa !15
  %call8 = call i32 @"\01_close"(i32 %8)
  br label %if.end9

if.end9:                                          ; preds = %if.then5, %if.end2
  %9 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %ctl10 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %9, i32 0, i32 2
  %arrayidx11 = getelementptr inbounds [2 x i32], [2 x i32]* %ctl10, i64 0, i64 1
  %10 = load i32, i32* %arrayidx11, align 4, !tbaa !15
  %cmp12 = icmp ne i32 %10, -1
  br i1 %cmp12, label %if.then13, label %if.end17

if.then13:                                        ; preds = %if.end9
  %11 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %ctl14 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %11, i32 0, i32 2
  %arrayidx15 = getelementptr inbounds [2 x i32], [2 x i32]* %ctl14, i64 0, i64 1
  %12 = load i32, i32* %arrayidx15, align 4, !tbaa !15
  %call16 = call i32 @"\01_close"(i32 %12)
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.end9
  %13 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %ctl18 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %13, i32 0, i32 2
  %arrayidx19 = getelementptr inbounds [2 x i32], [2 x i32]* %ctl18, i64 0, i64 1
  store i32 -1, i32* %arrayidx19, align 4, !tbaa !15
  %14 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %ctl20 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %14, i32 0, i32 2
  %arrayidx21 = getelementptr inbounds [2 x i32], [2 x i32]* %ctl20, i64 0, i64 0
  store i32 -1, i32* %arrayidx21, align 8, !tbaa !15
  %15 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %active_connections = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %15, i32 0, i32 0
  %16 = load %struct.mg_connection*, %struct.mg_connection** %active_connections, align 8, !tbaa !73
  store %struct.mg_connection* %16, %struct.mg_connection** %conn, align 8, !tbaa !3
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end17
  %17 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8, !tbaa !3
  %cmp22 = icmp ne %struct.mg_connection* %17, null
  br i1 %cmp22, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8, !tbaa !3
  %next = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %18, i32 0, i32 0
  %19 = load %struct.mg_connection*, %struct.mg_connection** %next, align 8, !tbaa !74
  store %struct.mg_connection* %19, %struct.mg_connection** %tmp_conn, align 8, !tbaa !3
  %20 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %20, i32 0, i32 21
  %21 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %21, 2048
  store i64 %or, i64* %flags, align 8, !tbaa !41
  %22 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8, !tbaa !3
  call void @mg_close_conn(%struct.mg_connection* %22)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %23 = load %struct.mg_connection*, %struct.mg_connection** %tmp_conn, align 8, !tbaa !3
  store %struct.mg_connection* %23, %struct.mg_connection** %conn, align 8, !tbaa !3
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %24) #5
  store i32 0, i32* %i, align 4, !tbaa !15
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc33, %for.end
  %25 = load i32, i32* %i, align 4, !tbaa !15
  %26 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %num_ifaces = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %26, i32 0, i32 4
  %27 = load i32, i32* %num_ifaces, align 8, !tbaa !66
  %cmp24 = icmp slt i32 %25, %27
  br i1 %cmp24, label %for.body25, label %for.end34

for.body25:                                       ; preds = %for.cond23
  %28 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %ifaces = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %28, i32 0, i32 6
  %29 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces, align 8, !tbaa !67
  %30 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom = sext i32 %30 to i64
  %arrayidx26 = getelementptr inbounds %struct.mg_iface*, %struct.mg_iface** %29, i64 %idxprom
  %31 = load %struct.mg_iface*, %struct.mg_iface** %arrayidx26, align 8, !tbaa !3
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %31, i32 0, i32 2
  %32 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8, !tbaa !47
  %free = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %32, i32 0, i32 1
  %33 = load void (%struct.mg_iface*)*, void (%struct.mg_iface*)** %free, align 8, !tbaa !75
  %34 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %ifaces27 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %34, i32 0, i32 6
  %35 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces27, align 8, !tbaa !67
  %36 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom28 = sext i32 %36 to i64
  %arrayidx29 = getelementptr inbounds %struct.mg_iface*, %struct.mg_iface** %35, i64 %idxprom28
  %37 = load %struct.mg_iface*, %struct.mg_iface** %arrayidx29, align 8, !tbaa !3
  call void %33(%struct.mg_iface* %37)
  %38 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %ifaces30 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %38, i32 0, i32 6
  %39 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces30, align 8, !tbaa !67
  %40 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom31 = sext i32 %40 to i64
  %arrayidx32 = getelementptr inbounds %struct.mg_iface*, %struct.mg_iface** %39, i64 %idxprom31
  %41 = load %struct.mg_iface*, %struct.mg_iface** %arrayidx32, align 8, !tbaa !3
  %42 = bitcast %struct.mg_iface* %41 to i8*
  call void @free(i8* %42)
  br label %for.inc33

for.inc33:                                        ; preds = %for.body25
  %43 = load i32, i32* %i, align 4, !tbaa !15
  %inc = add nsw i32 %43, 1
  store i32 %inc, i32* %i, align 4, !tbaa !15
  br label %for.cond23

for.end34:                                        ; preds = %for.cond23
  %44 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %ifaces35 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %44, i32 0, i32 6
  %45 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces35, align 8, !tbaa !67
  %46 = bitcast %struct.mg_iface** %45 to i8*
  call void @free(i8* %46)
  %47 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %47) #5
  %48 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %nameserver = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %48, i32 0, i32 7
  %49 = load i8*, i8** %nameserver, align 8, !tbaa !70
  call void @free(i8* %49)
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end34, %if.then1
  %50 = bitcast %struct.mg_connection** %tmp_conn to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %50) #5
  %51 = bitcast %struct.mg_connection** %conn to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %51) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup, %cleanup
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_mgr_poll(%struct.mg_mgr* %m, i32 %timeout_ms) #0 {
entry:
  %m.addr = alloca %struct.mg_mgr*, align 8
  %timeout_ms.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %num_calls_before = alloca i32, align 4
  store %struct.mg_mgr* %m, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  store i32 %timeout_ms, i32* %timeout_ms.addr, align 4, !tbaa !15
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = bitcast i32* %num_calls_before to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %num_calls = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %2, i32 0, i32 5
  %3 = load i32, i32* %num_calls, align 4, !tbaa !58
  store i32 %3, i32* %num_calls_before, align 4, !tbaa !15
  store i32 0, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4, !tbaa !15
  %5 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %num_ifaces = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %5, i32 0, i32 4
  %6 = load i32, i32* %num_ifaces, align 8, !tbaa !66
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %ifaces = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %7, i32 0, i32 6
  %8 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces, align 8, !tbaa !67
  %9 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom = sext i32 %9 to i64
  %arrayidx = getelementptr inbounds %struct.mg_iface*, %struct.mg_iface** %8, i64 %idxprom
  %10 = load %struct.mg_iface*, %struct.mg_iface** %arrayidx, align 8, !tbaa !3
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %10, i32 0, i32 2
  %11 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8, !tbaa !47
  %poll = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %11, i32 0, i32 4
  %12 = load i64 (%struct.mg_iface*, i32)*, i64 (%struct.mg_iface*, i32)** %poll, align 8, !tbaa !76
  %13 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %ifaces1 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %13, i32 0, i32 6
  %14 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces1, align 8, !tbaa !67
  %15 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom2 = sext i32 %15 to i64
  %arrayidx3 = getelementptr inbounds %struct.mg_iface*, %struct.mg_iface** %14, i64 %idxprom2
  %16 = load %struct.mg_iface*, %struct.mg_iface** %arrayidx3, align 8, !tbaa !3
  %17 = load i32, i32* %timeout_ms.addr, align 4, !tbaa !15
  %call = call i64 %12(%struct.mg_iface* %16, i32 %17)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %i, align 4, !tbaa !15
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %19 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8, !tbaa !3
  %num_calls4 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %19, i32 0, i32 5
  %20 = load i32, i32* %num_calls4, align 4, !tbaa !58
  %21 = load i32, i32* %num_calls_before, align 4, !tbaa !15
  %sub = sub nsw i32 %20, %21
  %22 = bitcast i32* %num_calls_before to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %22) #5
  %23 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %23) #5
  ret i32 %sub
}

declare i32 @"\01_close"(i32) #4

; Function Attrs: nounwind ssp uwtable
define i32 @mg_vprintf(%struct.mg_connection* %nc, i8* %fmt, %struct.__va_list_tag* %ap) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %fmt.addr = alloca i8*, align 8
  %ap.addr = alloca %struct.__va_list_tag*, align 8
  %mem = alloca [100 x i8], align 16
  %buf = alloca i8*, align 8
  %len = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %fmt, i8** %fmt.addr, align 8, !tbaa !3
  store %struct.__va_list_tag* %ap, %struct.__va_list_tag** %ap.addr, align 8, !tbaa !3
  %0 = bitcast [100 x i8]* %mem to i8*
  call void @llvm.lifetime.start.p0i8(i64 100, i8* %0) #5
  %1 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %mem, i32 0, i32 0
  store i8* %arraydecay, i8** %buf, align 8, !tbaa !3
  %2 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  %3 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %4 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8, !tbaa !3
  %call = call i32 @mg_avprintf(i8** %buf, i64 100, i8* %3, %struct.__va_list_tag* %4)
  store i32 %call, i32* %len, align 4, !tbaa !15
  %cmp = icmp sgt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %6 = load i8*, i8** %buf, align 8, !tbaa !3
  %7 = load i32, i32* %len, align 4, !tbaa !15
  call void @mg_send(%struct.mg_connection* %5, i8* %6, i32 %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load i8*, i8** %buf, align 8, !tbaa !3
  %arraydecay1 = getelementptr inbounds [100 x i8], [100 x i8]* %mem, i32 0, i32 0
  %cmp2 = icmp ne i8* %8, %arraydecay1
  br i1 %cmp2, label %land.lhs.true, label %if.end5

land.lhs.true:                                    ; preds = %if.end
  %9 = load i8*, i8** %buf, align 8, !tbaa !3
  %cmp3 = icmp ne i8* %9, null
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %land.lhs.true
  %10 = load i8*, i8** %buf, align 8, !tbaa !3
  call void @free(i8* %10)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %land.lhs.true, %if.end
  %11 = load i32, i32* %len, align 4, !tbaa !15
  %12 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %12) #5
  %13 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %13) #5
  %14 = bitcast [100 x i8]* %mem to i8*
  call void @llvm.lifetime.end.p0i8(i64 100, i8* %14) #5
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define void @mg_send(%struct.mg_connection* %nc, i8* %buf, i32 %len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i32 %len, i32* %len.addr, align 4, !tbaa !15
  %call = call double @mg_time()
  %conv = fptosi double %call to i64
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %last_io_time = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 10
  store i64 %conv, i64* %last_io_time, align 8, !tbaa !77
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 9
  %2 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %3 = load i32, i32* %len.addr, align 4, !tbaa !15
  %conv1 = sext i32 %3 to i64
  %call2 = call i64 @mbuf_append(%struct.mbuf* %send_mbuf, i8* %2, i64 %conv1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_printf(%struct.mg_connection* %conn, i8* %fmt, ...) #0 {
entry:
  %conn.addr = alloca %struct.mg_connection*, align 8
  %fmt.addr = alloca i8*, align 8
  %len = alloca i32, align 4
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store %struct.mg_connection* %conn, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  store i8* %fmt, i8** %fmt.addr, align 8, !tbaa !3
  %0 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %1) #5
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %2 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %3 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %call = call i32 @mg_vprintf(%struct.mg_connection* %2, i8* %3, %struct.__va_list_tag* %arraydecay2)
  store i32 %call, i32* %len, align 4, !tbaa !15
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*
  call void @llvm.va_end(i8* %arraydecay34)
  %4 = load i32, i32* %len, align 4, !tbaa !15
  %5 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %5) #5
  %6 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %6) #5
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define %struct.mg_connection* @mg_if_accept_new_conn(%struct.mg_connection* %lc) #0 {
entry:
  %retval = alloca %struct.mg_connection*, align 8
  %lc.addr = alloca %struct.mg_connection*, align 8
  %opts = alloca %struct.mg_add_sock_opts, align 8
  %nc = alloca %struct.mg_connection*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_connection* %lc, %struct.mg_connection** %lc.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_add_sock_opts* %opts to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %0) #5
  %1 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %2 = bitcast %struct.mg_add_sock_opts* %opts to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 32, i1 false)
  %3 = load %struct.mg_connection*, %struct.mg_connection** %lc.addr, align 8, !tbaa !3
  %mgr = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 3
  %4 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8, !tbaa !55
  %5 = load %struct.mg_connection*, %struct.mg_connection** %lc.addr, align 8, !tbaa !3
  %handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 15
  %6 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler, align 8, !tbaa !53
  %call = call %struct.mg_connection* @mg_create_connection(%struct.mg_mgr* %4, void (%struct.mg_connection*, i32, i8*)* %6, %struct.mg_add_sock_opts* byval align 8 %opts)
  store %struct.mg_connection* %call, %struct.mg_connection** %nc, align 8, !tbaa !3
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %cmp = icmp eq %struct.mg_connection* %7, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.mg_connection* null, %struct.mg_connection** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %8 = load %struct.mg_connection*, %struct.mg_connection** %lc.addr, align 8, !tbaa !3
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %listener = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %9, i32 0, i32 2
  store %struct.mg_connection* %8, %struct.mg_connection** %listener, align 8, !tbaa !78
  %10 = load %struct.mg_connection*, %struct.mg_connection** %lc.addr, align 8, !tbaa !3
  %proto_handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 12
  %11 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %proto_handler, align 8, !tbaa !52
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %proto_handler1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %12, i32 0, i32 12
  store void (%struct.mg_connection*, i32, i8*)* %11, void (%struct.mg_connection*, i32, i8*)** %proto_handler1, align 8, !tbaa !52
  %13 = load %struct.mg_connection*, %struct.mg_connection** %lc.addr, align 8, !tbaa !3
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %13, i32 0, i32 16
  %14 = load i8*, i8** %user_data, align 8, !tbaa !44
  %15 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %user_data2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %15, i32 0, i32 16
  store i8* %14, i8** %user_data2, align 8, !tbaa !44
  %16 = load %struct.mg_connection*, %struct.mg_connection** %lc.addr, align 8, !tbaa !3
  %recv_mbuf_limit = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %16, i32 0, i32 7
  %17 = load i64, i64* %recv_mbuf_limit, align 8, !tbaa !79
  %18 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %recv_mbuf_limit3 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %18, i32 0, i32 7
  store i64 %17, i64* %recv_mbuf_limit3, align 8, !tbaa !79
  %19 = load %struct.mg_connection*, %struct.mg_connection** %lc.addr, align 8, !tbaa !3
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %19, i32 0, i32 20
  %20 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8, !tbaa !46
  %21 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %iface4 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %21, i32 0, i32 20
  store %struct.mg_iface* %20, %struct.mg_iface** %iface4, align 8, !tbaa !46
  %22 = load %struct.mg_connection*, %struct.mg_connection** %lc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %22, i32 0, i32 21
  %23 = load i64, i64* %flags, align 8, !tbaa !41
  %and = and i64 %23, 16
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end
  %24 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %flags6 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %24, i32 0, i32 21
  %25 = load i64, i64* %flags6, align 8, !tbaa !41
  %or = or i64 %25, 16
  store i64 %or, i64* %flags6, align 8, !tbaa !41
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end
  %26 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %mgr8 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %26, i32 0, i32 3
  %27 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr8, align 8, !tbaa !55
  %28 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  call void @mg_add_conn(%struct.mg_mgr* %27, %struct.mg_connection* %28)
  br label %do.body

do.body:                                          ; preds = %if.end7
  %call9 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 2749)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.then11, label %if.end13

if.then11:                                        ; preds = %do.body
  %29 = load %struct.mg_connection*, %struct.mg_connection** %lc.addr, align 8, !tbaa !3
  %30 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %31 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %31, i32 0, i32 4
  %32 = load i32, i32* %sock, align 8, !tbaa !45
  %33 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %flags12 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %33, i32 0, i32 21
  %34 = load i64, i64* %flags12, align 8, !tbaa !41
  %conv = trunc i64 %34 to i32
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0), %struct.mg_connection* %29, %struct.mg_connection* %30, i32 %32, i32 %conv)
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end13
  br label %do.end

do.end:                                           ; preds = %do.cond
  %35 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  store %struct.mg_connection* %35, %struct.mg_connection** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %do.end, %if.then
  %36 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %36) #5
  %37 = bitcast %struct.mg_add_sock_opts* %opts to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %37) #5
  %38 = load %struct.mg_connection*, %struct.mg_connection** %retval, align 8
  ret %struct.mg_connection* %38
}

; Function Attrs: nounwind ssp uwtable
define internal %struct.mg_connection* @mg_create_connection(%struct.mg_mgr* %mgr, void (%struct.mg_connection*, i32, i8*)* %callback, %struct.mg_add_sock_opts* byval align 8 %opts) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %callback.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %conn = alloca %struct.mg_connection*, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  store void (%struct.mg_connection*, i32, i8*)* %callback, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_connection** %conn to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %2 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8, !tbaa !3
  %call = call %struct.mg_connection* @mg_create_connection_base(%struct.mg_mgr* %1, void (%struct.mg_connection*, i32, i8*)* %2, %struct.mg_add_sock_opts* byval align 8 %opts)
  store %struct.mg_connection* %call, %struct.mg_connection** %conn, align 8, !tbaa !3
  %3 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8, !tbaa !3
  %cmp = icmp ne %struct.mg_connection* %3, null
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8, !tbaa !3
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 20
  %5 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8, !tbaa !46
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %5, i32 0, i32 2
  %6 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8, !tbaa !47
  %create_conn = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %6, i32 0, i32 13
  %7 = load i32 (%struct.mg_connection*)*, i32 (%struct.mg_connection*)** %create_conn, align 8, !tbaa !80
  %8 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8, !tbaa !3
  %call1 = call i32 %7(%struct.mg_connection* %8)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %9 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8, !tbaa !3
  %10 = bitcast %struct.mg_connection* %9 to i8*
  call void @free(i8* %10)
  store %struct.mg_connection* null, %struct.mg_connection** %conn, align 8, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %11 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8, !tbaa !3
  %cmp2 = icmp eq %struct.mg_connection* %11, null
  br i1 %cmp2, label %if.then3, label %if.end8

if.then3:                                         ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then3
  %error_string = getelementptr inbounds %struct.mg_add_sock_opts, %struct.mg_add_sock_opts* %opts, i32 0, i32 2
  %12 = load i8**, i8*** %error_string, align 8, !tbaa !81
  %tobool4 = icmp ne i8** %12, null
  br i1 %tobool4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %do.body
  %error_string6 = getelementptr inbounds %struct.mg_add_sock_opts, %struct.mg_add_sock_opts* %opts, i32 0, i32 2
  %13 = load i8**, i8*** %error_string6, align 8, !tbaa !81
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.172, i32 0, i32 0), i8** %13, align 8, !tbaa !3
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end7
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end8

if.end8:                                          ; preds = %do.end, %if.end
  %14 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8, !tbaa !3
  %15 = bitcast %struct.mg_connection** %conn to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %15) #5
  ret %struct.mg_connection* %14
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_add_conn(%struct.mg_mgr* %mgr, %struct.mg_connection* %c) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %c.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 2258)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %0 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %1 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.173, i32 0, i32 0), %struct.mg_mgr* %0, %struct.mg_connection* %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %3 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %mgr1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 3
  store %struct.mg_mgr* %2, %struct.mg_mgr** %mgr1, align 8, !tbaa !55
  %4 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %active_connections = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %4, i32 0, i32 0
  %5 = load %struct.mg_connection*, %struct.mg_connection** %active_connections, align 8, !tbaa !73
  %6 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %next = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 0
  store %struct.mg_connection* %5, %struct.mg_connection** %next, align 8, !tbaa !74
  %7 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %8 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %active_connections2 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %8, i32 0, i32 0
  store %struct.mg_connection* %7, %struct.mg_connection** %active_connections2, align 8, !tbaa !73
  %9 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %prev = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %9, i32 0, i32 1
  store %struct.mg_connection* null, %struct.mg_connection** %prev, align 8, !tbaa !83
  %10 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %next3 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 0
  %11 = load %struct.mg_connection*, %struct.mg_connection** %next3, align 8, !tbaa !74
  %cmp = icmp ne %struct.mg_connection* %11, null
  br i1 %cmp, label %if.then4, label %if.end7

if.then4:                                         ; preds = %do.end
  %12 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %13 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %next5 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %13, i32 0, i32 0
  %14 = load %struct.mg_connection*, %struct.mg_connection** %next5, align 8, !tbaa !74
  %prev6 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 1
  store %struct.mg_connection* %12, %struct.mg_connection** %prev6, align 8, !tbaa !83
  br label %if.end7

if.end7:                                          ; preds = %if.then4, %do.end
  %15 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %15, i32 0, i32 4
  %16 = load i32, i32* %sock, align 8, !tbaa !45
  %cmp8 = icmp ne i32 %16, -1
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end7
  %17 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %17, i32 0, i32 20
  %18 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8, !tbaa !46
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %18, i32 0, i32 2
  %19 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8, !tbaa !47
  %add_conn = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %19, i32 0, i32 2
  %20 = load void (%struct.mg_connection*)*, void (%struct.mg_connection*)** %add_conn, align 8, !tbaa !84
  %21 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  call void %20(%struct.mg_connection* %21)
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.end7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_if_accept_tcp_cb(%struct.mg_connection* %nc, %union.socket_address* %sa, i64 %sa_len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %sa.addr = alloca %union.socket_address*, align 8
  %sa_len.addr = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8, !tbaa !3
  store i64 %sa_len, i64* %sa_len.addr, align 8, !tbaa !12
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 2756)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 21
  %2 = load i64, i64* %flags, align 8, !tbaa !41
  %and = and i64 %2, 2
  %tobool1 = icmp ne i64 %and, 0
  %3 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0)
  %4 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %sin = bitcast %union.socket_address* %4 to %struct.sockaddr_in*
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin, i32 0, i32 3
  %coerce.dive = getelementptr inbounds %struct.in_addr, %struct.in_addr* %sin_addr, i32 0, i32 0
  %5 = load i32, i32* %coerce.dive, align 4
  %call2 = call i8* @inet_ntoa(i32 %5)
  %6 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %sin3 = bitcast %union.socket_address* %6 to %struct.sockaddr_in*
  %sin_port = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin3, i32 0, i32 2
  %7 = load i16, i16* %sin_port, align 2, !tbaa !14
  %call4 = call zeroext i16 @_OSSwapInt16(i16 zeroext %7)
  %conv = zext i16 %call4 to i32
  %conv5 = trunc i32 %conv to i16
  %conv6 = zext i16 %conv5 to i32
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), %struct.mg_connection* %0, i8* %cond, i8* %call2, i32 %conv6)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sa7 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %8, i32 0, i32 6
  %9 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %10 = bitcast %union.socket_address* %sa7 to i8*
  %11 = bitcast %union.socket_address* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 4 %11, i64 16, i1 false), !tbaa.struct !85
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %13 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %13, i32 0, i32 16
  %14 = load i8*, i8** %user_data, align 8, !tbaa !44
  %15 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sa8 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %15, i32 0, i32 6
  %16 = bitcast %union.socket_address* %sa8 to i8*
  call void @mg_call(%struct.mg_connection* %12, void (%struct.mg_connection*, i32, i8*)* null, i8* %14, i32 1, i8* %16)
  %17 = load i64, i64* %sa_len.addr, align 8, !tbaa !12
  ret void
}

declare i8* @inet_ntoa(i32) #4

; Function Attrs: inlinehint nounwind ssp uwtable
define internal zeroext i16 @_OSSwapInt16(i16 zeroext %_data) #12 {
entry:
  %_data.addr = alloca i16, align 2
  store i16 %_data, i16* %_data.addr, align 2, !tbaa !86
  %0 = load i16, i16* %_data.addr, align 2, !tbaa !86
  %conv = zext i16 %0 to i32
  %shl = shl i32 %conv, 8
  %1 = load i16, i16* %_data.addr, align 2, !tbaa !86
  %conv1 = zext i16 %1 to i32
  %shr = ashr i32 %conv1, 8
  %or = or i32 %shl, %shr
  %conv2 = trunc i32 %or to i16
  ret i16 %conv2
}

; Function Attrs: nounwind ssp uwtable
define double @mg_time() #0 {
entry:
  %call = call double @cs_time()
  ret double %call
}

; Function Attrs: nounwind ssp uwtable
define void @mg_if_can_recv_cb(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %call = call i32 @mg_do_recv(%struct.mg_connection* %0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_do_recv(%struct.mg_connection* %nc) #0 {
entry:
  %retval = alloca i32, align 4
  %nc.addr = alloca %struct.mg_connection*, align 8
  %res = alloca i32, align 4
  %buf = alloca i8*, align 8
  %len = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %0 = bitcast i32* %res to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  store i32 0, i32* %res, align 4, !tbaa !15
  %1 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  store i8* null, i8** %buf, align 8, !tbaa !3
  %2 = bitcast i64* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 21
  %4 = load i64, i64* %flags, align 8, !tbaa !41
  %and = and i64 %4, 2
  %tobool = icmp ne i64 %and, 0
  %5 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1460, i32 1460
  %conv = sext i32 %cond to i64
  store i64 %conv, i64* %len, align 8, !tbaa !12
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 21
  %7 = load i64, i64* %flags1, align 8, !tbaa !41
  %and2 = and i64 %7, 2056
  %tobool3 = icmp ne i64 %and2, 0
  br i1 %tobool3, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags4 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %8, i32 0, i32 21
  %9 = load i64, i64* %flags4, align 8, !tbaa !41
  %and5 = and i64 %9, 1
  %tobool6 = icmp ne i64 %and5, 0
  br i1 %tobool6, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags7 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 21
  %11 = load i64, i64* %flags7, align 8, !tbaa !41
  %and8 = and i64 %11, 2
  %tobool9 = icmp ne i64 %and8, 0
  br i1 %tobool9, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true, %entry
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  br label %do.body

do.body:                                          ; preds = %land.end, %if.end
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %13 = load i64, i64* %len, align 8, !tbaa !12
  %call = call i64 @recv_avail_size(%struct.mg_connection* %12, i64 %13)
  store i64 %call, i64* %len, align 8, !tbaa !12
  %14 = load i64, i64* %len, align 8, !tbaa !12
  %cmp = icmp eq i64 %14, 0
  br i1 %cmp, label %if.then11, label %if.end12

if.then11:                                        ; preds = %do.body
  store i32 -2, i32* %res, align 4, !tbaa !15
  br label %do.end

if.end12:                                         ; preds = %do.body
  %15 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %15, i32 0, i32 8
  %size = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf, i32 0, i32 2
  %16 = load i64, i64* %size, align 8, !tbaa !88
  %17 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf13 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %17, i32 0, i32 8
  %len14 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf13, i32 0, i32 1
  %18 = load i64, i64* %len14, align 8, !tbaa !54
  %19 = load i64, i64* %len, align 8, !tbaa !12
  %add = add i64 %18, %19
  %cmp15 = icmp ult i64 %16, %add
  br i1 %cmp15, label %if.then17, label %if.end22

if.then17:                                        ; preds = %if.end12
  %20 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf18 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %20, i32 0, i32 8
  %21 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf19 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %21, i32 0, i32 8
  %len20 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf19, i32 0, i32 1
  %22 = load i64, i64* %len20, align 8, !tbaa !54
  %23 = load i64, i64* %len, align 8, !tbaa !12
  %add21 = add i64 %22, %23
  call void @mbuf_resize(%struct.mbuf* %recv_mbuf18, i64 %add21)
  br label %if.end22

if.end22:                                         ; preds = %if.then17, %if.end12
  %24 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf23 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %24, i32 0, i32 8
  %buf24 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf23, i32 0, i32 0
  %25 = load i8*, i8** %buf24, align 8, !tbaa !89
  %26 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf25 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %26, i32 0, i32 8
  %len26 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf25, i32 0, i32 1
  %27 = load i64, i64* %len26, align 8, !tbaa !54
  %add.ptr = getelementptr inbounds i8, i8* %25, i64 %27
  store i8* %add.ptr, i8** %buf, align 8, !tbaa !3
  %28 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf27 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %28, i32 0, i32 8
  %size28 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf27, i32 0, i32 2
  %29 = load i64, i64* %size28, align 8, !tbaa !88
  %30 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf29 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %30, i32 0, i32 8
  %len30 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf29, i32 0, i32 1
  %31 = load i64, i64* %len30, align 8, !tbaa !54
  %sub = sub i64 %29, %31
  store i64 %sub, i64* %len, align 8, !tbaa !12
  %32 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags31 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %32, i32 0, i32 21
  %33 = load i64, i64* %flags31, align 8, !tbaa !41
  %and32 = and i64 %33, 2
  %tobool33 = icmp ne i64 %and32, 0
  br i1 %tobool33, label %if.then34, label %if.else

if.then34:                                        ; preds = %if.end22
  %34 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %35 = load i8*, i8** %buf, align 8, !tbaa !3
  %36 = load i64, i64* %len, align 8, !tbaa !12
  %call35 = call i32 @mg_recv_udp(%struct.mg_connection* %34, i8* %35, i64 %36)
  store i32 %call35, i32* %res, align 4, !tbaa !15
  br label %if.end37

if.else:                                          ; preds = %if.end22
  %37 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %38 = load i8*, i8** %buf, align 8, !tbaa !3
  %39 = load i64, i64* %len, align 8, !tbaa !12
  %call36 = call i32 @mg_recv_tcp(%struct.mg_connection* %37, i8* %38, i64 %39)
  store i32 %call36, i32* %res, align 4, !tbaa !15
  br label %if.end37

if.end37:                                         ; preds = %if.else, %if.then34
  br label %do.cond

do.cond:                                          ; preds = %if.end37
  %40 = load i32, i32* %res, align 4, !tbaa !15
  %cmp38 = icmp sgt i32 %40, 0
  br i1 %cmp38, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %41 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags40 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %41, i32 0, i32 21
  %42 = load i64, i64* %flags40, align 8, !tbaa !41
  %and41 = and i64 %42, 2050
  %tobool42 = icmp ne i64 %and41, 0
  %lnot = xor i1 %tobool42, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %43 = phi i1 [ false, %do.cond ], [ %lnot, %land.rhs ]
  br i1 %43, label %do.body, label %do.end

do.end:                                           ; preds = %land.end, %if.then11
  %44 = load i32, i32* %res, align 4, !tbaa !15
  store i32 %44, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %do.end, %if.then
  %45 = bitcast i64* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %45) #5
  %46 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %46) #5
  %47 = bitcast i32* %res to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %47) #5
  %48 = load i32, i32* %retval, align 4
  ret i32 %48
}

; Function Attrs: nounwind ssp uwtable
define void @mg_if_can_send_cb(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %n = alloca i32, align 4
  %buf = alloca i8*, align 8
  %len = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %0 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  store i32 0, i32* %n, align 4, !tbaa !15
  %1 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %2, i32 0, i32 9
  %buf1 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %send_mbuf, i32 0, i32 0
  %3 = load i8*, i8** %buf1, align 8, !tbaa !90
  store i8* %3, i8** %buf, align 8, !tbaa !3
  %4 = bitcast i64* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #5
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %send_mbuf2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 9
  %len3 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %send_mbuf2, i32 0, i32 1
  %6 = load i64, i64* %len3, align 8, !tbaa !43
  store i64 %6, i64* %len, align 8, !tbaa !12
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %7, i32 0, i32 21
  %8 = load i64, i64* %flags, align 8, !tbaa !41
  %and = and i64 %8, 2056
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags4 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %9, i32 0, i32 21
  %10 = load i64, i64* %flags4, align 8, !tbaa !41
  %and5 = and i64 %10, 2
  %tobool6 = icmp ne i64 %and5, 0
  br i1 %tobool6, label %if.end15, label %if.then7

if.then7:                                         ; preds = %if.end
  %11 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags8 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %11, i32 0, i32 21
  %12 = load i64, i64* %flags8, align 8, !tbaa !41
  %and9 = and i64 %12, 1
  %tobool10 = icmp ne i64 %and9, 0
  br i1 %tobool10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.then7
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end12:                                         ; preds = %if.then7
  %13 = load i64, i64* %len, align 8, !tbaa !12
  %cmp = icmp ugt i64 %13, 1460
  br i1 %cmp, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end12
  store i64 1460, i64* %len, align 8, !tbaa !12
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end12
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %if.end
  %14 = load i64, i64* %len, align 8, !tbaa !12
  %cmp16 = icmp ugt i64 %14, 0
  br i1 %cmp16, label %if.then17, label %if.end30

if.then17:                                        ; preds = %if.end15
  %15 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags18 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %15, i32 0, i32 21
  %16 = load i64, i64* %flags18, align 8, !tbaa !41
  %and19 = and i64 %16, 2
  %tobool20 = icmp ne i64 %and19, 0
  br i1 %tobool20, label %if.then21, label %if.else

if.then21:                                        ; preds = %if.then17
  %17 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %17, i32 0, i32 20
  %18 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8, !tbaa !46
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %18, i32 0, i32 2
  %19 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8, !tbaa !47
  %udp_send = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %19, i32 0, i32 10
  %20 = load i32 (%struct.mg_connection*, i8*, i64)*, i32 (%struct.mg_connection*, i8*, i64)** %udp_send, align 8, !tbaa !91
  %21 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %22 = load i8*, i8** %buf, align 8, !tbaa !3
  %23 = load i64, i64* %len, align 8, !tbaa !12
  %call = call i32 %20(%struct.mg_connection* %21, i8* %22, i64 %23)
  store i32 %call, i32* %n, align 4, !tbaa !15
  br label %if.end25

if.else:                                          ; preds = %if.then17
  %24 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %iface22 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %24, i32 0, i32 20
  %25 = load %struct.mg_iface*, %struct.mg_iface** %iface22, align 8, !tbaa !46
  %vtable23 = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %25, i32 0, i32 2
  %26 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable23, align 8, !tbaa !47
  %tcp_send = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %26, i32 0, i32 9
  %27 = load i32 (%struct.mg_connection*, i8*, i64)*, i32 (%struct.mg_connection*, i8*, i64)** %tcp_send, align 8, !tbaa !92
  %28 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %29 = load i8*, i8** %buf, align 8, !tbaa !3
  %30 = load i64, i64* %len, align 8, !tbaa !12
  %call24 = call i32 %27(%struct.mg_connection* %28, i8* %29, i64 %30)
  store i32 %call24, i32* %n, align 4, !tbaa !15
  br label %if.end25

if.end25:                                         ; preds = %if.else, %if.then21
  br label %do.body

do.body:                                          ; preds = %if.end25
  %call26 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 2973)
  %tobool27 = icmp ne i32 %call26, 0
  br i1 %tobool27, label %if.then28, label %if.end29

if.then28:                                        ; preds = %do.body
  %31 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %32 = load i32, i32* %n, align 4, !tbaa !15
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i32 0, i32 0), %struct.mg_connection* %31, i32 %32)
  br label %if.end29

if.end29:                                         ; preds = %if.then28, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end29
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end30

if.end30:                                         ; preds = %do.end, %if.end15
  %33 = load i32, i32* %n, align 4, !tbaa !15
  %cmp31 = icmp sgt i32 %33, 0
  br i1 %cmp31, label %land.lhs.true, label %if.end39

land.lhs.true:                                    ; preds = %if.end30
  %34 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %mgr = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %34, i32 0, i32 3
  %35 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8, !tbaa !55
  %tobool32 = icmp ne %struct.mg_mgr* %35, null
  br i1 %tobool32, label %land.lhs.true33, label %if.end39

land.lhs.true33:                                  ; preds = %land.lhs.true
  %36 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %mgr34 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %36, i32 0, i32 3
  %37 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr34, align 8, !tbaa !55
  %hexdump_file = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %37, i32 0, i32 1
  %38 = load i8*, i8** %hexdump_file, align 8, !tbaa !56
  %cmp35 = icmp ne i8* %38, null
  br i1 %cmp35, label %if.then36, label %if.end39

if.then36:                                        ; preds = %land.lhs.true33
  %39 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %40 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %mgr37 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %40, i32 0, i32 3
  %41 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr37, align 8, !tbaa !55
  %hexdump_file38 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %41, i32 0, i32 1
  %42 = load i8*, i8** %hexdump_file38, align 8, !tbaa !56
  %43 = load i8*, i8** %buf, align 8, !tbaa !3
  %44 = load i32, i32* %n, align 4, !tbaa !15
  call void @mg_hexdump_connection(%struct.mg_connection* %39, i8* %42, i8* %43, i32 %44, i32 4)
  br label %if.end39

if.end39:                                         ; preds = %if.then36, %land.lhs.true33, %land.lhs.true, %if.end30
  %45 = load i32, i32* %n, align 4, !tbaa !15
  %cmp40 = icmp slt i32 %45, 0
  br i1 %cmp40, label %if.then41, label %if.else43

if.then41:                                        ; preds = %if.end39
  %46 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags42 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %46, i32 0, i32 21
  %47 = load i64, i64* %flags42, align 8, !tbaa !41
  %or = or i64 %47, 2048
  store i64 %or, i64* %flags42, align 8, !tbaa !41
  br label %if.end51

if.else43:                                        ; preds = %if.end39
  %48 = load i32, i32* %n, align 4, !tbaa !15
  %cmp44 = icmp sgt i32 %48, 0
  br i1 %cmp44, label %if.then45, label %if.end50

if.then45:                                        ; preds = %if.else43
  %call46 = call double @mg_time()
  %conv = fptosi double %call46 to i64
  %49 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %last_io_time = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %49, i32 0, i32 10
  store i64 %conv, i64* %last_io_time, align 8, !tbaa !77
  %50 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %send_mbuf47 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %50, i32 0, i32 9
  %51 = load i32, i32* %n, align 4, !tbaa !15
  %conv48 = sext i32 %51 to i64
  call void @mbuf_remove(%struct.mbuf* %send_mbuf47, i64 %conv48)
  %52 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %send_mbuf49 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %52, i32 0, i32 9
  call void @mbuf_trim(%struct.mbuf* %send_mbuf49)
  br label %if.end50

if.end50:                                         ; preds = %if.then45, %if.else43
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then41
  %53 = load i32, i32* %n, align 4, !tbaa !15
  %cmp52 = icmp ne i32 %53, 0
  br i1 %cmp52, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.end51
  %54 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %55 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %55, i32 0, i32 16
  %56 = load i8*, i8** %user_data, align 8, !tbaa !44
  %57 = bitcast i32* %n to i8*
  call void @mg_call(%struct.mg_connection* %54, void (%struct.mg_connection*, i32, i8*)* null, i8* %56, i32 4, i8* %57)
  br label %if.end55

if.end55:                                         ; preds = %if.then54, %if.end51
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end55, %if.then11, %if.then
  %58 = bitcast i64* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %58) #5
  %59 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %59) #5
  %60 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %60) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup, %cleanup
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define void @mg_hexdump_connection(%struct.mg_connection* %nc, i8* %path, i8* %buf, i32 %num_bytes, i32 %ev) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %path.addr = alloca i8*, align 8
  %buf.addr = alloca i8*, align 8
  %num_bytes.addr = alloca i32, align 4
  %ev.addr = alloca i32, align 4
  %fp = alloca %struct.__sFILE*, align 8
  %src = alloca [60 x i8], align 16
  %dst = alloca [60 x i8], align 16
  %tag = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %path, i8** %path.addr, align 8, !tbaa !3
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i32 %num_bytes, i32* %num_bytes.addr, align 4, !tbaa !15
  store i32 %ev, i32* %ev.addr, align 4, !tbaa !15
  %0 = bitcast %struct.__sFILE** %fp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  store %struct.__sFILE* null, %struct.__sFILE** %fp, align 8, !tbaa !3
  %1 = bitcast [60 x i8]* %src to i8*
  call void @llvm.lifetime.start.p0i8(i64 60, i8* %1) #5
  %2 = bitcast [60 x i8]* %dst to i8*
  call void @llvm.lifetime.start.p0i8(i64 60, i8* %2) #5
  %3 = bitcast i8** %tag to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  store i8* null, i8** %tag, align 8, !tbaa !3
  %4 = load i32, i32* %ev.addr, align 4, !tbaa !15
  switch i32 %4, label %sw.epilog [
    i32 3, label %sw.bb
    i32 4, label %sw.bb1
    i32 1, label %sw.bb2
    i32 2, label %sw.bb3
    i32 5, label %sw.bb4
  ]

sw.bb:                                            ; preds = %entry
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.144, i32 0, i32 0), i8** %tag, align 8, !tbaa !3
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.145, i32 0, i32 0), i8** %tag, align 8, !tbaa !3
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.146, i32 0, i32 0), i8** %tag, align 8, !tbaa !3
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.147, i32 0, i32 0), i8** %tag, align 8, !tbaa !3
  br label %sw.epilog

sw.bb4:                                           ; preds = %entry
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.148, i32 0, i32 0), i8** %tag, align 8, !tbaa !3
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %5 = load i8*, i8** %tag, align 8, !tbaa !3
  %cmp = icmp eq i8* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.epilog
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %sw.epilog
  %6 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %call = call i32 @strcmp(i8* %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.149, i32 0, i32 0))
  %cmp5 = icmp eq i32 %call, 0
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end
  %7 = load %struct.__sFILE*, %struct.__sFILE** @__stdoutp, align 8, !tbaa !3
  store %struct.__sFILE* %7, %struct.__sFILE** %fp, align 8, !tbaa !3
  br label %if.end13

if.else:                                          ; preds = %if.end
  %8 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %call7 = call i32 @strcmp(i8* %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.150, i32 0, i32 0))
  %cmp8 = icmp eq i32 %call7, 0
  br i1 %cmp8, label %if.then9, label %if.else10

if.then9:                                         ; preds = %if.else
  %9 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8, !tbaa !3
  store %struct.__sFILE* %9, %struct.__sFILE** %fp, align 8, !tbaa !3
  br label %if.end12

if.else10:                                        ; preds = %if.else
  %10 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %call11 = call %struct.__sFILE* @mg_fopen(i8* %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.151, i32 0, i32 0))
  store %struct.__sFILE* %call11, %struct.__sFILE** %fp, align 8, !tbaa !3
  br label %if.end12

if.end12:                                         ; preds = %if.else10, %if.then9
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.then6
  %11 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !tbaa !3
  %cmp14 = icmp eq %struct.__sFILE* %11, null
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end13
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end16:                                         ; preds = %if.end13
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %arraydecay = getelementptr inbounds [60 x i8], [60 x i8]* %src, i32 0, i32 0
  %call17 = call i32 @mg_conn_addr_to_str(%struct.mg_connection* %12, i8* %arraydecay, i64 60, i32 3)
  %13 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %arraydecay18 = getelementptr inbounds [60 x i8], [60 x i8]* %dst, i32 0, i32 0
  %call19 = call i32 @mg_conn_addr_to_str(%struct.mg_connection* %13, i8* %arraydecay18, i64 60, i32 7)
  %14 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !tbaa !3
  %call20 = call double @mg_time()
  %conv = fptoui double %call20 to i64
  %15 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %16 = bitcast %struct.mg_connection* %15 to i8*
  %arraydecay21 = getelementptr inbounds [60 x i8], [60 x i8]* %src, i32 0, i32 0
  %17 = load i8*, i8** %tag, align 8, !tbaa !3
  %arraydecay22 = getelementptr inbounds [60 x i8], [60 x i8]* %dst, i32 0, i32 0
  %18 = load i32, i32* %num_bytes.addr, align 4, !tbaa !15
  %call23 = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %14, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.152, i32 0, i32 0), i64 %conv, i8* %16, i8* %arraydecay21, i8* %17, i8* %arraydecay22, i32 %18)
  %19 = load i32, i32* %num_bytes.addr, align 4, !tbaa !15
  %cmp24 = icmp sgt i32 %19, 0
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.end16
  %20 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !tbaa !3
  %21 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %22 = load i32, i32* %num_bytes.addr, align 4, !tbaa !15
  call void @mg_hexdumpf(%struct.__sFILE* %20, i8* %21, i32 %22)
  br label %if.end27

if.end27:                                         ; preds = %if.then26, %if.end16
  %23 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !tbaa !3
  %24 = load %struct.__sFILE*, %struct.__sFILE** @__stdoutp, align 8, !tbaa !3
  %cmp28 = icmp ne %struct.__sFILE* %23, %24
  br i1 %cmp28, label %land.lhs.true, label %if.end34

land.lhs.true:                                    ; preds = %if.end27
  %25 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !tbaa !3
  %26 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8, !tbaa !3
  %cmp30 = icmp ne %struct.__sFILE* %25, %26
  br i1 %cmp30, label %if.then32, label %if.end34

if.then32:                                        ; preds = %land.lhs.true
  %27 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !tbaa !3
  %call33 = call i32 @fclose(%struct.__sFILE* %27)
  br label %if.end34

if.end34:                                         ; preds = %if.then32, %land.lhs.true, %if.end27
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end34, %if.then15, %if.then
  %28 = bitcast i8** %tag to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %28) #5
  %29 = bitcast [60 x i8]* %dst to i8*
  call void @llvm.lifetime.end.p0i8(i64 60, i8* %29) #5
  %30 = bitcast [60 x i8]* %src to i8*
  call void @llvm.lifetime.end.p0i8(i64 60, i8* %30) #5
  %31 = bitcast %struct.__sFILE** %fp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %31) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup, %cleanup
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define void @mg_if_connect_cb(%struct.mg_connection* %nc, i32 %err) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %err.addr = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i32 %err, i32* %err.addr, align 4, !tbaa !15
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3016)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 21
  %2 = load i64, i64* %flags, align 8, !tbaa !41
  %and = and i64 %2, 2
  %tobool1 = icmp ne i64 %and, 0
  %3 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0)
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sa = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 6
  %sin = bitcast %union.socket_address* %sa to %struct.sockaddr_in*
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin, i32 0, i32 3
  %coerce.dive = getelementptr inbounds %struct.in_addr, %struct.in_addr* %sin_addr, i32 0, i32 0
  %5 = load i32, i32* %coerce.dive, align 4
  %call2 = call i8* @inet_ntoa(i32 %5)
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sa3 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 6
  %sin4 = bitcast %union.socket_address* %sa3 to %struct.sockaddr_in*
  %sin_port = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin4, i32 0, i32 2
  %7 = load i16, i16* %sin_port, align 2, !tbaa !14
  %call5 = call zeroext i16 @_OSSwapInt16(i16 zeroext %7)
  %conv = zext i16 %call5 to i32
  %conv6 = trunc i32 %conv to i16
  %conv7 = zext i16 %conv6 to i32
  %8 = load i32, i32* %err.addr, align 4, !tbaa !15
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.16, i32 0, i32 0), %struct.mg_connection* %0, i8* %cond, i8* %call2, i32 %conv7, i32 %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags8 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %9, i32 0, i32 21
  %10 = load i64, i64* %flags8, align 8, !tbaa !41
  %and9 = and i64 %10, -9
  store i64 %and9, i64* %flags8, align 8, !tbaa !41
  %11 = load i32, i32* %err.addr, align 4, !tbaa !15
  %cmp = icmp ne i32 %11, 0
  br i1 %cmp, label %if.then11, label %if.end13

if.then11:                                        ; preds = %do.end
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags12 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %12, i32 0, i32 21
  %13 = load i64, i64* %flags12, align 8, !tbaa !41
  %or = or i64 %13, 2048
  store i64 %or, i64* %flags12, align 8, !tbaa !41
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %do.end
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %15 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %15, i32 0, i32 16
  %16 = load i8*, i8** %user_data, align 8, !tbaa !44
  %17 = bitcast i32* %err.addr to i8*
  call void @mg_call(%struct.mg_connection* %14, void (%struct.mg_connection*, i32, i8*)* null, i8* %16, i32 2, i8* %17)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define %struct.mg_connection* @mg_connect(%struct.mg_mgr* %mgr, i8* %address, void (%struct.mg_connection*, i32, i8*)* %callback) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %address.addr = alloca i8*, align 8
  %callback.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %opts = alloca %struct.mg_connect_opts, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  store i8* %address, i8** %address.addr, align 8, !tbaa !3
  store void (%struct.mg_connection*, i32, i8*)* %callback, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_connect_opts* %opts to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* %0) #5
  %1 = bitcast %struct.mg_connect_opts* %opts to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 40, i1 false)
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %3 = load i8*, i8** %address.addr, align 8, !tbaa !3
  %4 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8, !tbaa !3
  %call = call %struct.mg_connection* @mg_connect_opt(%struct.mg_mgr* %2, i8* %3, void (%struct.mg_connection*, i32, i8*)* %4, %struct.mg_connect_opts* byval align 8 %opts)
  %5 = bitcast %struct.mg_connect_opts* %opts to i8*
  call void @llvm.lifetime.end.p0i8(i64 40, i8* %5) #5
  ret %struct.mg_connection* %call
}

; Function Attrs: nounwind ssp uwtable
define %struct.mg_connection* @mg_connect_opt(%struct.mg_mgr* %mgr, i8* %address, void (%struct.mg_connection*, i32, i8*)* %callback, %struct.mg_connect_opts* byval align 8 %opts) #0 {
entry:
  %retval = alloca %struct.mg_connection*, align 8
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %address.addr = alloca i8*, align 8
  %callback.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %nc = alloca %struct.mg_connection*, align 8
  %proto = alloca i32, align 4
  %rc = alloca i32, align 4
  %add_sock_opts = alloca %struct.mg_add_sock_opts, align 8
  %host = alloca [200 x i8], align 16
  %cleanup.dest.slot = alloca i32, align 4
  %dns_conn = alloca %struct.mg_connection*, align 8
  %o = alloca %struct.mg_resolve_async_opts, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  store i8* %address, i8** %address.addr, align 8, !tbaa !3
  store void (%struct.mg_connection*, i32, i8*)* %callback, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  store %struct.mg_connection* null, %struct.mg_connection** %nc, align 8, !tbaa !3
  %1 = bitcast i32* %proto to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  %2 = bitcast i32* %rc to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  %3 = bitcast %struct.mg_add_sock_opts* %add_sock_opts to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %3) #5
  %4 = bitcast [200 x i8]* %host to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* %4) #5
  %5 = bitcast %struct.mg_add_sock_opts* %add_sock_opts to i8*
  %6 = bitcast %struct.mg_connect_opts* %opts to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 32, i1 false)
  %7 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8, !tbaa !3
  %cmp = icmp eq void (%struct.mg_connection*, i32, i8*)* %7, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store void (%struct.mg_connection*, i32, i8*)* @mg_ev_handler_empty, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %9 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8, !tbaa !3
  %call = call %struct.mg_connection* @mg_create_connection(%struct.mg_mgr* %8, void (%struct.mg_connection*, i32, i8*)* %9, %struct.mg_add_sock_opts* byval align 8 %add_sock_opts)
  store %struct.mg_connection* %call, %struct.mg_connection** %nc, align 8, !tbaa !3
  %cmp1 = icmp eq %struct.mg_connection* %call, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store %struct.mg_connection* null, %struct.mg_connection** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup43

if.end3:                                          ; preds = %if.end
  %10 = load i8*, i8** %address.addr, align 8, !tbaa !3
  %11 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %sa = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %11, i32 0, i32 6
  %arraydecay = getelementptr inbounds [200 x i8], [200 x i8]* %host, i32 0, i32 0
  %call4 = call i32 @mg_parse_address(i8* %10, %union.socket_address* %sa, i32* %proto, i8* %arraydecay, i64 200)
  store i32 %call4, i32* %rc, align 4, !tbaa !15
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %if.then6, label %if.end10

if.then6:                                         ; preds = %if.end3
  br label %do.body

do.body:                                          ; preds = %if.then6
  %error_string = getelementptr inbounds %struct.mg_connect_opts, %struct.mg_connect_opts* %opts, i32 0, i32 2
  %12 = load i8**, i8*** %error_string, align 8, !tbaa !93
  %tobool = icmp ne i8** %12, null
  br i1 %tobool, label %if.then7, label %if.end9

if.then7:                                         ; preds = %do.body
  %error_string8 = getelementptr inbounds %struct.mg_connect_opts, %struct.mg_connect_opts* %opts, i32 0, i32 2
  %13 = load i8**, i8*** %error_string8, align 8, !tbaa !93
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17, i32 0, i32 0), i8** %13, align 8, !tbaa !3
  br label %if.end9

if.end9:                                          ; preds = %if.then7, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end9
  br label %do.end

do.end:                                           ; preds = %do.cond
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  call void @mg_destroy_conn(%struct.mg_connection* %14, i32 1)
  store %struct.mg_connection* null, %struct.mg_connection** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup43

if.end10:                                         ; preds = %if.end3
  %flags = getelementptr inbounds %struct.mg_connect_opts, %struct.mg_connect_opts* %opts, i32 0, i32 1
  %15 = load i32, i32* %flags, align 8, !tbaa !95
  %and = and i32 %15, 66080768
  %conv = zext i32 %and to i64
  %16 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %flags11 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %16, i32 0, i32 21
  %17 = load i64, i64* %flags11, align 8, !tbaa !41
  %or = or i64 %17, %conv
  store i64 %or, i64* %flags11, align 8, !tbaa !41
  %18 = load i32, i32* %proto, align 4, !tbaa !15
  %cmp12 = icmp eq i32 %18, 2
  %19 = zext i1 %cmp12 to i64
  %cond = select i1 %cmp12, i32 2, i32 0
  %conv14 = sext i32 %cond to i64
  %20 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %flags15 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %20, i32 0, i32 21
  %21 = load i64, i64* %flags15, align 8, !tbaa !41
  %or16 = or i64 %21, %conv14
  store i64 %or16, i64* %flags15, align 8, !tbaa !41
  %user_data = getelementptr inbounds %struct.mg_connect_opts, %struct.mg_connect_opts* %opts, i32 0, i32 0
  %22 = load i8*, i8** %user_data, align 8, !tbaa !96
  %23 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %user_data17 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %23, i32 0, i32 16
  store i8* %22, i8** %user_data17, align 8, !tbaa !44
  %24 = load i32, i32* %rc, align 4, !tbaa !15
  %cmp18 = icmp eq i32 %24, 0
  br i1 %cmp18, label %if.then20, label %if.else

if.then20:                                        ; preds = %if.end10
  %25 = bitcast %struct.mg_connection** %dns_conn to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %25) #5
  store %struct.mg_connection* null, %struct.mg_connection** %dns_conn, align 8, !tbaa !3
  %26 = bitcast %struct.mg_resolve_async_opts* %o to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %26) #5
  %27 = bitcast %struct.mg_resolve_async_opts* %o to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %27, i8 0, i64 32, i1 false)
  %dns_conn21 = getelementptr inbounds %struct.mg_resolve_async_opts, %struct.mg_resolve_async_opts* %o, i32 0, i32 5
  store %struct.mg_connection** %dns_conn, %struct.mg_connection*** %dns_conn21, align 8, !tbaa !97
  %nameserver = getelementptr inbounds %struct.mg_connect_opts, %struct.mg_connect_opts* %opts, i32 0, i32 4
  %28 = load i8*, i8** %nameserver, align 8, !tbaa !99
  %nameserver22 = getelementptr inbounds %struct.mg_resolve_async_opts, %struct.mg_resolve_async_opts* %o, i32 0, i32 0
  store i8* %28, i8** %nameserver22, align 8, !tbaa !100
  %29 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %mgr23 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %29, i32 0, i32 3
  %30 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr23, align 8, !tbaa !55
  %arraydecay24 = getelementptr inbounds [200 x i8], [200 x i8]* %host, i32 0, i32 0
  %31 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %32 = bitcast %struct.mg_connection* %31 to i8*
  %call25 = call i32 @mg_resolve_async_opt(%struct.mg_mgr* %30, i8* %arraydecay24, i32 1, void (%struct.mg_dns_message*, i8*, i32)* @resolve_cb, i8* %32, %struct.mg_resolve_async_opts* byval align 8 %o)
  %cmp26 = icmp ne i32 %call25, 0
  br i1 %cmp26, label %if.then28, label %if.end37

if.then28:                                        ; preds = %if.then20
  br label %do.body29

do.body29:                                        ; preds = %if.then28
  %error_string30 = getelementptr inbounds %struct.mg_connect_opts, %struct.mg_connect_opts* %opts, i32 0, i32 2
  %33 = load i8**, i8*** %error_string30, align 8, !tbaa !93
  %tobool31 = icmp ne i8** %33, null
  br i1 %tobool31, label %if.then32, label %if.end34

if.then32:                                        ; preds = %do.body29
  %error_string33 = getelementptr inbounds %struct.mg_connect_opts, %struct.mg_connect_opts* %opts, i32 0, i32 2
  %34 = load i8**, i8*** %error_string33, align 8, !tbaa !93
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.18, i32 0, i32 0), i8** %34, align 8, !tbaa !3
  br label %if.end34

if.end34:                                         ; preds = %if.then32, %do.body29
  br label %do.cond35

do.cond35:                                        ; preds = %if.end34
  br label %do.end36

do.end36:                                         ; preds = %do.cond35
  %35 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  call void @mg_destroy_conn(%struct.mg_connection* %35, i32 1)
  store %struct.mg_connection* null, %struct.mg_connection** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end37:                                         ; preds = %if.then20
  %36 = load %struct.mg_connection*, %struct.mg_connection** %dns_conn, align 8, !tbaa !3
  %37 = bitcast %struct.mg_connection* %36 to i8*
  %38 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %priv_2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %38, i32 0, i32 18
  store i8* %37, i8** %priv_2, align 8, !tbaa !101
  %39 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %flags38 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %39, i32 0, i32 21
  %40 = load i64, i64* %flags38, align 8, !tbaa !41
  %or39 = or i64 %40, 4
  store i64 %or39, i64* %flags38, align 8, !tbaa !41
  %41 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  store %struct.mg_connection* %41, %struct.mg_connection** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end37, %do.end36
  %42 = bitcast %struct.mg_resolve_async_opts* %o to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %42) #5
  %43 = bitcast %struct.mg_connection** %dns_conn to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %43) #5
  br label %cleanup43

if.else:                                          ; preds = %if.end10
  %44 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %45 = load i32, i32* %proto, align 4, !tbaa !15
  %46 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %sa41 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %46, i32 0, i32 6
  %call42 = call %struct.mg_connection* @mg_do_connect(%struct.mg_connection* %44, i32 %45, %union.socket_address* %sa41)
  store %struct.mg_connection* %call42, %struct.mg_connection** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup43

cleanup43:                                        ; preds = %if.else, %cleanup, %do.end, %if.then2
  %47 = bitcast [200 x i8]* %host to i8*
  call void @llvm.lifetime.end.p0i8(i64 200, i8* %47) #5
  %48 = bitcast %struct.mg_add_sock_opts* %add_sock_opts to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %48) #5
  %49 = bitcast i32* %rc to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %49) #5
  %50 = bitcast i32* %proto to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %50) #5
  %51 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %51) #5
  %52 = load %struct.mg_connection*, %struct.mg_connection** %retval, align 8
  ret %struct.mg_connection* %52
}

; Function Attrs: nounwind ssp uwtable
define void @mg_ev_handler_empty(%struct.mg_connection* %c, i32 %ev, i8* %ev_data) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %ev.addr = alloca i32, align 4
  %ev_data.addr = alloca i8*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  store i32 %ev, i32* %ev.addr, align 4, !tbaa !15
  store i8* %ev_data, i8** %ev_data.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %1 = load i32, i32* %ev.addr, align 4, !tbaa !15
  %2 = load i8*, i8** %ev_data.addr, align 8, !tbaa !3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_parse_address(i8* %str, %union.socket_address* %sa, i32* %proto, i8* %host, i64 %host_len) #0 {
entry:
  %retval = alloca i32, align 4
  %str.addr = alloca i8*, align 8
  %sa.addr = alloca %union.socket_address*, align 8
  %proto.addr = alloca i32*, align 8
  %host.addr = alloca i8*, align 8
  %host_len.addr = alloca i64, align 8
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %port = alloca i32, align 4
  %ch = alloca i32, align 4
  %len = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 8, !tbaa !3
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8, !tbaa !3
  store i32* %proto, i32** %proto.addr, align 8, !tbaa !3
  store i8* %host, i8** %host.addr, align 8, !tbaa !3
  store i64 %host_len, i64* %host_len.addr, align 8, !tbaa !12
  %0 = bitcast i32* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = bitcast i32* %b to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  %2 = bitcast i32* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  %3 = bitcast i32* %d to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  %4 = bitcast i32* %port to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #5
  store i32 0, i32* %port, align 4, !tbaa !15
  %5 = bitcast i32* %ch to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #5
  %6 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #5
  store i32 0, i32* %len, align 4, !tbaa !15
  %7 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %8 = bitcast %union.socket_address* %7 to i8*
  %9 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %10 = bitcast %union.socket_address* %9 to i8*
  %11 = call i64 @llvm.objectsize.i64.p0i8(i8* %10, i1 false, i1 true)
  %call = call i8* @__memset_chk(i8* %8, i32 0, i64 16, i64 %11) #5
  %12 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %sin = bitcast %union.socket_address* %12 to %struct.sockaddr_in*
  %sin_family = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin, i32 0, i32 1
  store i8 2, i8* %sin_family, align 1, !tbaa !14
  %13 = load i32*, i32** %proto.addr, align 8, !tbaa !3
  store i32 1, i32* %13, align 4, !tbaa !15
  %14 = load i8*, i8** %str.addr, align 8, !tbaa !3
  %call1 = call i32 @strncmp(i8* %14, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.176, i32 0, i32 0), i64 6)
  %cmp = icmp eq i32 %call1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %15 = load i8*, i8** %str.addr, align 8, !tbaa !3
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 6
  store i8* %add.ptr, i8** %str.addr, align 8, !tbaa !3
  %16 = load i32*, i32** %proto.addr, align 8, !tbaa !3
  store i32 2, i32* %16, align 4, !tbaa !15
  br label %if.end6

if.else:                                          ; preds = %entry
  %17 = load i8*, i8** %str.addr, align 8, !tbaa !3
  %call2 = call i32 @strncmp(i8* %17, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.177, i32 0, i32 0), i64 6)
  %cmp3 = icmp eq i32 %call2, 0
  br i1 %cmp3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.else
  %18 = load i8*, i8** %str.addr, align 8, !tbaa !3
  %add.ptr5 = getelementptr inbounds i8, i8* %18, i64 6
  store i8* %add.ptr5, i8** %str.addr, align 8, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.else
  br label %if.end6

if.end6:                                          ; preds = %if.end, %if.then
  %19 = load i8*, i8** %str.addr, align 8, !tbaa !3
  %call7 = call i32 (i8*, i8*, ...) @sscanf(i8* %19, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.178, i32 0, i32 0), i32* %a, i32* %b, i32* %c, i32* %d, i32* %port, i32* %len)
  %cmp8 = icmp eq i32 %call7, 5
  br i1 %cmp8, label %if.then9, label %if.else20

if.then9:                                         ; preds = %if.end6
  %20 = load i32, i32* %a, align 4, !tbaa !15
  %shl = shl i32 %20, 24
  %21 = load i32, i32* %b, align 4, !tbaa !15
  %shl10 = shl i32 %21, 16
  %or = or i32 %shl, %shl10
  %22 = load i32, i32* %c, align 4, !tbaa !15
  %shl11 = shl i32 %22, 8
  %or12 = or i32 %or, %shl11
  %23 = load i32, i32* %d, align 4, !tbaa !15
  %or13 = or i32 %or12, %23
  %call14 = call i32 @_OSSwapInt32(i32 %or13)
  %24 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %sin15 = bitcast %union.socket_address* %24 to %struct.sockaddr_in*
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin15, i32 0, i32 3
  %s_addr = getelementptr inbounds %struct.in_addr, %struct.in_addr* %sin_addr, i32 0, i32 0
  store i32 %call14, i32* %s_addr, align 4, !tbaa !14
  %25 = load i32, i32* %port, align 4, !tbaa !15
  %conv = trunc i32 %25 to i16
  %call16 = call zeroext i16 @_OSSwapInt16(i16 zeroext %conv)
  %conv17 = zext i16 %call16 to i32
  %conv18 = trunc i32 %conv17 to i16
  %26 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %sin19 = bitcast %union.socket_address* %26 to %struct.sockaddr_in*
  %sin_port = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin19, i32 0, i32 2
  store i16 %conv18, i16* %sin_port, align 2, !tbaa !14
  br label %if.end61

if.else20:                                        ; preds = %if.end6
  %27 = load i8*, i8** %str.addr, align 8, !tbaa !3
  %call21 = call i64 @strlen(i8* %27)
  %28 = load i64, i64* %host_len.addr, align 8, !tbaa !12
  %cmp22 = icmp ult i64 %call21, %28
  br i1 %cmp22, label %land.lhs.true, label %if.else44

land.lhs.true:                                    ; preds = %if.else20
  %29 = load i8*, i8** %str.addr, align 8, !tbaa !3
  %30 = load i8*, i8** %host.addr, align 8, !tbaa !3
  %call24 = call i32 (i8*, i8*, ...) @sscanf(i8* %29, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.179, i32 0, i32 0), i8* %30, i32* %port, i32* %len)
  %cmp25 = icmp eq i32 %call24, 2
  br i1 %cmp25, label %if.then27, label %if.else44

if.then27:                                        ; preds = %land.lhs.true
  %31 = load i32, i32* %port, align 4, !tbaa !15
  %conv28 = trunc i32 %31 to i16
  %call29 = call zeroext i16 @_OSSwapInt16(i16 zeroext %conv28)
  %conv30 = zext i16 %call29 to i32
  %conv31 = trunc i32 %conv30 to i16
  %32 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %sin32 = bitcast %union.socket_address* %32 to %struct.sockaddr_in*
  %sin_port33 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin32, i32 0, i32 2
  store i16 %conv31, i16* %sin_port33, align 2, !tbaa !14
  %33 = load i8*, i8** %host.addr, align 8, !tbaa !3
  %34 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %call34 = call i32 @mg_resolve_from_hosts_file(i8* %33, %union.socket_address* %34)
  %cmp35 = icmp ne i32 %call34, 0
  br i1 %cmp35, label %if.then37, label %if.end43

if.then37:                                        ; preds = %if.then27
  %35 = load i8*, i8** %host.addr, align 8, !tbaa !3
  %call38 = call i32 @mg_ncasecmp(i8* %35, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.180, i32 0, i32 0), i64 9)
  %cmp39 = icmp ne i32 %call38, 0
  br i1 %cmp39, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.then37
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end42:                                         ; preds = %if.then37
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end43:                                         ; preds = %if.then27
  br label %if.end60

if.else44:                                        ; preds = %land.lhs.true, %if.else20
  %36 = load i8*, i8** %str.addr, align 8, !tbaa !3
  %call45 = call i32 (i8*, i8*, ...) @sscanf(i8* %36, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.181, i32 0, i32 0), i32* %port, i32* %len)
  %cmp46 = icmp eq i32 %call45, 1
  br i1 %cmp46, label %if.then51, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else44
  %37 = load i8*, i8** %str.addr, align 8, !tbaa !3
  %call48 = call i32 (i8*, i8*, ...) @sscanf(i8* %37, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.182, i32 0, i32 0), i32* %port, i32* %len)
  %cmp49 = icmp eq i32 %call48, 1
  br i1 %cmp49, label %if.then51, label %if.else58

if.then51:                                        ; preds = %lor.lhs.false, %if.else44
  %38 = load i32, i32* %port, align 4, !tbaa !15
  %conv52 = trunc i32 %38 to i16
  %call53 = call zeroext i16 @_OSSwapInt16(i16 zeroext %conv52)
  %conv54 = zext i16 %call53 to i32
  %conv55 = trunc i32 %conv54 to i16
  %39 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %sin56 = bitcast %union.socket_address* %39 to %struct.sockaddr_in*
  %sin_port57 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin56, i32 0, i32 2
  store i16 %conv55, i16* %sin_port57, align 2, !tbaa !14
  br label %if.end59

if.else58:                                        ; preds = %lor.lhs.false
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end59:                                         ; preds = %if.then51
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.end43
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %if.then9
  %40 = load i8*, i8** %host.addr, align 8, !tbaa !3
  %41 = load i64, i64* %host_len.addr, align 8, !tbaa !12
  %42 = load i8*, i8** %str.addr, align 8, !tbaa !3
  %43 = load i32, i32* %len, align 4, !tbaa !15
  %idxprom = sext i32 %43 to i64
  %arrayidx = getelementptr inbounds i8, i8* %42, i64 %idxprom
  %44 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv62 = sext i8 %44 to i32
  store i32 %conv62, i32* %ch, align 4, !tbaa !15
  %45 = load i32, i32* %port, align 4, !tbaa !15
  %conv63 = zext i32 %45 to i64
  %cmp64 = icmp ult i64 %conv63, 65535
  br i1 %cmp64, label %land.lhs.true66, label %cond.false

land.lhs.true66:                                  ; preds = %if.end61
  %46 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp67 = icmp eq i32 %46, 0
  br i1 %cmp67, label %cond.true, label %lor.lhs.false69

lor.lhs.false69:                                  ; preds = %land.lhs.true66
  %47 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp70 = icmp eq i32 %47, 44
  br i1 %cmp70, label %cond.true, label %lor.lhs.false72

lor.lhs.false72:                                  ; preds = %lor.lhs.false69
  %48 = load i32, i32* %ch, align 4, !tbaa !15
  %call73 = call i32 @isspace(i32 %48) #19
  %tobool = icmp ne i32 %call73, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false72, %lor.lhs.false69, %land.lhs.true66
  %49 = load i32, i32* %len, align 4, !tbaa !15
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false72, %if.end61
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %49, %cond.true ], [ -1, %cond.false ]
  store i32 %cond, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %cond.end, %if.else58, %if.end42, %if.then41
  %50 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %50) #5
  %51 = bitcast i32* %ch to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %51) #5
  %52 = bitcast i32* %port to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %52) #5
  %53 = bitcast i32* %d to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %53) #5
  %54 = bitcast i32* %c to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %54) #5
  %55 = bitcast i32* %b to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %55) #5
  %56 = bitcast i32* %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %56) #5
  %57 = load i32, i32* %retval, align 4
  ret i32 %57
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_resolve_async_opt(%struct.mg_mgr* %mgr, i8* %name, i32 %query, void (%struct.mg_dns_message*, i8*, i32)* %cb, i8* %data, %struct.mg_resolve_async_opts* byval align 8 %opts) #0 {
entry:
  %retval = alloca i32, align 4
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %name.addr = alloca i8*, align 8
  %query.addr = alloca i32, align 4
  %cb.addr = alloca void (%struct.mg_dns_message*, i8*, i32)*, align 8
  %data.addr = alloca i8*, align 8
  %req = alloca %struct.mg_resolve_async_request*, align 8
  %dns_nc = alloca %struct.mg_connection*, align 8
  %nameserver = alloca i8*, align 8
  %dns_server_buff = alloca [17 x i8], align 16
  %nameserver_url = alloca [26 x i8], align 16
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  store i8* %name, i8** %name.addr, align 8, !tbaa !3
  store i32 %query, i32* %query.addr, align 4, !tbaa !15
  store void (%struct.mg_dns_message*, i8*, i32)* %cb, void (%struct.mg_dns_message*, i8*, i32)** %cb.addr, align 8, !tbaa !3
  store i8* %data, i8** %data.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_resolve_async_request** %req to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = bitcast %struct.mg_connection** %dns_nc to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %2 = bitcast i8** %nameserver to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  %nameserver1 = getelementptr inbounds %struct.mg_resolve_async_opts, %struct.mg_resolve_async_opts* %opts, i32 0, i32 0
  %3 = load i8*, i8** %nameserver1, align 8, !tbaa !100
  store i8* %3, i8** %nameserver, align 8, !tbaa !3
  %4 = bitcast [17 x i8]* %dns_server_buff to i8*
  call void @llvm.lifetime.start.p0i8(i64 17, i8* %4) #5
  %5 = bitcast [26 x i8]* %nameserver_url to i8*
  call void @llvm.lifetime.start.p0i8(i64 26, i8* %5) #5
  %6 = load i8*, i8** %nameserver, align 8, !tbaa !3
  %cmp = icmp eq i8* %6, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %nameserver2 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %7, i32 0, i32 7
  %8 = load i8*, i8** %nameserver2, align 8, !tbaa !70
  store i8* %8, i8** %nameserver, align 8, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %call = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 12095)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then3, label %if.end4

if.then3:                                         ; preds = %do.body
  %9 = load i8*, i8** %name.addr, align 8, !tbaa !3
  %10 = load i32, i32* %query.addr, align 4, !tbaa !15
  %dns_conn = getelementptr inbounds %struct.mg_resolve_async_opts, %struct.mg_resolve_async_opts* %opts, i32 0, i32 5
  %11 = load %struct.mg_connection**, %struct.mg_connection*** %dns_conn, align 8, !tbaa !97
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.165, i32 0, i32 0), i8* %9, i32 %10, %struct.mg_connection** %11)
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end4
  br label %do.end

do.end:                                           ; preds = %do.cond
  %call5 = call i8* @calloc(i64 1, i64 1080) #20
  %12 = bitcast i8* %call5 to %struct.mg_resolve_async_request*
  store %struct.mg_resolve_async_request* %12, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %13 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %cmp6 = icmp eq %struct.mg_resolve_async_request* %13, null
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %do.end
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end8:                                          ; preds = %do.end
  %14 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %name9 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %14, i32 0, i32 0
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %name9, i32 0, i32 0
  %15 = load i8*, i8** %name.addr, align 8, !tbaa !3
  %call10 = call i8* @__strncpy_chk(i8* %arraydecay, i8* %15, i64 1024, i64 1024) #5
  %16 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %name11 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %16, i32 0, i32 0
  %arrayidx = getelementptr inbounds [1024 x i8], [1024 x i8]* %name11, i64 0, i64 1023
  store i8 0, i8* %arrayidx, align 1, !tbaa !14
  %17 = load i32, i32* %query.addr, align 4, !tbaa !15
  %18 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %query12 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %18, i32 0, i32 1
  store i32 %17, i32* %query12, align 8, !tbaa !102
  %19 = load void (%struct.mg_dns_message*, i8*, i32)*, void (%struct.mg_dns_message*, i8*, i32)** %cb.addr, align 8, !tbaa !3
  %20 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %callback = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %20, i32 0, i32 2
  store void (%struct.mg_dns_message*, i8*, i32)* %19, void (%struct.mg_dns_message*, i8*, i32)** %callback, align 8, !tbaa !104
  %21 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %22 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %data13 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %22, i32 0, i32 3
  store i8* %21, i8** %data13, align 8, !tbaa !105
  %max_retries = getelementptr inbounds %struct.mg_resolve_async_opts, %struct.mg_resolve_async_opts* %opts, i32 0, i32 1
  %23 = load i32, i32* %max_retries, align 8, !tbaa !106
  %tobool14 = icmp ne i32 %23, 0
  br i1 %tobool14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end8
  %max_retries15 = getelementptr inbounds %struct.mg_resolve_async_opts, %struct.mg_resolve_async_opts* %opts, i32 0, i32 1
  %24 = load i32, i32* %max_retries15, align 8, !tbaa !106
  br label %cond.end

cond.false:                                       ; preds = %if.end8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %24, %cond.true ], [ 2, %cond.false ]
  %25 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %max_retries16 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %25, i32 0, i32 5
  store i32 %cond, i32* %max_retries16, align 8, !tbaa !107
  %timeout = getelementptr inbounds %struct.mg_resolve_async_opts, %struct.mg_resolve_async_opts* %opts, i32 0, i32 2
  %26 = load i32, i32* %timeout, align 4, !tbaa !108
  %tobool17 = icmp ne i32 %26, 0
  br i1 %tobool17, label %cond.true18, label %cond.false20

cond.true18:                                      ; preds = %cond.end
  %timeout19 = getelementptr inbounds %struct.mg_resolve_async_opts, %struct.mg_resolve_async_opts* %opts, i32 0, i32 2
  %27 = load i32, i32* %timeout19, align 4, !tbaa !108
  br label %cond.end21

cond.false20:                                     ; preds = %cond.end
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true18
  %cond22 = phi i32 [ %27, %cond.true18 ], [ 5, %cond.false20 ]
  %conv = sext i32 %cond22 to i64
  %28 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %timeout23 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %28, i32 0, i32 4
  store i64 %conv, i64* %timeout23, align 8, !tbaa !109
  %29 = load i8*, i8** %nameserver, align 8, !tbaa !3
  %cmp24 = icmp eq i8* %29, null
  br i1 %cmp24, label %if.then26, label %if.end34

if.then26:                                        ; preds = %cond.end21
  %arraydecay27 = getelementptr inbounds [17 x i8], [17 x i8]* %dns_server_buff, i32 0, i32 0
  %call28 = call i32 @mg_get_ip_address_of_nameserver(i8* %arraydecay27, i64 17)
  %cmp29 = icmp ne i32 %call28, -1
  br i1 %cmp29, label %if.then31, label %if.else

if.then31:                                        ; preds = %if.then26
  %arraydecay32 = getelementptr inbounds [17 x i8], [17 x i8]* %dns_server_buff, i32 0, i32 0
  store i8* %arraydecay32, i8** %nameserver, align 8, !tbaa !3
  br label %if.end33

if.else:                                          ; preds = %if.then26
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.166, i32 0, i32 0), i8** %nameserver, align 8, !tbaa !3
  br label %if.end33

if.end33:                                         ; preds = %if.else, %if.then31
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %cond.end21
  %arraydecay35 = getelementptr inbounds [26 x i8], [26 x i8]* %nameserver_url, i32 0, i32 0
  %30 = load i8*, i8** %nameserver, align 8, !tbaa !3
  %call36 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay35, i64 26, i32 0, i64 26, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.167, i32 0, i32 0), i8* %30)
  %31 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %arraydecay37 = getelementptr inbounds [26 x i8], [26 x i8]* %nameserver_url, i32 0, i32 0
  %call38 = call %struct.mg_connection* @mg_connect(%struct.mg_mgr* %31, i8* %arraydecay37, void (%struct.mg_connection*, i32, i8*)* @mg_resolve_async_eh)
  store %struct.mg_connection* %call38, %struct.mg_connection** %dns_nc, align 8, !tbaa !3
  %32 = load %struct.mg_connection*, %struct.mg_connection** %dns_nc, align 8, !tbaa !3
  %cmp39 = icmp eq %struct.mg_connection* %32, null
  br i1 %cmp39, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end34
  %33 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %34 = bitcast %struct.mg_resolve_async_request* %33 to i8*
  call void @free(i8* %34)
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end42:                                         ; preds = %if.end34
  %35 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %36 = bitcast %struct.mg_resolve_async_request* %35 to i8*
  %37 = load %struct.mg_connection*, %struct.mg_connection** %dns_nc, align 8, !tbaa !3
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %37, i32 0, i32 16
  store i8* %36, i8** %user_data, align 8, !tbaa !44
  %dns_conn43 = getelementptr inbounds %struct.mg_resolve_async_opts, %struct.mg_resolve_async_opts* %opts, i32 0, i32 5
  %38 = load %struct.mg_connection**, %struct.mg_connection*** %dns_conn43, align 8, !tbaa !97
  %cmp44 = icmp ne %struct.mg_connection** %38, null
  br i1 %cmp44, label %if.then46, label %if.end48

if.then46:                                        ; preds = %if.end42
  %39 = load %struct.mg_connection*, %struct.mg_connection** %dns_nc, align 8, !tbaa !3
  %dns_conn47 = getelementptr inbounds %struct.mg_resolve_async_opts, %struct.mg_resolve_async_opts* %opts, i32 0, i32 5
  %40 = load %struct.mg_connection**, %struct.mg_connection*** %dns_conn47, align 8, !tbaa !97
  store %struct.mg_connection* %39, %struct.mg_connection** %40, align 8, !tbaa !3
  br label %if.end48

if.end48:                                         ; preds = %if.then46, %if.end42
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end48, %if.then41, %if.then7
  %41 = bitcast [26 x i8]* %nameserver_url to i8*
  call void @llvm.lifetime.end.p0i8(i64 26, i8* %41) #5
  %42 = bitcast [17 x i8]* %dns_server_buff to i8*
  call void @llvm.lifetime.end.p0i8(i64 17, i8* %42) #5
  %43 = bitcast i8** %nameserver to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %43) #5
  %44 = bitcast %struct.mg_connection** %dns_nc to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %44) #5
  %45 = bitcast %struct.mg_resolve_async_request** %req to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %45) #5
  %46 = load i32, i32* %retval, align 4
  ret i32 %46
}

; Function Attrs: nounwind ssp uwtable
define internal void @resolve_cb(%struct.mg_dns_message* %msg, i8* %data, i32 %e) #0 {
entry:
  %msg.addr = alloca %struct.mg_dns_message*, align 8
  %data.addr = alloca i8*, align 8
  %e.addr = alloca i32, align 4
  %nc = alloca %struct.mg_connection*, align 8
  %i = alloca i32, align 4
  %failure = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %now = alloca double, align 8
  store %struct.mg_dns_message* %msg, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  store i8* %data, i8** %data.addr, align 8, !tbaa !3
  store i32 %e, i32* %e.addr, align 4, !tbaa !14
  %0 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %2 = bitcast i8* %1 to %struct.mg_connection*
  store %struct.mg_connection* %2, %struct.mg_connection** %nc, align 8, !tbaa !3
  %3 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  %4 = bitcast i32* %failure to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #5
  store i32 -1, i32* %failure, align 4, !tbaa !15
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 21
  %6 = load i64, i64* %flags, align 8, !tbaa !41
  %and = and i64 %6, -5
  store i64 %and, i64* %flags, align 8, !tbaa !41
  %7 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %cmp = icmp ne %struct.mg_dns_message* %7, null
  br i1 %cmp, label %if.then, label %if.end11

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %8 = load i32, i32* %i, align 4, !tbaa !15
  %9 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %num_answers = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %9, i32 0, i32 4
  %10 = load i32, i32* %num_answers, align 8, !tbaa !110
  %cmp1 = icmp slt i32 %8, %10
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %answers = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %11, i32 0, i32 6
  %12 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds [32 x %struct.mg_dns_resource_record], [32 x %struct.mg_dns_resource_record]* %answers, i64 0, i64 %idxprom
  %rtype = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %arrayidx, i32 0, i32 1
  %13 = load i32, i32* %rtype, align 8, !tbaa !112
  %cmp2 = icmp eq i32 %13, 1
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %for.body
  %14 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %15 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %answers4 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %15, i32 0, i32 6
  %16 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom5 = sext i32 %16 to i64
  %arrayidx6 = getelementptr inbounds [32 x %struct.mg_dns_resource_record], [32 x %struct.mg_dns_resource_record]* %answers4, i64 0, i64 %idxprom5
  %17 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %sa = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %17, i32 0, i32 6
  %sin = bitcast %union.socket_address* %sa to %struct.sockaddr_in*
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin, i32 0, i32 3
  %18 = bitcast %struct.in_addr* %sin_addr to i8*
  %call = call i32 @mg_dns_parse_record_data(%struct.mg_dns_message* %14, %struct.mg_dns_resource_record* %arrayidx6, i8* %18, i64 4)
  %19 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %20 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %flags7 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %20, i32 0, i32 21
  %21 = load i64, i64* %flags7, align 8, !tbaa !41
  %and8 = and i64 %21, 2
  %tobool = icmp ne i64 %and8, 0
  %22 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 2, i32 1
  %23 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %sa9 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %23, i32 0, i32 6
  %call10 = call %struct.mg_connection* @mg_do_connect(%struct.mg_connection* %19, i32 %cond, %union.socket_address* %sa9)
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %i, align 4, !tbaa !15
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end11

if.end11:                                         ; preds = %for.end, %entry
  %25 = load i32, i32* %e.addr, align 4, !tbaa !14
  %cmp12 = icmp eq i32 %25, 3
  br i1 %cmp12, label %if.then13, label %if.end15

if.then13:                                        ; preds = %if.end11
  %26 = bitcast double* %now to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %26) #5
  %call14 = call double @mg_time()
  store double %call14, double* %now, align 8, !tbaa !26
  %27 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %28 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %28, i32 0, i32 16
  %29 = load i8*, i8** %user_data, align 8, !tbaa !44
  %30 = bitcast double* %now to i8*
  call void @mg_call(%struct.mg_connection* %27, void (%struct.mg_connection*, i32, i8*)* null, i8* %29, i32 6, i8* %30)
  %31 = bitcast double* %now to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %31) #5
  br label %if.end15

if.end15:                                         ; preds = %if.then13, %if.end11
  %32 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %33 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %user_data16 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %33, i32 0, i32 16
  %34 = load i8*, i8** %user_data16, align 8, !tbaa !44
  %35 = bitcast i32* %failure to i8*
  call void @mg_call(%struct.mg_connection* %32, void (%struct.mg_connection*, i32, i8*)* null, i8* %34, i32 2, i8* %35)
  %36 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %37 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %user_data17 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %37, i32 0, i32 16
  %38 = load i8*, i8** %user_data17, align 8, !tbaa !44
  call void @mg_call(%struct.mg_connection* %36, void (%struct.mg_connection*, i32, i8*)* null, i8* %38, i32 5, i8* null)
  %39 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  call void @mg_destroy_conn(%struct.mg_connection* %39, i32 1)
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end15, %if.then3
  %40 = bitcast i32* %failure to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %40) #5
  %41 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %41) #5
  %42 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %42) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup, %cleanup
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal %struct.mg_connection* @mg_do_connect(%struct.mg_connection* %nc, i32 %proto, %union.socket_address* %sa) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %proto.addr = alloca i32, align 4
  %sa.addr = alloca %union.socket_address*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i32 %proto, i32* %proto.addr, align 4, !tbaa !15
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8, !tbaa !3
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3001)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %1 = load i32, i32* %proto.addr, align 4, !tbaa !15
  %cmp = icmp eq i32 %1, 2
  %2 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0)
  %3 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %sin = bitcast %union.socket_address* %3 to %struct.sockaddr_in*
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin, i32 0, i32 3
  %coerce.dive = getelementptr inbounds %struct.in_addr, %struct.in_addr* %sin_addr, i32 0, i32 0
  %4 = load i32, i32* %coerce.dive, align 4
  %call1 = call i8* @inet_ntoa(i32 %4)
  %5 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %sin2 = bitcast %union.socket_address* %5 to %struct.sockaddr_in*
  %sin_port = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin2, i32 0, i32 2
  %6 = load i16, i16* %sin_port, align 2, !tbaa !14
  %call3 = call zeroext i16 @_OSSwapInt16(i16 zeroext %6)
  %conv = zext i16 %call3 to i32
  %conv4 = trunc i32 %conv to i16
  %conv5 = zext i16 %conv4 to i32
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), %struct.mg_connection* %0, i8* %cond, i8* %call1, i32 %conv5)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %7, i32 0, i32 21
  %8 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %8, 8
  store i64 %or, i64* %flags, align 8, !tbaa !41
  %9 = load i32, i32* %proto.addr, align 4, !tbaa !15
  %cmp6 = icmp eq i32 %9, 2
  br i1 %cmp6, label %if.then8, label %if.else

if.then8:                                         ; preds = %do.end
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 20
  %11 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8, !tbaa !46
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %11, i32 0, i32 2
  %12 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8, !tbaa !47
  %connect_udp = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %12, i32 0, i32 8
  %13 = load void (%struct.mg_connection*)*, void (%struct.mg_connection*)** %connect_udp, align 8, !tbaa !114
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void %13(%struct.mg_connection* %14)
  br label %if.end11

if.else:                                          ; preds = %do.end
  %15 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %iface9 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %15, i32 0, i32 20
  %16 = load %struct.mg_iface*, %struct.mg_iface** %iface9, align 8, !tbaa !46
  %vtable10 = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %16, i32 0, i32 2
  %17 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable10, align 8, !tbaa !47
  %connect_tcp = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %17, i32 0, i32 7
  %18 = load void (%struct.mg_connection*, %union.socket_address*)*, void (%struct.mg_connection*, %union.socket_address*)** %connect_tcp, align 8, !tbaa !115
  %19 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %20 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  call void %18(%struct.mg_connection* %19, %union.socket_address* %20)
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then8
  %21 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %mgr = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %21, i32 0, i32 3
  %22 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8, !tbaa !55
  %23 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_add_conn(%struct.mg_mgr* %22, %struct.mg_connection* %23)
  %24 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  ret %struct.mg_connection* %24
}

; Function Attrs: nounwind ssp uwtable
define %struct.mg_connection* @mg_bind(%struct.mg_mgr* %srv, i8* %address, void (%struct.mg_connection*, i32, i8*)* %event_handler) #0 {
entry:
  %srv.addr = alloca %struct.mg_mgr*, align 8
  %address.addr = alloca i8*, align 8
  %event_handler.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %opts = alloca %struct.mg_bind_opts, align 8
  store %struct.mg_mgr* %srv, %struct.mg_mgr** %srv.addr, align 8, !tbaa !3
  store i8* %address, i8** %address.addr, align 8, !tbaa !3
  store void (%struct.mg_connection*, i32, i8*)* %event_handler, void (%struct.mg_connection*, i32, i8*)** %event_handler.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_bind_opts* %opts to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %0) #5
  %1 = bitcast %struct.mg_bind_opts* %opts to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 32, i1 false)
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %srv.addr, align 8, !tbaa !3
  %3 = load i8*, i8** %address.addr, align 8, !tbaa !3
  %4 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %event_handler.addr, align 8, !tbaa !3
  %call = call %struct.mg_connection* @mg_bind_opt(%struct.mg_mgr* %2, i8* %3, void (%struct.mg_connection*, i32, i8*)* %4, %struct.mg_bind_opts* byval align 8 %opts)
  %5 = bitcast %struct.mg_bind_opts* %opts to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %5) #5
  ret %struct.mg_connection* %call
}

; Function Attrs: nounwind ssp uwtable
define %struct.mg_connection* @mg_bind_opt(%struct.mg_mgr* %mgr, i8* %address, void (%struct.mg_connection*, i32, i8*)* %callback, %struct.mg_bind_opts* byval align 8 %opts) #0 {
entry:
  %retval = alloca %struct.mg_connection*, align 8
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %address.addr = alloca i8*, align 8
  %callback.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %sa = alloca %union.socket_address, align 4
  %nc = alloca %struct.mg_connection*, align 8
  %proto = alloca i32, align 4
  %rc = alloca i32, align 4
  %add_sock_opts = alloca %struct.mg_add_sock_opts, align 8
  %host = alloca [200 x i8], align 16
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  store i8* %address, i8** %address.addr, align 8, !tbaa !3
  store void (%struct.mg_connection*, i32, i8*)* %callback, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8, !tbaa !3
  %0 = bitcast %union.socket_address* %sa to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %0) #5
  %1 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  store %struct.mg_connection* null, %struct.mg_connection** %nc, align 8, !tbaa !3
  %2 = bitcast i32* %proto to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  %3 = bitcast i32* %rc to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  %4 = bitcast %struct.mg_add_sock_opts* %add_sock_opts to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %4) #5
  %5 = bitcast [200 x i8]* %host to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* %5) #5
  %6 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8, !tbaa !3
  %cmp = icmp eq void (%struct.mg_connection*, i32, i8*)* %6, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store void (%struct.mg_connection*, i32, i8*)* @mg_ev_handler_empty, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = bitcast %struct.mg_add_sock_opts* %add_sock_opts to i8*
  %8 = bitcast %struct.mg_bind_opts* %opts to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 32, i1 false)
  %9 = load i8*, i8** %address.addr, align 8, !tbaa !3
  %arraydecay = getelementptr inbounds [200 x i8], [200 x i8]* %host, i32 0, i32 0
  %call = call i32 @mg_parse_address(i8* %9, %union.socket_address* %sa, i32* %proto, i8* %arraydecay, i64 200)
  %cmp1 = icmp sle i32 %call, 0
  br i1 %cmp1, label %if.then2, label %if.end6

if.then2:                                         ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then2
  %error_string = getelementptr inbounds %struct.mg_bind_opts, %struct.mg_bind_opts* %opts, i32 0, i32 2
  %10 = load i8**, i8*** %error_string, align 8, !tbaa !116
  %tobool = icmp ne i8** %10, null
  br i1 %tobool, label %if.then3, label %if.end5

if.then3:                                         ; preds = %do.body
  %error_string4 = getelementptr inbounds %struct.mg_bind_opts, %struct.mg_bind_opts* %opts, i32 0, i32 2
  %11 = load i8**, i8*** %error_string4, align 8, !tbaa !116
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17, i32 0, i32 0), i8** %11, align 8, !tbaa !3
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end5
  br label %do.end

do.end:                                           ; preds = %do.cond
  store %struct.mg_connection* null, %struct.mg_connection** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end6:                                          ; preds = %if.end
  %12 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %13 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8, !tbaa !3
  %call7 = call %struct.mg_connection* @mg_create_connection(%struct.mg_mgr* %12, void (%struct.mg_connection*, i32, i8*)* %13, %struct.mg_add_sock_opts* byval align 8 %add_sock_opts)
  store %struct.mg_connection* %call7, %struct.mg_connection** %nc, align 8, !tbaa !3
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %cmp8 = icmp eq %struct.mg_connection* %14, null
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end6
  store %struct.mg_connection* null, %struct.mg_connection** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end10:                                         ; preds = %if.end6
  %15 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %sa11 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %15, i32 0, i32 6
  %16 = bitcast %union.socket_address* %sa11 to i8*
  %17 = bitcast %union.socket_address* %sa to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 4 %17, i64 16, i1 false), !tbaa.struct !85
  %18 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %18, i32 0, i32 21
  %19 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %19, 1
  store i64 %or, i64* %flags, align 8, !tbaa !41
  %20 = load i32, i32* %proto, align 4, !tbaa !15
  %cmp12 = icmp eq i32 %20, 2
  br i1 %cmp12, label %if.then13, label %if.end16

if.then13:                                        ; preds = %if.end10
  %21 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %flags14 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %21, i32 0, i32 21
  %22 = load i64, i64* %flags14, align 8, !tbaa !41
  %or15 = or i64 %22, 2
  store i64 %or15, i64* %flags14, align 8, !tbaa !41
  br label %if.end16

if.end16:                                         ; preds = %if.then13, %if.end10
  %23 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %flags17 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %23, i32 0, i32 21
  %24 = load i64, i64* %flags17, align 8, !tbaa !41
  %and = and i64 %24, 2
  %tobool18 = icmp ne i64 %and, 0
  br i1 %tobool18, label %if.then19, label %if.else

if.then19:                                        ; preds = %if.end16
  %25 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %25, i32 0, i32 20
  %26 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8, !tbaa !46
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %26, i32 0, i32 2
  %27 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8, !tbaa !47
  %listen_udp = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %27, i32 0, i32 6
  %28 = load i32 (%struct.mg_connection*, %union.socket_address*)*, i32 (%struct.mg_connection*, %union.socket_address*)** %listen_udp, align 8, !tbaa !118
  %29 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %30 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %sa20 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %30, i32 0, i32 6
  %call21 = call i32 %28(%struct.mg_connection* %29, %union.socket_address* %sa20)
  store i32 %call21, i32* %rc, align 4, !tbaa !15
  br label %if.end26

if.else:                                          ; preds = %if.end16
  %31 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %iface22 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %31, i32 0, i32 20
  %32 = load %struct.mg_iface*, %struct.mg_iface** %iface22, align 8, !tbaa !46
  %vtable23 = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %32, i32 0, i32 2
  %33 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable23, align 8, !tbaa !47
  %listen_tcp = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %33, i32 0, i32 5
  %34 = load i32 (%struct.mg_connection*, %union.socket_address*)*, i32 (%struct.mg_connection*, %union.socket_address*)** %listen_tcp, align 8, !tbaa !119
  %35 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %36 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %sa24 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %36, i32 0, i32 6
  %call25 = call i32 %34(%struct.mg_connection* %35, %union.socket_address* %sa24)
  store i32 %call25, i32* %rc, align 4, !tbaa !15
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.then19
  %37 = load i32, i32* %rc, align 4, !tbaa !15
  %cmp27 = icmp ne i32 %37, 0
  br i1 %cmp27, label %if.then28, label %if.end44

if.then28:                                        ; preds = %if.end26
  br label %do.body29

do.body29:                                        ; preds = %if.then28
  %call30 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3273)
  %tobool31 = icmp ne i32 %call30, 0
  br i1 %tobool31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %do.body29
  %38 = load i32, i32* %rc, align 4, !tbaa !15
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.19, i32 0, i32 0), i32 %38)
  br label %if.end33

if.end33:                                         ; preds = %if.then32, %do.body29
  br label %do.cond34

do.cond34:                                        ; preds = %if.end33
  br label %do.end35

do.end35:                                         ; preds = %do.cond34
  br label %do.body36

do.body36:                                        ; preds = %do.end35
  %error_string37 = getelementptr inbounds %struct.mg_bind_opts, %struct.mg_bind_opts* %opts, i32 0, i32 2
  %39 = load i8**, i8*** %error_string37, align 8, !tbaa !116
  %tobool38 = icmp ne i8** %39, null
  br i1 %tobool38, label %if.then39, label %if.end41

if.then39:                                        ; preds = %do.body36
  %error_string40 = getelementptr inbounds %struct.mg_bind_opts, %struct.mg_bind_opts* %opts, i32 0, i32 2
  %40 = load i8**, i8*** %error_string40, align 8, !tbaa !116
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.20, i32 0, i32 0), i8** %40, align 8, !tbaa !3
  br label %if.end41

if.end41:                                         ; preds = %if.then39, %do.body36
  br label %do.cond42

do.cond42:                                        ; preds = %if.end41
  br label %do.end43

do.end43:                                         ; preds = %do.cond42
  %41 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  call void @mg_destroy_conn(%struct.mg_connection* %41, i32 1)
  store %struct.mg_connection* null, %struct.mg_connection** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end44:                                         ; preds = %if.end26
  %42 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %mgr45 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %42, i32 0, i32 3
  %43 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr45, align 8, !tbaa !55
  %44 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  call void @mg_add_conn(%struct.mg_mgr* %43, %struct.mg_connection* %44)
  %45 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  store %struct.mg_connection* %45, %struct.mg_connection** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end44, %do.end43, %if.then9, %do.end
  %46 = bitcast [200 x i8]* %host to i8*
  call void @llvm.lifetime.end.p0i8(i64 200, i8* %46) #5
  %47 = bitcast %struct.mg_add_sock_opts* %add_sock_opts to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %47) #5
  %48 = bitcast i32* %rc to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %48) #5
  %49 = bitcast i32* %proto to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %49) #5
  %50 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %50) #5
  %51 = bitcast %union.socket_address* %sa to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %51) #5
  %52 = load %struct.mg_connection*, %struct.mg_connection** %retval, align 8
  ret %struct.mg_connection* %52
}

; Function Attrs: nounwind ssp uwtable
define %struct.mg_connection* @mg_next(%struct.mg_mgr* %s, %struct.mg_connection* %conn) #0 {
entry:
  %s.addr = alloca %struct.mg_mgr*, align 8
  %conn.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_mgr* %s, %struct.mg_mgr** %s.addr, align 8, !tbaa !3
  store %struct.mg_connection* %conn, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %cmp = icmp eq %struct.mg_connection* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %struct.mg_mgr*, %struct.mg_mgr** %s.addr, align 8, !tbaa !3
  %active_connections = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %1, i32 0, i32 0
  %2 = load %struct.mg_connection*, %struct.mg_connection** %active_connections, align 8, !tbaa !73
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %next = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 0
  %4 = load %struct.mg_connection*, %struct.mg_connection** %next, align 8, !tbaa !74
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.mg_connection* [ %2, %cond.true ], [ %4, %cond.false ]
  ret %struct.mg_connection* %cond
}

; Function Attrs: nounwind ssp uwtable
define void @mg_broadcast(%struct.mg_mgr* %mgr, void (%struct.mg_connection*, i32, i8*)* %cb, i8* %data, i64 %len) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %cb.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %data.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %ctl_msg = alloca %struct.ctl_msg, align 8
  %dummy = alloca i64, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  store void (%struct.mg_connection*, i32, i8*)* %cb, void (%struct.mg_connection*, i32, i8*)** %cb.addr, align 8, !tbaa !3
  store i8* %data, i8** %data.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  %0 = bitcast %struct.ctl_msg* %ctl_msg to i8*
  call void @llvm.lifetime.start.p0i8(i64 8200, i8* %0) #5
  %1 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %ctl = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %1, i32 0, i32 2
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %ctl, i64 0, i64 0
  %2 = load i32, i32* %arrayidx, align 8, !tbaa !15
  %cmp = icmp ne i32 %2, -1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %cmp1 = icmp ne i8* %3, null
  br i1 %cmp1, label %land.lhs.true2, label %if.end

land.lhs.true2:                                   ; preds = %land.lhs.true
  %4 = load i64, i64* %len.addr, align 8, !tbaa !12
  %cmp3 = icmp ult i64 %4, 8192
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true2
  %5 = bitcast i64* %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #5
  %6 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %cb.addr, align 8, !tbaa !3
  %callback = getelementptr inbounds %struct.ctl_msg, %struct.ctl_msg* %ctl_msg, i32 0, i32 0
  store void (%struct.mg_connection*, i32, i8*)* %6, void (%struct.mg_connection*, i32, i8*)** %callback, align 8, !tbaa !120
  %message = getelementptr inbounds %struct.ctl_msg, %struct.ctl_msg* %ctl_msg, i32 0, i32 1
  %arraydecay = getelementptr inbounds [8192 x i8], [8192 x i8]* %message, i32 0, i32 0
  %7 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %8 = load i64, i64* %len.addr, align 8, !tbaa !12
  %call = call i8* @__memcpy_chk(i8* %arraydecay, i8* %7, i64 %8, i64 8192) #5
  %9 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %ctl4 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %9, i32 0, i32 2
  %arrayidx5 = getelementptr inbounds [2 x i32], [2 x i32]* %ctl4, i64 0, i64 0
  %10 = load i32, i32* %arrayidx5, align 8, !tbaa !15
  %11 = bitcast %struct.ctl_msg* %ctl_msg to i8*
  %12 = load i64, i64* %len.addr, align 8, !tbaa !12
  %add = add i64 8, %12
  %call6 = call i64 @"\01_send"(i32 %10, i8* %11, i64 %add, i32 0)
  store i64 %call6, i64* %dummy, align 8, !tbaa !12
  %13 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %ctl7 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %13, i32 0, i32 2
  %arrayidx8 = getelementptr inbounds [2 x i32], [2 x i32]* %ctl7, i64 0, i64 0
  %14 = load i32, i32* %arrayidx8, align 8, !tbaa !15
  %15 = bitcast i64* %len.addr to i8*
  %call9 = call i64 @"\01_recv"(i32 %14, i8* %15, i64 1, i32 0)
  store i64 %call9, i64* %dummy, align 8, !tbaa !12
  %16 = load i64, i64* %dummy, align 8, !tbaa !12
  %17 = bitcast i64* %dummy to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %17) #5
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true2, %land.lhs.true, %entry
  %18 = bitcast %struct.ctl_msg* %ctl_msg to i8*
  call void @llvm.lifetime.end.p0i8(i64 8200, i8* %18) #5
  ret void
}

declare i64 @"\01_send"(i32, i8*, i64, i32) #4

declare i64 @"\01_recv"(i32, i8*, i64, i32) #4

; Function Attrs: nounwind ssp uwtable
define i32 @mg_check_ip_acl(i8* %acl, i32 %remote_ip) #0 {
entry:
  %retval = alloca i32, align 4
  %acl.addr = alloca i8*, align 8
  %remote_ip.addr = alloca i32, align 4
  %allowed = alloca i32, align 4
  %flag = alloca i32, align 4
  %net = alloca i32, align 4
  %mask = alloca i32, align 4
  %vec = alloca %struct.mg_str, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %acl, i8** %acl.addr, align 8, !tbaa !3
  store i32 %remote_ip, i32* %remote_ip.addr, align 4, !tbaa !15
  %0 = bitcast i32* %allowed to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = bitcast i32* %flag to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  %2 = bitcast i32* %net to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  %3 = bitcast i32* %mask to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  %4 = bitcast %struct.mg_str* %vec to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %4) #5
  %5 = load i8*, i8** %acl.addr, align 8, !tbaa !3
  %cmp = icmp eq i8* %5, null
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %6 = load i8*, i8** %acl.addr, align 8, !tbaa !3
  %7 = load i8, i8* %6, align 1, !tbaa !14
  %conv = sext i8 %7 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %8 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %9 = zext i1 %8 to i64
  %cond = select i1 %8, i32 43, i32 45
  store i32 %cond, i32* %allowed, align 4, !tbaa !15
  br label %while.cond

while.cond:                                       ; preds = %if.end18, %lor.end
  %10 = load i8*, i8** %acl.addr, align 8, !tbaa !3
  %call = call i8* @mg_next_comma_list_entry(i8* %10, %struct.mg_str* %vec, %struct.mg_str* null)
  store i8* %call, i8** %acl.addr, align 8, !tbaa !3
  %cmp3 = icmp ne i8* %call, null
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %vec, i32 0, i32 0
  %11 = load i8*, i8** %p, align 8, !tbaa !16
  %arrayidx = getelementptr inbounds i8, i8* %11, i64 0
  %12 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv5 = sext i8 %12 to i32
  store i32 %conv5, i32* %flag, align 4, !tbaa !15
  %13 = load i32, i32* %flag, align 4, !tbaa !15
  %cmp6 = icmp ne i32 %13, 43
  br i1 %cmp6, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %while.body
  %14 = load i32, i32* %flag, align 4, !tbaa !15
  %cmp8 = icmp ne i32 %14, 45
  br i1 %cmp8, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %while.body
  %p10 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %vec, i32 0, i32 0
  %15 = load i8*, i8** %p10, align 8, !tbaa !16
  %arrayidx11 = getelementptr inbounds i8, i8* %15, i64 1
  %call12 = call i32 @parse_net(i8* %arrayidx11, i32* %net, i32* %mask)
  %cmp13 = icmp eq i32 %call12, 0
  br i1 %cmp13, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %16 = load i32, i32* %net, align 4, !tbaa !15
  %17 = load i32, i32* %remote_ip.addr, align 4, !tbaa !15
  %18 = load i32, i32* %mask, align 4, !tbaa !15
  %and = and i32 %17, %18
  %cmp15 = icmp eq i32 %16, %and
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end
  %19 = load i32, i32* %flag, align 4, !tbaa !15
  store i32 %19, i32* %allowed, align 4, !tbaa !15
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %do.body

do.body:                                          ; preds = %while.end
  %call19 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3353)
  %tobool = icmp ne i32 %call19, 0
  br i1 %tobool, label %if.then20, label %if.end21

if.then20:                                        ; preds = %do.body
  %20 = load i32, i32* %remote_ip.addr, align 4, !tbaa !15
  %21 = load i32, i32* %allowed, align 4, !tbaa !15
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0), i32 %20, i32 %21)
  br label %if.end21

if.end21:                                         ; preds = %if.then20, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end21
  br label %do.end

do.end:                                           ; preds = %do.cond
  %22 = load i32, i32* %allowed, align 4, !tbaa !15
  %cmp22 = icmp eq i32 %22, 43
  %conv23 = zext i1 %cmp22 to i32
  store i32 %conv23, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %do.end, %if.then
  %23 = bitcast %struct.mg_str* %vec to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %23) #5
  %24 = bitcast i32* %mask to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %24) #5
  %25 = bitcast i32* %net to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %25) #5
  %26 = bitcast i32* %flag to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %26) #5
  %27 = bitcast i32* %allowed to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %27) #5
  %28 = load i32, i32* %retval, align 4
  ret i32 %28
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @parse_net(i8* %spec, i32* %net, i32* %mask) #0 {
entry:
  %spec.addr = alloca i8*, align 8
  %net.addr = alloca i32*, align 8
  %mask.addr = alloca i32*, align 8
  %n = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %slash = alloca i32, align 4
  %len = alloca i32, align 4
  store i8* %spec, i8** %spec.addr, align 8, !tbaa !3
  store i32* %net, i32** %net.addr, align 8, !tbaa !3
  store i32* %mask, i32** %mask.addr, align 8, !tbaa !3
  %0 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = bitcast i32* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  %2 = bitcast i32* %b to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  %3 = bitcast i32* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  %4 = bitcast i32* %d to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #5
  %5 = bitcast i32* %slash to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #5
  store i32 32, i32* %slash, align 4, !tbaa !15
  %6 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #5
  store i32 0, i32* %len, align 4, !tbaa !15
  %7 = load i8*, i8** %spec.addr, align 8, !tbaa !3
  %call = call i32 (i8*, i8*, ...) @sscanf(i8* %7, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.183, i32 0, i32 0), i32* %a, i32* %b, i32* %c, i32* %d, i32* %slash, i32* %n)
  %cmp = icmp eq i32 %call, 5
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %8 = load i8*, i8** %spec.addr, align 8, !tbaa !3
  %call1 = call i32 (i8*, i8*, ...) @sscanf(i8* %8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.184, i32 0, i32 0), i32* %a, i32* %b, i32* %c, i32* %d, i32* %n)
  %cmp2 = icmp eq i32 %call1, 4
  br i1 %cmp2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %9 = load i32, i32* %a, align 4, !tbaa !15
  %call3 = call i32 @isbyte(i32 %9)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %land.lhs.true4, label %if.end

land.lhs.true4:                                   ; preds = %land.lhs.true
  %10 = load i32, i32* %b, align 4, !tbaa !15
  %call5 = call i32 @isbyte(i32 %10)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %land.lhs.true7, label %if.end

land.lhs.true7:                                   ; preds = %land.lhs.true4
  %11 = load i32, i32* %c, align 4, !tbaa !15
  %call8 = call i32 @isbyte(i32 %11)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %land.lhs.true10, label %if.end

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %12 = load i32, i32* %d, align 4, !tbaa !15
  %call11 = call i32 @isbyte(i32 %12)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %land.lhs.true13, label %if.end

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %13 = load i32, i32* %slash, align 4, !tbaa !15
  %cmp14 = icmp sge i32 %13, 0
  br i1 %cmp14, label %land.lhs.true15, label %if.end

land.lhs.true15:                                  ; preds = %land.lhs.true13
  %14 = load i32, i32* %slash, align 4, !tbaa !15
  %cmp16 = icmp slt i32 %14, 33
  br i1 %cmp16, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true15
  %15 = load i32, i32* %n, align 4, !tbaa !15
  store i32 %15, i32* %len, align 4, !tbaa !15
  %16 = load i32, i32* %a, align 4, !tbaa !15
  %shl = shl i32 %16, 24
  %17 = load i32, i32* %b, align 4, !tbaa !15
  %shl17 = shl i32 %17, 16
  %or = or i32 %shl, %shl17
  %18 = load i32, i32* %c, align 4, !tbaa !15
  %shl18 = shl i32 %18, 8
  %or19 = or i32 %or, %shl18
  %19 = load i32, i32* %d, align 4, !tbaa !15
  %or20 = or i32 %or19, %19
  %20 = load i32*, i32** %net.addr, align 8, !tbaa !3
  store i32 %or20, i32* %20, align 4, !tbaa !15
  %21 = load i32, i32* %slash, align 4, !tbaa !15
  %tobool21 = icmp ne i32 %21, 0
  br i1 %tobool21, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %22 = load i32, i32* %slash, align 4, !tbaa !15
  %sub = sub nsw i32 32, %22
  %shl22 = shl i32 -1, %sub
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %shl22, %cond.true ], [ 0, %cond.false ]
  %23 = load i32*, i32** %mask.addr, align 8, !tbaa !3
  store i32 %cond, i32* %23, align 4, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %cond.end, %land.lhs.true15, %land.lhs.true13, %land.lhs.true10, %land.lhs.true7, %land.lhs.true4, %land.lhs.true, %lor.lhs.false
  %24 = load i32, i32* %len, align 4, !tbaa !15
  %25 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %25) #5
  %26 = bitcast i32* %slash to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %26) #5
  %27 = bitcast i32* %d to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %27) #5
  %28 = bitcast i32* %c to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %28) #5
  %29 = bitcast i32* %b to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %29) #5
  %30 = bitcast i32* %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %30) #5
  %31 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %31) #5
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define void @mg_forward(%struct.mg_connection* %from, %struct.mg_connection* %to) #0 {
entry:
  %from.addr = alloca %struct.mg_connection*, align 8
  %to.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %from, %struct.mg_connection** %from.addr, align 8, !tbaa !3
  store %struct.mg_connection* %to, %struct.mg_connection** %to.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %to.addr, align 8, !tbaa !3
  %1 = load %struct.mg_connection*, %struct.mg_connection** %from.addr, align 8, !tbaa !3
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 8
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf, i32 0, i32 0
  %2 = load i8*, i8** %buf, align 8, !tbaa !89
  %3 = load %struct.mg_connection*, %struct.mg_connection** %from.addr, align 8, !tbaa !3
  %recv_mbuf1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf1, i32 0, i32 1
  %4 = load i64, i64* %len, align 8, !tbaa !54
  %conv = trunc i64 %4 to i32
  call void @mg_send(%struct.mg_connection* %0, i8* %2, i32 %conv)
  %5 = load %struct.mg_connection*, %struct.mg_connection** %from.addr, align 8, !tbaa !3
  %recv_mbuf2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 8
  %6 = load %struct.mg_connection*, %struct.mg_connection** %from.addr, align 8, !tbaa !3
  %recv_mbuf3 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 8
  %len4 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf3, i32 0, i32 1
  %7 = load i64, i64* %len4, align 8, !tbaa !54
  call void @mbuf_remove(%struct.mbuf* %recv_mbuf2, i64 %7)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define double @mg_set_timer(%struct.mg_connection* %c, double %timestamp) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %timestamp.addr = alloca double, align 8
  %result = alloca double, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  store double %timestamp, double* %timestamp.addr, align 8, !tbaa !26
  %0 = bitcast double* %result to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %ev_timer_time = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 11
  %2 = load double, double* %ev_timer_time, align 8, !tbaa !51
  store double %2, double* %result, align 8, !tbaa !26
  %3 = load double, double* %timestamp.addr, align 8, !tbaa !26
  %4 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %ev_timer_time1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 11
  store double %3, double* %ev_timer_time1, align 8, !tbaa !51
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3372)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %5 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %6 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %priv_2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 18
  %7 = load i8*, i8** %priv_2, align 8, !tbaa !101
  %8 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %8, i32 0, i32 21
  %9 = load i64, i64* %flags, align 8, !tbaa !41
  %and = and i64 %9, 4
  %tobool2 = icmp ne i64 %and, 0
  %10 = zext i1 %tobool2 to i64
  %cond = select i1 %tobool2, i32 1, i32 0
  %11 = load double, double* %timestamp.addr, align 8, !tbaa !26
  %conv = fptoui double %11 to i64
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.22, i32 0, i32 0), %struct.mg_connection* %5, i8* %7, i32 %cond, i64 %conv)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %do.cond
  %12 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %flags3 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %12, i32 0, i32 21
  %13 = load i64, i64* %flags3, align 8, !tbaa !41
  %and4 = and i64 %13, 4
  %tobool5 = icmp ne i64 %and4, 0
  br i1 %tobool5, label %land.lhs.true, label %if.end11

land.lhs.true:                                    ; preds = %do.end
  %14 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %priv_26 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 18
  %15 = load i8*, i8** %priv_26, align 8, !tbaa !101
  %cmp = icmp ne i8* %15, null
  br i1 %cmp, label %if.then8, label %if.end11

if.then8:                                         ; preds = %land.lhs.true
  %16 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %priv_29 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %16, i32 0, i32 18
  %17 = load i8*, i8** %priv_29, align 8, !tbaa !101
  %18 = bitcast i8* %17 to %struct.mg_connection*
  %19 = load double, double* %timestamp.addr, align 8, !tbaa !26
  %call10 = call double @mg_set_timer(%struct.mg_connection* %18, double %19)
  br label %if.end11

if.end11:                                         ; preds = %if.then8, %land.lhs.true, %do.end
  %20 = load double, double* %result, align 8, !tbaa !26
  %21 = bitcast double* %result to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %21) #5
  ret double %20
}

; Function Attrs: nounwind ssp uwtable
define void @mg_sock_set(%struct.mg_connection* %nc, i32 %sock) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %sock.addr = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i32 %sock, i32* %sock.addr, align 4, !tbaa !15
  %0 = load i32, i32* %sock.addr, align 4, !tbaa !15
  %cmp = icmp ne i32 %0, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 20
  %2 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8, !tbaa !46
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %2, i32 0, i32 2
  %3 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8, !tbaa !47
  %sock_set = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %3, i32 0, i32 15
  %4 = load void (%struct.mg_connection*, i32)*, void (%struct.mg_connection*, i32)** %sock_set, align 8, !tbaa !122
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %6 = load i32, i32* %sock.addr, align 4, !tbaa !15
  call void %4(%struct.mg_connection* %5, i32 %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_if_get_conn_addr(%struct.mg_connection* %nc, i32 %remote, %union.socket_address* %sa) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %remote.addr = alloca i32, align 4
  %sa.addr = alloca %union.socket_address*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i32 %remote, i32* %remote.addr, align 4, !tbaa !15
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 20
  %1 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8, !tbaa !46
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %1, i32 0, i32 2
  %2 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8, !tbaa !47
  %get_conn_addr = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %2, i32 0, i32 16
  %3 = load void (%struct.mg_connection*, i32, %union.socket_address*)*, void (%struct.mg_connection*, i32, %union.socket_address*)** %get_conn_addr, align 8, !tbaa !123
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %5 = load i32, i32* %remote.addr, align 4, !tbaa !15
  %6 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  call void %3(%struct.mg_connection* %4, i32 %5, %union.socket_address* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define %struct.mg_connection* @mg_add_sock_opt(%struct.mg_mgr* %s, i32 %sock, void (%struct.mg_connection*, i32, i8*)* %callback, %struct.mg_add_sock_opts* byval align 8 %opts) #0 {
entry:
  %s.addr = alloca %struct.mg_mgr*, align 8
  %sock.addr = alloca i32, align 4
  %callback.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %nc = alloca %struct.mg_connection*, align 8
  store %struct.mg_mgr* %s, %struct.mg_mgr** %s.addr, align 8, !tbaa !3
  store i32 %sock, i32* %sock.addr, align 4, !tbaa !15
  store void (%struct.mg_connection*, i32, i8*)* %callback, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.mg_mgr*, %struct.mg_mgr** %s.addr, align 8, !tbaa !3
  %2 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8, !tbaa !3
  %call = call %struct.mg_connection* @mg_create_connection_base(%struct.mg_mgr* %1, void (%struct.mg_connection*, i32, i8*)* %2, %struct.mg_add_sock_opts* byval align 8 %opts)
  store %struct.mg_connection* %call, %struct.mg_connection** %nc, align 8, !tbaa !3
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %cmp = icmp ne %struct.mg_connection* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %5 = load i32, i32* %sock.addr, align 4, !tbaa !15
  call void @mg_sock_set(%struct.mg_connection* %4, i32 %5)
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %mgr = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 3
  %7 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8, !tbaa !55
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  call void @mg_add_conn(%struct.mg_mgr* %7, %struct.mg_connection* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %10 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %10) #5
  ret %struct.mg_connection* %9
}

; Function Attrs: nounwind ssp uwtable
define internal %struct.mg_connection* @mg_create_connection_base(%struct.mg_mgr* %mgr, void (%struct.mg_connection*, i32, i8*)* %callback, %struct.mg_add_sock_opts* byval align 8 %opts) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %callback.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %conn = alloca %struct.mg_connection*, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  store void (%struct.mg_connection*, i32, i8*)* %callback, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_connection** %conn to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %call = call i8* @calloc(i64 1, i64 216) #20
  %1 = bitcast i8* %call to %struct.mg_connection*
  store %struct.mg_connection* %1, %struct.mg_connection** %conn, align 8, !tbaa !3
  %cmp = icmp ne %struct.mg_connection* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8, !tbaa !3
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %2, i32 0, i32 4
  store i32 -1, i32* %sock, align 8, !tbaa !45
  %3 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8, !tbaa !3
  %4 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8, !tbaa !3
  %handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 15
  store void (%struct.mg_connection*, i32, i8*)* %3, void (%struct.mg_connection*, i32, i8*)** %handler, align 8, !tbaa !53
  %5 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %6 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8, !tbaa !3
  %mgr1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 3
  store %struct.mg_mgr* %5, %struct.mg_mgr** %mgr1, align 8, !tbaa !55
  %call2 = call double @mg_time()
  %conv = fptosi double %call2 to i64
  %7 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8, !tbaa !3
  %last_io_time = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %7, i32 0, i32 10
  store i64 %conv, i64* %last_io_time, align 8, !tbaa !77
  %iface = getelementptr inbounds %struct.mg_add_sock_opts, %struct.mg_add_sock_opts* %opts, i32 0, i32 3
  %8 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8, !tbaa !124
  %cmp3 = icmp ne %struct.mg_iface* %8, null
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %iface5 = getelementptr inbounds %struct.mg_add_sock_opts, %struct.mg_add_sock_opts* %opts, i32 0, i32 3
  %9 = load %struct.mg_iface*, %struct.mg_iface** %iface5, align 8, !tbaa !124
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %10 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %ifaces = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %10, i32 0, i32 6
  %11 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces, align 8, !tbaa !67
  %arrayidx = getelementptr inbounds %struct.mg_iface*, %struct.mg_iface** %11, i64 0
  %12 = load %struct.mg_iface*, %struct.mg_iface** %arrayidx, align 8, !tbaa !3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.mg_iface* [ %9, %cond.true ], [ %12, %cond.false ]
  %13 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8, !tbaa !3
  %iface6 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %13, i32 0, i32 20
  store %struct.mg_iface* %cond, %struct.mg_iface** %iface6, align 8, !tbaa !46
  %flags = getelementptr inbounds %struct.mg_add_sock_opts, %struct.mg_add_sock_opts* %opts, i32 0, i32 1
  %14 = load i32, i32* %flags, align 8, !tbaa !125
  %and = and i32 %14, 66080768
  %conv7 = zext i32 %and to i64
  %15 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8, !tbaa !3
  %flags8 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %15, i32 0, i32 21
  store i64 %conv7, i64* %flags8, align 8, !tbaa !41
  %user_data = getelementptr inbounds %struct.mg_add_sock_opts, %struct.mg_add_sock_opts* %opts, i32 0, i32 0
  %16 = load i8*, i8** %user_data, align 8, !tbaa !126
  %17 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8, !tbaa !3
  %user_data9 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %17, i32 0, i32 16
  store i8* %16, i8** %user_data9, align 8, !tbaa !44
  %18 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8, !tbaa !3
  %recv_mbuf_limit = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %18, i32 0, i32 7
  store i64 -1, i64* %recv_mbuf_limit, align 8, !tbaa !79
  br label %if.end12

if.else:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.else
  %error_string = getelementptr inbounds %struct.mg_add_sock_opts, %struct.mg_add_sock_opts* %opts, i32 0, i32 2
  %19 = load i8**, i8*** %error_string, align 8, !tbaa !81
  %tobool = icmp ne i8** %19, null
  br i1 %tobool, label %if.then10, label %if.end

if.then10:                                        ; preds = %do.body
  %error_string11 = getelementptr inbounds %struct.mg_add_sock_opts, %struct.mg_add_sock_opts* %opts, i32 0, i32 2
  %20 = load i8**, i8*** %error_string11, align 8, !tbaa !81
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.185, i32 0, i32 0), i8** %20, align 8, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %if.then10, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end12

if.end12:                                         ; preds = %do.end, %cond.end
  %21 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8, !tbaa !3
  %22 = bitcast %struct.mg_connection** %conn to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %22) #5
  ret %struct.mg_connection* %21
}

; Function Attrs: nounwind ssp uwtable
define %struct.mg_connection* @mg_add_sock(%struct.mg_mgr* %s, i32 %sock, void (%struct.mg_connection*, i32, i8*)* %callback) #0 {
entry:
  %s.addr = alloca %struct.mg_mgr*, align 8
  %sock.addr = alloca i32, align 4
  %callback.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %opts = alloca %struct.mg_add_sock_opts, align 8
  store %struct.mg_mgr* %s, %struct.mg_mgr** %s.addr, align 8, !tbaa !3
  store i32 %sock, i32* %sock.addr, align 4, !tbaa !15
  store void (%struct.mg_connection*, i32, i8*)* %callback, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_add_sock_opts* %opts to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %0) #5
  %1 = bitcast %struct.mg_add_sock_opts* %opts to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 32, i1 false)
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %s.addr, align 8, !tbaa !3
  %3 = load i32, i32* %sock.addr, align 4, !tbaa !15
  %4 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8, !tbaa !3
  %call = call %struct.mg_connection* @mg_add_sock_opt(%struct.mg_mgr* %2, i32 %3, void (%struct.mg_connection*, i32, i8*)* %4, %struct.mg_add_sock_opts* byval align 8 %opts)
  %5 = bitcast %struct.mg_add_sock_opts* %opts to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %5) #5
  ret %struct.mg_connection* %call
}

; Function Attrs: allocsize(0,1)
declare i8* @calloc(i64, i64) #13

; Function Attrs: nounwind ssp uwtable
define %struct.mg_iface* @mg_find_iface(%struct.mg_mgr* %mgr, %struct.mg_iface_vtable* %vtable, %struct.mg_iface* %from) #0 {
entry:
  %retval = alloca %struct.mg_iface*, align 8
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %vtable.addr = alloca %struct.mg_iface_vtable*, align 8
  %from.addr = alloca %struct.mg_iface*, align 8
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  store %struct.mg_iface_vtable* %vtable, %struct.mg_iface_vtable** %vtable.addr, align 8, !tbaa !3
  store %struct.mg_iface* %from, %struct.mg_iface** %from.addr, align 8, !tbaa !3
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  store i32 0, i32* %i, align 4, !tbaa !15
  %1 = load %struct.mg_iface*, %struct.mg_iface** %from.addr, align 8, !tbaa !3
  %cmp = icmp ne %struct.mg_iface* %1, null
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4, !tbaa !15
  %3 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %num_ifaces = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %3, i32 0, i32 4
  %4 = load i32, i32* %num_ifaces, align 8, !tbaa !66
  %cmp1 = icmp slt i32 %2, %4
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %ifaces = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %5, i32 0, i32 6
  %6 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces, align 8, !tbaa !67
  %7 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds %struct.mg_iface*, %struct.mg_iface** %6, i64 %idxprom
  %8 = load %struct.mg_iface*, %struct.mg_iface** %arrayidx, align 8, !tbaa !3
  %9 = load %struct.mg_iface*, %struct.mg_iface** %from.addr, align 8, !tbaa !3
  %cmp2 = icmp eq %struct.mg_iface* %8, %9
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %for.body
  %10 = load i32, i32* %i, align 4, !tbaa !15
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4, !tbaa !15
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %i, align 4, !tbaa !15
  %inc4 = add nsw i32 %11, 1
  store i32 %inc4, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.end:                                          ; preds = %if.then3, %for.cond
  br label %if.end5

if.end5:                                          ; preds = %for.end, %entry
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc20, %if.end5
  %12 = load i32, i32* %i, align 4, !tbaa !15
  %13 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %num_ifaces7 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %13, i32 0, i32 4
  %14 = load i32, i32* %num_ifaces7, align 8, !tbaa !66
  %cmp8 = icmp slt i32 %12, %14
  br i1 %cmp8, label %for.body9, label %for.end22

for.body9:                                        ; preds = %for.cond6
  %15 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %ifaces10 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %15, i32 0, i32 6
  %16 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces10, align 8, !tbaa !67
  %17 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom11 = sext i32 %17 to i64
  %arrayidx12 = getelementptr inbounds %struct.mg_iface*, %struct.mg_iface** %16, i64 %idxprom11
  %18 = load %struct.mg_iface*, %struct.mg_iface** %arrayidx12, align 8, !tbaa !3
  %vtable13 = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %18, i32 0, i32 2
  %19 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable13, align 8, !tbaa !47
  %20 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable.addr, align 8, !tbaa !3
  %cmp14 = icmp eq %struct.mg_iface_vtable* %19, %20
  br i1 %cmp14, label %if.then15, label %if.end19

if.then15:                                        ; preds = %for.body9
  %21 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %ifaces16 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %21, i32 0, i32 6
  %22 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces16, align 8, !tbaa !67
  %23 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom17 = sext i32 %23 to i64
  %arrayidx18 = getelementptr inbounds %struct.mg_iface*, %struct.mg_iface** %22, i64 %idxprom17
  %24 = load %struct.mg_iface*, %struct.mg_iface** %arrayidx18, align 8, !tbaa !3
  store %struct.mg_iface* %24, %struct.mg_iface** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end19:                                         ; preds = %for.body9
  br label %for.inc20

for.inc20:                                        ; preds = %if.end19
  %25 = load i32, i32* %i, align 4, !tbaa !15
  %inc21 = add nsw i32 %25, 1
  store i32 %inc21, i32* %i, align 4, !tbaa !15
  br label %for.cond6

for.end22:                                        ; preds = %for.cond6
  store %struct.mg_iface* null, %struct.mg_iface** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end22, %if.then15
  %26 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %26) #5
  %27 = load %struct.mg_iface*, %struct.mg_iface** %retval, align 8
  ret %struct.mg_iface* %27
}

; Function Attrs: nounwind ssp uwtable
define double @mg_mgr_min_timer(%struct.mg_mgr* %mgr) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %min_timer = alloca double, align 8
  %nc = alloca %struct.mg_connection*, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %0 = bitcast double* %min_timer to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  store double 0.000000e+00, double* %min_timer, align 8, !tbaa !26
  %1 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %active_connections = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %2, i32 0, i32 0
  %3 = load %struct.mg_connection*, %struct.mg_connection** %active_connections, align 8, !tbaa !73
  store %struct.mg_connection* %3, %struct.mg_connection** %nc, align 8, !tbaa !3
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %cmp = icmp ne %struct.mg_connection* %4, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %ev_timer_time = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 11
  %6 = load double, double* %ev_timer_time, align 8, !tbaa !51
  %cmp1 = fcmp ole double %6, 0.000000e+00
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %7 = load double, double* %min_timer, align 8, !tbaa !26
  %cmp2 = fcmp oeq double %7, 0.000000e+00
  br i1 %cmp2, label %if.then5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %ev_timer_time3 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %8, i32 0, i32 11
  %9 = load double, double* %ev_timer_time3, align 8, !tbaa !51
  %10 = load double, double* %min_timer, align 8, !tbaa !26
  %cmp4 = fcmp olt double %9, %10
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %lor.lhs.false, %if.end
  %11 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %ev_timer_time6 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %11, i32 0, i32 11
  %12 = load double, double* %ev_timer_time6, align 8, !tbaa !51
  store double %12, double* %min_timer, align 8, !tbaa !26
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end7, %if.then
  %13 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %next = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %13, i32 0, i32 0
  %14 = load %struct.mg_connection*, %struct.mg_connection** %next, align 8, !tbaa !74
  store %struct.mg_connection* %14, %struct.mg_connection** %nc, align 8, !tbaa !3
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load double, double* %min_timer, align 8, !tbaa !26
  %16 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %16) #5
  %17 = bitcast double* %min_timer to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %17) #5
  ret double %15
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_null_if_tcp_recv(%struct.mg_connection* %c, i8* %buf, i64 %len) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %1 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %2 = load i64, i64* %len.addr, align 8, !tbaa !12
  ret i32 -1
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_null_if_udp_recv(%struct.mg_connection* %c, i8* %buf, i64 %len, %union.socket_address* %sa, i64* %sa_len) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %sa.addr = alloca %union.socket_address*, align 8
  %sa_len.addr = alloca i64*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8, !tbaa !3
  store i64* %sa_len, i64** %sa_len.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %1 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %2 = load i64, i64* %len.addr, align 8, !tbaa !12
  %3 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %4 = load i64*, i64** %sa_len.addr, align 8, !tbaa !3
  ret i32 -1
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_null_if_init(%struct.mg_iface* %iface) #0 {
entry:
  %iface.addr = alloca %struct.mg_iface*, align 8
  store %struct.mg_iface* %iface, %struct.mg_iface** %iface.addr, align 8, !tbaa !3
  %0 = load %struct.mg_iface*, %struct.mg_iface** %iface.addr, align 8, !tbaa !3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_null_if_free(%struct.mg_iface* %iface) #0 {
entry:
  %iface.addr = alloca %struct.mg_iface*, align 8
  store %struct.mg_iface* %iface, %struct.mg_iface** %iface.addr, align 8, !tbaa !3
  %0 = load %struct.mg_iface*, %struct.mg_iface** %iface.addr, align 8, !tbaa !3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_null_if_add_conn(%struct.mg_connection* %c) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 4
  store i32 -1, i32* %sock, align 8, !tbaa !45
  %1 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 21
  %2 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %2, 2048
  store i64 %or, i64* %flags, align 8, !tbaa !41
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_null_if_remove_conn(%struct.mg_connection* %c) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @mg_null_if_poll(%struct.mg_iface* %iface, i32 %timeout_ms) #0 {
entry:
  %iface.addr = alloca %struct.mg_iface*, align 8
  %timeout_ms.addr = alloca i32, align 4
  %mgr = alloca %struct.mg_mgr*, align 8
  %nc = alloca %struct.mg_connection*, align 8
  %tmp = alloca %struct.mg_connection*, align 8
  %now = alloca double, align 8
  store %struct.mg_iface* %iface, %struct.mg_iface** %iface.addr, align 8, !tbaa !3
  store i32 %timeout_ms, i32* %timeout_ms.addr, align 4, !tbaa !15
  %0 = bitcast %struct.mg_mgr** %mgr to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.mg_iface*, %struct.mg_iface** %iface.addr, align 8, !tbaa !3
  %mgr1 = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %1, i32 0, i32 0
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr1, align 8, !tbaa !71
  store %struct.mg_mgr* %2, %struct.mg_mgr** %mgr, align 8, !tbaa !3
  %3 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  %4 = bitcast %struct.mg_connection** %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #5
  %5 = bitcast double* %now to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #5
  %call = call double @mg_time()
  store double %call, double* %now, align 8, !tbaa !26
  %6 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8, !tbaa !3
  %active_connections = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %6, i32 0, i32 0
  %7 = load %struct.mg_connection*, %struct.mg_connection** %active_connections, align 8, !tbaa !73
  store %struct.mg_connection* %7, %struct.mg_connection** %nc, align 8, !tbaa !3
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %cmp = icmp ne %struct.mg_connection* %8, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %next = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %9, i32 0, i32 0
  %10 = load %struct.mg_connection*, %struct.mg_connection** %next, align 8, !tbaa !74
  store %struct.mg_connection* %10, %struct.mg_connection** %tmp, align 8, !tbaa !3
  %11 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %12 = load double, double* %now, align 8, !tbaa !26
  %call2 = call i32 @mg_if_poll(%struct.mg_connection* %11, double %12)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %13 = load %struct.mg_connection*, %struct.mg_connection** %tmp, align 8, !tbaa !3
  store %struct.mg_connection* %13, %struct.mg_connection** %nc, align 8, !tbaa !3
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %14 = load i32, i32* %timeout_ms.addr, align 4, !tbaa !15
  %15 = load double, double* %now, align 8, !tbaa !26
  %conv = fptosi double %15 to i64
  %16 = bitcast double* %now to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %16) #5
  %17 = bitcast %struct.mg_connection** %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %17) #5
  %18 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %18) #5
  %19 = bitcast %struct.mg_mgr** %mgr to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %19) #5
  ret i64 %conv
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_null_if_listen_tcp(%struct.mg_connection* %c, %union.socket_address* %sa) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %sa.addr = alloca %union.socket_address*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %1 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  ret i32 -1
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_null_if_listen_udp(%struct.mg_connection* %c, %union.socket_address* %sa) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %sa.addr = alloca %union.socket_address*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %1 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  ret i32 -1
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_null_if_connect_tcp(%struct.mg_connection* %c, %union.socket_address* %sa) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %sa.addr = alloca %union.socket_address*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 21
  %1 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %1, 2048
  store i64 %or, i64* %flags, align 8, !tbaa !41
  %2 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_null_if_connect_udp(%struct.mg_connection* %c) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 21
  %1 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %1, 2048
  store i64 %or, i64* %flags, align 8, !tbaa !41
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_null_if_tcp_send(%struct.mg_connection* %c, i8* %buf, i64 %len) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %1 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %2 = load i64, i64* %len.addr, align 8, !tbaa !12
  ret i32 -1
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_null_if_udp_send(%struct.mg_connection* %c, i8* %buf, i64 %len) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %1 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %2 = load i64, i64* %len.addr, align 8, !tbaa !12
  ret i32 -1
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_null_if_create_conn(%struct.mg_connection* %c) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_null_if_destroy_conn(%struct.mg_connection* %c) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_null_if_sock_set(%struct.mg_connection* %c, i32 %sock) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %sock.addr = alloca i32, align 4
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  store i32 %sock, i32* %sock.addr, align 4, !tbaa !15
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %1 = load i32, i32* %sock.addr, align 4, !tbaa !15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_null_if_get_conn_addr(%struct.mg_connection* %c, i32 %remote, %union.socket_address* %sa) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %remote.addr = alloca i32, align 4
  %sa.addr = alloca %union.socket_address*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  store i32 %remote, i32* %remote.addr, align 4, !tbaa !15
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %1 = load i32, i32* %remote.addr, align 4, !tbaa !15
  %2 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_set_non_blocking_mode(i32 %sock) #0 {
entry:
  %sock.addr = alloca i32, align 4
  %flags = alloca i32, align 4
  store i32 %sock, i32* %sock.addr, align 4, !tbaa !15
  %0 = bitcast i32* %flags to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = load i32, i32* %sock.addr, align 4, !tbaa !15
  %call = call i32 (i32, i32, ...) @"\01_fcntl"(i32 %1, i32 3, i32 0)
  store i32 %call, i32* %flags, align 4, !tbaa !15
  %2 = load i32, i32* %sock.addr, align 4, !tbaa !15
  %3 = load i32, i32* %flags, align 4, !tbaa !15
  %or = or i32 %3, 4
  %call1 = call i32 (i32, i32, ...) @"\01_fcntl"(i32 %2, i32 4, i32 %or)
  %4 = bitcast i32* %flags to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %4) #5
  ret void
}

declare i32 @"\01_fcntl"(i32, i32, ...) #4

; Function Attrs: nounwind ssp uwtable
define void @mg_socket_if_connect_tcp(%struct.mg_connection* %nc, %union.socket_address* %sa) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %sa.addr = alloca %union.socket_address*, align 8
  %rc = alloca i32, align 4
  %proto = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %0 = bitcast i32* %rc to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = bitcast i32* %proto to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  store i32 0, i32* %proto, align 4, !tbaa !15
  %2 = load i32, i32* %proto, align 4, !tbaa !15
  %call = call i32 @socket(i32 2, i32 1, i32 %2)
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 4
  store i32 %call, i32* %sock, align 8, !tbaa !45
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sock1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 4
  %5 = load i32, i32* %sock1, align 8, !tbaa !45
  %cmp = icmp eq i32 %5, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call2 = call i32 @mg_get_errno()
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %call3 = call i32 @mg_get_errno()
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call3, %cond.true ], [ 1, %cond.false ]
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %err = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 5
  store i32 %cond, i32* %err, align 4, !tbaa !127
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sock4 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %7, i32 0, i32 4
  %8 = load i32, i32* %sock4, align 8, !tbaa !45
  call void @mg_set_non_blocking_mode(i32 %8)
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sock5 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %9, i32 0, i32 4
  %10 = load i32, i32* %sock5, align 8, !tbaa !45
  %11 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %sa6 = bitcast %union.socket_address* %11 to %struct.sockaddr*
  %call7 = call i32 @"\01_connect"(i32 %10, %struct.sockaddr* %sa6, i32 16)
  store i32 %call7, i32* %rc, align 4, !tbaa !15
  %12 = load i32, i32* %rc, align 4, !tbaa !15
  %cmp8 = icmp slt i32 %12, 0
  br i1 %cmp8, label %land.lhs.true, label %cond.false13

land.lhs.true:                                    ; preds = %if.end
  %call9 = call i32 @mg_is_error()
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %cond.true11, label %cond.false13

cond.true11:                                      ; preds = %land.lhs.true
  %call12 = call i32 @mg_get_errno()
  br label %cond.end14

cond.false13:                                     ; preds = %land.lhs.true, %if.end
  br label %cond.end14

cond.end14:                                       ; preds = %cond.false13, %cond.true11
  %cond15 = phi i32 [ %call12, %cond.true11 ], [ 0, %cond.false13 ]
  %13 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %err16 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %13, i32 0, i32 5
  store i32 %cond15, i32* %err16, align 4, !tbaa !127
  br label %do.body

do.body:                                          ; preds = %cond.end14
  %call17 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3694)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.then19, label %if.end23

if.then19:                                        ; preds = %do.body
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %15 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sock20 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %15, i32 0, i32 4
  %16 = load i32, i32* %sock20, align 8, !tbaa !45
  %17 = load i32, i32* %rc, align 4, !tbaa !15
  %call21 = call i32 @mg_get_errno()
  %18 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %err22 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %18, i32 0, i32 5
  %19 = load i32, i32* %err22, align 4, !tbaa !127
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.24, i32 0, i32 0), %struct.mg_connection* %14, i32 %16, i32 %17, i32 %call21, i32 %19)
  br label %if.end23

if.end23:                                         ; preds = %if.then19, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end23
  br label %do.end

do.end:                                           ; preds = %do.cond
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %do.end, %cond.end
  %20 = bitcast i32* %proto to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %20) #5
  %21 = bitcast i32* %rc to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %21) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup, %cleanup
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

declare i32 @socket(i32, i32, i32) #4

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_get_errno() #0 {
entry:
  %call = call i32* @__error()
  %0 = load i32, i32* %call, align 4, !tbaa !15
  ret i32 %0
}

declare i32 @"\01_connect"(i32, %struct.sockaddr*, i32) #4

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_is_error() #0 {
entry:
  %err = alloca i32, align 4
  %0 = bitcast i32* %err to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %call = call i32 @mg_get_errno()
  store i32 %call, i32* %err, align 4, !tbaa !15
  %1 = load i32, i32* %err, align 4, !tbaa !15
  %cmp = icmp ne i32 %1, 36
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* %err, align 4, !tbaa !15
  %cmp1 = icmp ne i32 %2, 35
  br i1 %cmp1, label %land.lhs.true2, label %land.end

land.lhs.true2:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %err, align 4, !tbaa !15
  %cmp3 = icmp ne i32 %3, 35
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true2
  %4 = load i32, i32* %err, align 4, !tbaa !15
  %cmp4 = icmp ne i32 %4, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true2, %land.lhs.true, %entry
  %5 = phi i1 [ false, %land.lhs.true2 ], [ false, %land.lhs.true ], [ false, %entry ], [ %cmp4, %land.rhs ]
  %land.ext = zext i1 %5 to i32
  %6 = bitcast i32* %err to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %6) #5
  ret i32 %land.ext
}

; Function Attrs: nounwind ssp uwtable
define void @mg_socket_if_connect_udp(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %optval = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %call = call i32 @socket(i32 2, i32 2, i32 0)
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 4
  store i32 %call, i32* %sock, align 8, !tbaa !45
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sock1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 4
  %2 = load i32, i32* %sock1, align 8, !tbaa !45
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call2 = call i32 @mg_get_errno()
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %call3 = call i32 @mg_get_errno()
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call3, %cond.true ], [ 1, %cond.false ]
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %err = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 5
  store i32 %cond, i32* %err, align 4, !tbaa !127
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 21
  %5 = load i64, i64* %flags, align 8, !tbaa !41
  %and = and i64 %5, 16384
  %tobool4 = icmp ne i64 %and, 0
  br i1 %tobool4, label %if.then5, label %if.end19

if.then5:                                         ; preds = %if.end
  %6 = bitcast i32* %optval to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #5
  store i32 1, i32* %optval, align 4, !tbaa !15
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sock6 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %7, i32 0, i32 4
  %8 = load i32, i32* %sock6, align 8, !tbaa !45
  %9 = bitcast i32* %optval to i8*
  %call7 = call i32 @setsockopt(i32 %8, i32 65535, i32 32, i8* %9, i32 4)
  %cmp8 = icmp slt i32 %call7, 0
  br i1 %cmp8, label %if.then9, label %if.end18

if.then9:                                         ; preds = %if.then5
  %call10 = call i32 @mg_get_errno()
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %cond.true12, label %cond.false14

cond.true12:                                      ; preds = %if.then9
  %call13 = call i32 @mg_get_errno()
  br label %cond.end15

cond.false14:                                     ; preds = %if.then9
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false14, %cond.true12
  %cond16 = phi i32 [ %call13, %cond.true12 ], [ 1, %cond.false14 ]
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %err17 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 5
  store i32 %cond16, i32* %err17, align 4, !tbaa !127
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end18:                                         ; preds = %if.then5
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end18, %cond.end15
  %11 = bitcast i32* %optval to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %return
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end19

if.end19:                                         ; preds = %cleanup.cont, %if.end
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %err20 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %12, i32 0, i32 5
  store i32 0, i32* %err20, align 4, !tbaa !127
  br label %return

return:                                           ; preds = %if.end19, %cleanup, %cond.end
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

declare i32 @setsockopt(i32, i32, i32, i8*, i32) #4

; Function Attrs: nounwind ssp uwtable
define i32 @mg_socket_if_listen_tcp(%struct.mg_connection* %nc, %union.socket_address* %sa) #0 {
entry:
  %retval = alloca i32, align 4
  %nc.addr = alloca %struct.mg_connection*, align 8
  %sa.addr = alloca %union.socket_address*, align 8
  %proto = alloca i32, align 4
  %sock = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %0 = bitcast i32* %proto to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  store i32 0, i32* %proto, align 4, !tbaa !15
  %1 = bitcast i32* %sock to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  %2 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %3 = load i32, i32* %proto, align 4, !tbaa !15
  %call = call i32 @mg_open_listening_socket(%union.socket_address* %2, i32 1, i32 %3)
  store i32 %call, i32* %sock, align 4, !tbaa !15
  %4 = load i32, i32* %sock, align 4, !tbaa !15
  %cmp = icmp eq i32 %4, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i32 @mg_get_errno()
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %call2 = call i32 @mg_get_errno()
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call2, %cond.true ], [ 1, %cond.false ]
  store i32 %cond, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %6 = load i32, i32* %sock, align 4, !tbaa !15
  call void @mg_sock_set(%struct.mg_connection* %5, i32 %6)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %cond.end
  %7 = bitcast i32* %sock to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %7) #5
  %8 = bitcast i32* %proto to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %8) #5
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_open_listening_socket(%union.socket_address* %sa, i32 %type, i32 %proto) #0 {
entry:
  %sa.addr = alloca %union.socket_address*, align 8
  %type.addr = alloca i32, align 4
  %proto.addr = alloca i32, align 4
  %sa_len = alloca i32, align 4
  %sock = alloca i32, align 4
  %on = alloca i32, align 4
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8, !tbaa !3
  store i32 %type, i32* %type.addr, align 4, !tbaa !15
  store i32 %proto, i32* %proto.addr, align 4, !tbaa !15
  %0 = bitcast i32* %sa_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %sa1 = bitcast %union.socket_address* %1 to %struct.sockaddr*
  %sa_family = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %sa1, i32 0, i32 1
  %2 = load i8, i8* %sa_family, align 1, !tbaa !14
  %conv = zext i8 %2 to i32
  %cmp = icmp eq i32 %conv, 2
  %3 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i64 16, i64 16
  %conv3 = trunc i64 %cond to i32
  store i32 %conv3, i32* %sa_len, align 4, !tbaa !15
  %4 = bitcast i32* %sock to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #5
  store i32 -1, i32* %sock, align 4, !tbaa !15
  %5 = bitcast i32* %on to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #5
  store i32 1, i32* %on, align 4, !tbaa !15
  %6 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %sa4 = bitcast %union.socket_address* %6 to %struct.sockaddr*
  %sa_family5 = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %sa4, i32 0, i32 1
  %7 = load i8, i8* %sa_family5, align 1, !tbaa !14
  %conv6 = zext i8 %7 to i32
  %8 = load i32, i32* %type.addr, align 4, !tbaa !15
  %9 = load i32, i32* %proto.addr, align 4, !tbaa !15
  %call = call i32 @socket(i32 %conv6, i32 %8, i32 %9)
  store i32 %call, i32* %sock, align 4, !tbaa !15
  %cmp7 = icmp ne i32 %call, -1
  br i1 %cmp7, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %10 = load i32, i32* %sock, align 4, !tbaa !15
  %11 = bitcast i32* %on to i8*
  %call9 = call i32 @setsockopt(i32 %10, i32 65535, i32 4, i8* %11, i32 4)
  %tobool = icmp ne i32 %call9, 0
  br i1 %tobool, label %if.else, label %land.lhs.true10

land.lhs.true10:                                  ; preds = %land.lhs.true
  %12 = load i32, i32* %sock, align 4, !tbaa !15
  %13 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %sa11 = bitcast %union.socket_address* %13 to %struct.sockaddr*
  %14 = load i32, i32* %sa_len, align 4, !tbaa !15
  %call12 = call i32 @"\01_bind"(i32 %12, %struct.sockaddr* %sa11, i32 %14)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.else, label %land.lhs.true14

land.lhs.true14:                                  ; preds = %land.lhs.true10
  %15 = load i32, i32* %type.addr, align 4, !tbaa !15
  %cmp15 = icmp eq i32 %15, 2
  br i1 %cmp15, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true14
  %16 = load i32, i32* %sock, align 4, !tbaa !15
  %call17 = call i32 @"\01_listen"(i32 %16, i32 128)
  %cmp18 = icmp eq i32 %call17, 0
  br i1 %cmp18, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true14
  %17 = load i32, i32* %sock, align 4, !tbaa !15
  call void @mg_set_non_blocking_mode(i32 %17)
  %18 = load i32, i32* %sock, align 4, !tbaa !15
  %19 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %sa20 = bitcast %union.socket_address* %19 to %struct.sockaddr*
  %call21 = call i32 @"\01_getsockname"(i32 %18, %struct.sockaddr* %sa20, i32* %sa_len)
  br label %if.end26

if.else:                                          ; preds = %lor.lhs.false, %land.lhs.true10, %land.lhs.true, %entry
  %20 = load i32, i32* %sock, align 4, !tbaa !15
  %cmp22 = icmp ne i32 %20, -1
  br i1 %cmp22, label %if.then24, label %if.end

if.then24:                                        ; preds = %if.else
  %21 = load i32, i32* %sock, align 4, !tbaa !15
  %call25 = call i32 @"\01_close"(i32 %21)
  store i32 -1, i32* %sock, align 4, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then24, %if.else
  br label %if.end26

if.end26:                                         ; preds = %if.end, %if.then
  %22 = load i32, i32* %sock, align 4, !tbaa !15
  %23 = bitcast i32* %on to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %23) #5
  %24 = bitcast i32* %sock to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %24) #5
  %25 = bitcast i32* %sa_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %25) #5
  ret i32 %22
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_socket_if_create_conn(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define void @mg_socket_if_destroy_conn(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 4
  %1 = load i32, i32* %sock, align 8, !tbaa !45
  %cmp = icmp eq i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %2, i32 0, i32 21
  %3 = load i64, i64* %flags, align 8, !tbaa !41
  %and = and i64 %3, 2
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.else, label %if.then1

if.then1:                                         ; preds = %if.end
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sock2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 4
  %5 = load i32, i32* %sock2, align 8, !tbaa !45
  %call = call i32 @"\01_close"(i32 %5)
  br label %if.end8

if.else:                                          ; preds = %if.end
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %listener = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 2
  %7 = load %struct.mg_connection*, %struct.mg_connection** %listener, align 8, !tbaa !78
  %cmp3 = icmp eq %struct.mg_connection* %7, null
  br i1 %cmp3, label %if.then4, label %if.end7

if.then4:                                         ; preds = %if.else
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sock5 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %8, i32 0, i32 4
  %9 = load i32, i32* %sock5, align 8, !tbaa !45
  %call6 = call i32 @"\01_close"(i32 %9)
  br label %if.end7

if.end7:                                          ; preds = %if.then4, %if.else
  br label %if.end8

if.end8:                                          ; preds = %if.end7, %if.then1
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sock9 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 4
  store i32 -1, i32* %sock9, align 8, !tbaa !45
  br label %return

return:                                           ; preds = %if.end8, %if.then
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_mgr_handle_conn(%struct.mg_connection* %nc, i32 %fd_flags, double %now) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %fd_flags.addr = alloca i32, align 4
  %now.addr = alloca double, align 8
  %worth_logging = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %err = alloca i32, align 4
  %len23 = alloca i32, align 4
  %ret = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i32 %fd_flags, i32* %fd_flags.addr, align 4, !tbaa !15
  store double %now, double* %now.addr, align 8, !tbaa !26
  %0 = bitcast i32* %worth_logging to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = load i32, i32* %fd_flags.addr, align 4, !tbaa !15
  %cmp = icmp ne i32 %1, 0
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %2, i32 0, i32 21
  %3 = load i64, i64* %flags, align 8, !tbaa !41
  %and = and i64 %3, 192
  %tobool = icmp ne i64 %and, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %tobool, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32
  store i32 %lor.ext, i32* %worth_logging, align 4, !tbaa !15
  %5 = load i32, i32* %worth_logging, align 4, !tbaa !15
  %tobool1 = icmp ne i32 %5, 0
  br i1 %tobool1, label %if.then, label %if.end7

if.then:                                          ; preds = %lor.end
  br label %do.body

do.body:                                          ; preds = %if.then
  %call = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3866)
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then3, label %if.end

if.then3:                                         ; preds = %do.body
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %7, i32 0, i32 4
  %8 = load i32, i32* %sock, align 8, !tbaa !45
  %9 = load i32, i32* %fd_flags.addr, align 4, !tbaa !15
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags4 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 21
  %11 = load i64, i64* %flags4, align 8, !tbaa !41
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %12, i32 0, i32 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf, i32 0, i32 1
  %13 = load i64, i64* %len, align 8, !tbaa !54
  %conv = trunc i64 %13 to i32
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 9
  %len5 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %send_mbuf, i32 0, i32 1
  %15 = load i64, i64* %len5, align 8, !tbaa !43
  %conv6 = trunc i64 %15 to i32
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.25, i32 0, i32 0), %struct.mg_connection* %6, i32 %8, i32 %9, i64 %11, i32 %conv, i32 %conv6)
  br label %if.end

if.end:                                           ; preds = %if.then3, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end7

if.end7:                                          ; preds = %do.end, %lor.end
  %16 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %17 = load double, double* %now.addr, align 8, !tbaa !26
  %call8 = call i32 @mg_if_poll(%struct.mg_connection* %16, double %17)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end11, label %if.then10

if.then10:                                        ; preds = %if.end7
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end11:                                         ; preds = %if.end7
  %18 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags12 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %18, i32 0, i32 21
  %19 = load i64, i64* %flags12, align 8, !tbaa !41
  %and13 = and i64 %19, 8
  %tobool14 = icmp ne i64 %and13, 0
  br i1 %tobool14, label %if.then15, label %if.end45

if.then15:                                        ; preds = %if.end11
  %20 = load i32, i32* %fd_flags.addr, align 4, !tbaa !15
  %cmp16 = icmp ne i32 %20, 0
  br i1 %cmp16, label %if.then18, label %if.else37

if.then18:                                        ; preds = %if.then15
  %21 = bitcast i32* %err to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %21) #5
  store i32 0, i32* %err, align 4, !tbaa !15
  %22 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags19 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %22, i32 0, i32 21
  %23 = load i64, i64* %flags19, align 8, !tbaa !41
  %and20 = and i64 %23, 2
  %tobool21 = icmp ne i64 %and20, 0
  br i1 %tobool21, label %if.end36, label %if.then22

if.then22:                                        ; preds = %if.then18
  %24 = bitcast i32* %len23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %24) #5
  store i32 4, i32* %len23, align 4, !tbaa !15
  %25 = bitcast i32* %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %25) #5
  %26 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sock24 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %26, i32 0, i32 4
  %27 = load i32, i32* %sock24, align 8, !tbaa !45
  %28 = bitcast i32* %err to i8*
  %call25 = call i32 @getsockopt(i32 %27, i32 65535, i32 4103, i8* %28, i32* %len23)
  store i32 %call25, i32* %ret, align 4, !tbaa !15
  %29 = load i32, i32* %ret, align 4, !tbaa !15
  %cmp26 = icmp ne i32 %29, 0
  br i1 %cmp26, label %if.then28, label %if.else

if.then28:                                        ; preds = %if.then22
  store i32 1, i32* %err, align 4, !tbaa !15
  br label %if.end35

if.else:                                          ; preds = %if.then22
  %30 = load i32, i32* %err, align 4, !tbaa !15
  %cmp29 = icmp eq i32 %30, 35
  br i1 %cmp29, label %if.then33, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %31 = load i32, i32* %err, align 4, !tbaa !15
  %cmp31 = icmp eq i32 %31, 35
  br i1 %cmp31, label %if.then33, label %if.end34

if.then33:                                        ; preds = %lor.lhs.false, %if.else
  store i32 0, i32* %err, align 4, !tbaa !15
  br label %if.end34

if.end34:                                         ; preds = %if.then33, %lor.lhs.false
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %if.then28
  %32 = bitcast i32* %ret to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %32) #5
  %33 = bitcast i32* %len23 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %33) #5
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.then18
  %34 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %35 = load i32, i32* %err, align 4, !tbaa !15
  call void @mg_if_connect_cb(%struct.mg_connection* %34, i32 %35)
  %36 = bitcast i32* %err to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %36) #5
  br label %if.end44

if.else37:                                        ; preds = %if.then15
  %37 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %err38 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %37, i32 0, i32 5
  %38 = load i32, i32* %err38, align 4, !tbaa !127
  %cmp39 = icmp ne i32 %38, 0
  br i1 %cmp39, label %if.then41, label %if.end43

if.then41:                                        ; preds = %if.else37
  %39 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %40 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %err42 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %40, i32 0, i32 5
  %41 = load i32, i32* %err42, align 4, !tbaa !127
  call void @mg_if_connect_cb(%struct.mg_connection* %39, i32 %41)
  br label %if.end43

if.end43:                                         ; preds = %if.then41, %if.else37
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.end36
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.end11
  %42 = load i32, i32* %fd_flags.addr, align 4, !tbaa !15
  %and46 = and i32 %42, 1
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %if.then48, label %if.end62

if.then48:                                        ; preds = %if.end45
  %43 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags49 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %43, i32 0, i32 21
  %44 = load i64, i64* %flags49, align 8, !tbaa !41
  %and50 = and i64 %44, 2
  %tobool51 = icmp ne i64 %and50, 0
  br i1 %tobool51, label %if.then52, label %if.else53

if.then52:                                        ; preds = %if.then48
  %45 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_if_can_recv_cb(%struct.mg_connection* %45)
  br label %if.end61

if.else53:                                        ; preds = %if.then48
  %46 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags54 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %46, i32 0, i32 21
  %47 = load i64, i64* %flags54, align 8, !tbaa !41
  %and55 = and i64 %47, 1
  %tobool56 = icmp ne i64 %and55, 0
  br i1 %tobool56, label %if.then57, label %if.else59

if.then57:                                        ; preds = %if.else53
  %48 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %call58 = call i32 @mg_accept_conn(%struct.mg_connection* %48)
  br label %if.end60

if.else59:                                        ; preds = %if.else53
  %49 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_if_can_recv_cb(%struct.mg_connection* %49)
  br label %if.end60

if.end60:                                         ; preds = %if.else59, %if.then57
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %if.then52
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.end45
  %50 = load i32, i32* %fd_flags.addr, align 4, !tbaa !15
  %and63 = and i32 %50, 2
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %if.then65, label %if.end66

if.then65:                                        ; preds = %if.end62
  %51 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_if_can_send_cb(%struct.mg_connection* %51)
  br label %if.end66

if.end66:                                         ; preds = %if.then65, %if.end62
  %52 = load i32, i32* %worth_logging, align 4, !tbaa !15
  %tobool67 = icmp ne i32 %52, 0
  br i1 %tobool67, label %if.then68, label %if.end84

if.then68:                                        ; preds = %if.end66
  br label %do.body69

do.body69:                                        ; preds = %if.then68
  %call70 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3918)
  %tobool71 = icmp ne i32 %call70, 0
  br i1 %tobool71, label %if.then72, label %if.end81

if.then72:                                        ; preds = %do.body69
  %53 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %54 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sock73 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %54, i32 0, i32 4
  %55 = load i32, i32* %sock73, align 8, !tbaa !45
  %56 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags74 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %56, i32 0, i32 21
  %57 = load i64, i64* %flags74, align 8, !tbaa !41
  %58 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf75 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %58, i32 0, i32 8
  %len76 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf75, i32 0, i32 1
  %59 = load i64, i64* %len76, align 8, !tbaa !54
  %conv77 = trunc i64 %59 to i32
  %60 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %send_mbuf78 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %60, i32 0, i32 9
  %len79 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %send_mbuf78, i32 0, i32 1
  %61 = load i64, i64* %len79, align 8, !tbaa !43
  %conv80 = trunc i64 %61 to i32
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.26, i32 0, i32 0), %struct.mg_connection* %53, i32 %55, i64 %57, i32 %conv77, i32 %conv80)
  br label %if.end81

if.end81:                                         ; preds = %if.then72, %do.body69
  br label %do.cond82

do.cond82:                                        ; preds = %if.end81
  br label %do.end83

do.end83:                                         ; preds = %do.cond82
  br label %if.end84

if.end84:                                         ; preds = %do.end83, %if.end66
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end84, %if.then10
  %62 = bitcast i32* %worth_logging to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %62) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup, %cleanup
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

declare i32 @getsockopt(i32, i32, i32, i8*, i32*) #4

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_accept_conn(%struct.mg_connection* %lc) #0 {
entry:
  %retval = alloca i32, align 4
  %lc.addr = alloca %struct.mg_connection*, align 8
  %nc = alloca %struct.mg_connection*, align 8
  %sa = alloca %union.socket_address, align 4
  %sa_len = alloca i32, align 4
  %sock = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_connection* %lc, %struct.mg_connection** %lc.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = bitcast %union.socket_address* %sa to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %1) #5
  %2 = bitcast i32* %sa_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  store i32 16, i32* %sa_len, align 4, !tbaa !15
  %3 = bitcast i32* %sock to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  %4 = load %struct.mg_connection*, %struct.mg_connection** %lc.addr, align 8, !tbaa !3
  %sock1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 4
  %5 = load i32, i32* %sock1, align 8, !tbaa !45
  %sa2 = bitcast %union.socket_address* %sa to %struct.sockaddr*
  %call = call i32 @"\01_accept"(i32 %5, %struct.sockaddr* %sa2, i32* %sa_len)
  store i32 %call, i32* %sock, align 4, !tbaa !15
  %6 = load i32, i32* %sock, align 4, !tbaa !15
  %cmp = icmp eq i32 %6, -1
  br i1 %cmp, label %if.then, label %if.end10

if.then:                                          ; preds = %entry
  %call3 = call i32 @mg_is_error()
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.then4, label %if.end9

if.then4:                                         ; preds = %if.then
  br label %do.body

do.body:                                          ; preds = %if.then4
  %call5 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3793)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then7, label %if.end

if.then7:                                         ; preds = %do.body
  %7 = load %struct.mg_connection*, %struct.mg_connection** %lc.addr, align 8, !tbaa !3
  %call8 = call i32 @mg_get_errno()
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.186, i32 0, i32 0), %struct.mg_connection* %7, i32 %call8)
  br label %if.end

if.end:                                           ; preds = %if.then7, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end9

if.end9:                                          ; preds = %do.end, %if.then
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end10:                                         ; preds = %entry
  %8 = load %struct.mg_connection*, %struct.mg_connection** %lc.addr, align 8, !tbaa !3
  %call11 = call %struct.mg_connection* @mg_if_accept_new_conn(%struct.mg_connection* %8)
  store %struct.mg_connection* %call11, %struct.mg_connection** %nc, align 8, !tbaa !3
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %cmp12 = icmp eq %struct.mg_connection* %9, null
  br i1 %cmp12, label %if.then13, label %if.end15

if.then13:                                        ; preds = %if.end10
  %10 = load i32, i32* %sock, align 4, !tbaa !15
  %call14 = call i32 @"\01_close"(i32 %10)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end15:                                         ; preds = %if.end10
  br label %do.body16

do.body16:                                        ; preds = %if.end15
  %call17 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3803)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.then19, label %if.end25

if.then19:                                        ; preds = %do.body16
  %11 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %sin = bitcast %union.socket_address* %sa to %struct.sockaddr_in*
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin, i32 0, i32 3
  %coerce.dive = getelementptr inbounds %struct.in_addr, %struct.in_addr* %sin_addr, i32 0, i32 0
  %12 = load i32, i32* %coerce.dive, align 4
  %call20 = call i8* @inet_ntoa(i32 %12)
  %sin21 = bitcast %union.socket_address* %sa to %struct.sockaddr_in*
  %sin_port = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin21, i32 0, i32 2
  %13 = load i16, i16* %sin_port, align 2, !tbaa !14
  %call22 = call zeroext i16 @_OSSwapInt16(i16 zeroext %13)
  %conv = zext i16 %call22 to i32
  %conv23 = trunc i32 %conv to i16
  %conv24 = zext i16 %conv23 to i32
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.187, i32 0, i32 0), %struct.mg_connection* %11, i8* %call20, i32 %conv24)
  br label %if.end25

if.end25:                                         ; preds = %if.then19, %do.body16
  br label %do.cond26

do.cond26:                                        ; preds = %if.end25
  br label %do.end27

do.end27:                                         ; preds = %do.cond26
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %15 = load i32, i32* %sock, align 4, !tbaa !15
  call void @mg_sock_set(%struct.mg_connection* %14, i32 %15)
  %16 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %17 = load i32, i32* %sa_len, align 4, !tbaa !15
  %conv28 = zext i32 %17 to i64
  call void @mg_if_accept_tcp_cb(%struct.mg_connection* %16, %union.socket_address* %sa, i64 %conv28)
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %do.end27, %if.then13, %if.end9
  %18 = bitcast i32* %sock to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %18) #5
  %19 = bitcast i32* %sa_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %19) #5
  %20 = bitcast %union.socket_address* %sa to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %20) #5
  %21 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %21) #5
  %22 = load i32, i32* %retval, align 4
  ret i32 %22
}

; Function Attrs: nounwind ssp uwtable
define void @mg_socket_if_sock_set(%struct.mg_connection* %nc, i32 %sock) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %sock.addr = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i32 %sock, i32* %sock.addr, align 4, !tbaa !15
  %0 = load i32, i32* %sock.addr, align 4, !tbaa !15
  call void @mg_set_non_blocking_mode(i32 %0)
  %1 = load i32, i32* %sock.addr, align 4, !tbaa !15
  call void @mg_set_close_on_exec(i32 %1)
  %2 = load i32, i32* %sock.addr, align 4, !tbaa !15
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sock1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 4
  store i32 %2, i32* %sock1, align 8, !tbaa !45
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3944)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %5 = load i32, i32* %sock.addr, align 4, !tbaa !15
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.27, i32 0, i32 0), %struct.mg_connection* %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_set_close_on_exec(i32 %sock) #0 {
entry:
  %sock.addr = alloca i32, align 4
  store i32 %sock, i32* %sock.addr, align 4, !tbaa !15
  %0 = load i32, i32* %sock.addr, align 4, !tbaa !15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_socket_if_init(%struct.mg_iface* %iface) #0 {
entry:
  %iface.addr = alloca %struct.mg_iface*, align 8
  store %struct.mg_iface* %iface, %struct.mg_iface** %iface.addr, align 8, !tbaa !3
  %0 = load %struct.mg_iface*, %struct.mg_iface** %iface.addr, align 8, !tbaa !3
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3949)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %1 = load %struct.mg_iface*, %struct.mg_iface** %iface.addr, align 8, !tbaa !3
  %mgr = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %1, i32 0, i32 0
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8, !tbaa !71
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.28, i32 0, i32 0), %struct.mg_mgr* %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %3 = load %struct.mg_iface*, %struct.mg_iface** %iface.addr, align 8, !tbaa !3
  %mgr1 = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %3, i32 0, i32 0
  %4 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr1, align 8, !tbaa !71
  %ctl = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %4, i32 0, i32 2
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %ctl, i32 0, i32 0
  %call2 = call i32 @mg_socketpair(i32* %arraydecay, i32 2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_socketpair(i32* %sp, i32 %sock_type) #0 {
entry:
  %sp.addr = alloca i32*, align 8
  %sock_type.addr = alloca i32, align 4
  %sa = alloca %union.socket_address, align 4
  %sa2 = alloca %union.socket_address, align 4
  %sock = alloca i32, align 4
  %len = alloca i32, align 4
  %ret = alloca i32, align 4
  store i32* %sp, i32** %sp.addr, align 8, !tbaa !3
  store i32 %sock_type, i32* %sock_type.addr, align 4, !tbaa !15
  %0 = bitcast %union.socket_address* %sa to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %0) #5
  %1 = bitcast %union.socket_address* %sa2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %1) #5
  %2 = bitcast i32* %sock to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  %3 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  store i32 16, i32* %len, align 4, !tbaa !15
  %4 = bitcast i32* %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #5
  store i32 0, i32* %ret, align 4, !tbaa !15
  %5 = load i32*, i32** %sp.addr, align 8, !tbaa !3
  %arrayidx = getelementptr inbounds i32, i32* %5, i64 1
  store i32 -1, i32* %arrayidx, align 4, !tbaa !15
  %6 = load i32*, i32** %sp.addr, align 8, !tbaa !3
  %arrayidx1 = getelementptr inbounds i32, i32* %6, i64 0
  store i32 -1, i32* %arrayidx1, align 4, !tbaa !15
  store i32 -1, i32* %sock, align 4, !tbaa !15
  %7 = bitcast %union.socket_address* %sa to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 0, i64 16, i1 false)
  %sin = bitcast %union.socket_address* %sa to %struct.sockaddr_in*
  %sin_family = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin, i32 0, i32 1
  store i8 2, i8* %sin_family, align 1, !tbaa !14
  %sin2 = bitcast %union.socket_address* %sa to %struct.sockaddr_in*
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin2, i32 0, i32 3
  %s_addr = getelementptr inbounds %struct.in_addr, %struct.in_addr* %sin_addr, i32 0, i32 0
  store i32 16777343, i32* %s_addr, align 4, !tbaa !14
  %8 = bitcast %union.socket_address* %sa2 to i8*
  %9 = bitcast %union.socket_address* %sa to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %8, i8* align 4 %9, i64 16, i1 false), !tbaa.struct !85
  %10 = load i32, i32* %sock_type.addr, align 4, !tbaa !15
  %call = call i32 @socket(i32 2, i32 %10, i32 0)
  store i32 %call, i32* %sock, align 4, !tbaa !15
  %cmp = icmp eq i32 %call, -1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end69

if.else:                                          ; preds = %entry
  %11 = load i32, i32* %sock, align 4, !tbaa !15
  %sa3 = bitcast %union.socket_address* %sa to %struct.sockaddr*
  %12 = load i32, i32* %len, align 4, !tbaa !15
  %call4 = call i32 @"\01_bind"(i32 %11, %struct.sockaddr* %sa3, i32 %12)
  %cmp5 = icmp ne i32 %call4, 0
  br i1 %cmp5, label %if.then6, label %if.else7

if.then6:                                         ; preds = %if.else
  br label %if.end68

if.else7:                                         ; preds = %if.else
  %13 = load i32, i32* %sock_type.addr, align 4, !tbaa !15
  %cmp8 = icmp eq i32 %13, 1
  br i1 %cmp8, label %land.lhs.true, label %if.else12

land.lhs.true:                                    ; preds = %if.else7
  %14 = load i32, i32* %sock, align 4, !tbaa !15
  %call9 = call i32 @"\01_listen"(i32 %14, i32 1)
  %cmp10 = icmp ne i32 %call9, 0
  br i1 %cmp10, label %if.then11, label %if.else12

if.then11:                                        ; preds = %land.lhs.true
  br label %if.end67

if.else12:                                        ; preds = %land.lhs.true, %if.else7
  %15 = load i32, i32* %sock, align 4, !tbaa !15
  %sa13 = bitcast %union.socket_address* %sa to %struct.sockaddr*
  %call14 = call i32 @"\01_getsockname"(i32 %15, %struct.sockaddr* %sa13, i32* %len)
  %cmp15 = icmp ne i32 %call14, 0
  br i1 %cmp15, label %if.then16, label %if.else17

if.then16:                                        ; preds = %if.else12
  br label %if.end66

if.else17:                                        ; preds = %if.else12
  %16 = load i32, i32* %sock_type.addr, align 4, !tbaa !15
  %call18 = call i32 @socket(i32 2, i32 %16, i32 0)
  %17 = load i32*, i32** %sp.addr, align 8, !tbaa !3
  %arrayidx19 = getelementptr inbounds i32, i32* %17, i64 0
  store i32 %call18, i32* %arrayidx19, align 4, !tbaa !15
  %cmp20 = icmp eq i32 %call18, -1
  br i1 %cmp20, label %if.then21, label %if.else22

if.then21:                                        ; preds = %if.else17
  br label %if.end65

if.else22:                                        ; preds = %if.else17
  %18 = load i32, i32* %sock_type.addr, align 4, !tbaa !15
  %cmp23 = icmp eq i32 %18, 1
  br i1 %cmp23, label %land.lhs.true24, label %if.else30

land.lhs.true24:                                  ; preds = %if.else22
  %19 = load i32*, i32** %sp.addr, align 8, !tbaa !3
  %arrayidx25 = getelementptr inbounds i32, i32* %19, i64 0
  %20 = load i32, i32* %arrayidx25, align 4, !tbaa !15
  %sa26 = bitcast %union.socket_address* %sa to %struct.sockaddr*
  %21 = load i32, i32* %len, align 4, !tbaa !15
  %call27 = call i32 @"\01_connect"(i32 %20, %struct.sockaddr* %sa26, i32 %21)
  %cmp28 = icmp ne i32 %call27, 0
  br i1 %cmp28, label %if.then29, label %if.else30

if.then29:                                        ; preds = %land.lhs.true24
  br label %if.end64

if.else30:                                        ; preds = %land.lhs.true24, %if.else22
  %22 = load i32, i32* %sock_type.addr, align 4, !tbaa !15
  %cmp31 = icmp eq i32 %22, 2
  br i1 %cmp31, label %land.lhs.true32, label %if.else51

land.lhs.true32:                                  ; preds = %if.else30
  %23 = load i32*, i32** %sp.addr, align 8, !tbaa !3
  %arrayidx33 = getelementptr inbounds i32, i32* %23, i64 0
  %24 = load i32, i32* %arrayidx33, align 4, !tbaa !15
  %sa34 = bitcast %union.socket_address* %sa2 to %struct.sockaddr*
  %25 = load i32, i32* %len, align 4, !tbaa !15
  %call35 = call i32 @"\01_bind"(i32 %24, %struct.sockaddr* %sa34, i32 %25)
  %cmp36 = icmp ne i32 %call35, 0
  br i1 %cmp36, label %if.then50, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true32
  %26 = load i32*, i32** %sp.addr, align 8, !tbaa !3
  %arrayidx37 = getelementptr inbounds i32, i32* %26, i64 0
  %27 = load i32, i32* %arrayidx37, align 4, !tbaa !15
  %sa38 = bitcast %union.socket_address* %sa2 to %struct.sockaddr*
  %call39 = call i32 @"\01_getsockname"(i32 %27, %struct.sockaddr* %sa38, i32* %len)
  %cmp40 = icmp ne i32 %call39, 0
  br i1 %cmp40, label %if.then50, label %lor.lhs.false41

lor.lhs.false41:                                  ; preds = %lor.lhs.false
  %28 = load i32*, i32** %sp.addr, align 8, !tbaa !3
  %arrayidx42 = getelementptr inbounds i32, i32* %28, i64 0
  %29 = load i32, i32* %arrayidx42, align 4, !tbaa !15
  %sa43 = bitcast %union.socket_address* %sa to %struct.sockaddr*
  %30 = load i32, i32* %len, align 4, !tbaa !15
  %call44 = call i32 @"\01_connect"(i32 %29, %struct.sockaddr* %sa43, i32 %30)
  %cmp45 = icmp ne i32 %call44, 0
  br i1 %cmp45, label %if.then50, label %lor.lhs.false46

lor.lhs.false46:                                  ; preds = %lor.lhs.false41
  %31 = load i32, i32* %sock, align 4, !tbaa !15
  %sa47 = bitcast %union.socket_address* %sa2 to %struct.sockaddr*
  %32 = load i32, i32* %len, align 4, !tbaa !15
  %call48 = call i32 @"\01_connect"(i32 %31, %struct.sockaddr* %sa47, i32 %32)
  %cmp49 = icmp ne i32 %call48, 0
  br i1 %cmp49, label %if.then50, label %if.else51

if.then50:                                        ; preds = %lor.lhs.false46, %lor.lhs.false41, %lor.lhs.false, %land.lhs.true32
  br label %if.end63

if.else51:                                        ; preds = %lor.lhs.false46, %if.else30
  %33 = load i32, i32* %sock_type.addr, align 4, !tbaa !15
  %cmp52 = icmp eq i32 %33, 2
  br i1 %cmp52, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else51
  %34 = load i32, i32* %sock, align 4, !tbaa !15
  br label %cond.end

cond.false:                                       ; preds = %if.else51
  %35 = load i32, i32* %sock, align 4, !tbaa !15
  %36 = load i32, i32* %len, align 4, !tbaa !15
  %call53 = call i32 @mg_socketpair_accept(i32 %35, %union.socket_address* %sa, i32 %36)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %34, %cond.true ], [ %call53, %cond.false ]
  %37 = load i32*, i32** %sp.addr, align 8, !tbaa !3
  %arrayidx54 = getelementptr inbounds i32, i32* %37, i64 1
  store i32 %cond, i32* %arrayidx54, align 4, !tbaa !15
  %cmp55 = icmp eq i32 %cond, -1
  br i1 %cmp55, label %if.then56, label %if.else57

if.then56:                                        ; preds = %cond.end
  br label %if.end62

if.else57:                                        ; preds = %cond.end
  %38 = load i32*, i32** %sp.addr, align 8, !tbaa !3
  %arrayidx58 = getelementptr inbounds i32, i32* %38, i64 0
  %39 = load i32, i32* %arrayidx58, align 4, !tbaa !15
  call void @mg_set_close_on_exec(i32 %39)
  %40 = load i32*, i32** %sp.addr, align 8, !tbaa !3
  %arrayidx59 = getelementptr inbounds i32, i32* %40, i64 1
  %41 = load i32, i32* %arrayidx59, align 4, !tbaa !15
  call void @mg_set_close_on_exec(i32 %41)
  %42 = load i32, i32* %sock_type.addr, align 4, !tbaa !15
  %cmp60 = icmp eq i32 %42, 1
  br i1 %cmp60, label %if.then61, label %if.end

if.then61:                                        ; preds = %if.else57
  call void @mg_socketpair_close(i32* %sock)
  br label %if.end

if.end:                                           ; preds = %if.then61, %if.else57
  store i32 1, i32* %ret, align 4, !tbaa !15
  br label %if.end62

if.end62:                                         ; preds = %if.end, %if.then56
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.then50
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %if.then29
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then21
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %if.then16
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.then11
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %if.then6
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.then
  %43 = load i32, i32* %ret, align 4, !tbaa !15
  %tobool = icmp ne i32 %43, 0
  br i1 %tobool, label %if.end84, label %if.then70

if.then70:                                        ; preds = %if.end69
  %44 = load i32*, i32** %sp.addr, align 8, !tbaa !3
  %arrayidx71 = getelementptr inbounds i32, i32* %44, i64 0
  %45 = load i32, i32* %arrayidx71, align 4, !tbaa !15
  %cmp72 = icmp ne i32 %45, -1
  br i1 %cmp72, label %if.then73, label %if.end75

if.then73:                                        ; preds = %if.then70
  %46 = load i32*, i32** %sp.addr, align 8, !tbaa !3
  %arrayidx74 = getelementptr inbounds i32, i32* %46, i64 0
  call void @mg_socketpair_close(i32* %arrayidx74)
  br label %if.end75

if.end75:                                         ; preds = %if.then73, %if.then70
  %47 = load i32*, i32** %sp.addr, align 8, !tbaa !3
  %arrayidx76 = getelementptr inbounds i32, i32* %47, i64 1
  %48 = load i32, i32* %arrayidx76, align 4, !tbaa !15
  %cmp77 = icmp ne i32 %48, -1
  br i1 %cmp77, label %if.then78, label %if.end80

if.then78:                                        ; preds = %if.end75
  %49 = load i32*, i32** %sp.addr, align 8, !tbaa !3
  %arrayidx79 = getelementptr inbounds i32, i32* %49, i64 1
  call void @mg_socketpair_close(i32* %arrayidx79)
  br label %if.end80

if.end80:                                         ; preds = %if.then78, %if.end75
  %50 = load i32, i32* %sock, align 4, !tbaa !15
  %cmp81 = icmp ne i32 %50, -1
  br i1 %cmp81, label %if.then82, label %if.end83

if.then82:                                        ; preds = %if.end80
  call void @mg_socketpair_close(i32* %sock)
  br label %if.end83

if.end83:                                         ; preds = %if.then82, %if.end80
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %if.end69
  %51 = load i32, i32* %ret, align 4, !tbaa !15
  %52 = bitcast i32* %ret to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %52) #5
  %53 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %53) #5
  %54 = bitcast i32* %sock to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %54) #5
  %55 = bitcast %union.socket_address* %sa2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %55) #5
  %56 = bitcast %union.socket_address* %sa to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %56) #5
  ret i32 %51
}

; Function Attrs: nounwind ssp uwtable
define void @mg_socket_if_free(%struct.mg_iface* %iface) #0 {
entry:
  %iface.addr = alloca %struct.mg_iface*, align 8
  store %struct.mg_iface* %iface, %struct.mg_iface** %iface.addr, align 8, !tbaa !3
  %0 = load %struct.mg_iface*, %struct.mg_iface** %iface.addr, align 8, !tbaa !3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_socket_if_add_conn(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_socket_if_remove_conn(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_add_to_set(i32 %sock, %struct.fd_set* %set, i32* %max_fd) #0 {
entry:
  %sock.addr = alloca i32, align 4
  %set.addr = alloca %struct.fd_set*, align 8
  %max_fd.addr = alloca i32*, align 8
  store i32 %sock, i32* %sock.addr, align 4, !tbaa !15
  store %struct.fd_set* %set, %struct.fd_set** %set.addr, align 8, !tbaa !3
  store i32* %max_fd, i32** %max_fd.addr, align 8, !tbaa !3
  %0 = load i32, i32* %sock.addr, align 4, !tbaa !15
  %cmp = icmp ne i32 %0, -1
  br i1 %cmp, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %sock.addr, align 4, !tbaa !15
  %2 = load %struct.fd_set*, %struct.fd_set** %set.addr, align 8, !tbaa !3
  call void @__darwin_fd_set(i32 %1, %struct.fd_set* %2)
  %3 = load i32*, i32** %max_fd.addr, align 8, !tbaa !3
  %4 = load i32, i32* %3, align 4, !tbaa !15
  %cmp1 = icmp eq i32 %4, -1
  br i1 %cmp1, label %if.then3, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %5 = load i32, i32* %sock.addr, align 4, !tbaa !15
  %6 = load i32*, i32** %max_fd.addr, align 8, !tbaa !3
  %7 = load i32, i32* %6, align 4, !tbaa !15
  %cmp2 = icmp sgt i32 %5, %7
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %lor.lhs.false, %if.then
  %8 = load i32, i32* %sock.addr, align 4, !tbaa !15
  %9 = load i32*, i32** %max_fd.addr, align 8, !tbaa !3
  store i32 %8, i32* %9, align 4, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then3, %lor.lhs.false
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define available_externally void @__darwin_fd_set(i32 %_fd, %struct.fd_set* %_p) #14 {
entry:
  %_fd.addr = alloca i32, align 4
  %_p.addr = alloca %struct.fd_set*, align 8
  store i32 %_fd, i32* %_fd.addr, align 4, !tbaa !15
  store %struct.fd_set* %_p, %struct.fd_set** %_p.addr, align 8, !tbaa !3
  %0 = load i32, i32* %_fd.addr, align 4, !tbaa !15
  %1 = load %struct.fd_set*, %struct.fd_set** %_p.addr, align 8, !tbaa !3
  %2 = bitcast %struct.fd_set* %1 to i8*
  %call = call i32 @__darwin_check_fd_set(i32 %0, i8* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %_fd.addr, align 4, !tbaa !15
  %conv = sext i32 %3 to i64
  %rem = urem i64 %conv, 32
  %shl = shl i64 1, %rem
  %conv1 = trunc i64 %shl to i32
  %4 = load %struct.fd_set*, %struct.fd_set** %_p.addr, align 8, !tbaa !3
  %fds_bits = getelementptr inbounds %struct.fd_set, %struct.fd_set* %4, i32 0, i32 0
  %5 = load i32, i32* %_fd.addr, align 4, !tbaa !15
  %conv2 = sext i32 %5 to i64
  %div = udiv i64 %conv2, 32
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* %fds_bits, i64 0, i64 %div
  %6 = load i32, i32* %arrayidx, align 4, !tbaa !15
  %or = or i32 %6, %conv1
  store i32 %or, i32* %arrayidx, align 4, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i64 @mg_socket_if_poll(%struct.mg_iface* %iface, i32 %timeout_ms) #0 {
entry:
  %iface.addr = alloca %struct.mg_iface*, align 8
  %timeout_ms.addr = alloca i32, align 4
  %mgr = alloca %struct.mg_mgr*, align 8
  %now = alloca double, align 8
  %min_timer = alloca double, align 8
  %nc = alloca %struct.mg_connection*, align 8
  %tmp = alloca %struct.mg_connection*, align 8
  %tv = alloca %struct.timeval, align 8
  %read_set = alloca %struct.fd_set, align 4
  %write_set = alloca %struct.fd_set, align 4
  %err_set = alloca %struct.fd_set, align 4
  %max_fd = alloca i32, align 4
  %num_fds = alloca i32, align 4
  %num_ev = alloca i32, align 4
  %num_timers = alloca i32, align 4
  %timer_timeout_ms = alloca double, align 8
  %fd_flags = alloca i32, align 4
  store %struct.mg_iface* %iface, %struct.mg_iface** %iface.addr, align 8, !tbaa !3
  store i32 %timeout_ms, i32* %timeout_ms.addr, align 4, !tbaa !15
  %0 = bitcast %struct.mg_mgr** %mgr to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.mg_iface*, %struct.mg_iface** %iface.addr, align 8, !tbaa !3
  %mgr1 = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %1, i32 0, i32 0
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr1, align 8, !tbaa !71
  store %struct.mg_mgr* %2, %struct.mg_mgr** %mgr, align 8, !tbaa !3
  %3 = bitcast double* %now to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  %call = call double @mg_time()
  store double %call, double* %now, align 8, !tbaa !26
  %4 = bitcast double* %min_timer to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #5
  %5 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #5
  %6 = bitcast %struct.mg_connection** %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #5
  %7 = bitcast %struct.timeval* %tv to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %7) #5
  %8 = bitcast %struct.fd_set* %read_set to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* %8) #5
  %9 = bitcast %struct.fd_set* %write_set to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* %9) #5
  %10 = bitcast %struct.fd_set* %err_set to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* %10) #5
  %11 = bitcast i32* %max_fd to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %11) #5
  store i32 -1, i32* %max_fd, align 4, !tbaa !15
  %12 = bitcast i32* %num_fds to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %12) #5
  %13 = bitcast i32* %num_ev to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %13) #5
  %14 = bitcast i32* %num_timers to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %14) #5
  store i32 0, i32* %num_timers, align 4, !tbaa !15
  %15 = bitcast %struct.fd_set* %read_set to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %15, i8 0, i64 128, i1 false)
  %16 = bitcast %struct.fd_set* %write_set to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %16, i8 0, i64 128, i1 false)
  %17 = bitcast %struct.fd_set* %err_set to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 128, i1 false)
  %18 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8, !tbaa !3
  %ctl = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %18, i32 0, i32 2
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %ctl, i64 0, i64 1
  %19 = load i32, i32* %arrayidx, align 4, !tbaa !15
  call void @mg_add_to_set(i32 %19, %struct.fd_set* %read_set, i32* %max_fd)
  store double 0.000000e+00, double* %min_timer, align 8, !tbaa !26
  %20 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8, !tbaa !3
  %active_connections = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %20, i32 0, i32 0
  %21 = load %struct.mg_connection*, %struct.mg_connection** %active_connections, align 8, !tbaa !73
  store %struct.mg_connection* %21, %struct.mg_connection** %nc, align 8, !tbaa !3
  store i32 0, i32* %num_fds, align 4, !tbaa !15
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %22 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %cmp = icmp ne %struct.mg_connection* %22, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %23 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %next = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %23, i32 0, i32 0
  %24 = load %struct.mg_connection*, %struct.mg_connection** %next, align 8, !tbaa !74
  store %struct.mg_connection* %24, %struct.mg_connection** %tmp, align 8, !tbaa !3
  %25 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %25, i32 0, i32 4
  %26 = load i32, i32* %sock, align 8, !tbaa !45
  %cmp2 = icmp ne i32 %26, -1
  br i1 %cmp2, label %if.then, label %if.end25

if.then:                                          ; preds = %for.body
  %27 = load i32, i32* %num_fds, align 4, !tbaa !15
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %num_fds, align 4, !tbaa !15
  %28 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %28, i32 0, i32 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf, i32 0, i32 1
  %29 = load i64, i64* %len, align 8, !tbaa !54
  %30 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %recv_mbuf_limit = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %30, i32 0, i32 7
  %31 = load i64, i64* %recv_mbuf_limit, align 8, !tbaa !79
  %cmp3 = icmp ult i64 %29, %31
  br i1 %cmp3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %32 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %32, i32 0, i32 21
  %33 = load i64, i64* %flags, align 8, !tbaa !41
  %and = and i64 %33, 2
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then5

lor.lhs.false:                                    ; preds = %land.lhs.true
  %34 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %listener = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %34, i32 0, i32 2
  %35 = load %struct.mg_connection*, %struct.mg_connection** %listener, align 8, !tbaa !78
  %cmp4 = icmp eq %struct.mg_connection* %35, null
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %lor.lhs.false, %land.lhs.true
  %36 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %sock6 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %36, i32 0, i32 4
  %37 = load i32, i32* %sock6, align 8, !tbaa !45
  call void @mg_add_to_set(i32 %37, %struct.fd_set* %read_set, i32* %max_fd)
  br label %if.end

if.end:                                           ; preds = %if.then5, %lor.lhs.false, %if.then
  %38 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %flags7 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %38, i32 0, i32 21
  %39 = load i64, i64* %flags7, align 8, !tbaa !41
  %and8 = and i64 %39, 8
  %tobool9 = icmp ne i64 %and8, 0
  br i1 %tobool9, label %land.lhs.true10, label %lor.lhs.false14

land.lhs.true10:                                  ; preds = %if.end
  %40 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %flags11 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %40, i32 0, i32 21
  %41 = load i64, i64* %flags11, align 8, !tbaa !41
  %and12 = and i64 %41, 64
  %tobool13 = icmp ne i64 %and12, 0
  br i1 %tobool13, label %lor.lhs.false14, label %if.then21

lor.lhs.false14:                                  ; preds = %land.lhs.true10, %if.end
  %42 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %42, i32 0, i32 9
  %len15 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %send_mbuf, i32 0, i32 1
  %43 = load i64, i64* %len15, align 8, !tbaa !43
  %cmp16 = icmp ugt i64 %43, 0
  br i1 %cmp16, label %land.lhs.true17, label %if.end24

land.lhs.true17:                                  ; preds = %lor.lhs.false14
  %44 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %flags18 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %44, i32 0, i32 21
  %45 = load i64, i64* %flags18, align 8, !tbaa !41
  %and19 = and i64 %45, 8
  %tobool20 = icmp ne i64 %and19, 0
  br i1 %tobool20, label %if.end24, label %if.then21

if.then21:                                        ; preds = %land.lhs.true17, %land.lhs.true10
  %46 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %sock22 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %46, i32 0, i32 4
  %47 = load i32, i32* %sock22, align 8, !tbaa !45
  call void @mg_add_to_set(i32 %47, %struct.fd_set* %write_set, i32* %max_fd)
  %48 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %sock23 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %48, i32 0, i32 4
  %49 = load i32, i32* %sock23, align 8, !tbaa !45
  call void @mg_add_to_set(i32 %49, %struct.fd_set* %err_set, i32* %max_fd)
  br label %if.end24

if.end24:                                         ; preds = %if.then21, %land.lhs.true17, %lor.lhs.false14
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %for.body
  %50 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %ev_timer_time = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %50, i32 0, i32 11
  %51 = load double, double* %ev_timer_time, align 8, !tbaa !51
  %cmp26 = fcmp ogt double %51, 0.000000e+00
  br i1 %cmp26, label %if.then27, label %if.end36

if.then27:                                        ; preds = %if.end25
  %52 = load i32, i32* %num_timers, align 4, !tbaa !15
  %cmp28 = icmp eq i32 %52, 0
  br i1 %cmp28, label %if.then32, label %lor.lhs.false29

lor.lhs.false29:                                  ; preds = %if.then27
  %53 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %ev_timer_time30 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %53, i32 0, i32 11
  %54 = load double, double* %ev_timer_time30, align 8, !tbaa !51
  %55 = load double, double* %min_timer, align 8, !tbaa !26
  %cmp31 = fcmp olt double %54, %55
  br i1 %cmp31, label %if.then32, label %if.end34

if.then32:                                        ; preds = %lor.lhs.false29, %if.then27
  %56 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %ev_timer_time33 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %56, i32 0, i32 11
  %57 = load double, double* %ev_timer_time33, align 8, !tbaa !51
  store double %57, double* %min_timer, align 8, !tbaa !26
  br label %if.end34

if.end34:                                         ; preds = %if.then32, %lor.lhs.false29
  %58 = load i32, i32* %num_timers, align 4, !tbaa !15
  %inc35 = add nsw i32 %58, 1
  store i32 %inc35, i32* %num_timers, align 4, !tbaa !15
  br label %if.end36

if.end36:                                         ; preds = %if.end34, %if.end25
  br label %for.inc

for.inc:                                          ; preds = %if.end36
  %59 = load %struct.mg_connection*, %struct.mg_connection** %tmp, align 8, !tbaa !3
  store %struct.mg_connection* %59, %struct.mg_connection** %nc, align 8, !tbaa !3
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %60 = load i32, i32* %num_timers, align 4, !tbaa !15
  %cmp37 = icmp sgt i32 %60, 0
  br i1 %cmp37, label %if.then38, label %if.end45

if.then38:                                        ; preds = %for.end
  %61 = bitcast double* %timer_timeout_ms to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %61) #5
  %62 = load double, double* %min_timer, align 8, !tbaa !26
  %call39 = call double @mg_time()
  %sub = fsub double %62, %call39
  %mul = fmul double %sub, 1.000000e+03
  %add = fadd double %mul, 1.000000e+00
  store double %add, double* %timer_timeout_ms, align 8, !tbaa !26
  %63 = load double, double* %timer_timeout_ms, align 8, !tbaa !26
  %64 = load i32, i32* %timeout_ms.addr, align 4, !tbaa !15
  %conv = sitofp i32 %64 to double
  %cmp40 = fcmp olt double %63, %conv
  br i1 %cmp40, label %if.then42, label %if.end44

if.then42:                                        ; preds = %if.then38
  %65 = load double, double* %timer_timeout_ms, align 8, !tbaa !26
  %conv43 = fptosi double %65 to i32
  store i32 %conv43, i32* %timeout_ms.addr, align 4, !tbaa !15
  br label %if.end44

if.end44:                                         ; preds = %if.then42, %if.then38
  %66 = bitcast double* %timer_timeout_ms to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %66) #5
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %for.end
  %67 = load i32, i32* %timeout_ms.addr, align 4, !tbaa !15
  %cmp46 = icmp slt i32 %67, 0
  br i1 %cmp46, label %if.then48, label %if.end49

if.then48:                                        ; preds = %if.end45
  store i32 0, i32* %timeout_ms.addr, align 4, !tbaa !15
  br label %if.end49

if.end49:                                         ; preds = %if.then48, %if.end45
  %68 = load i32, i32* %timeout_ms.addr, align 4, !tbaa !15
  %div = sdiv i32 %68, 1000
  %conv50 = sext i32 %div to i64
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 0
  store i64 %conv50, i64* %tv_sec, align 8, !tbaa !23
  %69 = load i32, i32* %timeout_ms.addr, align 4, !tbaa !15
  %rem = srem i32 %69, 1000
  %mul51 = mul nsw i32 %rem, 1000
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 1
  store i32 %mul51, i32* %tv_usec, align 8, !tbaa !25
  %70 = load i32, i32* %max_fd, align 4, !tbaa !15
  %add52 = add nsw i32 %70, 1
  %call53 = call i32 @"\01_select$1050"(i32 %add52, %struct.fd_set* %read_set, %struct.fd_set* %write_set, %struct.fd_set* %err_set, %struct.timeval* %tv)
  store i32 %call53, i32* %num_ev, align 4, !tbaa !15
  %call54 = call double @mg_time()
  store double %call54, double* %now, align 8, !tbaa !26
  %71 = load i32, i32* %num_ev, align 4, !tbaa !15
  %cmp55 = icmp sgt i32 %71, 0
  br i1 %cmp55, label %land.lhs.true57, label %if.end68

land.lhs.true57:                                  ; preds = %if.end49
  %72 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8, !tbaa !3
  %ctl58 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %72, i32 0, i32 2
  %arrayidx59 = getelementptr inbounds [2 x i32], [2 x i32]* %ctl58, i64 0, i64 1
  %73 = load i32, i32* %arrayidx59, align 4, !tbaa !15
  %cmp60 = icmp ne i32 %73, -1
  br i1 %cmp60, label %land.lhs.true62, label %if.end68

land.lhs.true62:                                  ; preds = %land.lhs.true57
  %74 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8, !tbaa !3
  %ctl63 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %74, i32 0, i32 2
  %arrayidx64 = getelementptr inbounds [2 x i32], [2 x i32]* %ctl63, i64 0, i64 1
  %75 = load i32, i32* %arrayidx64, align 4, !tbaa !15
  %call65 = call i32 @__darwin_fd_isset(i32 %75, %struct.fd_set* %read_set)
  %tobool66 = icmp ne i32 %call65, 0
  br i1 %tobool66, label %if.then67, label %if.end68

if.then67:                                        ; preds = %land.lhs.true62
  %76 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8, !tbaa !3
  call void @mg_mgr_handle_ctl_sock(%struct.mg_mgr* %76)
  br label %if.end68

if.end68:                                         ; preds = %if.then67, %land.lhs.true62, %land.lhs.true57, %if.end49
  %77 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8, !tbaa !3
  %active_connections69 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %77, i32 0, i32 0
  %78 = load %struct.mg_connection*, %struct.mg_connection** %active_connections69, align 8, !tbaa !73
  store %struct.mg_connection* %78, %struct.mg_connection** %nc, align 8, !tbaa !3
  br label %for.cond70

for.cond70:                                       ; preds = %for.inc102, %if.end68
  %79 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %cmp71 = icmp ne %struct.mg_connection* %79, null
  br i1 %cmp71, label %for.body73, label %for.end103

for.body73:                                       ; preds = %for.cond70
  %80 = bitcast i32* %fd_flags to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %80) #5
  store i32 0, i32* %fd_flags, align 4, !tbaa !15
  %81 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %sock74 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %81, i32 0, i32 4
  %82 = load i32, i32* %sock74, align 8, !tbaa !45
  %cmp75 = icmp ne i32 %82, -1
  br i1 %cmp75, label %if.then77, label %if.end100

if.then77:                                        ; preds = %for.body73
  %83 = load i32, i32* %num_ev, align 4, !tbaa !15
  %cmp78 = icmp sgt i32 %83, 0
  br i1 %cmp78, label %if.then80, label %if.end99

if.then80:                                        ; preds = %if.then77
  %84 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %sock81 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %84, i32 0, i32 4
  %85 = load i32, i32* %sock81, align 8, !tbaa !45
  %call82 = call i32 @__darwin_fd_isset(i32 %85, %struct.fd_set* %read_set)
  %tobool83 = icmp ne i32 %call82, 0
  br i1 %tobool83, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then80
  %86 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %flags84 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %86, i32 0, i32 21
  %87 = load i64, i64* %flags84, align 8, !tbaa !41
  %and85 = and i64 %87, 2
  %tobool86 = icmp ne i64 %and85, 0
  br i1 %tobool86, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %land.rhs
  %88 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %listener87 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %88, i32 0, i32 2
  %89 = load %struct.mg_connection*, %struct.mg_connection** %listener87, align 8, !tbaa !78
  %cmp88 = icmp eq %struct.mg_connection* %89, null
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %90 = phi i1 [ true, %land.rhs ], [ %cmp88, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %if.then80
  %91 = phi i1 [ false, %if.then80 ], [ %90, %lor.end ]
  %92 = zext i1 %91 to i64
  %cond = select i1 %91, i32 1, i32 0
  %93 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %sock90 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %93, i32 0, i32 4
  %94 = load i32, i32* %sock90, align 8, !tbaa !45
  %call91 = call i32 @__darwin_fd_isset(i32 %94, %struct.fd_set* %write_set)
  %tobool92 = icmp ne i32 %call91, 0
  %95 = zext i1 %tobool92 to i64
  %cond93 = select i1 %tobool92, i32 2, i32 0
  %or = or i32 %cond, %cond93
  %96 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %sock94 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %96, i32 0, i32 4
  %97 = load i32, i32* %sock94, align 8, !tbaa !45
  %call95 = call i32 @__darwin_fd_isset(i32 %97, %struct.fd_set* %err_set)
  %tobool96 = icmp ne i32 %call95, 0
  %98 = zext i1 %tobool96 to i64
  %cond97 = select i1 %tobool96, i32 4, i32 0
  %or98 = or i32 %or, %cond97
  store i32 %or98, i32* %fd_flags, align 4, !tbaa !15
  br label %if.end99

if.end99:                                         ; preds = %land.end, %if.then77
  br label %if.end100

if.end100:                                        ; preds = %if.end99, %for.body73
  %99 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %next101 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %99, i32 0, i32 0
  %100 = load %struct.mg_connection*, %struct.mg_connection** %next101, align 8, !tbaa !74
  store %struct.mg_connection* %100, %struct.mg_connection** %tmp, align 8, !tbaa !3
  %101 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %102 = load i32, i32* %fd_flags, align 4, !tbaa !15
  %103 = load double, double* %now, align 8, !tbaa !26
  call void @mg_mgr_handle_conn(%struct.mg_connection* %101, i32 %102, double %103)
  %104 = bitcast i32* %fd_flags to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %104) #5
  br label %for.inc102

for.inc102:                                       ; preds = %if.end100
  %105 = load %struct.mg_connection*, %struct.mg_connection** %tmp, align 8, !tbaa !3
  store %struct.mg_connection* %105, %struct.mg_connection** %nc, align 8, !tbaa !3
  br label %for.cond70

for.end103:                                       ; preds = %for.cond70
  %106 = load double, double* %now, align 8, !tbaa !26
  %conv104 = fptosi double %106 to i64
  %107 = bitcast i32* %num_timers to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %107) #5
  %108 = bitcast i32* %num_ev to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %108) #5
  %109 = bitcast i32* %num_fds to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %109) #5
  %110 = bitcast i32* %max_fd to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %110) #5
  %111 = bitcast %struct.fd_set* %err_set to i8*
  call void @llvm.lifetime.end.p0i8(i64 128, i8* %111) #5
  %112 = bitcast %struct.fd_set* %write_set to i8*
  call void @llvm.lifetime.end.p0i8(i64 128, i8* %112) #5
  %113 = bitcast %struct.fd_set* %read_set to i8*
  call void @llvm.lifetime.end.p0i8(i64 128, i8* %113) #5
  %114 = bitcast %struct.timeval* %tv to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %114) #5
  %115 = bitcast %struct.mg_connection** %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %115) #5
  %116 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %116) #5
  %117 = bitcast double* %min_timer to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %117) #5
  %118 = bitcast double* %now to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %118) #5
  %119 = bitcast %struct.mg_mgr** %mgr to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %119) #5
  ret i64 %conv104
}

declare i32 @"\01_select$1050"(i32, %struct.fd_set*, %struct.fd_set*, %struct.fd_set*, %struct.timeval*) #4

; Function Attrs: alwaysinline nounwind ssp uwtable
define available_externally i32 @__darwin_fd_isset(i32 %_fd, %struct.fd_set* %_p) #14 {
entry:
  %retval = alloca i32, align 4
  %_fd.addr = alloca i32, align 4
  %_p.addr = alloca %struct.fd_set*, align 8
  store i32 %_fd, i32* %_fd.addr, align 4, !tbaa !15
  store %struct.fd_set* %_p, %struct.fd_set** %_p.addr, align 8, !tbaa !3
  %0 = load i32, i32* %_fd.addr, align 4, !tbaa !15
  %1 = load %struct.fd_set*, %struct.fd_set** %_p.addr, align 8, !tbaa !3
  %2 = bitcast %struct.fd_set* %1 to i8*
  %call = call i32 @__darwin_check_fd_set(i32 %0, i8* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.fd_set*, %struct.fd_set** %_p.addr, align 8, !tbaa !3
  %fds_bits = getelementptr inbounds %struct.fd_set, %struct.fd_set* %3, i32 0, i32 0
  %4 = load i32, i32* %_fd.addr, align 4, !tbaa !15
  %conv = sext i32 %4 to i64
  %div = udiv i64 %conv, 32
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* %fds_bits, i64 0, i64 %div
  %5 = load i32, i32* %arrayidx, align 4, !tbaa !15
  %6 = load i32, i32* %_fd.addr, align 4, !tbaa !15
  %conv1 = sext i32 %6 to i64
  %rem = urem i64 %conv1, 32
  %shl = shl i64 1, %rem
  %conv2 = trunc i64 %shl to i32
  %and = and i32 %5, %conv2
  store i32 %and, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_mgr_handle_ctl_sock(%struct.mg_mgr* %mgr) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %ctl_msg = alloca %struct.ctl_msg, align 8
  %len = alloca i32, align 4
  %dummy = alloca i64, align 8
  %nc = alloca %struct.mg_connection*, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %0 = bitcast %struct.ctl_msg* %ctl_msg to i8*
  call void @llvm.lifetime.start.p0i8(i64 8200, i8* %0) #5
  %1 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %ctl = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %2, i32 0, i32 2
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %ctl, i64 0, i64 1
  %3 = load i32, i32* %arrayidx, align 4, !tbaa !15
  %4 = bitcast %struct.ctl_msg* %ctl_msg to i8*
  %call = call i64 @"\01_recv"(i32 %3, i8* %4, i64 8200, i32 0)
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4, !tbaa !15
  %5 = bitcast i64* %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #5
  %6 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %ctl1 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %6, i32 0, i32 2
  %arrayidx2 = getelementptr inbounds [2 x i32], [2 x i32]* %ctl1, i64 0, i64 1
  %7 = load i32, i32* %arrayidx2, align 4, !tbaa !15
  %message = getelementptr inbounds %struct.ctl_msg, %struct.ctl_msg* %ctl_msg, i32 0, i32 1
  %arraydecay = getelementptr inbounds [8192 x i8], [8192 x i8]* %message, i32 0, i32 0
  %call3 = call i64 @"\01_send"(i32 %7, i8* %arraydecay, i64 1, i32 0)
  store i64 %call3, i64* %dummy, align 8, !tbaa !12
  br label %do.body

do.body:                                          ; preds = %entry
  %call4 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3927)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %8 = load i32, i32* %len, align 4, !tbaa !15
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.188, i32 0, i32 0), i32 %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %do.cond
  %9 = load i64, i64* %dummy, align 8, !tbaa !12
  %10 = load i32, i32* %len, align 4, !tbaa !15
  %cmp = icmp sge i32 %10, 8
  br i1 %cmp, label %land.lhs.true, label %if.end16

land.lhs.true:                                    ; preds = %do.end
  %callback = getelementptr inbounds %struct.ctl_msg, %struct.ctl_msg* %ctl_msg, i32 0, i32 0
  %11 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %callback, align 8, !tbaa !120
  %cmp6 = icmp ne void (%struct.mg_connection*, i32, i8*)* %11, null
  br i1 %cmp6, label %if.then8, label %if.end16

if.then8:                                         ; preds = %land.lhs.true
  %12 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #5
  %13 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %call9 = call %struct.mg_connection* @mg_next(%struct.mg_mgr* %13, %struct.mg_connection* null)
  store %struct.mg_connection* %call9, %struct.mg_connection** %nc, align 8, !tbaa !3
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then8
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %cmp10 = icmp ne %struct.mg_connection* %14, null
  br i1 %cmp10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %callback12 = getelementptr inbounds %struct.ctl_msg, %struct.ctl_msg* %ctl_msg, i32 0, i32 0
  %15 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %callback12, align 8, !tbaa !120
  %16 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %message13 = getelementptr inbounds %struct.ctl_msg, %struct.ctl_msg* %ctl_msg, i32 0, i32 1
  %arraydecay14 = getelementptr inbounds [8192 x i8], [8192 x i8]* %message13, i32 0, i32 0
  call void %15(%struct.mg_connection* %16, i32 0, i8* %arraydecay14)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %18 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %call15 = call %struct.mg_connection* @mg_next(%struct.mg_mgr* %17, %struct.mg_connection* %18)
  store %struct.mg_connection* %call15, %struct.mg_connection** %nc, align 8, !tbaa !3
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %19 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %19) #5
  br label %if.end16

if.end16:                                         ; preds = %for.end, %land.lhs.true, %do.end
  %20 = bitcast i64* %dummy to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %20) #5
  %21 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %21) #5
  %22 = bitcast %struct.ctl_msg* %ctl_msg to i8*
  call void @llvm.lifetime.end.p0i8(i64 8200, i8* %22) #5
  ret void
}

declare i32 @"\01_bind"(i32, %struct.sockaddr*, i32) #4

declare i32 @"\01_listen"(i32, i32) #4

declare i32 @"\01_getsockname"(i32, %struct.sockaddr*, i32*) #4

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_socketpair_accept(i32 %sock, %union.socket_address* %sa, i32 %sa_len) #0 {
entry:
  %sock.addr = alloca i32, align 4
  %sa.addr = alloca %union.socket_address*, align 8
  %sa_len.addr = alloca i32, align 4
  %rc = alloca i32, align 4
  store i32 %sock, i32* %sock.addr, align 4, !tbaa !15
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8, !tbaa !3
  store i32 %sa_len, i32* %sa_len.addr, align 4, !tbaa !15
  %0 = bitcast i32* %rc to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  br label %while.cond

while.cond:                                       ; preds = %if.then, %entry
  br label %while.body

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %sock.addr, align 4, !tbaa !15
  %2 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %sa1 = bitcast %union.socket_address* %2 to %struct.sockaddr*
  %call = call i32 @"\01_accept"(i32 %1, %struct.sockaddr* %sa1, i32* %sa_len.addr)
  store i32 %call, i32* %rc, align 4, !tbaa !15
  %cmp = icmp eq i32 %call, -1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.body
  %call2 = call i32* @__error()
  %3 = load i32, i32* %call2, align 4, !tbaa !15
  %cmp3 = icmp eq i32 %3, 4
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %while.cond

if.end:                                           ; preds = %land.lhs.true, %while.body
  br label %while.end

while.end:                                        ; preds = %if.end
  %4 = load i32, i32* %rc, align 4, !tbaa !15
  %5 = bitcast i32* %rc to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %5) #5
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_socketpair_close(i32* %sock) #0 {
entry:
  %sock.addr = alloca i32*, align 8
  store i32* %sock, i32** %sock.addr, align 8, !tbaa !3
  br label %while.body

while.body:                                       ; preds = %entry, %if.then
  %0 = load i32*, i32** %sock.addr, align 8, !tbaa !3
  %1 = load i32, i32* %0, align 4, !tbaa !15
  %call = call i32 @"\01_close"(i32 %1)
  %cmp = icmp eq i32 %call, -1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.body
  %call1 = call i32* @__error()
  %2 = load i32, i32* %call1, align 4, !tbaa !15
  %cmp2 = icmp eq i32 %2, 4
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %while.body

if.end:                                           ; preds = %land.lhs.true, %while.body
  br label %while.end

while.end:                                        ; preds = %if.end
  %3 = load i32*, i32** %sock.addr, align 8, !tbaa !3
  store i32 -1, i32* %3, align 4, !tbaa !15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_sock_to_str(i32 %sock, i8* %buf, i64 %len, i32 %flags) #0 {
entry:
  %sock.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %sa = alloca %union.socket_address, align 4
  store i32 %sock, i32* %sock.addr, align 4, !tbaa !15
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !15
  %0 = bitcast %union.socket_address* %sa to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %0) #5
  %1 = load i32, i32* %sock.addr, align 4, !tbaa !15
  %2 = load i32, i32* %flags.addr, align 4, !tbaa !15
  %and = and i32 %2, 4
  call void @mg_sock_get_addr(i32 %1, i32 %and, %union.socket_address* %sa)
  %3 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %4 = load i64, i64* %len.addr, align 8, !tbaa !12
  %5 = load i32, i32* %flags.addr, align 4, !tbaa !15
  %call = call i32 @mg_sock_addr_to_str(%union.socket_address* %sa, i8* %3, i64 %4, i32 %5)
  %6 = bitcast %union.socket_address* %sa to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %6) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_sock_get_addr(i32 %sock, i32 %remote, %union.socket_address* %sa) #0 {
entry:
  %sock.addr = alloca i32, align 4
  %remote.addr = alloca i32, align 4
  %sa.addr = alloca %union.socket_address*, align 8
  %slen = alloca i32, align 4
  store i32 %sock, i32* %sock.addr, align 4, !tbaa !15
  store i32 %remote, i32* %remote.addr, align 4, !tbaa !15
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %0 = bitcast i32* %slen to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  store i32 16, i32* %slen, align 4, !tbaa !15
  %1 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %2 = bitcast %union.socket_address* %1 to i8*
  %3 = load i32, i32* %slen, align 4, !tbaa !15
  %conv = zext i32 %3 to i64
  %4 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %5 = bitcast %union.socket_address* %4 to i8*
  %6 = call i64 @llvm.objectsize.i64.p0i8(i8* %5, i1 false, i1 true)
  %call = call i8* @__memset_chk(i8* %2, i32 0, i64 %conv, i64 %6) #5
  %7 = load i32, i32* %remote.addr, align 4, !tbaa !15
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %8 = load i32, i32* %sock.addr, align 4, !tbaa !15
  %9 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %sa1 = bitcast %union.socket_address* %9 to %struct.sockaddr*
  %call2 = call i32 @"\01_getpeername"(i32 %8, %struct.sockaddr* %sa1, i32* %slen)
  br label %if.end

if.else:                                          ; preds = %entry
  %10 = load i32, i32* %sock.addr, align 4, !tbaa !15
  %11 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %sa3 = bitcast %union.socket_address* %11 to %struct.sockaddr*
  %call4 = call i32 @"\01_getsockname"(i32 %10, %struct.sockaddr* %sa3, i32* %slen)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %12 = bitcast i32* %slen to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %12) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_sock_addr_to_str(%union.socket_address* %sa, i8* %buf, i64 %len, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %sa.addr = alloca %union.socket_address*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %is_v6 = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %port = alloca i32, align 4
  %buf_len = alloca i32, align 4
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8, !tbaa !3
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !15
  %0 = bitcast i32* %is_v6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %cmp = icmp eq i8* %1, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i64, i64* %len.addr, align 8, !tbaa !12
  %cmp1 = icmp ule i64 %2, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup32

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %4 = load i64, i64* %len.addr, align 8, !tbaa !12
  %5 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %6 = call i64 @llvm.objectsize.i64.p0i8(i8* %5, i1 false, i1 true)
  %call = call i8* @__memset_chk(i8* %3, i32 0, i64 %4, i64 %6) #5
  store i32 0, i32* %is_v6, align 4, !tbaa !15
  %7 = load i32, i32* %flags.addr, align 4, !tbaa !15
  %and = and i32 %7, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then2, label %if.end8

if.then2:                                         ; preds = %if.end
  %8 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %sin = bitcast %union.socket_address* %8 to %struct.sockaddr_in*
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin, i32 0, i32 3
  %9 = bitcast %struct.in_addr* %sin_addr to i8*
  %10 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %11 = load i64, i64* %len.addr, align 8, !tbaa !12
  %conv = trunc i64 %11 to i32
  %call3 = call i8* @inet_ntop(i32 2, i8* %9, i8* %10, i32 %conv)
  %cmp4 = icmp eq i8* %call3, null
  br i1 %cmp4, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.then2
  br label %cleanup

if.end7:                                          ; preds = %if.then2
  br label %if.end8

if.end8:                                          ; preds = %if.end7, %if.end
  %12 = load i32, i32* %flags.addr, align 4, !tbaa !15
  %and9 = and i32 %12, 2
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then11, label %if.end29

if.then11:                                        ; preds = %if.end8
  %13 = bitcast i32* %port to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %13) #5
  %14 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %sin12 = bitcast %union.socket_address* %14 to %struct.sockaddr_in*
  %sin_port = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin12, i32 0, i32 2
  %15 = load i16, i16* %sin_port, align 2, !tbaa !14
  %call13 = call zeroext i16 @_OSSwapInt16(i16 zeroext %15)
  %conv14 = zext i16 %call13 to i32
  %conv15 = trunc i32 %conv14 to i16
  %conv16 = zext i16 %conv15 to i32
  store i32 %conv16, i32* %port, align 4, !tbaa !15
  %16 = load i32, i32* %flags.addr, align 4, !tbaa !15
  %and17 = and i32 %16, 1
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %if.then19, label %if.else

if.then19:                                        ; preds = %if.then11
  %17 = bitcast i32* %buf_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %17) #5
  %18 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %call20 = call i64 @strlen(i8* %18)
  %conv21 = trunc i64 %call20 to i32
  store i32 %conv21, i32* %buf_len, align 4, !tbaa !15
  %19 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %20 = load i32, i32* %buf_len, align 4, !tbaa !15
  %idx.ext = sext i32 %20 to i64
  %add.ptr = getelementptr inbounds i8, i8* %19, i64 %idx.ext
  %21 = load i64, i64* %len.addr, align 8, !tbaa !12
  %22 = load i32, i32* %buf_len, align 4, !tbaa !15
  %add = add nsw i32 %22, 1
  %conv22 = sext i32 %add to i64
  %sub = sub i64 %21, %conv22
  %23 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %24 = load i32, i32* %buf_len, align 4, !tbaa !15
  %idx.ext23 = sext i32 %24 to i64
  %add.ptr24 = getelementptr inbounds i8, i8* %23, i64 %idx.ext23
  %25 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr24, i1 false, i1 true)
  %26 = load i32, i32* %is_v6, align 4, !tbaa !15
  %tobool25 = icmp ne i32 %26, 0
  %27 = zext i1 %tobool25 to i64
  %cond = select i1 %tobool25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.142, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0)
  %28 = load i32, i32* %port, align 4, !tbaa !15
  %call26 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %add.ptr, i64 %sub, i32 0, i64 %25, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.141, i32 0, i32 0), i8* %cond, i32 %28)
  %29 = bitcast i32* %buf_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %29) #5
  br label %if.end28

if.else:                                          ; preds = %if.then11
  %30 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %31 = load i64, i64* %len.addr, align 8, !tbaa !12
  %32 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %33 = call i64 @llvm.objectsize.i64.p0i8(i8* %32, i1 false, i1 true)
  %34 = load i32, i32* %port, align 4, !tbaa !15
  %call27 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %30, i64 %31, i32 0, i64 %33, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.143, i32 0, i32 0), i32 %34)
  br label %if.end28

if.end28:                                         ; preds = %if.else, %if.then19
  %35 = bitcast i32* %port to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %35) #5
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.end8
  %36 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %call30 = call i64 @strlen(i8* %36)
  %conv31 = trunc i64 %call30 to i32
  store i32 %conv31, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup32

cleanup:                                          ; preds = %if.then6
  %37 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  store i8 0, i8* %37, align 1, !tbaa !14
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup32

cleanup32:                                        ; preds = %cleanup, %if.end29, %if.then
  %38 = bitcast i32* %is_v6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %38) #5
  %39 = load i32, i32* %retval, align 4
  ret i32 %39
}

; Function Attrs: nounwind ssp uwtable
define void @mg_socket_if_get_conn_addr(%struct.mg_connection* %nc, i32 %remote, %union.socket_address* %sa) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %remote.addr = alloca i32, align 4
  %sa.addr = alloca %union.socket_address*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i32 %remote, i32* %remote.addr, align 4, !tbaa !15
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 21
  %1 = load i64, i64* %flags, align 8, !tbaa !41
  %and = and i64 %1, 2
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* %remote.addr, align 4, !tbaa !15
  %tobool1 = icmp ne i32 %2, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %3 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %4 = bitcast %union.socket_address* %3 to i8*
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sa2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 6
  %6 = bitcast %union.socket_address* %sa2 to i8*
  %7 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %8 = bitcast %union.socket_address* %7 to i8*
  %9 = call i64 @llvm.objectsize.i64.p0i8(i8* %8, i1 false, i1 true)
  %call = call i8* @__memcpy_chk(i8* %4, i8* %6, i64 16, i64 %9) #5
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 4
  %11 = load i32, i32* %sock, align 8, !tbaa !45
  %12 = load i32, i32* %remote.addr, align 4, !tbaa !15
  %13 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  call void @mg_sock_get_addr(i32 %11, i32 %12, %union.socket_address* %13)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_socket_if_listen_udp(%struct.mg_connection* %nc, %union.socket_address* %sa) #0 {
entry:
  %retval = alloca i32, align 4
  %nc.addr = alloca %struct.mg_connection*, align 8
  %sa.addr = alloca %union.socket_address*, align 8
  %sock = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %0 = bitcast i32* %sock to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %call = call i32 @mg_open_listening_socket(%union.socket_address* %1, i32 2, i32 0)
  store i32 %call, i32* %sock, align 4, !tbaa !15
  %2 = load i32, i32* %sock, align 4, !tbaa !15
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i32 @mg_get_errno()
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %call2 = call i32 @mg_get_errno()
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call2, %cond.true ], [ 1, %cond.false ]
  store i32 %cond, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %4 = load i32, i32* %sock, align 4, !tbaa !15
  call void @mg_sock_set(%struct.mg_connection* %3, i32 %4)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %cond.end
  %5 = bitcast i32* %sock to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %5) #5
  %6 = load i32, i32* %retval, align 4
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_socket_if_tcp_send(%struct.mg_connection* %nc, i8* %buf, i64 %len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %n = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  %0 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 4
  %2 = load i32, i32* %sock, align 8, !tbaa !45
  %3 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %4 = load i64, i64* %len.addr, align 8, !tbaa !12
  %call = call i64 @"\01_send"(i32 %2, i8* %3, i64 %4, i32 0)
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %n, align 4, !tbaa !15
  %5 = load i32, i32* %n, align 4, !tbaa !15
  %cmp = icmp slt i32 %5, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %call2 = call i32 @mg_is_error()
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %n, align 4, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %6 = load i32, i32* %n, align 4, !tbaa !15
  %7 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %7) #5
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_socket_if_udp_send(%struct.mg_connection* %nc, i8* %buf, i64 %len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %n = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  %0 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 4
  %2 = load i32, i32* %sock, align 8, !tbaa !45
  %3 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %4 = load i64, i64* %len.addr, align 8, !tbaa !12
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sa = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 6
  %sa1 = bitcast %union.socket_address* %sa to %struct.sockaddr*
  %call = call i64 @"\01_sendto"(i32 %2, i8* %3, i64 %4, i32 0, %struct.sockaddr* %sa1, i32 16)
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %n, align 4, !tbaa !15
  %6 = load i32, i32* %n, align 4, !tbaa !15
  %cmp = icmp slt i32 %6, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %call3 = call i32 @mg_is_error()
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %n, align 4, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %7 = load i32, i32* %n, align 4, !tbaa !15
  %8 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %8) #5
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_socket_if_tcp_recv(%struct.mg_connection* %nc, i8* %buf, i64 %len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %n = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  %0 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 4
  %2 = load i32, i32* %sock, align 8, !tbaa !45
  %3 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %4 = load i64, i64* %len.addr, align 8, !tbaa !12
  %call = call i64 @"\01_recv"(i32 %2, i8* %3, i64 %4, i32 0)
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %n, align 4, !tbaa !15
  %5 = load i32, i32* %n, align 4, !tbaa !15
  %cmp = icmp eq i32 %5, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 21
  %7 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %7, 1024
  store i64 %or, i64* %flags, align 8, !tbaa !41
  br label %if.end6

if.else:                                          ; preds = %entry
  %8 = load i32, i32* %n, align 4, !tbaa !15
  %cmp2 = icmp slt i32 %8, 0
  br i1 %cmp2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.else
  %call4 = call i32 @mg_is_error()
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.end, label %if.then5

if.then5:                                         ; preds = %land.lhs.true
  store i32 0, i32* %n, align 4, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then5, %land.lhs.true, %if.else
  br label %if.end6

if.end6:                                          ; preds = %if.end, %if.then
  %9 = load i32, i32* %n, align 4, !tbaa !15
  %10 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %10) #5
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_socket_if_udp_recv(%struct.mg_connection* %nc, i8* %buf, i64 %len, %union.socket_address* %sa, i64* %sa_len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %sa.addr = alloca %union.socket_address*, align 8
  %sa_len.addr = alloca i64*, align 8
  %sa_len_st = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8, !tbaa !3
  store i64* %sa_len, i64** %sa_len.addr, align 8, !tbaa !3
  %0 = bitcast i32* %sa_len_st to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = load i64*, i64** %sa_len.addr, align 8, !tbaa !3
  %2 = load i64, i64* %1, align 8, !tbaa !12
  %conv = trunc i64 %2 to i32
  store i32 %conv, i32* %sa_len_st, align 4, !tbaa !15
  %3 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 4
  %5 = load i32, i32* %sock, align 8, !tbaa !45
  %6 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %7 = load i64, i64* %len.addr, align 8, !tbaa !12
  %8 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8, !tbaa !3
  %sa1 = bitcast %union.socket_address* %8 to %struct.sockaddr*
  %call = call i64 @"\01_recvfrom"(i32 %5, i8* %6, i64 %7, i32 0, %struct.sockaddr* %sa1, i32* %sa_len_st)
  %conv2 = trunc i64 %call to i32
  store i32 %conv2, i32* %n, align 4, !tbaa !15
  %9 = load i32, i32* %sa_len_st, align 4, !tbaa !15
  %conv3 = zext i32 %9 to i64
  %10 = load i64*, i64** %sa_len.addr, align 8, !tbaa !3
  store i64 %conv3, i64* %10, align 8, !tbaa !12
  %11 = load i32, i32* %n, align 4, !tbaa !15
  %cmp = icmp slt i32 %11, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %call5 = call i32 @mg_is_error()
  %tobool = icmp ne i32 %call5, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %n, align 4, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %12 = load i32, i32* %n, align 4, !tbaa !15
  %13 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %13) #5
  %14 = bitcast i32* %sa_len_st to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %14) #5
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_parse_uri(i8* %uri.coerce0, i64 %uri.coerce1, %struct.mg_str* %scheme, %struct.mg_str* %user_info, %struct.mg_str* %host, i32* %port, %struct.mg_str* %path, %struct.mg_str* %query, %struct.mg_str* %fragment) #0 {
entry:
  %retval = alloca i32, align 4
  %uri = alloca %struct.mg_str, align 8
  %scheme.addr = alloca %struct.mg_str*, align 8
  %user_info.addr = alloca %struct.mg_str*, align 8
  %host.addr = alloca %struct.mg_str*, align 8
  %port.addr = alloca i32*, align 8
  %path.addr = alloca %struct.mg_str*, align 8
  %query.addr = alloca %struct.mg_str*, align 8
  %fragment.addr = alloca %struct.mg_str*, align 8
  %rscheme = alloca %struct.mg_str, align 8
  %ruser_info = alloca %struct.mg_str, align 8
  %rhost = alloca %struct.mg_str, align 8
  %rpath = alloca %struct.mg_str, align 8
  %rquery = alloca %struct.mg_str, align 8
  %rfragment = alloca %struct.mg_str, align 8
  %rport = alloca i32, align 4
  %state = alloca i32, align 4
  %p = alloca i8*, align 8
  %end = alloca i8*, align 8
  %found = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %0 = bitcast %struct.mg_str* %uri to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %uri.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %uri.coerce1, i64* %2, align 8
  store %struct.mg_str* %scheme, %struct.mg_str** %scheme.addr, align 8, !tbaa !3
  store %struct.mg_str* %user_info, %struct.mg_str** %user_info.addr, align 8, !tbaa !3
  store %struct.mg_str* %host, %struct.mg_str** %host.addr, align 8, !tbaa !3
  store i32* %port, i32** %port.addr, align 8, !tbaa !3
  store %struct.mg_str* %path, %struct.mg_str** %path.addr, align 8, !tbaa !3
  store %struct.mg_str* %query, %struct.mg_str** %query.addr, align 8, !tbaa !3
  store %struct.mg_str* %fragment, %struct.mg_str** %fragment.addr, align 8, !tbaa !3
  %3 = bitcast %struct.mg_str* %rscheme to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %3) #5
  %4 = bitcast %struct.mg_str* %rscheme to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 16, i1 false)
  %5 = bitcast %struct.mg_str* %ruser_info to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %5) #5
  %6 = bitcast %struct.mg_str* %ruser_info to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false)
  %7 = bitcast %struct.mg_str* %rhost to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %7) #5
  %8 = bitcast %struct.mg_str* %rhost to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 16, i1 false)
  %9 = bitcast %struct.mg_str* %rpath to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %9) #5
  %10 = bitcast %struct.mg_str* %rpath to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false)
  %11 = bitcast %struct.mg_str* %rquery to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %11) #5
  %12 = bitcast %struct.mg_str* %rquery to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 16, i1 false)
  %13 = bitcast %struct.mg_str* %rfragment to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %13) #5
  %14 = bitcast %struct.mg_str* %rfragment to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 16, i1 false)
  %15 = bitcast i32* %rport to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %15) #5
  store i32 0, i32* %rport, align 4, !tbaa !15
  %16 = bitcast i32* %state to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %16) #5
  store i32 0, i32* %state, align 4, !tbaa !14
  %17 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %17) #5
  %p1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 0
  %18 = load i8*, i8** %p1, align 8, !tbaa !16
  store i8* %18, i8** %p, align 8, !tbaa !3
  %19 = bitcast i8** %end to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %19) #5
  %20 = load i8*, i8** %p, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 1
  %21 = load i64, i64* %len, align 8, !tbaa !18
  %add.ptr = getelementptr inbounds i8, i8* %20, i64 %21
  store i8* %add.ptr, i8** %end, align 8, !tbaa !3
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %entry
  %22 = load i8*, i8** %p, align 8, !tbaa !3
  %23 = load i8*, i8** %end, align 8, !tbaa !3
  %cmp = icmp ult i8* %22, %23
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %24 = load i32, i32* %state, align 4, !tbaa !14
  switch i32 %24, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb26
    i32 2, label %sw.bb52
    i32 3, label %sw.bb92
    i32 4, label %sw.bb155
    i32 5, label %sw.bb170
  ]

sw.bb:                                            ; preds = %while.body
  %25 = load i8*, i8** %p, align 8, !tbaa !3
  %26 = load i8, i8* %25, align 1, !tbaa !14
  %conv = sext i8 %26 to i32
  %cmp2 = icmp eq i32 %conv, 91
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  store i32 3, i32* %state, align 4, !tbaa !14
  br label %sw.epilog

if.end:                                           ; preds = %sw.bb
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %27 = load i8*, i8** %p, align 8, !tbaa !3
  %28 = load i8*, i8** %end, align 8, !tbaa !3
  %cmp4 = icmp ult i8* %27, %28
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %29 = load i8*, i8** %p, align 8, !tbaa !3
  %30 = load i8, i8* %29, align 1, !tbaa !14
  %conv6 = sext i8 %30 to i32
  %cmp7 = icmp eq i32 %conv6, 58
  br i1 %cmp7, label %if.then9, label %if.else

if.then9:                                         ; preds = %for.body
  store i32 1, i32* %state, align 4, !tbaa !14
  br label %for.end

if.else:                                          ; preds = %for.body
  %31 = load i8*, i8** %p, align 8, !tbaa !3
  %32 = load i8, i8* %31, align 1, !tbaa !14
  %conv10 = sext i8 %32 to i32
  %cmp11 = icmp eq i32 %conv10, 47
  br i1 %cmp11, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.else
  store i32 5, i32* %state, align 4, !tbaa !14
  br label %for.end

if.end14:                                         ; preds = %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end14
  br label %for.inc

for.inc:                                          ; preds = %if.end15
  %33 = load i8*, i8** %p, align 8, !tbaa !3
  %incdec.ptr = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr, i8** %p, align 8, !tbaa !3
  br label %for.cond

for.end:                                          ; preds = %if.then13, %if.then9, %for.cond
  %34 = load i32, i32* %state, align 4, !tbaa !14
  %cmp16 = icmp eq i32 %34, 0
  br i1 %cmp16, label %if.then20, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end
  %35 = load i32, i32* %state, align 4, !tbaa !14
  %cmp18 = icmp eq i32 %35, 5
  br i1 %cmp18, label %if.then20, label %if.end25

if.then20:                                        ; preds = %lor.lhs.false, %for.end
  %p21 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 0
  %36 = load i8*, i8** %p21, align 8, !tbaa !16
  %p22 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rhost, i32 0, i32 0
  store i8* %36, i8** %p22, align 8, !tbaa !16
  %37 = load i8*, i8** %p, align 8, !tbaa !3
  %p23 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 0
  %38 = load i8*, i8** %p23, align 8, !tbaa !16
  %sub.ptr.lhs.cast = ptrtoint i8* %37 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %38 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %len24 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rhost, i32 0, i32 1
  store i64 %sub.ptr.sub, i64* %len24, align 8, !tbaa !18
  br label %if.end25

if.end25:                                         ; preds = %if.then20, %lor.lhs.false
  br label %sw.epilog

sw.bb26:                                          ; preds = %while.body
  %39 = load i8*, i8** %end, align 8, !tbaa !3
  %40 = load i8*, i8** %p, align 8, !tbaa !3
  %sub.ptr.lhs.cast27 = ptrtoint i8* %39 to i64
  %sub.ptr.rhs.cast28 = ptrtoint i8* %40 to i64
  %sub.ptr.sub29 = sub i64 %sub.ptr.lhs.cast27, %sub.ptr.rhs.cast28
  %cmp30 = icmp sge i64 %sub.ptr.sub29, 3
  br i1 %cmp30, label %land.lhs.true, label %if.else43

land.lhs.true:                                    ; preds = %sw.bb26
  %41 = load i8*, i8** %p, align 8, !tbaa !3
  %call = call i32 @strncmp(i8* %41, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.29, i32 0, i32 0), i64 3)
  %cmp32 = icmp eq i32 %call, 0
  br i1 %cmp32, label %if.then34, label %if.else43

if.then34:                                        ; preds = %land.lhs.true
  %p35 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 0
  %42 = load i8*, i8** %p35, align 8, !tbaa !16
  %p36 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rscheme, i32 0, i32 0
  store i8* %42, i8** %p36, align 8, !tbaa !16
  %43 = load i8*, i8** %p, align 8, !tbaa !3
  %p37 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 0
  %44 = load i8*, i8** %p37, align 8, !tbaa !16
  %sub.ptr.lhs.cast38 = ptrtoint i8* %43 to i64
  %sub.ptr.rhs.cast39 = ptrtoint i8* %44 to i64
  %sub.ptr.sub40 = sub i64 %sub.ptr.lhs.cast38, %sub.ptr.rhs.cast39
  %len41 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rscheme, i32 0, i32 1
  store i64 %sub.ptr.sub40, i64* %len41, align 8, !tbaa !18
  store i32 2, i32* %state, align 4, !tbaa !14
  %45 = load i8*, i8** %p, align 8, !tbaa !3
  %add.ptr42 = getelementptr inbounds i8, i8* %45, i64 3
  store i8* %add.ptr42, i8** %p, align 8, !tbaa !3
  br label %if.end51

if.else43:                                        ; preds = %land.lhs.true, %sw.bb26
  %p44 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 0
  %46 = load i8*, i8** %p44, align 8, !tbaa !16
  %p45 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rhost, i32 0, i32 0
  store i8* %46, i8** %p45, align 8, !tbaa !16
  %47 = load i8*, i8** %p, align 8, !tbaa !3
  %p46 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 0
  %48 = load i8*, i8** %p46, align 8, !tbaa !16
  %sub.ptr.lhs.cast47 = ptrtoint i8* %47 to i64
  %sub.ptr.rhs.cast48 = ptrtoint i8* %48 to i64
  %sub.ptr.sub49 = sub i64 %sub.ptr.lhs.cast47, %sub.ptr.rhs.cast48
  %len50 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rhost, i32 0, i32 1
  store i64 %sub.ptr.sub49, i64* %len50, align 8, !tbaa !18
  store i32 4, i32* %state, align 4, !tbaa !14
  br label %if.end51

if.end51:                                         ; preds = %if.else43, %if.then34
  br label %sw.epilog

sw.bb52:                                          ; preds = %while.body
  %49 = load i8*, i8** %p, align 8, !tbaa !3
  %p53 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ruser_info, i32 0, i32 0
  store i8* %49, i8** %p53, align 8, !tbaa !16
  br label %for.cond54

for.cond54:                                       ; preds = %for.inc71, %sw.bb52
  %50 = load i8*, i8** %p, align 8, !tbaa !3
  %51 = load i8*, i8** %end, align 8, !tbaa !3
  %cmp55 = icmp ult i8* %50, %51
  br i1 %cmp55, label %for.body57, label %for.end73

for.body57:                                       ; preds = %for.cond54
  %52 = load i8*, i8** %p, align 8, !tbaa !3
  %53 = load i8, i8* %52, align 1, !tbaa !14
  %conv58 = sext i8 %53 to i32
  %cmp59 = icmp eq i32 %conv58, 64
  br i1 %cmp59, label %if.then69, label %lor.lhs.false61

lor.lhs.false61:                                  ; preds = %for.body57
  %54 = load i8*, i8** %p, align 8, !tbaa !3
  %55 = load i8, i8* %54, align 1, !tbaa !14
  %conv62 = sext i8 %55 to i32
  %cmp63 = icmp eq i32 %conv62, 91
  br i1 %cmp63, label %if.then69, label %lor.lhs.false65

lor.lhs.false65:                                  ; preds = %lor.lhs.false61
  %56 = load i8*, i8** %p, align 8, !tbaa !3
  %57 = load i8, i8* %56, align 1, !tbaa !14
  %conv66 = sext i8 %57 to i32
  %cmp67 = icmp eq i32 %conv66, 47
  br i1 %cmp67, label %if.then69, label %if.end70

if.then69:                                        ; preds = %lor.lhs.false65, %lor.lhs.false61, %for.body57
  br label %for.end73

if.end70:                                         ; preds = %lor.lhs.false65
  br label %for.inc71

for.inc71:                                        ; preds = %if.end70
  %58 = load i8*, i8** %p, align 8, !tbaa !3
  %incdec.ptr72 = getelementptr inbounds i8, i8* %58, i32 1
  store i8* %incdec.ptr72, i8** %p, align 8, !tbaa !3
  br label %for.cond54

for.end73:                                        ; preds = %if.then69, %for.cond54
  %59 = load i8*, i8** %p, align 8, !tbaa !3
  %60 = load i8*, i8** %end, align 8, !tbaa !3
  %cmp74 = icmp eq i8* %59, %60
  br i1 %cmp74, label %if.then84, label %lor.lhs.false76

lor.lhs.false76:                                  ; preds = %for.end73
  %61 = load i8*, i8** %p, align 8, !tbaa !3
  %62 = load i8, i8* %61, align 1, !tbaa !14
  %conv77 = sext i8 %62 to i32
  %cmp78 = icmp eq i32 %conv77, 47
  br i1 %cmp78, label %if.then84, label %lor.lhs.false80

lor.lhs.false80:                                  ; preds = %lor.lhs.false76
  %63 = load i8*, i8** %p, align 8, !tbaa !3
  %64 = load i8, i8* %63, align 1, !tbaa !14
  %conv81 = sext i8 %64 to i32
  %cmp82 = icmp eq i32 %conv81, 91
  br i1 %cmp82, label %if.then84, label %if.end86

if.then84:                                        ; preds = %lor.lhs.false80, %lor.lhs.false76, %for.end73
  %p85 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ruser_info, i32 0, i32 0
  %65 = load i8*, i8** %p85, align 8, !tbaa !16
  store i8* %65, i8** %p, align 8, !tbaa !3
  br label %if.end86

if.end86:                                         ; preds = %if.then84, %lor.lhs.false80
  %66 = load i8*, i8** %p, align 8, !tbaa !3
  %p87 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ruser_info, i32 0, i32 0
  %67 = load i8*, i8** %p87, align 8, !tbaa !16
  %sub.ptr.lhs.cast88 = ptrtoint i8* %66 to i64
  %sub.ptr.rhs.cast89 = ptrtoint i8* %67 to i64
  %sub.ptr.sub90 = sub i64 %sub.ptr.lhs.cast88, %sub.ptr.rhs.cast89
  %len91 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ruser_info, i32 0, i32 1
  store i64 %sub.ptr.sub90, i64* %len91, align 8, !tbaa !18
  store i32 3, i32* %state, align 4, !tbaa !14
  br label %sw.epilog

sw.bb92:                                          ; preds = %while.body
  %68 = load i8*, i8** %p, align 8, !tbaa !3
  %69 = load i8, i8* %68, align 1, !tbaa !14
  %conv93 = sext i8 %69 to i32
  %cmp94 = icmp eq i32 %conv93, 64
  br i1 %cmp94, label %if.then96, label %if.end98

if.then96:                                        ; preds = %sw.bb92
  %70 = load i8*, i8** %p, align 8, !tbaa !3
  %incdec.ptr97 = getelementptr inbounds i8, i8* %70, i32 1
  store i8* %incdec.ptr97, i8** %p, align 8, !tbaa !3
  br label %if.end98

if.end98:                                         ; preds = %if.then96, %sw.bb92
  %71 = load i8*, i8** %p, align 8, !tbaa !3
  %p99 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rhost, i32 0, i32 0
  store i8* %71, i8** %p99, align 8, !tbaa !16
  %72 = load i8*, i8** %p, align 8, !tbaa !3
  %73 = load i8, i8* %72, align 1, !tbaa !14
  %conv100 = sext i8 %73 to i32
  %cmp101 = icmp eq i32 %conv100, 91
  br i1 %cmp101, label %if.then103, label %if.else117

if.then103:                                       ; preds = %if.end98
  %74 = bitcast i32* %found to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %74) #5
  store i32 0, i32* %found, align 4, !tbaa !15
  br label %for.cond104

for.cond104:                                      ; preds = %for.inc111, %if.then103
  %75 = load i32, i32* %found, align 4, !tbaa !15
  %tobool = icmp ne i32 %75, 0
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %for.cond104
  %76 = load i8*, i8** %p, align 8, !tbaa !3
  %77 = load i8*, i8** %end, align 8, !tbaa !3
  %cmp105 = icmp ult i8* %76, %77
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond104
  %78 = phi i1 [ false, %for.cond104 ], [ %cmp105, %land.rhs ]
  br i1 %78, label %for.body107, label %for.end113

for.body107:                                      ; preds = %land.end
  %79 = load i8*, i8** %p, align 8, !tbaa !3
  %80 = load i8, i8* %79, align 1, !tbaa !14
  %conv108 = sext i8 %80 to i32
  %cmp109 = icmp eq i32 %conv108, 93
  %conv110 = zext i1 %cmp109 to i32
  store i32 %conv110, i32* %found, align 4, !tbaa !15
  br label %for.inc111

for.inc111:                                       ; preds = %for.body107
  %81 = load i8*, i8** %p, align 8, !tbaa !3
  %incdec.ptr112 = getelementptr inbounds i8, i8* %81, i32 1
  store i8* %incdec.ptr112, i8** %p, align 8, !tbaa !3
  br label %for.cond104

for.end113:                                       ; preds = %land.end
  %82 = load i32, i32* %found, align 4, !tbaa !15
  %tobool114 = icmp ne i32 %82, 0
  br i1 %tobool114, label %if.end116, label %if.then115

if.then115:                                       ; preds = %for.end113
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end116:                                        ; preds = %for.end113
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end116, %if.then115
  %83 = bitcast i32* %found to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %83) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup208 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end134

if.else117:                                       ; preds = %if.end98
  br label %for.cond118

for.cond118:                                      ; preds = %for.inc131, %if.else117
  %84 = load i8*, i8** %p, align 8, !tbaa !3
  %85 = load i8*, i8** %end, align 8, !tbaa !3
  %cmp119 = icmp ult i8* %84, %85
  br i1 %cmp119, label %for.body121, label %for.end133

for.body121:                                      ; preds = %for.cond118
  %86 = load i8*, i8** %p, align 8, !tbaa !3
  %87 = load i8, i8* %86, align 1, !tbaa !14
  %conv122 = sext i8 %87 to i32
  %cmp123 = icmp eq i32 %conv122, 58
  br i1 %cmp123, label %if.then129, label %lor.lhs.false125

lor.lhs.false125:                                 ; preds = %for.body121
  %88 = load i8*, i8** %p, align 8, !tbaa !3
  %89 = load i8, i8* %88, align 1, !tbaa !14
  %conv126 = sext i8 %89 to i32
  %cmp127 = icmp eq i32 %conv126, 47
  br i1 %cmp127, label %if.then129, label %if.end130

if.then129:                                       ; preds = %lor.lhs.false125, %for.body121
  br label %for.end133

if.end130:                                        ; preds = %lor.lhs.false125
  br label %for.inc131

for.inc131:                                       ; preds = %if.end130
  %90 = load i8*, i8** %p, align 8, !tbaa !3
  %incdec.ptr132 = getelementptr inbounds i8, i8* %90, i32 1
  store i8* %incdec.ptr132, i8** %p, align 8, !tbaa !3
  br label %for.cond118

for.end133:                                       ; preds = %if.then129, %for.cond118
  br label %if.end134

if.end134:                                        ; preds = %for.end133, %cleanup.cont
  %91 = load i8*, i8** %p, align 8, !tbaa !3
  %p135 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rhost, i32 0, i32 0
  %92 = load i8*, i8** %p135, align 8, !tbaa !16
  %sub.ptr.lhs.cast136 = ptrtoint i8* %91 to i64
  %sub.ptr.rhs.cast137 = ptrtoint i8* %92 to i64
  %sub.ptr.sub138 = sub i64 %sub.ptr.lhs.cast136, %sub.ptr.rhs.cast137
  %len139 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rhost, i32 0, i32 1
  store i64 %sub.ptr.sub138, i64* %len139, align 8, !tbaa !18
  %93 = load i8*, i8** %p, align 8, !tbaa !3
  %94 = load i8*, i8** %end, align 8, !tbaa !3
  %cmp140 = icmp ult i8* %93, %94
  br i1 %cmp140, label %if.then142, label %if.end154

if.then142:                                       ; preds = %if.end134
  %95 = load i8*, i8** %p, align 8, !tbaa !3
  %96 = load i8, i8* %95, align 1, !tbaa !14
  %conv143 = sext i8 %96 to i32
  %cmp144 = icmp eq i32 %conv143, 58
  br i1 %cmp144, label %if.then146, label %if.else147

if.then146:                                       ; preds = %if.then142
  store i32 4, i32* %state, align 4, !tbaa !14
  br label %sw.epilog

if.else147:                                       ; preds = %if.then142
  %97 = load i8*, i8** %p, align 8, !tbaa !3
  %98 = load i8, i8* %97, align 1, !tbaa !14
  %conv148 = sext i8 %98 to i32
  %cmp149 = icmp eq i32 %conv148, 47
  br i1 %cmp149, label %if.then151, label %if.end152

if.then151:                                       ; preds = %if.else147
  store i32 5, i32* %state, align 4, !tbaa !14
  br label %sw.epilog

if.end152:                                        ; preds = %if.else147
  br label %if.end153

if.end153:                                        ; preds = %if.end152
  br label %if.end154

if.end154:                                        ; preds = %if.end153, %if.end134
  br label %sw.epilog

sw.bb155:                                         ; preds = %while.body
  %99 = load i8*, i8** %p, align 8, !tbaa !3
  %incdec.ptr156 = getelementptr inbounds i8, i8* %99, i32 1
  store i8* %incdec.ptr156, i8** %p, align 8, !tbaa !3
  br label %for.cond157

for.cond157:                                      ; preds = %for.inc167, %sw.bb155
  %100 = load i8*, i8** %p, align 8, !tbaa !3
  %101 = load i8*, i8** %end, align 8, !tbaa !3
  %cmp158 = icmp ult i8* %100, %101
  br i1 %cmp158, label %for.body160, label %for.end169

for.body160:                                      ; preds = %for.cond157
  %102 = load i8*, i8** %p, align 8, !tbaa !3
  %103 = load i8, i8* %102, align 1, !tbaa !14
  %conv161 = sext i8 %103 to i32
  %cmp162 = icmp eq i32 %conv161, 47
  br i1 %cmp162, label %if.then164, label %if.end165

if.then164:                                       ; preds = %for.body160
  store i32 5, i32* %state, align 4, !tbaa !14
  br label %for.end169

if.end165:                                        ; preds = %for.body160
  %104 = load i32, i32* %rport, align 4, !tbaa !15
  %mul = mul i32 %104, 10
  store i32 %mul, i32* %rport, align 4, !tbaa !15
  %105 = load i8*, i8** %p, align 8, !tbaa !3
  %106 = load i8, i8* %105, align 1, !tbaa !14
  %conv166 = sext i8 %106 to i32
  %sub = sub nsw i32 %conv166, 48
  %107 = load i32, i32* %rport, align 4, !tbaa !15
  %add = add i32 %107, %sub
  store i32 %add, i32* %rport, align 4, !tbaa !15
  br label %for.inc167

for.inc167:                                       ; preds = %if.end165
  %108 = load i8*, i8** %p, align 8, !tbaa !3
  %incdec.ptr168 = getelementptr inbounds i8, i8* %108, i32 1
  store i8* %incdec.ptr168, i8** %p, align 8, !tbaa !3
  br label %for.cond157

for.end169:                                       ; preds = %if.then164, %for.cond157
  br label %sw.epilog

sw.bb170:                                         ; preds = %while.body
  %109 = load i8*, i8** %end, align 8, !tbaa !3
  call void @parse_uri_component(i8** %p, i8* %109, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0), %struct.mg_str* %rpath)
  %110 = load i8*, i8** %p, align 8, !tbaa !3
  %111 = load i8*, i8** %end, align 8, !tbaa !3
  %cmp171 = icmp ult i8* %110, %111
  br i1 %cmp171, label %land.lhs.true173, label %if.end179

land.lhs.true173:                                 ; preds = %sw.bb170
  %112 = load i8*, i8** %p, align 8, !tbaa !3
  %add.ptr174 = getelementptr inbounds i8, i8* %112, i64 -1
  %113 = load i8, i8* %add.ptr174, align 1, !tbaa !14
  %conv175 = sext i8 %113 to i32
  %cmp176 = icmp eq i32 %conv175, 63
  br i1 %cmp176, label %if.then178, label %if.end179

if.then178:                                       ; preds = %land.lhs.true173
  %114 = load i8*, i8** %end, align 8, !tbaa !3
  call void @parse_uri_component(i8** %p, i8* %114, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31, i32 0, i32 0), %struct.mg_str* %rquery)
  br label %if.end179

if.end179:                                        ; preds = %if.then178, %land.lhs.true173, %sw.bb170
  %115 = load i8*, i8** %end, align 8, !tbaa !3
  call void @parse_uri_component(i8** %p, i8* %115, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), %struct.mg_str* %rfragment)
  br label %sw.epilog

sw.epilog:                                        ; preds = %while.body, %if.end179, %for.end169, %if.end154, %if.then151, %if.then146, %if.end86, %if.end51, %if.end25, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %116 = load %struct.mg_str*, %struct.mg_str** %scheme.addr, align 8, !tbaa !3
  %cmp180 = icmp ne %struct.mg_str* %116, null
  br i1 %cmp180, label %if.then182, label %if.end183

if.then182:                                       ; preds = %while.end
  %117 = load %struct.mg_str*, %struct.mg_str** %scheme.addr, align 8, !tbaa !3
  %118 = bitcast %struct.mg_str* %117 to i8*
  %119 = bitcast %struct.mg_str* %rscheme to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %118, i8* align 8 %119, i64 16, i1 false), !tbaa.struct !19
  br label %if.end183

if.end183:                                        ; preds = %if.then182, %while.end
  %120 = load %struct.mg_str*, %struct.mg_str** %user_info.addr, align 8, !tbaa !3
  %cmp184 = icmp ne %struct.mg_str* %120, null
  br i1 %cmp184, label %if.then186, label %if.end187

if.then186:                                       ; preds = %if.end183
  %121 = load %struct.mg_str*, %struct.mg_str** %user_info.addr, align 8, !tbaa !3
  %122 = bitcast %struct.mg_str* %121 to i8*
  %123 = bitcast %struct.mg_str* %ruser_info to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %122, i8* align 8 %123, i64 16, i1 false), !tbaa.struct !19
  br label %if.end187

if.end187:                                        ; preds = %if.then186, %if.end183
  %124 = load %struct.mg_str*, %struct.mg_str** %host.addr, align 8, !tbaa !3
  %cmp188 = icmp ne %struct.mg_str* %124, null
  br i1 %cmp188, label %if.then190, label %if.end191

if.then190:                                       ; preds = %if.end187
  %125 = load %struct.mg_str*, %struct.mg_str** %host.addr, align 8, !tbaa !3
  %126 = bitcast %struct.mg_str* %125 to i8*
  %127 = bitcast %struct.mg_str* %rhost to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %126, i8* align 8 %127, i64 16, i1 false), !tbaa.struct !19
  br label %if.end191

if.end191:                                        ; preds = %if.then190, %if.end187
  %128 = load i32*, i32** %port.addr, align 8, !tbaa !3
  %cmp192 = icmp ne i32* %128, null
  br i1 %cmp192, label %if.then194, label %if.end195

if.then194:                                       ; preds = %if.end191
  %129 = load i32, i32* %rport, align 4, !tbaa !15
  %130 = load i32*, i32** %port.addr, align 8, !tbaa !3
  store i32 %129, i32* %130, align 4, !tbaa !15
  br label %if.end195

if.end195:                                        ; preds = %if.then194, %if.end191
  %131 = load %struct.mg_str*, %struct.mg_str** %path.addr, align 8, !tbaa !3
  %cmp196 = icmp ne %struct.mg_str* %131, null
  br i1 %cmp196, label %if.then198, label %if.end199

if.then198:                                       ; preds = %if.end195
  %132 = load %struct.mg_str*, %struct.mg_str** %path.addr, align 8, !tbaa !3
  %133 = bitcast %struct.mg_str* %132 to i8*
  %134 = bitcast %struct.mg_str* %rpath to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %133, i8* align 8 %134, i64 16, i1 false), !tbaa.struct !19
  br label %if.end199

if.end199:                                        ; preds = %if.then198, %if.end195
  %135 = load %struct.mg_str*, %struct.mg_str** %query.addr, align 8, !tbaa !3
  %cmp200 = icmp ne %struct.mg_str* %135, null
  br i1 %cmp200, label %if.then202, label %if.end203

if.then202:                                       ; preds = %if.end199
  %136 = load %struct.mg_str*, %struct.mg_str** %query.addr, align 8, !tbaa !3
  %137 = bitcast %struct.mg_str* %136 to i8*
  %138 = bitcast %struct.mg_str* %rquery to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %137, i8* align 8 %138, i64 16, i1 false), !tbaa.struct !19
  br label %if.end203

if.end203:                                        ; preds = %if.then202, %if.end199
  %139 = load %struct.mg_str*, %struct.mg_str** %fragment.addr, align 8, !tbaa !3
  %cmp204 = icmp ne %struct.mg_str* %139, null
  br i1 %cmp204, label %if.then206, label %if.end207

if.then206:                                       ; preds = %if.end203
  %140 = load %struct.mg_str*, %struct.mg_str** %fragment.addr, align 8, !tbaa !3
  %141 = bitcast %struct.mg_str* %140 to i8*
  %142 = bitcast %struct.mg_str* %rfragment to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %141, i8* align 8 %142, i64 16, i1 false), !tbaa.struct !19
  br label %if.end207

if.end207:                                        ; preds = %if.then206, %if.end203
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup208

cleanup208:                                       ; preds = %if.end207, %cleanup
  %143 = bitcast i8** %end to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %143) #5
  %144 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %144) #5
  %145 = bitcast i32* %state to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %145) #5
  %146 = bitcast i32* %rport to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %146) #5
  %147 = bitcast %struct.mg_str* %rfragment to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %147) #5
  %148 = bitcast %struct.mg_str* %rquery to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %148) #5
  %149 = bitcast %struct.mg_str* %rpath to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %149) #5
  %150 = bitcast %struct.mg_str* %rhost to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %150) #5
  %151 = bitcast %struct.mg_str* %ruser_info to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %151) #5
  %152 = bitcast %struct.mg_str* %rscheme to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %152) #5
  %153 = load i32, i32* %retval, align 4
  ret i32 %153
}

; Function Attrs: nounwind ssp uwtable
define internal void @parse_uri_component(i8** %p, i8* %end, i8* %seps, %struct.mg_str* %res) #0 {
entry:
  %p.addr = alloca i8**, align 8
  %end.addr = alloca i8*, align 8
  %seps.addr = alloca i8*, align 8
  %res.addr = alloca %struct.mg_str*, align 8
  %q = alloca i8*, align 8
  store i8** %p, i8*** %p.addr, align 8, !tbaa !3
  store i8* %end, i8** %end.addr, align 8, !tbaa !3
  store i8* %seps, i8** %seps.addr, align 8, !tbaa !3
  store %struct.mg_str* %res, %struct.mg_str** %res.addr, align 8, !tbaa !3
  %0 = bitcast i8** %q to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load i8**, i8*** %p.addr, align 8, !tbaa !3
  %2 = load i8*, i8** %1, align 8, !tbaa !3
  %3 = load %struct.mg_str*, %struct.mg_str** %res.addr, align 8, !tbaa !3
  %p1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %3, i32 0, i32 0
  store i8* %2, i8** %p1, align 8, !tbaa !16
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %4 = load i8**, i8*** %p.addr, align 8, !tbaa !3
  %5 = load i8*, i8** %4, align 8, !tbaa !3
  %6 = load i8*, i8** %end.addr, align 8, !tbaa !3
  %cmp = icmp ult i8* %5, %6
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  %7 = load i8*, i8** %seps.addr, align 8, !tbaa !3
  store i8* %7, i8** %q, align 8, !tbaa !3
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %8 = load i8*, i8** %q, align 8, !tbaa !3
  %9 = load i8, i8* %8, align 1, !tbaa !14
  %conv = sext i8 %9 to i32
  %cmp3 = icmp ne i32 %conv, 0
  br i1 %cmp3, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond2
  %10 = load i8**, i8*** %p.addr, align 8, !tbaa !3
  %11 = load i8*, i8** %10, align 8, !tbaa !3
  %12 = load i8, i8* %11, align 1, !tbaa !14
  %conv6 = sext i8 %12 to i32
  %13 = load i8*, i8** %q, align 8, !tbaa !3
  %14 = load i8, i8* %13, align 1, !tbaa !14
  %conv7 = sext i8 %14 to i32
  %cmp8 = icmp eq i32 %conv6, %conv7
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %for.body5
  br label %for.end

if.end:                                           ; preds = %for.body5
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i8*, i8** %q, align 8, !tbaa !3
  %incdec.ptr = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr, i8** %q, align 8, !tbaa !3
  br label %for.cond2

for.end:                                          ; preds = %if.then, %for.cond2
  %16 = load i8*, i8** %q, align 8, !tbaa !3
  %17 = load i8, i8* %16, align 1, !tbaa !14
  %conv10 = sext i8 %17 to i32
  %cmp11 = icmp ne i32 %conv10, 0
  br i1 %cmp11, label %if.then13, label %if.end14

if.then13:                                        ; preds = %for.end
  br label %for.end17

if.end14:                                         ; preds = %for.end
  br label %for.inc15

for.inc15:                                        ; preds = %if.end14
  %18 = load i8**, i8*** %p.addr, align 8, !tbaa !3
  %19 = load i8*, i8** %18, align 8, !tbaa !3
  %incdec.ptr16 = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %incdec.ptr16, i8** %18, align 8, !tbaa !3
  br label %for.cond

for.end17:                                        ; preds = %if.then13, %for.cond
  %20 = load i8**, i8*** %p.addr, align 8, !tbaa !3
  %21 = load i8*, i8** %20, align 8, !tbaa !3
  %22 = load %struct.mg_str*, %struct.mg_str** %res.addr, align 8, !tbaa !3
  %p18 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %22, i32 0, i32 0
  %23 = load i8*, i8** %p18, align 8, !tbaa !16
  %sub.ptr.lhs.cast = ptrtoint i8* %21 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %23 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %24 = load %struct.mg_str*, %struct.mg_str** %res.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %24, i32 0, i32 1
  store i64 %sub.ptr.sub, i64* %len, align 8, !tbaa !18
  %25 = load i8**, i8*** %p.addr, align 8, !tbaa !3
  %26 = load i8*, i8** %25, align 8, !tbaa !3
  %27 = load i8*, i8** %end.addr, align 8, !tbaa !3
  %cmp19 = icmp ult i8* %26, %27
  br i1 %cmp19, label %if.then21, label %if.end23

if.then21:                                        ; preds = %for.end17
  %28 = load i8**, i8*** %p.addr, align 8, !tbaa !3
  %29 = load i8*, i8** %28, align 8, !tbaa !3
  %incdec.ptr22 = getelementptr inbounds i8, i8* %29, i32 1
  store i8* %incdec.ptr22, i8** %28, align 8, !tbaa !3
  br label %if.end23

if.end23:                                         ; preds = %if.then21, %for.end17
  %30 = bitcast i8** %q to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %30) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_normalize_uri_path(%struct.mg_str* %in, %struct.mg_str* %out) #0 {
entry:
  %retval = alloca i32, align 4
  %in.addr = alloca %struct.mg_str*, align 8
  %out.addr = alloca %struct.mg_str*, align 8
  %s = alloca i8*, align 8
  %se = alloca i8*, align 8
  %cp = alloca i8*, align 8
  %d = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %next = alloca i8*, align 8
  %component = alloca %struct.mg_str, align 8
  store %struct.mg_str* %in, %struct.mg_str** %in.addr, align 8, !tbaa !3
  store %struct.mg_str* %out, %struct.mg_str** %out.addr, align 8, !tbaa !3
  %0 = bitcast i8** %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.mg_str*, %struct.mg_str** %in.addr, align 8, !tbaa !3
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %1, i32 0, i32 0
  %2 = load i8*, i8** %p, align 8, !tbaa !16
  store i8* %2, i8** %s, align 8, !tbaa !3
  %3 = bitcast i8** %se to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  %4 = load i8*, i8** %s, align 8, !tbaa !3
  %5 = load %struct.mg_str*, %struct.mg_str** %in.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %5, i32 0, i32 1
  %6 = load i64, i64* %len, align 8, !tbaa !18
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %6
  store i8* %add.ptr, i8** %se, align 8, !tbaa !3
  %7 = bitcast i8** %cp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #5
  %8 = load %struct.mg_str*, %struct.mg_str** %out.addr, align 8, !tbaa !3
  %p1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %8, i32 0, i32 0
  %9 = load i8*, i8** %p1, align 8, !tbaa !16
  store i8* %9, i8** %cp, align 8, !tbaa !3
  %10 = bitcast i8** %d to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #5
  %11 = load %struct.mg_str*, %struct.mg_str** %in.addr, align 8, !tbaa !3
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %11, i32 0, i32 1
  %12 = load i64, i64* %len2, align 8, !tbaa !18
  %cmp = icmp eq i64 %12, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %13 = load i8*, i8** %s, align 8, !tbaa !3
  %14 = load i8, i8* %13, align 1, !tbaa !14
  %conv = sext i8 %14 to i32
  %cmp3 = icmp ne i32 %conv, 47
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %15 = load %struct.mg_str*, %struct.mg_str** %out.addr, align 8, !tbaa !3
  %len5 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %15, i32 0, i32 1
  store i64 0, i64* %len5, align 8, !tbaa !18
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %16 = load i8*, i8** %cp, align 8, !tbaa !3
  store i8* %16, i8** %d, align 8, !tbaa !3
  br label %while.cond

while.cond:                                       ; preds = %if.end40, %if.end
  %17 = load i8*, i8** %s, align 8, !tbaa !3
  %18 = load i8*, i8** %se, align 8, !tbaa !3
  %cmp6 = icmp ult i8* %17, %18
  br i1 %cmp6, label %while.body, label %while.end41

while.body:                                       ; preds = %while.cond
  %19 = bitcast i8** %next to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %19) #5
  %20 = load i8*, i8** %s, align 8, !tbaa !3
  store i8* %20, i8** %next, align 8, !tbaa !3
  %21 = bitcast %struct.mg_str* %component to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %21) #5
  %22 = load i8*, i8** %se, align 8, !tbaa !3
  call void @parse_uri_component(i8** %next, i8* %22, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i32 0, i32 0), %struct.mg_str* %component)
  %call = call i32 @mg_vcmp(%struct.mg_str* %component, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  %cmp8 = icmp eq i32 %call, 0
  br i1 %cmp8, label %if.then10, label %if.else

if.then10:                                        ; preds = %while.body
  br label %if.end40

if.else:                                          ; preds = %while.body
  %call11 = call i32 @mg_vcmp(%struct.mg_str* %component, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0))
  %cmp12 = icmp eq i32 %call11, 0
  br i1 %cmp12, label %if.then14, label %if.else33

if.then14:                                        ; preds = %if.else
  %23 = load i8*, i8** %d, align 8, !tbaa !3
  %24 = load i8*, i8** %cp, align 8, !tbaa !3
  %add.ptr15 = getelementptr inbounds i8, i8* %24, i64 1
  %cmp16 = icmp ugt i8* %23, %add.ptr15
  br i1 %cmp16, label %land.lhs.true, label %if.end23

land.lhs.true:                                    ; preds = %if.then14
  %25 = load i8*, i8** %d, align 8, !tbaa !3
  %add.ptr18 = getelementptr inbounds i8, i8* %25, i64 -1
  %26 = load i8, i8* %add.ptr18, align 1, !tbaa !14
  %conv19 = sext i8 %26 to i32
  %cmp20 = icmp eq i32 %conv19, 47
  br i1 %cmp20, label %if.then22, label %if.end23

if.then22:                                        ; preds = %land.lhs.true
  %27 = load i8*, i8** %d, align 8, !tbaa !3
  %incdec.ptr = getelementptr inbounds i8, i8* %27, i32 -1
  store i8* %incdec.ptr, i8** %d, align 8, !tbaa !3
  br label %if.end23

if.end23:                                         ; preds = %if.then22, %land.lhs.true, %if.then14
  br label %while.cond24

while.cond24:                                     ; preds = %while.body31, %if.end23
  %28 = load i8*, i8** %d, align 8, !tbaa !3
  %29 = load i8*, i8** %cp, align 8, !tbaa !3
  %cmp25 = icmp ugt i8* %28, %29
  br i1 %cmp25, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond24
  %30 = load i8*, i8** %d, align 8, !tbaa !3
  %add.ptr27 = getelementptr inbounds i8, i8* %30, i64 -1
  %31 = load i8, i8* %add.ptr27, align 1, !tbaa !14
  %conv28 = sext i8 %31 to i32
  %cmp29 = icmp ne i32 %conv28, 47
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond24
  %32 = phi i1 [ false, %while.cond24 ], [ %cmp29, %land.rhs ]
  br i1 %32, label %while.body31, label %while.end

while.body31:                                     ; preds = %land.end
  %33 = load i8*, i8** %d, align 8, !tbaa !3
  %incdec.ptr32 = getelementptr inbounds i8, i8* %33, i32 -1
  store i8* %incdec.ptr32, i8** %d, align 8, !tbaa !3
  br label %while.cond24

while.end:                                        ; preds = %land.end
  br label %if.end39

if.else33:                                        ; preds = %if.else
  %34 = load i8*, i8** %d, align 8, !tbaa !3
  %35 = load i8*, i8** %s, align 8, !tbaa !3
  %36 = load i8*, i8** %next, align 8, !tbaa !3
  %37 = load i8*, i8** %s, align 8, !tbaa !3
  %sub.ptr.lhs.cast = ptrtoint i8* %36 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %37 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %38 = load i8*, i8** %d, align 8, !tbaa !3
  %39 = call i64 @llvm.objectsize.i64.p0i8(i8* %38, i1 false, i1 true)
  %call34 = call i8* @__memmove_chk(i8* %34, i8* %35, i64 %sub.ptr.sub, i64 %39) #5
  %40 = load i8*, i8** %next, align 8, !tbaa !3
  %41 = load i8*, i8** %s, align 8, !tbaa !3
  %sub.ptr.lhs.cast35 = ptrtoint i8* %40 to i64
  %sub.ptr.rhs.cast36 = ptrtoint i8* %41 to i64
  %sub.ptr.sub37 = sub i64 %sub.ptr.lhs.cast35, %sub.ptr.rhs.cast36
  %42 = load i8*, i8** %d, align 8, !tbaa !3
  %add.ptr38 = getelementptr inbounds i8, i8* %42, i64 %sub.ptr.sub37
  store i8* %add.ptr38, i8** %d, align 8, !tbaa !3
  br label %if.end39

if.end39:                                         ; preds = %if.else33, %while.end
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.then10
  %43 = load i8*, i8** %next, align 8, !tbaa !3
  store i8* %43, i8** %s, align 8, !tbaa !3
  %44 = bitcast %struct.mg_str* %component to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %44) #5
  %45 = bitcast i8** %next to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %45) #5
  br label %while.cond

while.end41:                                      ; preds = %while.cond
  %46 = load i8*, i8** %d, align 8, !tbaa !3
  %47 = load i8*, i8** %cp, align 8, !tbaa !3
  %cmp42 = icmp eq i8* %46, %47
  br i1 %cmp42, label %if.then44, label %if.end46

if.then44:                                        ; preds = %while.end41
  %48 = load i8*, i8** %d, align 8, !tbaa !3
  %incdec.ptr45 = getelementptr inbounds i8, i8* %48, i32 1
  store i8* %incdec.ptr45, i8** %d, align 8, !tbaa !3
  store i8 47, i8* %48, align 1, !tbaa !14
  br label %if.end46

if.end46:                                         ; preds = %if.then44, %while.end41
  %49 = load i8*, i8** %cp, align 8, !tbaa !3
  %50 = load %struct.mg_str*, %struct.mg_str** %out.addr, align 8, !tbaa !3
  %p47 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %50, i32 0, i32 0
  store i8* %49, i8** %p47, align 8, !tbaa !16
  %51 = load i8*, i8** %d, align 8, !tbaa !3
  %52 = load i8*, i8** %cp, align 8, !tbaa !3
  %sub.ptr.lhs.cast48 = ptrtoint i8* %51 to i64
  %sub.ptr.rhs.cast49 = ptrtoint i8* %52 to i64
  %sub.ptr.sub50 = sub i64 %sub.ptr.lhs.cast48, %sub.ptr.rhs.cast49
  %53 = load %struct.mg_str*, %struct.mg_str** %out.addr, align 8, !tbaa !3
  %len51 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %53, i32 0, i32 1
  store i64 %sub.ptr.sub50, i64* %len51, align 8, !tbaa !18
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end46, %if.then
  %54 = bitcast i8** %d to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %54) #5
  %55 = bitcast i8** %cp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %55) #5
  %56 = bitcast i8** %se to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %56) #5
  %57 = bitcast i8** %s to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %57) #5
  %58 = load i32, i32* %retval, align 4
  ret i32 %58
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_assemble_uri(%struct.mg_str* %scheme, %struct.mg_str* %user_info, %struct.mg_str* %host, i32 %port, %struct.mg_str* %path, %struct.mg_str* %query, %struct.mg_str* %fragment, i32 %normalize_path, %struct.mg_str* %uri) #0 {
entry:
  %retval = alloca i32, align 4
  %scheme.addr = alloca %struct.mg_str*, align 8
  %user_info.addr = alloca %struct.mg_str*, align 8
  %host.addr = alloca %struct.mg_str*, align 8
  %port.addr = alloca i32, align 4
  %path.addr = alloca %struct.mg_str*, align 8
  %query.addr = alloca %struct.mg_str*, align 8
  %fragment.addr = alloca %struct.mg_str*, align 8
  %normalize_path.addr = alloca i32, align 4
  %uri.addr = alloca %struct.mg_str*, align 8
  %result = alloca i32, align 4
  %out = alloca %struct.mbuf, align 8
  %port_str = alloca [20 x i8], align 16
  %port_str_len = alloca i32, align 4
  %npath = alloca %struct.mg_str, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_str* %scheme, %struct.mg_str** %scheme.addr, align 8, !tbaa !3
  store %struct.mg_str* %user_info, %struct.mg_str** %user_info.addr, align 8, !tbaa !3
  store %struct.mg_str* %host, %struct.mg_str** %host.addr, align 8, !tbaa !3
  store i32 %port, i32* %port.addr, align 4, !tbaa !15
  store %struct.mg_str* %path, %struct.mg_str** %path.addr, align 8, !tbaa !3
  store %struct.mg_str* %query, %struct.mg_str** %query.addr, align 8, !tbaa !3
  store %struct.mg_str* %fragment, %struct.mg_str** %fragment.addr, align 8, !tbaa !3
  store i32 %normalize_path, i32* %normalize_path.addr, align 4, !tbaa !15
  store %struct.mg_str* %uri, %struct.mg_str** %uri.addr, align 8, !tbaa !3
  %0 = bitcast i32* %result to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  store i32 -1, i32* %result, align 4, !tbaa !15
  %1 = bitcast %struct.mbuf* %out to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %1) #5
  call void @mbuf_init(%struct.mbuf* %out, i64 0)
  %2 = load %struct.mg_str*, %struct.mg_str** %scheme.addr, align 8, !tbaa !3
  %cmp = icmp ne %struct.mg_str* %2, null
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.mg_str*, %struct.mg_str** %scheme.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %3, i32 0, i32 1
  %4 = load i64, i64* %len, align 8, !tbaa !18
  %cmp1 = icmp ugt i64 %4, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct.mg_str*, %struct.mg_str** %scheme.addr, align 8, !tbaa !3
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %5, i32 0, i32 0
  %6 = load i8*, i8** %p, align 8, !tbaa !16
  %7 = load %struct.mg_str*, %struct.mg_str** %scheme.addr, align 8, !tbaa !3
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %7, i32 0, i32 1
  %8 = load i64, i64* %len2, align 8, !tbaa !18
  %call = call i64 @mbuf_append(%struct.mbuf* %out, i8* %6, i64 %8)
  %call3 = call i64 @mbuf_append(%struct.mbuf* %out, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.29, i32 0, i32 0), i64 3)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %9 = load %struct.mg_str*, %struct.mg_str** %user_info.addr, align 8, !tbaa !3
  %cmp4 = icmp ne %struct.mg_str* %9, null
  br i1 %cmp4, label %land.lhs.true5, label %if.end13

land.lhs.true5:                                   ; preds = %if.end
  %10 = load %struct.mg_str*, %struct.mg_str** %user_info.addr, align 8, !tbaa !3
  %len6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %10, i32 0, i32 1
  %11 = load i64, i64* %len6, align 8, !tbaa !18
  %cmp7 = icmp ugt i64 %11, 0
  br i1 %cmp7, label %if.then8, label %if.end13

if.then8:                                         ; preds = %land.lhs.true5
  %12 = load %struct.mg_str*, %struct.mg_str** %user_info.addr, align 8, !tbaa !3
  %p9 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %12, i32 0, i32 0
  %13 = load i8*, i8** %p9, align 8, !tbaa !16
  %14 = load %struct.mg_str*, %struct.mg_str** %user_info.addr, align 8, !tbaa !3
  %len10 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %14, i32 0, i32 1
  %15 = load i64, i64* %len10, align 8, !tbaa !18
  %call11 = call i64 @mbuf_append(%struct.mbuf* %out, i8* %13, i64 %15)
  %call12 = call i64 @mbuf_append(%struct.mbuf* %out, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i32 0, i32 0), i64 1)
  br label %if.end13

if.end13:                                         ; preds = %if.then8, %land.lhs.true5, %if.end
  %16 = load %struct.mg_str*, %struct.mg_str** %host.addr, align 8, !tbaa !3
  %cmp14 = icmp ne %struct.mg_str* %16, null
  br i1 %cmp14, label %land.lhs.true15, label %if.end22

land.lhs.true15:                                  ; preds = %if.end13
  %17 = load %struct.mg_str*, %struct.mg_str** %host.addr, align 8, !tbaa !3
  %len16 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %17, i32 0, i32 1
  %18 = load i64, i64* %len16, align 8, !tbaa !18
  %cmp17 = icmp ugt i64 %18, 0
  br i1 %cmp17, label %if.then18, label %if.end22

if.then18:                                        ; preds = %land.lhs.true15
  %19 = load %struct.mg_str*, %struct.mg_str** %host.addr, align 8, !tbaa !3
  %p19 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %19, i32 0, i32 0
  %20 = load i8*, i8** %p19, align 8, !tbaa !16
  %21 = load %struct.mg_str*, %struct.mg_str** %host.addr, align 8, !tbaa !3
  %len20 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %21, i32 0, i32 1
  %22 = load i64, i64* %len20, align 8, !tbaa !18
  %call21 = call i64 @mbuf_append(%struct.mbuf* %out, i8* %20, i64 %22)
  br label %if.end22

if.end22:                                         ; preds = %if.then18, %land.lhs.true15, %if.end13
  %23 = load i32, i32* %port.addr, align 4, !tbaa !15
  %cmp23 = icmp ne i32 %23, 0
  br i1 %cmp23, label %if.then24, label %if.end28

if.then24:                                        ; preds = %if.end22
  %24 = bitcast [20 x i8]* %port_str to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* %24) #5
  %25 = bitcast i32* %port_str_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %25) #5
  %arraydecay = getelementptr inbounds [20 x i8], [20 x i8]* %port_str, i32 0, i32 0
  %26 = load i32, i32* %port.addr, align 4, !tbaa !15
  %call25 = call i32 (i8*, i32, i64, i8*, ...) @__sprintf_chk(i8* %arraydecay, i32 0, i64 20, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.37, i32 0, i32 0), i32 %26)
  store i32 %call25, i32* %port_str_len, align 4, !tbaa !15
  %arraydecay26 = getelementptr inbounds [20 x i8], [20 x i8]* %port_str, i32 0, i32 0
  %27 = load i32, i32* %port_str_len, align 4, !tbaa !15
  %conv = sext i32 %27 to i64
  %call27 = call i64 @mbuf_append(%struct.mbuf* %out, i8* %arraydecay26, i64 %conv)
  %28 = bitcast i32* %port_str_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %28) #5
  %29 = bitcast [20 x i8]* %port_str to i8*
  call void @llvm.lifetime.end.p0i8(i64 20, i8* %29) #5
  br label %if.end28

if.end28:                                         ; preds = %if.then24, %if.end22
  %30 = load %struct.mg_str*, %struct.mg_str** %path.addr, align 8, !tbaa !3
  %cmp29 = icmp ne %struct.mg_str* %30, null
  br i1 %cmp29, label %land.lhs.true31, label %if.else57

land.lhs.true31:                                  ; preds = %if.end28
  %31 = load %struct.mg_str*, %struct.mg_str** %path.addr, align 8, !tbaa !3
  %len32 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %31, i32 0, i32 1
  %32 = load i64, i64* %len32, align 8, !tbaa !18
  %cmp33 = icmp ugt i64 %32, 0
  br i1 %cmp33, label %if.then35, label %if.else57

if.then35:                                        ; preds = %land.lhs.true31
  %33 = load i32, i32* %normalize_path.addr, align 4, !tbaa !15
  %tobool = icmp ne i32 %33, 0
  br i1 %tobool, label %if.then36, label %if.else

if.then36:                                        ; preds = %if.then35
  %34 = bitcast %struct.mg_str* %npath to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %34) #5
  %35 = load %struct.mg_str*, %struct.mg_str** %path.addr, align 8, !tbaa !3
  %36 = bitcast %struct.mg_str* %35 to { i8*, i64 }*
  %37 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %36, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %36, i32 0, i32 1
  %40 = load i64, i64* %39, align 8
  %call37 = call { i8*, i64 } @mg_strdup(i8* %38, i64 %40)
  %41 = bitcast %struct.mg_str* %npath to { i8*, i64 }*
  %42 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %41, i32 0, i32 0
  %43 = extractvalue { i8*, i64 } %call37, 0
  store i8* %43, i8** %42, align 8
  %44 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %41, i32 0, i32 1
  %45 = extractvalue { i8*, i64 } %call37, 1
  store i64 %45, i64* %44, align 8
  %len38 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %npath, i32 0, i32 1
  %46 = load i64, i64* %len38, align 8, !tbaa !18
  %47 = load %struct.mg_str*, %struct.mg_str** %path.addr, align 8, !tbaa !3
  %len39 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %47, i32 0, i32 1
  %48 = load i64, i64* %len39, align 8, !tbaa !18
  %cmp40 = icmp ne i64 %46, %48
  br i1 %cmp40, label %if.then42, label %if.end43

if.then42:                                        ; preds = %if.then36
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end43:                                         ; preds = %if.then36
  %49 = load %struct.mg_str*, %struct.mg_str** %path.addr, align 8, !tbaa !3
  %call44 = call i32 @mg_normalize_uri_path(%struct.mg_str* %49, %struct.mg_str* %npath)
  %tobool45 = icmp ne i32 %call44, 0
  br i1 %tobool45, label %if.end48, label %if.then46

if.then46:                                        ; preds = %if.end43
  %p47 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %npath, i32 0, i32 0
  %50 = load i8*, i8** %p47, align 8, !tbaa !16
  call void @free(i8* %50)
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end48:                                         ; preds = %if.end43
  %p49 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %npath, i32 0, i32 0
  %51 = load i8*, i8** %p49, align 8, !tbaa !16
  %len50 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %npath, i32 0, i32 1
  %52 = load i64, i64* %len50, align 8, !tbaa !18
  %call51 = call i64 @mbuf_append(%struct.mbuf* %out, i8* %51, i64 %52)
  %p52 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %npath, i32 0, i32 0
  %53 = load i8*, i8** %p52, align 8, !tbaa !16
  call void @free(i8* %53)
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.then42, %if.end48
  %54 = bitcast %struct.mg_str* %npath to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %54) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup98 [
    i32 0, label %cleanup.cont
    i32 2, label %out87
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end56

if.else:                                          ; preds = %if.then35
  %55 = load %struct.mg_str*, %struct.mg_str** %path.addr, align 8, !tbaa !3
  %p53 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %55, i32 0, i32 0
  %56 = load i8*, i8** %p53, align 8, !tbaa !16
  %57 = load %struct.mg_str*, %struct.mg_str** %path.addr, align 8, !tbaa !3
  %len54 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %57, i32 0, i32 1
  %58 = load i64, i64* %len54, align 8, !tbaa !18
  %call55 = call i64 @mbuf_append(%struct.mbuf* %out, i8* %56, i64 %58)
  br label %if.end56

if.end56:                                         ; preds = %if.else, %cleanup.cont
  br label %if.end62

if.else57:                                        ; preds = %land.lhs.true31, %if.end28
  %59 = load i32, i32* %normalize_path.addr, align 4, !tbaa !15
  %tobool58 = icmp ne i32 %59, 0
  br i1 %tobool58, label %if.then59, label %if.end61

if.then59:                                        ; preds = %if.else57
  %call60 = call i64 @mbuf_append(%struct.mbuf* %out, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i32 0, i32 0), i64 1)
  br label %if.end61

if.end61:                                         ; preds = %if.then59, %if.else57
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.end56
  %60 = load %struct.mg_str*, %struct.mg_str** %query.addr, align 8, !tbaa !3
  %cmp63 = icmp ne %struct.mg_str* %60, null
  br i1 %cmp63, label %land.lhs.true65, label %if.end74

land.lhs.true65:                                  ; preds = %if.end62
  %61 = load %struct.mg_str*, %struct.mg_str** %query.addr, align 8, !tbaa !3
  %len66 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %61, i32 0, i32 1
  %62 = load i64, i64* %len66, align 8, !tbaa !18
  %cmp67 = icmp ugt i64 %62, 0
  br i1 %cmp67, label %if.then69, label %if.end74

if.then69:                                        ; preds = %land.lhs.true65
  %call70 = call i64 @mbuf_append(%struct.mbuf* %out, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i32 0, i32 0), i64 1)
  %63 = load %struct.mg_str*, %struct.mg_str** %query.addr, align 8, !tbaa !3
  %p71 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %63, i32 0, i32 0
  %64 = load i8*, i8** %p71, align 8, !tbaa !16
  %65 = load %struct.mg_str*, %struct.mg_str** %query.addr, align 8, !tbaa !3
  %len72 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %65, i32 0, i32 1
  %66 = load i64, i64* %len72, align 8, !tbaa !18
  %call73 = call i64 @mbuf_append(%struct.mbuf* %out, i8* %64, i64 %66)
  br label %if.end74

if.end74:                                         ; preds = %if.then69, %land.lhs.true65, %if.end62
  %67 = load %struct.mg_str*, %struct.mg_str** %fragment.addr, align 8, !tbaa !3
  %cmp75 = icmp ne %struct.mg_str* %67, null
  br i1 %cmp75, label %land.lhs.true77, label %if.end86

land.lhs.true77:                                  ; preds = %if.end74
  %68 = load %struct.mg_str*, %struct.mg_str** %fragment.addr, align 8, !tbaa !3
  %len78 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %68, i32 0, i32 1
  %69 = load i64, i64* %len78, align 8, !tbaa !18
  %cmp79 = icmp ugt i64 %69, 0
  br i1 %cmp79, label %if.then81, label %if.end86

if.then81:                                        ; preds = %land.lhs.true77
  %call82 = call i64 @mbuf_append(%struct.mbuf* %out, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31, i32 0, i32 0), i64 1)
  %70 = load %struct.mg_str*, %struct.mg_str** %fragment.addr, align 8, !tbaa !3
  %p83 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %70, i32 0, i32 0
  %71 = load i8*, i8** %p83, align 8, !tbaa !16
  %72 = load %struct.mg_str*, %struct.mg_str** %fragment.addr, align 8, !tbaa !3
  %len84 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %72, i32 0, i32 1
  %73 = load i64, i64* %len84, align 8, !tbaa !18
  %call85 = call i64 @mbuf_append(%struct.mbuf* %out, i8* %71, i64 %73)
  br label %if.end86

if.end86:                                         ; preds = %if.then81, %land.lhs.true77, %if.end74
  store i32 0, i32* %result, align 4, !tbaa !15
  br label %out87

out87:                                            ; preds = %if.end86, %cleanup
  %74 = load i32, i32* %result, align 4, !tbaa !15
  %cmp88 = icmp eq i32 %74, 0
  br i1 %cmp88, label %if.then90, label %if.else94

if.then90:                                        ; preds = %out87
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %out, i32 0, i32 0
  %75 = load i8*, i8** %buf, align 8, !tbaa !40
  %76 = load %struct.mg_str*, %struct.mg_str** %uri.addr, align 8, !tbaa !3
  %p91 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %76, i32 0, i32 0
  store i8* %75, i8** %p91, align 8, !tbaa !16
  %len92 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %out, i32 0, i32 1
  %77 = load i64, i64* %len92, align 8, !tbaa !39
  %78 = load %struct.mg_str*, %struct.mg_str** %uri.addr, align 8, !tbaa !3
  %len93 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %78, i32 0, i32 1
  store i64 %77, i64* %len93, align 8, !tbaa !18
  br label %if.end97

if.else94:                                        ; preds = %out87
  call void @mbuf_free(%struct.mbuf* %out)
  %79 = load %struct.mg_str*, %struct.mg_str** %uri.addr, align 8, !tbaa !3
  %p95 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %79, i32 0, i32 0
  store i8* null, i8** %p95, align 8, !tbaa !16
  %80 = load %struct.mg_str*, %struct.mg_str** %uri.addr, align 8, !tbaa !3
  %len96 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %80, i32 0, i32 1
  store i64 0, i64* %len96, align 8, !tbaa !18
  br label %if.end97

if.end97:                                         ; preds = %if.else94, %if.then90
  %81 = load i32, i32* %result, align 4, !tbaa !15
  store i32 %81, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup98

cleanup98:                                        ; preds = %if.end97, %cleanup
  %82 = bitcast %struct.mbuf* %out to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %82) #5
  %83 = bitcast i32* %result to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %83) #5
  %84 = load i32, i32* %retval, align 4
  ret i32 %84
}

declare i32 @__sprintf_chk(i8*, i32, i64, i8*, ...) #4

; Function Attrs: nounwind ssp uwtable
define i32 @mg_parse_http(i8* %s, i32 %n, %struct.http_message* %hm, i32 %is_req) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 8
  %n.addr = alloca i32, align 4
  %hm.addr = alloca %struct.http_message*, align 8
  %is_req.addr = alloca i32, align 4
  %end = alloca i8*, align 8
  %qs = alloca i8*, align 8
  %len = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 8, !tbaa !3
  store i32 %n, i32* %n.addr, align 4, !tbaa !15
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  store i32 %is_req, i32* %is_req.addr, align 4, !tbaa !15
  %0 = bitcast i8** %end to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = bitcast i8** %qs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %2 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  %3 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %4 = load i32, i32* %n.addr, align 4, !tbaa !15
  %call = call i32 @mg_http_get_request_len(i8* %3, i32 %4)
  store i32 %call, i32* %len, align 4, !tbaa !15
  %5 = load i32, i32* %len, align 4, !tbaa !15
  %cmp = icmp sle i32 %5, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load i32, i32* %len, align 4, !tbaa !15
  store i32 %6, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %7 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %8 = bitcast %struct.http_message* %7 to i8*
  %9 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %10 = bitcast %struct.http_message* %9 to i8*
  %11 = call i64 @llvm.objectsize.i64.p0i8(i8* %10, i1 false, i1 true)
  %call1 = call i8* @__memset_chk(i8* %8, i32 0, i64 1408, i64 %11) #5
  %12 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %13 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %message = getelementptr inbounds %struct.http_message, %struct.http_message* %13, i32 0, i32 0
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %message, i32 0, i32 0
  store i8* %12, i8** %p, align 8, !tbaa !128
  %14 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %15 = load i32, i32* %len, align 4, !tbaa !15
  %idx.ext = sext i32 %15 to i64
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 %idx.ext
  %16 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %body = getelementptr inbounds %struct.http_message, %struct.http_message* %16, i32 0, i32 1
  %p2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body, i32 0, i32 0
  store i8* %add.ptr, i8** %p2, align 8, !tbaa !130
  %17 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %body3 = getelementptr inbounds %struct.http_message, %struct.http_message* %17, i32 0, i32 1
  %len4 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body3, i32 0, i32 1
  store i64 -1, i64* %len4, align 8, !tbaa !131
  %18 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %message5 = getelementptr inbounds %struct.http_message, %struct.http_message* %18, i32 0, i32 0
  %len6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %message5, i32 0, i32 1
  store i64 -1, i64* %len6, align 8, !tbaa !132
  %19 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %20 = load i32, i32* %len, align 4, !tbaa !15
  %idx.ext7 = sext i32 %20 to i64
  %add.ptr8 = getelementptr inbounds i8, i8* %19, i64 %idx.ext7
  store i8* %add.ptr8, i8** %end, align 8, !tbaa !3
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %21 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %22 = load i8*, i8** %end, align 8, !tbaa !3
  %cmp9 = icmp ult i8* %21, %22
  br i1 %cmp9, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %23 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %24 = load i8, i8* %23, align 1, !tbaa !14
  %conv = zext i8 %24 to i32
  %call10 = call i32 @isspace(i32 %conv) #19
  %tobool = icmp ne i32 %call10, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %25 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %25, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %26 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %incdec.ptr = getelementptr inbounds i8, i8* %26, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 8, !tbaa !3
  br label %while.cond

while.end:                                        ; preds = %land.end
  %27 = load i32, i32* %is_req.addr, align 4, !tbaa !15
  %tobool11 = icmp ne i32 %27, 0
  br i1 %tobool11, label %if.then12, label %if.else

if.then12:                                        ; preds = %while.end
  %28 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %29 = load i8*, i8** %end, align 8, !tbaa !3
  %30 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %method = getelementptr inbounds %struct.http_message, %struct.http_message* %30, i32 0, i32 2
  %call13 = call i8* @mg_skip(i8* %28, i8* %29, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.39, i32 0, i32 0), %struct.mg_str* %method)
  store i8* %call13, i8** %s.addr, align 8, !tbaa !3
  %31 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %32 = load i8*, i8** %end, align 8, !tbaa !3
  %33 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri = getelementptr inbounds %struct.http_message, %struct.http_message* %33, i32 0, i32 3
  %call14 = call i8* @mg_skip(i8* %31, i8* %32, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.39, i32 0, i32 0), %struct.mg_str* %uri)
  store i8* %call14, i8** %s.addr, align 8, !tbaa !3
  %34 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %35 = load i8*, i8** %end, align 8, !tbaa !3
  %36 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %proto = getelementptr inbounds %struct.http_message, %struct.http_message* %36, i32 0, i32 4
  %call15 = call i8* @mg_skip(i8* %34, i8* %35, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), %struct.mg_str* %proto)
  store i8* %call15, i8** %s.addr, align 8, !tbaa !3
  %37 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri16 = getelementptr inbounds %struct.http_message, %struct.http_message* %37, i32 0, i32 3
  %p17 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri16, i32 0, i32 0
  %38 = load i8*, i8** %p17, align 8, !tbaa !133
  %39 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %method18 = getelementptr inbounds %struct.http_message, %struct.http_message* %39, i32 0, i32 2
  %p19 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %method18, i32 0, i32 0
  %40 = load i8*, i8** %p19, align 8, !tbaa !134
  %cmp20 = icmp ule i8* %38, %40
  br i1 %cmp20, label %if.then28, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then12
  %41 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %proto22 = getelementptr inbounds %struct.http_message, %struct.http_message* %41, i32 0, i32 4
  %p23 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %proto22, i32 0, i32 0
  %42 = load i8*, i8** %p23, align 8, !tbaa !135
  %43 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri24 = getelementptr inbounds %struct.http_message, %struct.http_message* %43, i32 0, i32 3
  %p25 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri24, i32 0, i32 0
  %44 = load i8*, i8** %p25, align 8, !tbaa !133
  %cmp26 = icmp ule i8* %42, %44
  br i1 %cmp26, label %if.then28, label %if.end29

if.then28:                                        ; preds = %lor.lhs.false, %if.then12
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end29:                                         ; preds = %lor.lhs.false
  %45 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri30 = getelementptr inbounds %struct.http_message, %struct.http_message* %45, i32 0, i32 3
  %p31 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri30, i32 0, i32 0
  %46 = load i8*, i8** %p31, align 8, !tbaa !133
  %47 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri32 = getelementptr inbounds %struct.http_message, %struct.http_message* %47, i32 0, i32 3
  %len33 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri32, i32 0, i32 1
  %48 = load i64, i64* %len33, align 8, !tbaa !136
  %call34 = call i8* @memchr(i8* %46, i32 63, i64 %48)
  store i8* %call34, i8** %qs, align 8, !tbaa !3
  %cmp35 = icmp ne i8* %call34, null
  br i1 %cmp35, label %if.then37, label %if.end54

if.then37:                                        ; preds = %if.end29
  %49 = load i8*, i8** %qs, align 8, !tbaa !3
  %add.ptr38 = getelementptr inbounds i8, i8* %49, i64 1
  %50 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %query_string = getelementptr inbounds %struct.http_message, %struct.http_message* %50, i32 0, i32 7
  %p39 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %query_string, i32 0, i32 0
  store i8* %add.ptr38, i8** %p39, align 8, !tbaa !137
  %51 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri40 = getelementptr inbounds %struct.http_message, %struct.http_message* %51, i32 0, i32 3
  %p41 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri40, i32 0, i32 0
  %52 = load i8*, i8** %p41, align 8, !tbaa !133
  %53 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri42 = getelementptr inbounds %struct.http_message, %struct.http_message* %53, i32 0, i32 3
  %len43 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri42, i32 0, i32 1
  %54 = load i64, i64* %len43, align 8, !tbaa !136
  %arrayidx = getelementptr inbounds i8, i8* %52, i64 %54
  %55 = load i8*, i8** %qs, align 8, !tbaa !3
  %add.ptr44 = getelementptr inbounds i8, i8* %55, i64 1
  %sub.ptr.lhs.cast = ptrtoint i8* %arrayidx to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %add.ptr44 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %56 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %query_string45 = getelementptr inbounds %struct.http_message, %struct.http_message* %56, i32 0, i32 7
  %len46 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %query_string45, i32 0, i32 1
  store i64 %sub.ptr.sub, i64* %len46, align 8, !tbaa !138
  %57 = load i8*, i8** %qs, align 8, !tbaa !3
  %58 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri47 = getelementptr inbounds %struct.http_message, %struct.http_message* %58, i32 0, i32 3
  %p48 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri47, i32 0, i32 0
  %59 = load i8*, i8** %p48, align 8, !tbaa !133
  %sub.ptr.lhs.cast49 = ptrtoint i8* %57 to i64
  %sub.ptr.rhs.cast50 = ptrtoint i8* %59 to i64
  %sub.ptr.sub51 = sub i64 %sub.ptr.lhs.cast49, %sub.ptr.rhs.cast50
  %60 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri52 = getelementptr inbounds %struct.http_message, %struct.http_message* %60, i32 0, i32 3
  %len53 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri52, i32 0, i32 1
  store i64 %sub.ptr.sub51, i64* %len53, align 8, !tbaa !136
  br label %if.end54

if.end54:                                         ; preds = %if.then37, %if.end29
  br label %if.end91

if.else:                                          ; preds = %while.end
  %61 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %62 = load i8*, i8** %end, align 8, !tbaa !3
  %63 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %proto55 = getelementptr inbounds %struct.http_message, %struct.http_message* %63, i32 0, i32 4
  %call56 = call i8* @mg_skip(i8* %61, i8* %62, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.39, i32 0, i32 0), %struct.mg_str* %proto55)
  store i8* %call56, i8** %s.addr, align 8, !tbaa !3
  %64 = load i8*, i8** %end, align 8, !tbaa !3
  %65 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %sub.ptr.lhs.cast57 = ptrtoint i8* %64 to i64
  %sub.ptr.rhs.cast58 = ptrtoint i8* %65 to i64
  %sub.ptr.sub59 = sub i64 %sub.ptr.lhs.cast57, %sub.ptr.rhs.cast58
  %cmp60 = icmp slt i64 %sub.ptr.sub59, 4
  br i1 %cmp60, label %if.then77, label %lor.lhs.false62

lor.lhs.false62:                                  ; preds = %if.else
  %66 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %arrayidx63 = getelementptr inbounds i8, i8* %66, i64 0
  %67 = load i8, i8* %arrayidx63, align 1, !tbaa !14
  %conv64 = sext i8 %67 to i32
  %cmp65 = icmp slt i32 %conv64, 48
  br i1 %cmp65, label %if.then77, label %lor.lhs.false67

lor.lhs.false67:                                  ; preds = %lor.lhs.false62
  %68 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %arrayidx68 = getelementptr inbounds i8, i8* %68, i64 0
  %69 = load i8, i8* %arrayidx68, align 1, !tbaa !14
  %conv69 = sext i8 %69 to i32
  %cmp70 = icmp sgt i32 %conv69, 57
  br i1 %cmp70, label %if.then77, label %lor.lhs.false72

lor.lhs.false72:                                  ; preds = %lor.lhs.false67
  %70 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %arrayidx73 = getelementptr inbounds i8, i8* %70, i64 3
  %71 = load i8, i8* %arrayidx73, align 1, !tbaa !14
  %conv74 = sext i8 %71 to i32
  %cmp75 = icmp ne i32 %conv74, 32
  br i1 %cmp75, label %if.then77, label %if.end78

if.then77:                                        ; preds = %lor.lhs.false72, %lor.lhs.false67, %lor.lhs.false62, %if.else
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end78:                                         ; preds = %lor.lhs.false72
  %72 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %call79 = call i32 @atoi(i8* %72)
  %73 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %resp_code = getelementptr inbounds %struct.http_message, %struct.http_message* %73, i32 0, i32 5
  store i32 %call79, i32* %resp_code, align 8, !tbaa !139
  %74 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %resp_code80 = getelementptr inbounds %struct.http_message, %struct.http_message* %74, i32 0, i32 5
  %75 = load i32, i32* %resp_code80, align 8, !tbaa !139
  %cmp81 = icmp slt i32 %75, 100
  br i1 %cmp81, label %if.then87, label %lor.lhs.false83

lor.lhs.false83:                                  ; preds = %if.end78
  %76 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %resp_code84 = getelementptr inbounds %struct.http_message, %struct.http_message* %76, i32 0, i32 5
  %77 = load i32, i32* %resp_code84, align 8, !tbaa !139
  %cmp85 = icmp sge i32 %77, 600
  br i1 %cmp85, label %if.then87, label %if.end88

if.then87:                                        ; preds = %lor.lhs.false83, %if.end78
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end88:                                         ; preds = %lor.lhs.false83
  %78 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %add.ptr89 = getelementptr inbounds i8, i8* %78, i64 4
  store i8* %add.ptr89, i8** %s.addr, align 8, !tbaa !3
  %79 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %80 = load i8*, i8** %end, align 8, !tbaa !3
  %81 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %resp_status_msg = getelementptr inbounds %struct.http_message, %struct.http_message* %81, i32 0, i32 6
  %call90 = call i8* @mg_skip(i8* %79, i8* %80, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), %struct.mg_str* %resp_status_msg)
  store i8* %call90, i8** %s.addr, align 8, !tbaa !3
  br label %if.end91

if.end91:                                         ; preds = %if.end88, %if.end54
  %82 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %83 = load i8*, i8** %end, align 8, !tbaa !3
  %84 = load i32, i32* %len, align 4, !tbaa !15
  %85 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %call92 = call i8* @mg_http_parse_headers(i8* %82, i8* %83, i32 %84, %struct.http_message* %85)
  store i8* %call92, i8** %s.addr, align 8, !tbaa !3
  %86 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %body93 = getelementptr inbounds %struct.http_message, %struct.http_message* %86, i32 0, i32 1
  %len94 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body93, i32 0, i32 1
  %87 = load i64, i64* %len94, align 8, !tbaa !131
  %cmp95 = icmp eq i64 %87, -1
  br i1 %cmp95, label %land.lhs.true, label %if.end114

land.lhs.true:                                    ; preds = %if.end91
  %88 = load i32, i32* %is_req.addr, align 4, !tbaa !15
  %tobool97 = icmp ne i32 %88, 0
  br i1 %tobool97, label %land.lhs.true98, label %if.end114

land.lhs.true98:                                  ; preds = %land.lhs.true
  %89 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %method99 = getelementptr inbounds %struct.http_message, %struct.http_message* %89, i32 0, i32 2
  %call100 = call i32 @mg_vcasecmp(%struct.mg_str* %method99, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0))
  %cmp101 = icmp ne i32 %call100, 0
  br i1 %cmp101, label %land.lhs.true103, label %if.end114

land.lhs.true103:                                 ; preds = %land.lhs.true98
  %90 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %method104 = getelementptr inbounds %struct.http_message, %struct.http_message* %90, i32 0, i32 2
  %call105 = call i32 @mg_vcasecmp(%struct.mg_str* %method104, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.42, i32 0, i32 0))
  %cmp106 = icmp ne i32 %call105, 0
  br i1 %cmp106, label %if.then108, label %if.end114

if.then108:                                       ; preds = %land.lhs.true103
  %91 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %body109 = getelementptr inbounds %struct.http_message, %struct.http_message* %91, i32 0, i32 1
  %len110 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body109, i32 0, i32 1
  store i64 0, i64* %len110, align 8, !tbaa !131
  %92 = load i32, i32* %len, align 4, !tbaa !15
  %conv111 = sext i32 %92 to i64
  %93 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %message112 = getelementptr inbounds %struct.http_message, %struct.http_message* %93, i32 0, i32 0
  %len113 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %message112, i32 0, i32 1
  store i64 %conv111, i64* %len113, align 8, !tbaa !132
  br label %if.end114

if.end114:                                        ; preds = %if.then108, %land.lhs.true103, %land.lhs.true98, %land.lhs.true, %if.end91
  %94 = load i32, i32* %len, align 4, !tbaa !15
  store i32 %94, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end114, %if.then87, %if.then77, %if.then28, %if.then
  %95 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %95) #5
  %96 = bitcast i8** %qs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %96) #5
  %97 = bitcast i8** %end to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %97) #5
  %98 = load i32, i32* %retval, align 4
  ret i32 %98
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_http_get_request_len(i8* %s, i32 %buf_len) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 8
  %buf_len.addr = alloca i32, align 4
  %buf = alloca i8*, align 8
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 8, !tbaa !3
  store i32 %buf_len, i32* %buf_len.addr, align 4, !tbaa !15
  %0 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load i8*, i8** %s.addr, align 8, !tbaa !3
  store i8* %1, i8** %buf, align 8, !tbaa !3
  %2 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  store i32 0, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !tbaa !15
  %4 = load i32, i32* %buf_len.addr, align 4, !tbaa !15
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i8*, i8** %buf, align 8, !tbaa !3
  %6 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %idxprom
  %7 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = zext i8 %7 to i32
  %call = call i32 @isprint(i32 %conv) #19
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %8 = load i8*, i8** %buf, align 8, !tbaa !3
  %9 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom1 = sext i32 %9 to i64
  %arrayidx2 = getelementptr inbounds i8, i8* %8, i64 %idxprom1
  %10 = load i8, i8* %arrayidx2, align 1, !tbaa !14
  %conv3 = zext i8 %10 to i32
  %cmp4 = icmp ne i32 %conv3, 13
  br i1 %cmp4, label %land.lhs.true6, label %if.else

land.lhs.true6:                                   ; preds = %land.lhs.true
  %11 = load i8*, i8** %buf, align 8, !tbaa !3
  %12 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom7 = sext i32 %12 to i64
  %arrayidx8 = getelementptr inbounds i8, i8* %11, i64 %idxprom7
  %13 = load i8, i8* %arrayidx8, align 1, !tbaa !14
  %conv9 = zext i8 %13 to i32
  %cmp10 = icmp ne i32 %conv9, 10
  br i1 %cmp10, label %land.lhs.true12, label %if.else

land.lhs.true12:                                  ; preds = %land.lhs.true6
  %14 = load i8*, i8** %buf, align 8, !tbaa !3
  %15 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom13 = sext i32 %15 to i64
  %arrayidx14 = getelementptr inbounds i8, i8* %14, i64 %idxprom13
  %16 = load i8, i8* %arrayidx14, align 1, !tbaa !14
  %conv15 = zext i8 %16 to i32
  %cmp16 = icmp slt i32 %conv15, 128
  br i1 %cmp16, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true12
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %land.lhs.true12, %land.lhs.true6, %land.lhs.true, %for.body
  %17 = load i8*, i8** %buf, align 8, !tbaa !3
  %18 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom18 = sext i32 %18 to i64
  %arrayidx19 = getelementptr inbounds i8, i8* %17, i64 %idxprom18
  %19 = load i8, i8* %arrayidx19, align 1, !tbaa !14
  %conv20 = zext i8 %19 to i32
  %cmp21 = icmp eq i32 %conv20, 10
  br i1 %cmp21, label %land.lhs.true23, label %if.else35

land.lhs.true23:                                  ; preds = %if.else
  %20 = load i32, i32* %i, align 4, !tbaa !15
  %add = add nsw i32 %20, 1
  %21 = load i32, i32* %buf_len.addr, align 4, !tbaa !15
  %cmp24 = icmp slt i32 %add, %21
  br i1 %cmp24, label %land.lhs.true26, label %if.else35

land.lhs.true26:                                  ; preds = %land.lhs.true23
  %22 = load i8*, i8** %buf, align 8, !tbaa !3
  %23 = load i32, i32* %i, align 4, !tbaa !15
  %add27 = add nsw i32 %23, 1
  %idxprom28 = sext i32 %add27 to i64
  %arrayidx29 = getelementptr inbounds i8, i8* %22, i64 %idxprom28
  %24 = load i8, i8* %arrayidx29, align 1, !tbaa !14
  %conv30 = zext i8 %24 to i32
  %cmp31 = icmp eq i32 %conv30, 10
  br i1 %cmp31, label %if.then33, label %if.else35

if.then33:                                        ; preds = %land.lhs.true26
  %25 = load i32, i32* %i, align 4, !tbaa !15
  %add34 = add nsw i32 %25, 2
  store i32 %add34, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else35:                                        ; preds = %land.lhs.true26, %land.lhs.true23, %if.else
  %26 = load i8*, i8** %buf, align 8, !tbaa !3
  %27 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom36 = sext i32 %27 to i64
  %arrayidx37 = getelementptr inbounds i8, i8* %26, i64 %idxprom36
  %28 = load i8, i8* %arrayidx37, align 1, !tbaa !14
  %conv38 = zext i8 %28 to i32
  %cmp39 = icmp eq i32 %conv38, 10
  br i1 %cmp39, label %land.lhs.true41, label %if.end

land.lhs.true41:                                  ; preds = %if.else35
  %29 = load i32, i32* %i, align 4, !tbaa !15
  %add42 = add nsw i32 %29, 2
  %30 = load i32, i32* %buf_len.addr, align 4, !tbaa !15
  %cmp43 = icmp slt i32 %add42, %30
  br i1 %cmp43, label %land.lhs.true45, label %if.end

land.lhs.true45:                                  ; preds = %land.lhs.true41
  %31 = load i8*, i8** %buf, align 8, !tbaa !3
  %32 = load i32, i32* %i, align 4, !tbaa !15
  %add46 = add nsw i32 %32, 1
  %idxprom47 = sext i32 %add46 to i64
  %arrayidx48 = getelementptr inbounds i8, i8* %31, i64 %idxprom47
  %33 = load i8, i8* %arrayidx48, align 1, !tbaa !14
  %conv49 = zext i8 %33 to i32
  %cmp50 = icmp eq i32 %conv49, 13
  br i1 %cmp50, label %land.lhs.true52, label %if.end

land.lhs.true52:                                  ; preds = %land.lhs.true45
  %34 = load i8*, i8** %buf, align 8, !tbaa !3
  %35 = load i32, i32* %i, align 4, !tbaa !15
  %add53 = add nsw i32 %35, 2
  %idxprom54 = sext i32 %add53 to i64
  %arrayidx55 = getelementptr inbounds i8, i8* %34, i64 %idxprom54
  %36 = load i8, i8* %arrayidx55, align 1, !tbaa !14
  %conv56 = zext i8 %36 to i32
  %cmp57 = icmp eq i32 %conv56, 10
  br i1 %cmp57, label %if.then59, label %if.end

if.then59:                                        ; preds = %land.lhs.true52
  %37 = load i32, i32* %i, align 4, !tbaa !15
  %add60 = add nsw i32 %37, 3
  store i32 %add60, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true52, %land.lhs.true45, %land.lhs.true41, %if.else35
  br label %if.end61

if.end61:                                         ; preds = %if.end
  br label %if.end62

if.end62:                                         ; preds = %if.end61
  br label %for.inc

for.inc:                                          ; preds = %if.end62
  %38 = load i32, i32* %i, align 4, !tbaa !15
  %inc = add nsw i32 %38, 1
  store i32 %inc, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then59, %if.then33, %if.then
  %39 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %39) #5
  %40 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %40) #5
  %41 = load i32, i32* %retval, align 4
  ret i32 %41
}

; Function Attrs: nounwind ssp uwtable
define i8* @mg_skip(i8* %s, i8* %end, i8* %delims, %struct.mg_str* %v) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %delims.addr = alloca i8*, align 8
  %v.addr = alloca %struct.mg_str*, align 8
  store i8* %s, i8** %s.addr, align 8, !tbaa !3
  store i8* %end, i8** %end.addr, align 8, !tbaa !3
  store i8* %delims, i8** %delims.addr, align 8, !tbaa !3
  store %struct.mg_str* %v, %struct.mg_str** %v.addr, align 8, !tbaa !3
  %0 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %1 = load %struct.mg_str*, %struct.mg_str** %v.addr, align 8, !tbaa !3
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %1, i32 0, i32 0
  store i8* %0, i8** %p, align 8, !tbaa !16
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %3 = load i8*, i8** %end.addr, align 8, !tbaa !3
  %cmp = icmp ult i8* %2, %3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %4 = load i8*, i8** %delims.addr, align 8, !tbaa !3
  %5 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %6 = load i8, i8* %5, align 1, !tbaa !14
  %conv = zext i8 %6 to i32
  %call = call i8* @strchr(i8* %4, i32 %conv)
  %cmp1 = icmp eq i8* %call, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %7, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %8 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 8, !tbaa !3
  br label %while.cond

while.end:                                        ; preds = %land.end
  %9 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %10 = load %struct.mg_str*, %struct.mg_str** %v.addr, align 8, !tbaa !3
  %p3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %10, i32 0, i32 0
  %11 = load i8*, i8** %p3, align 8, !tbaa !16
  %sub.ptr.lhs.cast = ptrtoint i8* %9 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %11 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %12 = load %struct.mg_str*, %struct.mg_str** %v.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %12, i32 0, i32 1
  store i64 %sub.ptr.sub, i64* %len, align 8, !tbaa !18
  br label %while.cond4

while.cond4:                                      ; preds = %while.body13, %while.end
  %13 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %14 = load i8*, i8** %end.addr, align 8, !tbaa !3
  %cmp5 = icmp ult i8* %13, %14
  br i1 %cmp5, label %land.rhs7, label %land.end12

land.rhs7:                                        ; preds = %while.cond4
  %15 = load i8*, i8** %delims.addr, align 8, !tbaa !3
  %16 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %17 = load i8, i8* %16, align 1, !tbaa !14
  %conv8 = zext i8 %17 to i32
  %call9 = call i8* @strchr(i8* %15, i32 %conv8)
  %cmp10 = icmp ne i8* %call9, null
  br label %land.end12

land.end12:                                       ; preds = %land.rhs7, %while.cond4
  %18 = phi i1 [ false, %while.cond4 ], [ %cmp10, %land.rhs7 ]
  br i1 %18, label %while.body13, label %while.end15

while.body13:                                     ; preds = %land.end12
  %19 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %incdec.ptr14 = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %incdec.ptr14, i8** %s.addr, align 8, !tbaa !3
  br label %while.cond4

while.end15:                                      ; preds = %land.end12
  %20 = load i8*, i8** %s.addr, align 8, !tbaa !3
  ret i8* %20
}

declare i32 @atoi(i8*) #4

; Function Attrs: nounwind ssp uwtable
define internal i8* @mg_http_parse_headers(i8* %s, i8* %end, i32 %len, %struct.http_message* %req) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %req.addr = alloca %struct.http_message*, align 8
  %i = alloca i32, align 4
  %k = alloca %struct.mg_str*, align 8
  %v = alloca %struct.mg_str*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 8, !tbaa !3
  store i8* %end, i8** %end.addr, align 8, !tbaa !3
  store i32 %len, i32* %len.addr, align 4, !tbaa !15
  store %struct.http_message* %req, %struct.http_message** %req.addr, align 8, !tbaa !3
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  store i32 0, i32* %i, align 4, !tbaa !15
  %1 = load %struct.http_message*, %struct.http_message** %req.addr, align 8, !tbaa !3
  %content_length = getelementptr inbounds %struct.http_message, %struct.http_message* %1, i32 0, i32 10
  store i64 -1, i64* %content_length, align 8, !tbaa !140
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont, %cleanup, %entry
  %2 = load i32, i32* %i, align 4, !tbaa !15
  %cmp = icmp slt i32 %2, 39
  br i1 %cmp, label %while.body, label %while.end48

while.body:                                       ; preds = %while.cond
  %3 = bitcast %struct.mg_str** %k to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  %4 = load %struct.http_message*, %struct.http_message** %req.addr, align 8, !tbaa !3
  %header_names = getelementptr inbounds %struct.http_message, %struct.http_message* %4, i32 0, i32 8
  %5 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_names, i64 0, i64 %idxprom
  store %struct.mg_str* %arrayidx, %struct.mg_str** %k, align 8, !tbaa !3
  %6 = bitcast %struct.mg_str** %v to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #5
  %7 = load %struct.http_message*, %struct.http_message** %req.addr, align 8, !tbaa !3
  %header_values = getelementptr inbounds %struct.http_message, %struct.http_message* %7, i32 0, i32 9
  %8 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom1 = sext i32 %8 to i64
  %arrayidx2 = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_values, i64 0, i64 %idxprom1
  store %struct.mg_str* %arrayidx2, %struct.mg_str** %v, align 8, !tbaa !3
  %9 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %10 = load i8*, i8** %end.addr, align 8, !tbaa !3
  %11 = load %struct.mg_str*, %struct.mg_str** %k, align 8, !tbaa !3
  %call = call i8* @mg_skip(i8* %9, i8* %10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.189, i32 0, i32 0), %struct.mg_str* %11)
  store i8* %call, i8** %s.addr, align 8, !tbaa !3
  %12 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %13 = load i8*, i8** %end.addr, align 8, !tbaa !3
  %14 = load %struct.mg_str*, %struct.mg_str** %v, align 8, !tbaa !3
  %call3 = call i8* @mg_skip(i8* %12, i8* %13, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), %struct.mg_str* %14)
  store i8* %call3, i8** %s.addr, align 8, !tbaa !3
  br label %while.cond4

while.cond4:                                      ; preds = %while.body11, %while.body
  %15 = load %struct.mg_str*, %struct.mg_str** %v, align 8, !tbaa !3
  %len5 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %15, i32 0, i32 1
  %16 = load i64, i64* %len5, align 8, !tbaa !18
  %cmp6 = icmp ugt i64 %16, 0
  br i1 %cmp6, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond4
  %17 = load %struct.mg_str*, %struct.mg_str** %v, align 8, !tbaa !3
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %17, i32 0, i32 0
  %18 = load i8*, i8** %p, align 8, !tbaa !16
  %19 = load %struct.mg_str*, %struct.mg_str** %v, align 8, !tbaa !3
  %len7 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %19, i32 0, i32 1
  %20 = load i64, i64* %len7, align 8, !tbaa !18
  %sub = sub i64 %20, 1
  %arrayidx8 = getelementptr inbounds i8, i8* %18, i64 %sub
  %21 = load i8, i8* %arrayidx8, align 1, !tbaa !14
  %conv = sext i8 %21 to i32
  %cmp9 = icmp eq i32 %conv, 32
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond4
  %22 = phi i1 [ false, %while.cond4 ], [ %cmp9, %land.rhs ]
  br i1 %22, label %while.body11, label %while.end

while.body11:                                     ; preds = %land.end
  %23 = load %struct.mg_str*, %struct.mg_str** %v, align 8, !tbaa !3
  %len12 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %23, i32 0, i32 1
  %24 = load i64, i64* %len12, align 8, !tbaa !18
  %dec = add i64 %24, -1
  store i64 %dec, i64* %len12, align 8, !tbaa !18
  br label %while.cond4

while.end:                                        ; preds = %land.end
  %25 = load %struct.mg_str*, %struct.mg_str** %k, align 8, !tbaa !3
  %len13 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %25, i32 0, i32 1
  %26 = load i64, i64* %len13, align 8, !tbaa !18
  %cmp14 = icmp ne i64 %26, 0
  br i1 %cmp14, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.end
  %27 = load %struct.mg_str*, %struct.mg_str** %v, align 8, !tbaa !3
  %len16 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %27, i32 0, i32 1
  %28 = load i64, i64* %len16, align 8, !tbaa !18
  %cmp17 = icmp eq i64 %28, 0
  br i1 %cmp17, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true, %while.end
  %29 = load %struct.mg_str*, %struct.mg_str** %k, align 8, !tbaa !3
  %len19 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %29, i32 0, i32 1
  %30 = load i64, i64* %len19, align 8, !tbaa !18
  %cmp20 = icmp eq i64 %30, 0
  br i1 %cmp20, label %if.then25, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %31 = load %struct.mg_str*, %struct.mg_str** %v, align 8, !tbaa !3
  %len22 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %31, i32 0, i32 1
  %32 = load i64, i64* %len22, align 8, !tbaa !18
  %cmp23 = icmp eq i64 %32, 0
  br i1 %cmp23, label %if.then25, label %if.end30

if.then25:                                        ; preds = %lor.lhs.false, %if.end
  %33 = load %struct.mg_str*, %struct.mg_str** %v, align 8, !tbaa !3
  %p26 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %33, i32 0, i32 0
  store i8* null, i8** %p26, align 8, !tbaa !16
  %34 = load %struct.mg_str*, %struct.mg_str** %k, align 8, !tbaa !3
  %p27 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %34, i32 0, i32 0
  store i8* null, i8** %p27, align 8, !tbaa !16
  %35 = load %struct.mg_str*, %struct.mg_str** %v, align 8, !tbaa !3
  %len28 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %35, i32 0, i32 1
  store i64 0, i64* %len28, align 8, !tbaa !18
  %36 = load %struct.mg_str*, %struct.mg_str** %k, align 8, !tbaa !3
  %len29 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %36, i32 0, i32 1
  store i64 0, i64* %len29, align 8, !tbaa !18
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end30:                                         ; preds = %lor.lhs.false
  %37 = load %struct.mg_str*, %struct.mg_str** %k, align 8, !tbaa !3
  %p31 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %37, i32 0, i32 0
  %38 = load i8*, i8** %p31, align 8, !tbaa !16
  %call32 = call i32 @mg_ncasecmp(i8* %38, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.190, i32 0, i32 0), i64 14)
  %cmp33 = icmp eq i32 %call32, 0
  br i1 %cmp33, label %if.then35, label %if.end46

if.then35:                                        ; preds = %if.end30
  %39 = load %struct.mg_str*, %struct.mg_str** %v, align 8, !tbaa !3
  %p36 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %39, i32 0, i32 0
  %40 = load i8*, i8** %p36, align 8, !tbaa !16
  %call37 = call i64 @strtoll(i8* %40, i8** null, i32 10)
  %41 = load %struct.http_message*, %struct.http_message** %req.addr, align 8, !tbaa !3
  %body = getelementptr inbounds %struct.http_message, %struct.http_message* %41, i32 0, i32 1
  %len38 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body, i32 0, i32 1
  store i64 %call37, i64* %len38, align 8, !tbaa !131
  %42 = load i32, i32* %len.addr, align 4, !tbaa !15
  %conv39 = sext i32 %42 to i64
  %43 = load %struct.http_message*, %struct.http_message** %req.addr, align 8, !tbaa !3
  %body40 = getelementptr inbounds %struct.http_message, %struct.http_message* %43, i32 0, i32 1
  %len41 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body40, i32 0, i32 1
  %44 = load i64, i64* %len41, align 8, !tbaa !131
  %add = add i64 %conv39, %44
  %45 = load %struct.http_message*, %struct.http_message** %req.addr, align 8, !tbaa !3
  %message = getelementptr inbounds %struct.http_message, %struct.http_message* %45, i32 0, i32 0
  %len42 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %message, i32 0, i32 1
  store i64 %add, i64* %len42, align 8, !tbaa !132
  %46 = load %struct.http_message*, %struct.http_message** %req.addr, align 8, !tbaa !3
  %body43 = getelementptr inbounds %struct.http_message, %struct.http_message* %46, i32 0, i32 1
  %len44 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body43, i32 0, i32 1
  %47 = load i64, i64* %len44, align 8, !tbaa !131
  %48 = load %struct.http_message*, %struct.http_message** %req.addr, align 8, !tbaa !3
  %content_length45 = getelementptr inbounds %struct.http_message, %struct.http_message* %48, i32 0, i32 10
  store i64 %47, i64* %content_length45, align 8, !tbaa !140
  br label %if.end46

if.end46:                                         ; preds = %if.then35, %if.end30
  %49 = load i32, i32* %i, align 4, !tbaa !15
  %inc = add nsw i32 %49, 1
  store i32 %inc, i32* %i, align 4, !tbaa !15
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end46, %if.then25, %if.then
  %50 = bitcast %struct.mg_str** %v to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %50) #5
  %51 = bitcast %struct.mg_str** %k to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %51) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 2, label %while.cond
    i32 3, label %while.end48
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %while.cond

while.end48:                                      ; preds = %cleanup, %while.cond
  %52 = load i8*, i8** %s.addr, align 8, !tbaa !3
  store i32 1, i32* %cleanup.dest.slot, align 4
  %53 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %53) #5
  ret i8* %52

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define %struct.mg_str* @mg_get_http_header(%struct.http_message* %hm, i8* %name) #0 {
entry:
  %retval = alloca %struct.mg_str*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %name.addr = alloca i8*, align 8
  %i = alloca i64, align 8
  %len = alloca i64, align 8
  %h = alloca %struct.mg_str*, align 8
  %v = alloca %struct.mg_str*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  store i8* %name, i8** %name.addr, align 8, !tbaa !3
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = bitcast i64* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %2 = load i8*, i8** %name.addr, align 8, !tbaa !3
  %call = call i64 @strlen(i8* %2)
  store i64 %call, i64* %len, align 8, !tbaa !12
  store i64 0, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %header_names = getelementptr inbounds %struct.http_message, %struct.http_message* %3, i32 0, i32 8
  %4 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_names, i64 0, i64 %4
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %arrayidx, i32 0, i32 1
  %5 = load i64, i64* %len1, align 8, !tbaa !18
  %cmp = icmp ugt i64 %5, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = bitcast %struct.mg_str** %h to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #5
  %7 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %header_names2 = getelementptr inbounds %struct.http_message, %struct.http_message* %7, i32 0, i32 8
  %8 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx3 = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_names2, i64 0, i64 %8
  store %struct.mg_str* %arrayidx3, %struct.mg_str** %h, align 8, !tbaa !3
  %9 = bitcast %struct.mg_str** %v to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #5
  %10 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %header_values = getelementptr inbounds %struct.http_message, %struct.http_message* %10, i32 0, i32 9
  %11 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx4 = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_values, i64 0, i64 %11
  store %struct.mg_str* %arrayidx4, %struct.mg_str** %v, align 8, !tbaa !3
  %12 = load %struct.mg_str*, %struct.mg_str** %h, align 8, !tbaa !3
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %12, i32 0, i32 0
  %13 = load i8*, i8** %p, align 8, !tbaa !16
  %cmp5 = icmp ne i8* %13, null
  br i1 %cmp5, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %14 = load %struct.mg_str*, %struct.mg_str** %h, align 8, !tbaa !3
  %len6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %14, i32 0, i32 1
  %15 = load i64, i64* %len6, align 8, !tbaa !18
  %16 = load i64, i64* %len, align 8, !tbaa !12
  %cmp7 = icmp eq i64 %15, %16
  br i1 %cmp7, label %land.lhs.true8, label %if.end

land.lhs.true8:                                   ; preds = %land.lhs.true
  %17 = load %struct.mg_str*, %struct.mg_str** %h, align 8, !tbaa !3
  %p9 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %17, i32 0, i32 0
  %18 = load i8*, i8** %p9, align 8, !tbaa !16
  %19 = load i8*, i8** %name.addr, align 8, !tbaa !3
  %20 = load i64, i64* %len, align 8, !tbaa !12
  %call10 = call i32 @mg_ncasecmp(i8* %18, i8* %19, i64 %20)
  %tobool = icmp ne i32 %call10, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true8
  %21 = load %struct.mg_str*, %struct.mg_str** %v, align 8, !tbaa !3
  store %struct.mg_str* %21, %struct.mg_str** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true8, %land.lhs.true, %for.body
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %22 = bitcast %struct.mg_str** %v to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %22) #5
  %23 = bitcast %struct.mg_str** %h to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %23) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup12 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc

for.inc:                                          ; preds = %cleanup.cont
  %24 = load i64, i64* %i, align 8, !tbaa !12
  %inc = add i64 %24, 1
  store i64 %inc, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store %struct.mg_str* null, %struct.mg_str** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup12

cleanup12:                                        ; preds = %for.end, %cleanup
  %25 = bitcast i64* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %25) #5
  %26 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %26) #5
  %27 = load %struct.mg_str*, %struct.mg_str** %retval, align 8
  ret %struct.mg_str* %27
}

; Function Attrs: nounwind ssp uwtable
define %struct.mg_http_endpoint* @mg_http_get_endpoint_handler(%struct.mg_connection* %nc, %struct.mg_str* %uri_path) #0 {
entry:
  %retval = alloca %struct.mg_http_endpoint*, align 8
  %nc.addr = alloca %struct.mg_connection*, align 8
  %uri_path.addr = alloca %struct.mg_str*, align 8
  %pd = alloca %struct.mg_http_proto_data*, align 8
  %ret = alloca %struct.mg_http_endpoint*, align 8
  %matched = alloca i32, align 4
  %matched_max = alloca i32, align 4
  %ep = alloca %struct.mg_http_endpoint*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store %struct.mg_str* %uri_path, %struct.mg_str** %uri_path.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_http_proto_data** %pd to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = bitcast %struct.mg_http_endpoint** %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  store %struct.mg_http_endpoint* null, %struct.mg_http_endpoint** %ret, align 8, !tbaa !3
  %2 = bitcast i32* %matched to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  %3 = bitcast i32* %matched_max to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  store i32 0, i32* %matched_max, align 4, !tbaa !15
  %4 = bitcast %struct.mg_http_endpoint** %ep to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #5
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %cmp = icmp eq %struct.mg_connection* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.mg_http_endpoint* null, %struct.mg_http_endpoint** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %call = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %6)
  store %struct.mg_http_proto_data* %call, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %7 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %cmp1 = icmp eq %struct.mg_http_proto_data* %7, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store %struct.mg_http_endpoint* null, %struct.mg_http_endpoint** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end3:                                          ; preds = %if.end
  %8 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %endpoints = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %8, i32 0, i32 4
  %9 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %endpoints, align 8, !tbaa !141
  store %struct.mg_http_endpoint* %9, %struct.mg_http_endpoint** %ep, align 8, !tbaa !3
  br label %while.cond

while.cond:                                       ; preds = %if.end13, %if.end3
  %10 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %ep, align 8, !tbaa !3
  %cmp4 = icmp ne %struct.mg_http_endpoint* %10, null
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %ep, align 8, !tbaa !3
  %uri_pattern = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %11, i32 0, i32 1
  %12 = load %struct.mg_str*, %struct.mg_str** %uri_path.addr, align 8, !tbaa !3
  %13 = bitcast %struct.mg_str* %uri_pattern to { i8*, i64 }*
  %14 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %13, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %13, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %struct.mg_str* %12 to { i8*, i64 }*
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %18, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %18, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %call5 = call i64 @mg_match_prefix_n(i8* %15, i64 %17, i8* %20, i64 %22)
  %conv = trunc i64 %call5 to i32
  store i32 %conv, i32* %matched, align 4, !tbaa !15
  %cmp6 = icmp sgt i32 %conv, 0
  br i1 %cmp6, label %if.then8, label %if.end13

if.then8:                                         ; preds = %while.body
  %23 = load i32, i32* %matched, align 4, !tbaa !15
  %24 = load i32, i32* %matched_max, align 4, !tbaa !15
  %cmp9 = icmp sgt i32 %23, %24
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.then8
  %25 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %ep, align 8, !tbaa !3
  store %struct.mg_http_endpoint* %25, %struct.mg_http_endpoint** %ret, align 8, !tbaa !3
  %26 = load i32, i32* %matched, align 4, !tbaa !15
  store i32 %26, i32* %matched_max, align 4, !tbaa !15
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.then8
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %while.body
  %27 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %ep, align 8, !tbaa !3
  %next = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %27, i32 0, i32 0
  %28 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %next, align 8, !tbaa !148
  store %struct.mg_http_endpoint* %28, %struct.mg_http_endpoint** %ep, align 8, !tbaa !3
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %29 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %ret, align 8, !tbaa !3
  store %struct.mg_http_endpoint* %29, %struct.mg_http_endpoint** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then2, %if.then
  %30 = bitcast %struct.mg_http_endpoint** %ep to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %30) #5
  %31 = bitcast i32* %matched_max to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %31) #5
  %32 = bitcast i32* %matched to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %32) #5
  %33 = bitcast %struct.mg_http_endpoint** %ret to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %33) #5
  %34 = bitcast %struct.mg_http_proto_data** %pd to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %34) #5
  %35 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %retval, align 8
  ret %struct.mg_http_endpoint* %35
}

; Function Attrs: nounwind ssp uwtable
define internal %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %c) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %proto_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 13
  %1 = load i8*, i8** %proto_data, align 8, !tbaa !59
  %2 = bitcast i8* %1 to %struct.mg_http_proto_data*
  ret %struct.mg_http_proto_data* %2
}

; Function Attrs: nounwind ssp uwtable
define void @mg_http_handler(%struct.mg_connection* %nc, i32 %ev, i8* %ev_data) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %ev.addr = alloca i32, align 4
  %ev_data.addr = alloca i8*, align 8
  %shm = alloca %struct.http_message, align 8
  %hm = alloca %struct.http_message*, align 8
  %pd = alloca %struct.mg_http_proto_data*, align 8
  %io = alloca %struct.mbuf*, align 8
  %req_len = alloca i32, align 4
  %is_req = alloca i32, align 4
  %vec = alloca %struct.mg_str*, align 8
  %ev2 = alloca i32, align 4
  %s = alloca %struct.mg_str*, align 8
  %ep = alloca %struct.mg_http_endpoint*, align 8
  %request_done = alloca i32, align 4
  %trigger_ev = alloca i32, align 4
  %addr = alloca [32 x i8], align 16
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i32 %ev, i32* %ev.addr, align 4, !tbaa !15
  store i8* %ev_data, i8** %ev_data.addr, align 8, !tbaa !3
  %0 = bitcast %struct.http_message* %shm to i8*
  call void @llvm.lifetime.start.p0i8(i64 1408, i8* %0) #5
  %1 = bitcast %struct.http_message** %hm to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  store %struct.http_message* %shm, %struct.http_message** %hm, align 8, !tbaa !3
  %2 = bitcast %struct.mg_http_proto_data** %pd to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %call = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %3)
  store %struct.mg_http_proto_data* %call, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %4 = bitcast %struct.mbuf** %io to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #5
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 8
  store %struct.mbuf* %recv_mbuf, %struct.mbuf** %io, align 8, !tbaa !3
  %6 = bitcast i32* %req_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #5
  %7 = bitcast i32* %is_req to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %7) #5
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %listener = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %8, i32 0, i32 2
  %9 = load %struct.mg_connection*, %struct.mg_connection** %listener, align 8, !tbaa !78
  %cmp = icmp ne %struct.mg_connection* %9, null
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %is_req, align 4, !tbaa !15
  %10 = bitcast %struct.mg_str** %vec to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #5
  %11 = load i32, i32* %ev.addr, align 4, !tbaa !15
  %cmp1 = icmp eq i32 %11, 5
  br i1 %cmp1, label %if.then, label %if.end41

if.then:                                          ; preds = %entry
  %12 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %cmp3 = icmp ne %struct.mg_http_proto_data* %12, null
  br i1 %cmp3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %13 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %cgi = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %13, i32 0, i32 1
  %cgi_nc = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %cgi, i32 0, i32 0
  %14 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc, align 8, !tbaa !150
  %cmp5 = icmp ne %struct.mg_connection* %14, null
  br i1 %cmp5, label %if.then7, label %if.end

if.then7:                                         ; preds = %land.lhs.true
  %15 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %cgi8 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %15, i32 0, i32 1
  %cgi_nc9 = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %cgi8, i32 0, i32 0
  %16 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc9, align 8, !tbaa !150
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %16, i32 0, i32 16
  store i8* null, i8** %user_data, align 8, !tbaa !44
  %17 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %cgi10 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %17, i32 0, i32 1
  %cgi_nc11 = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %cgi10, i32 0, i32 0
  %18 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc11, align 8, !tbaa !150
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %18, i32 0, i32 21
  %19 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %19, 2048
  store i64 %or, i64* %flags, align 8, !tbaa !41
  br label %if.end

if.end:                                           ; preds = %if.then7, %land.lhs.true, %if.then
  %20 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %20, i32 0, i32 1
  %21 = load i64, i64* %len, align 8, !tbaa !39
  %cmp12 = icmp ugt i64 %21, 0
  br i1 %cmp12, label %land.lhs.true14, label %if.end27

land.lhs.true14:                                  ; preds = %if.end
  %22 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %22, i32 0, i32 0
  %23 = load i8*, i8** %buf, align 8, !tbaa !40
  %24 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %len15 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %24, i32 0, i32 1
  %25 = load i64, i64* %len15, align 8, !tbaa !39
  %conv16 = trunc i64 %25 to i32
  %26 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %27 = load i32, i32* %is_req, align 4, !tbaa !15
  %call17 = call i32 @mg_parse_http(i8* %23, i32 %conv16, %struct.http_message* %26, i32 %27)
  store i32 %call17, i32* %req_len, align 4, !tbaa !15
  %cmp18 = icmp sgt i32 %call17, 0
  br i1 %cmp18, label %if.then20, label %if.end27

if.then20:                                        ; preds = %land.lhs.true14
  %28 = bitcast i32* %ev2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %28) #5
  %29 = load i32, i32* %is_req, align 4, !tbaa !15
  %tobool = icmp ne i32 %29, 0
  %30 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 100, i32 101
  store i32 %cond, i32* %ev2, align 4, !tbaa !15
  %31 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %len21 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %31, i32 0, i32 1
  %32 = load i64, i64* %len21, align 8, !tbaa !39
  %33 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %message = getelementptr inbounds %struct.http_message, %struct.http_message* %33, i32 0, i32 0
  %len22 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %message, i32 0, i32 1
  store i64 %32, i64* %len22, align 8, !tbaa !132
  %34 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %buf23 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %34, i32 0, i32 0
  %35 = load i8*, i8** %buf23, align 8, !tbaa !40
  %36 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %len24 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %36, i32 0, i32 1
  %37 = load i64, i64* %len24, align 8, !tbaa !39
  %add.ptr = getelementptr inbounds i8, i8* %35, i64 %37
  %38 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %body = getelementptr inbounds %struct.http_message, %struct.http_message* %38, i32 0, i32 1
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body, i32 0, i32 0
  %39 = load i8*, i8** %p, align 8, !tbaa !130
  %sub.ptr.lhs.cast = ptrtoint i8* %add.ptr to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %39 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %40 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %body25 = getelementptr inbounds %struct.http_message, %struct.http_message* %40, i32 0, i32 1
  %len26 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body25, i32 0, i32 1
  store i64 %sub.ptr.sub, i64* %len26, align 8, !tbaa !131
  %41 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %42 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %43 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %44 = load i32, i32* %req_len, align 4, !tbaa !15
  call void @deliver_chunk(%struct.mg_connection* %41, %struct.http_message* %42, %struct.mg_http_proto_data* %43, i32 %44)
  %45 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %46 = load i32, i32* %ev2, align 4, !tbaa !15
  %47 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  call void @mg_http_call_endpoint_handler(%struct.mg_connection* %45, i32 %46, %struct.http_message* %47)
  %48 = bitcast i32* %ev2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %48) #5
  br label %if.end27

if.end27:                                         ; preds = %if.then20, %land.lhs.true14, %if.end
  %49 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %cmp28 = icmp ne %struct.mg_http_proto_data* %49, null
  br i1 %cmp28, label %land.lhs.true30, label %if.end40

land.lhs.true30:                                  ; preds = %if.end27
  %50 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %endpoint_handler = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %50, i32 0, i32 5
  %51 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %endpoint_handler, align 8, !tbaa !151
  %cmp31 = icmp ne void (%struct.mg_connection*, i32, i8*)* %51, null
  br i1 %cmp31, label %land.lhs.true33, label %if.end40

land.lhs.true33:                                  ; preds = %land.lhs.true30
  %52 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %endpoint_handler34 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %52, i32 0, i32 5
  %53 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %endpoint_handler34, align 8, !tbaa !151
  %54 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %54, i32 0, i32 15
  %55 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler, align 8, !tbaa !53
  %cmp35 = icmp ne void (%struct.mg_connection*, i32, i8*)* %53, %55
  br i1 %cmp35, label %if.then37, label %if.end40

if.then37:                                        ; preds = %land.lhs.true33
  %56 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %57 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %endpoint_handler38 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %57, i32 0, i32 5
  %58 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %endpoint_handler38, align 8, !tbaa !151
  %59 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %user_data39 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %59, i32 0, i32 16
  %60 = load i8*, i8** %user_data39, align 8, !tbaa !44
  %61 = load i32, i32* %ev.addr, align 4, !tbaa !15
  call void @mg_call(%struct.mg_connection* %56, void (%struct.mg_connection*, i32, i8*)* %58, i8* %60, i32 %61, i8* null)
  br label %if.end40

if.end40:                                         ; preds = %if.then37, %land.lhs.true33, %land.lhs.true30, %if.end27
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %entry
  %62 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %cmp42 = icmp ne %struct.mg_http_proto_data* %62, null
  br i1 %cmp42, label %land.lhs.true44, label %if.end51

land.lhs.true44:                                  ; preds = %if.end41
  %63 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %63, i32 0, i32 0
  %fp = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file, i32 0, i32 0
  %64 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !tbaa !152
  %cmp45 = icmp ne %struct.__sFILE* %64, null
  br i1 %cmp45, label %if.then47, label %if.end51

if.then47:                                        ; preds = %land.lhs.true44
  %65 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_http_transfer_file_data(%struct.mg_connection* %65)
  %66 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %finished = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %66, i32 0, i32 10
  %67 = load i32, i32* %finished, align 8, !tbaa !153
  %tobool48 = icmp ne i32 %67, 0
  br i1 %tobool48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %if.then47
  br label %if.end50

if.end50:                                         ; preds = %if.then49, %if.then47
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %land.lhs.true44, %if.end41
  %68 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %69 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %handler52 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %69, i32 0, i32 15
  %70 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler52, align 8, !tbaa !53
  %71 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %user_data53 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %71, i32 0, i32 16
  %72 = load i8*, i8** %user_data53, align 8, !tbaa !44
  %73 = load i32, i32* %ev.addr, align 4, !tbaa !15
  %74 = load i8*, i8** %ev_data.addr, align 8, !tbaa !3
  call void @mg_call(%struct.mg_connection* %68, void (%struct.mg_connection*, i32, i8*)* %70, i8* %72, i32 %73, i8* %74)
  %75 = load i32, i32* %ev.addr, align 4, !tbaa !15
  %cmp54 = icmp eq i32 %75, 3
  br i1 %cmp54, label %if.then56, label %if.end282

if.then56:                                        ; preds = %if.end51
  %76 = bitcast %struct.mg_str** %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %76) #5
  br label %again

again:                                            ; preds = %cleanup, %if.then56
  %77 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %buf57 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %77, i32 0, i32 0
  %78 = load i8*, i8** %buf57, align 8, !tbaa !40
  %79 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %len58 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %79, i32 0, i32 1
  %80 = load i64, i64* %len58, align 8, !tbaa !39
  %conv59 = trunc i64 %80 to i32
  %81 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %82 = load i32, i32* %is_req, align 4, !tbaa !15
  %call60 = call i32 @mg_parse_http(i8* %78, i32 %conv59, %struct.http_message* %81, i32 %82)
  store i32 %call60, i32* %req_len, align 4, !tbaa !15
  %83 = load i32, i32* %req_len, align 4, !tbaa !15
  %cmp61 = icmp sgt i32 %83, 0
  br i1 %cmp61, label %land.lhs.true63, label %if.end71

land.lhs.true63:                                  ; preds = %again
  %84 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %cmp64 = icmp eq %struct.mg_http_proto_data* %84, null
  br i1 %cmp64, label %if.then68, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true63
  %85 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %finished66 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %85, i32 0, i32 10
  %86 = load i32, i32* %finished66, align 8, !tbaa !153
  %tobool67 = icmp ne i32 %86, 0
  br i1 %tobool67, label %if.then68, label %if.end71

if.then68:                                        ; preds = %lor.lhs.false, %land.lhs.true63
  %87 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %call69 = call %struct.mg_http_proto_data* @mg_http_create_proto_data(%struct.mg_connection* %87)
  store %struct.mg_http_proto_data* %call69, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %88 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %len70 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %88, i32 0, i32 1
  %89 = load i64, i64* %len70, align 8, !tbaa !39
  %90 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %rcvd = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %90, i32 0, i32 7
  store i64 %89, i64* %rcvd, align 8, !tbaa !154
  br label %if.end71

if.end71:                                         ; preds = %if.then68, %lor.lhs.false, %again
  %91 = load i32, i32* %req_len, align 4, !tbaa !15
  %cmp72 = icmp sgt i32 %91, 0
  br i1 %cmp72, label %land.lhs.true74, label %if.end88

land.lhs.true74:                                  ; preds = %if.end71
  %92 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %call75 = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %92, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.43, i32 0, i32 0))
  store %struct.mg_str* %call75, %struct.mg_str** %s, align 8, !tbaa !3
  %cmp76 = icmp ne %struct.mg_str* %call75, null
  br i1 %cmp76, label %land.lhs.true78, label %if.end88

land.lhs.true78:                                  ; preds = %land.lhs.true74
  %93 = load %struct.mg_str*, %struct.mg_str** %s, align 8, !tbaa !3
  %call79 = call i32 @mg_vcasecmp(%struct.mg_str* %93, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i32 0))
  %cmp80 = icmp eq i32 %call79, 0
  br i1 %cmp80, label %if.then82, label %if.end88

if.then82:                                        ; preds = %land.lhs.true78
  %94 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %95 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %96 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %buf83 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %96, i32 0, i32 0
  %97 = load i8*, i8** %buf83, align 8, !tbaa !40
  %98 = load i32, i32* %req_len, align 4, !tbaa !15
  %idx.ext = sext i32 %98 to i64
  %add.ptr84 = getelementptr inbounds i8, i8* %97, i64 %idx.ext
  %99 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %len85 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %99, i32 0, i32 1
  %100 = load i64, i64* %len85, align 8, !tbaa !39
  %101 = load i32, i32* %req_len, align 4, !tbaa !15
  %conv86 = sext i32 %101 to i64
  %sub = sub i64 %100, %conv86
  %call87 = call i64 @mg_handle_chunked(%struct.mg_connection* %94, %struct.http_message* %95, i8* %add.ptr84, i64 %sub)
  br label %if.end88

if.end88:                                         ; preds = %if.then82, %land.lhs.true78, %land.lhs.true74, %if.end71
  %102 = load i32, i32* %req_len, align 4, !tbaa !15
  %cmp89 = icmp slt i32 %102, 0
  br i1 %cmp89, label %if.then98, label %lor.lhs.false91

lor.lhs.false91:                                  ; preds = %if.end88
  %103 = load i32, i32* %req_len, align 4, !tbaa !15
  %cmp92 = icmp eq i32 %103, 0
  br i1 %cmp92, label %land.lhs.true94, label %if.else

land.lhs.true94:                                  ; preds = %lor.lhs.false91
  %104 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %len95 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %104, i32 0, i32 1
  %105 = load i64, i64* %len95, align 8, !tbaa !39
  %cmp96 = icmp uge i64 %105, 8192
  br i1 %cmp96, label %if.then98, label %if.else

if.then98:                                        ; preds = %land.lhs.true94, %if.end88
  br label %do.body

do.body:                                          ; preds = %if.then98
  %call99 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 6524)
  %tobool100 = icmp ne i32 %call99, 0
  br i1 %tobool100, label %if.then101, label %if.end102

if.then101:                                       ; preds = %do.body
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.45, i32 0, i32 0))
  br label %if.end102

if.end102:                                        ; preds = %if.then101, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end102
  br label %do.end

do.end:                                           ; preds = %do.cond
  %106 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags103 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %106, i32 0, i32 21
  %107 = load i64, i64* %flags103, align 8, !tbaa !41
  %or104 = or i64 %107, 2048
  store i64 %or104, i64* %flags103, align 8, !tbaa !41
  br label %if.end281

if.else:                                          ; preds = %land.lhs.true94, %lor.lhs.false91
  %108 = load i32, i32* %req_len, align 4, !tbaa !15
  %cmp105 = icmp eq i32 %108, 0
  br i1 %cmp105, label %if.then107, label %if.else108

if.then107:                                       ; preds = %if.else
  br label %if.end280

if.else108:                                       ; preds = %if.else
  %109 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %listener109 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %109, i32 0, i32 2
  %110 = load %struct.mg_connection*, %struct.mg_connection** %listener109, align 8, !tbaa !78
  %cmp110 = icmp eq %struct.mg_connection* %110, null
  br i1 %cmp110, label %land.lhs.true112, label %if.else140

land.lhs.true112:                                 ; preds = %if.else108
  %111 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags113 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %111, i32 0, i32 21
  %112 = load i64, i64* %flags113, align 8, !tbaa !41
  %and = and i64 %112, 256
  %tobool114 = icmp ne i64 %and, 0
  br i1 %tobool114, label %if.then115, label %if.else140

if.then115:                                       ; preds = %land.lhs.true112
  br label %do.body116

do.body116:                                       ; preds = %if.then115
  %call117 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 6532)
  %tobool118 = icmp ne i32 %call117, 0
  br i1 %tobool118, label %if.then119, label %if.end120

if.then119:                                       ; preds = %do.body116
  %113 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %114 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %resp_code = getelementptr inbounds %struct.http_message, %struct.http_message* %114, i32 0, i32 5
  %115 = load i32, i32* %resp_code, align 8, !tbaa !139
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.46, i32 0, i32 0), %struct.mg_connection* %113, i32 %115)
  br label %if.end120

if.end120:                                        ; preds = %if.then119, %do.body116
  br label %do.cond121

do.cond121:                                       ; preds = %if.end120
  br label %do.end122

do.end122:                                        ; preds = %do.cond121
  %116 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %resp_code123 = getelementptr inbounds %struct.http_message, %struct.http_message* %116, i32 0, i32 5
  %117 = load i32, i32* %resp_code123, align 8, !tbaa !139
  %cmp124 = icmp eq i32 %117, 101
  br i1 %cmp124, label %land.lhs.true126, label %if.else133

land.lhs.true126:                                 ; preds = %do.end122
  %118 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %call127 = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %118, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.47, i32 0, i32 0))
  %tobool128 = icmp ne %struct.mg_str* %call127, null
  br i1 %tobool128, label %if.then129, label %if.else133

if.then129:                                       ; preds = %land.lhs.true126
  %119 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %120 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %handler130 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %120, i32 0, i32 15
  %121 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler130, align 8, !tbaa !53
  %122 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %user_data131 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %122, i32 0, i32 16
  %123 = load i8*, i8** %user_data131, align 8, !tbaa !44
  %124 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %125 = bitcast %struct.http_message* %124 to i8*
  call void @mg_call(%struct.mg_connection* %119, void (%struct.mg_connection*, i32, i8*)* %121, i8* %123, i32 112, i8* %125)
  %126 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %127 = load i32, i32* %req_len, align 4, !tbaa !15
  %conv132 = sext i32 %127 to i64
  call void @mbuf_remove(%struct.mbuf* %126, i64 %conv132)
  %128 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %proto_handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %128, i32 0, i32 12
  store void (%struct.mg_connection*, i32, i8*)* @mg_ws_handler, void (%struct.mg_connection*, i32, i8*)** %proto_handler, align 8, !tbaa !52
  %129 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %130 = load i8*, i8** %ev_data.addr, align 8, !tbaa !3
  call void @mg_ws_handler(%struct.mg_connection* %129, i32 3, i8* %130)
  br label %if.end139

if.else133:                                       ; preds = %land.lhs.true126, %do.end122
  %131 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %132 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %handler134 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %132, i32 0, i32 15
  %133 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler134, align 8, !tbaa !53
  %134 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %user_data135 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %134, i32 0, i32 16
  %135 = load i8*, i8** %user_data135, align 8, !tbaa !44
  %136 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %137 = bitcast %struct.http_message* %136 to i8*
  call void @mg_call(%struct.mg_connection* %131, void (%struct.mg_connection*, i32, i8*)* %133, i8* %135, i32 112, i8* %137)
  %138 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags136 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %138, i32 0, i32 21
  %139 = load i64, i64* %flags136, align 8, !tbaa !41
  %or137 = or i64 %139, 2048
  store i64 %or137, i64* %flags136, align 8, !tbaa !41
  %140 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %141 = load i32, i32* %req_len, align 4, !tbaa !15
  %conv138 = sext i32 %141 to i64
  call void @mbuf_remove(%struct.mbuf* %140, i64 %conv138)
  br label %if.end139

if.end139:                                        ; preds = %if.else133, %if.then129
  br label %if.end279

if.else140:                                       ; preds = %land.lhs.true112, %if.else108
  %142 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %listener141 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %142, i32 0, i32 2
  %143 = load %struct.mg_connection*, %struct.mg_connection** %listener141, align 8, !tbaa !78
  %cmp142 = icmp ne %struct.mg_connection* %143, null
  br i1 %cmp142, label %land.lhs.true144, label %if.else175

land.lhs.true144:                                 ; preds = %if.else140
  %144 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %call145 = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %144, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.48, i32 0, i32 0))
  store %struct.mg_str* %call145, %struct.mg_str** %vec, align 8, !tbaa !3
  %cmp146 = icmp ne %struct.mg_str* %call145, null
  br i1 %cmp146, label %if.then148, label %if.else175

if.then148:                                       ; preds = %land.lhs.true144
  %145 = bitcast %struct.mg_http_endpoint** %ep to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %145) #5
  %146 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %147 = load i32, i32* %req_len, align 4, !tbaa !15
  %conv149 = sext i32 %147 to i64
  call void @mbuf_remove(%struct.mbuf* %146, i64 %conv149)
  %148 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %proto_handler150 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %148, i32 0, i32 12
  store void (%struct.mg_connection*, i32, i8*)* @mg_ws_handler, void (%struct.mg_connection*, i32, i8*)** %proto_handler150, align 8, !tbaa !52
  %149 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags151 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %149, i32 0, i32 21
  %150 = load i64, i64* %flags151, align 8, !tbaa !41
  %or152 = or i64 %150, 256
  store i64 %or152, i64* %flags151, align 8, !tbaa !41
  %151 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %listener153 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %151, i32 0, i32 2
  %152 = load %struct.mg_connection*, %struct.mg_connection** %listener153, align 8, !tbaa !78
  %153 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %uri = getelementptr inbounds %struct.http_message, %struct.http_message* %153, i32 0, i32 3
  %call154 = call %struct.mg_http_endpoint* @mg_http_get_endpoint_handler(%struct.mg_connection* %152, %struct.mg_str* %uri)
  store %struct.mg_http_endpoint* %call154, %struct.mg_http_endpoint** %ep, align 8, !tbaa !3
  %154 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %ep, align 8, !tbaa !3
  %cmp155 = icmp ne %struct.mg_http_endpoint* %154, null
  br i1 %cmp155, label %if.then157, label %if.end160

if.then157:                                       ; preds = %if.then148
  %155 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %ep, align 8, !tbaa !3
  %handler158 = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %155, i32 0, i32 4
  %156 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler158, align 8, !tbaa !155
  %157 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %handler159 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %157, i32 0, i32 15
  store void (%struct.mg_connection*, i32, i8*)* %156, void (%struct.mg_connection*, i32, i8*)** %handler159, align 8, !tbaa !53
  br label %if.end160

if.end160:                                        ; preds = %if.then157, %if.then148
  %158 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %159 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %handler161 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %159, i32 0, i32 15
  %160 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler161, align 8, !tbaa !53
  %161 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %user_data162 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %161, i32 0, i32 16
  %162 = load i8*, i8** %user_data162, align 8, !tbaa !44
  %163 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %164 = bitcast %struct.http_message* %163 to i8*
  call void @mg_call(%struct.mg_connection* %158, void (%struct.mg_connection*, i32, i8*)* %160, i8* %162, i32 111, i8* %164)
  %165 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags163 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %165, i32 0, i32 21
  %166 = load i64, i64* %flags163, align 8, !tbaa !41
  %and164 = and i64 %166, 3072
  %tobool165 = icmp ne i64 %and164, 0
  br i1 %tobool165, label %if.end174, label %if.then166

if.then166:                                       ; preds = %if.end160
  %167 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %167, i32 0, i32 9
  %len167 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %send_mbuf, i32 0, i32 1
  %168 = load i64, i64* %len167, align 8, !tbaa !43
  %cmp168 = icmp eq i64 %168, 0
  br i1 %cmp168, label %if.then170, label %if.end171

if.then170:                                       ; preds = %if.then166
  %169 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %170 = load %struct.mg_str*, %struct.mg_str** %vec, align 8, !tbaa !3
  %171 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  call void @mg_ws_handshake(%struct.mg_connection* %169, %struct.mg_str* %170, %struct.http_message* %171)
  br label %if.end171

if.end171:                                        ; preds = %if.then170, %if.then166
  %172 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %173 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %handler172 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %173, i32 0, i32 15
  %174 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler172, align 8, !tbaa !53
  %175 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %user_data173 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %175, i32 0, i32 16
  %176 = load i8*, i8** %user_data173, align 8, !tbaa !44
  %177 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %178 = bitcast %struct.http_message* %177 to i8*
  call void @mg_call(%struct.mg_connection* %172, void (%struct.mg_connection*, i32, i8*)* %174, i8* %176, i32 112, i8* %178)
  %179 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %180 = load i8*, i8** %ev_data.addr, align 8, !tbaa !3
  call void @mg_ws_handler(%struct.mg_connection* %179, i32 3, i8* %180)
  br label %if.end174

if.end174:                                        ; preds = %if.end171, %if.end160
  %181 = bitcast %struct.mg_http_endpoint** %ep to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %181) #5
  br label %if.end278

if.else175:                                       ; preds = %land.lhs.true144, %if.else140
  %182 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %183 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %184 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %185 = load i32, i32* %req_len, align 4, !tbaa !15
  call void @deliver_chunk(%struct.mg_connection* %182, %struct.http_message* %183, %struct.mg_http_proto_data* %184, i32 %185)
  %186 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %message176 = getelementptr inbounds %struct.http_message, %struct.http_message* %186, i32 0, i32 0
  %len177 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %message176, i32 0, i32 1
  %187 = load i64, i64* %len177, align 8, !tbaa !132
  %188 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %rcvd178 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %188, i32 0, i32 7
  %189 = load i64, i64* %rcvd178, align 8, !tbaa !154
  %cmp179 = icmp ugt i64 %187, %189
  br i1 %cmp179, label %land.lhs.true181, label %if.else211

land.lhs.true181:                                 ; preds = %if.else175
  %190 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %content_length = getelementptr inbounds %struct.http_message, %struct.http_message* %190, i32 0, i32 10
  %191 = load i64, i64* %content_length, align 8, !tbaa !140
  %cmp182 = icmp eq i64 %191, -1
  br i1 %cmp182, label %if.then188, label %lor.lhs.false184

lor.lhs.false184:                                 ; preds = %land.lhs.true181
  %192 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %body_rcvd = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %192, i32 0, i32 8
  %193 = load i64, i64* %body_rcvd, align 8, !tbaa !156
  %194 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %content_length185 = getelementptr inbounds %struct.http_message, %struct.http_message* %194, i32 0, i32 10
  %195 = load i64, i64* %content_length185, align 8, !tbaa !140
  %cmp186 = icmp ult i64 %193, %195
  br i1 %cmp186, label %if.then188, label %if.else211

if.then188:                                       ; preds = %lor.lhs.false184, %land.lhs.true181
  %196 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf_limit = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %196, i32 0, i32 7
  %197 = load i64, i64* %recv_mbuf_limit, align 8, !tbaa !79
  %cmp189 = icmp ugt i64 %197, 0
  br i1 %cmp189, label %land.lhs.true191, label %if.end210

land.lhs.true191:                                 ; preds = %if.then188
  %198 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf192 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %198, i32 0, i32 8
  %len193 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf192, i32 0, i32 1
  %199 = load i64, i64* %len193, align 8, !tbaa !54
  %200 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf_limit194 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %200, i32 0, i32 7
  %201 = load i64, i64* %recv_mbuf_limit194, align 8, !tbaa !79
  %cmp195 = icmp uge i64 %199, %201
  br i1 %cmp195, label %if.then197, label %if.end210

if.then197:                                       ; preds = %land.lhs.true191
  br label %do.body198

do.body198:                                       ; preds = %if.then197
  %call199 = call i32 @cs_log_print_prefix(i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 6593)
  %tobool200 = icmp ne i32 %call199, 0
  br i1 %tobool200, label %if.then201, label %if.end205

if.then201:                                       ; preds = %do.body198
  %202 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %203 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf202 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %203, i32 0, i32 8
  %len203 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf202, i32 0, i32 1
  %204 = load i64, i64* %len203, align 8, !tbaa !54
  %205 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf_limit204 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %205, i32 0, i32 7
  %206 = load i64, i64* %recv_mbuf_limit204, align 8, !tbaa !79
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i32 0, i32 0), %struct.mg_connection* %202, i64 %204, i64 %206)
  br label %if.end205

if.end205:                                        ; preds = %if.then201, %do.body198
  br label %do.cond206

do.cond206:                                       ; preds = %if.end205
  br label %do.end207

do.end207:                                        ; preds = %do.cond206
  %207 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags208 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %207, i32 0, i32 21
  %208 = load i64, i64* %flags208, align 8, !tbaa !41
  %or209 = or i64 %208, 2048
  store i64 %or209, i64* %flags208, align 8, !tbaa !41
  br label %if.end210

if.end210:                                        ; preds = %do.end207, %land.lhs.true191, %if.then188
  br label %if.end277

if.else211:                                       ; preds = %lor.lhs.false184, %if.else175
  %209 = bitcast i32* %request_done to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %209) #5
  store i32 1, i32* %request_done, align 4, !tbaa !15
  %210 = bitcast i32* %trigger_ev to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %210) #5
  %211 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %listener212 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %211, i32 0, i32 2
  %212 = load %struct.mg_connection*, %struct.mg_connection** %listener212, align 8, !tbaa !78
  %tobool213 = icmp ne %struct.mg_connection* %212, null
  %213 = zext i1 %tobool213 to i64
  %cond214 = select i1 %tobool213, i32 100, i32 101
  store i32 %cond214, i32* %trigger_ev, align 4, !tbaa !15
  %214 = bitcast [32 x i8]* %addr to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %214) #5
  %215 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sa = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %215, i32 0, i32 6
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %addr, i32 0, i32 0
  %call215 = call i32 @mg_sock_addr_to_str(%union.socket_address* %sa, i8* %arraydecay, i64 32, i32 3)
  br label %do.body216

do.body216:                                       ; preds = %if.else211
  %call217 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 6604)
  %tobool218 = icmp ne i32 %call217, 0
  br i1 %tobool218, label %if.then219, label %if.end230

if.then219:                                       ; preds = %do.body216
  %216 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %arraydecay220 = getelementptr inbounds [32 x i8], [32 x i8]* %addr, i32 0, i32 0
  %217 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %method = getelementptr inbounds %struct.http_message, %struct.http_message* %217, i32 0, i32 2
  %len221 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %method, i32 0, i32 1
  %218 = load i64, i64* %len221, align 8, !tbaa !157
  %conv222 = trunc i64 %218 to i32
  %219 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %method223 = getelementptr inbounds %struct.http_message, %struct.http_message* %219, i32 0, i32 2
  %p224 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %method223, i32 0, i32 0
  %220 = load i8*, i8** %p224, align 8, !tbaa !134
  %221 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %uri225 = getelementptr inbounds %struct.http_message, %struct.http_message* %221, i32 0, i32 3
  %len226 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri225, i32 0, i32 1
  %222 = load i64, i64* %len226, align 8, !tbaa !136
  %conv227 = trunc i64 %222 to i32
  %223 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %uri228 = getelementptr inbounds %struct.http_message, %struct.http_message* %223, i32 0, i32 3
  %p229 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri228, i32 0, i32 0
  %224 = load i8*, i8** %p229, align 8, !tbaa !133
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.50, i32 0, i32 0), %struct.mg_connection* %216, i8* %arraydecay220, i32 %conv222, i8* %220, i32 %conv227, i8* %224)
  br label %if.end230

if.end230:                                        ; preds = %if.then219, %do.body216
  br label %do.cond231

do.cond231:                                       ; preds = %if.end230
  br label %do.end232

do.end232:                                        ; preds = %do.cond231
  %225 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %226 = load i32, i32* %trigger_ev, align 4, !tbaa !15
  %227 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  call void @mg_http_call_endpoint_handler(%struct.mg_connection* %225, i32 %226, %struct.http_message* %227)
  %228 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %229 = load i32, i32* %req_len, align 4, !tbaa !15
  %conv233 = sext i32 %229 to i64
  %230 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %body234 = getelementptr inbounds %struct.http_message, %struct.http_message* %230, i32 0, i32 1
  %len235 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body234, i32 0, i32 1
  %231 = load i64, i64* %len235, align 8, !tbaa !131
  %add = add i64 %conv233, %231
  call void @mbuf_remove(%struct.mbuf* %228, i64 %add)
  %232 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %message236 = getelementptr inbounds %struct.http_message, %struct.http_message* %232, i32 0, i32 0
  %len237 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %message236, i32 0, i32 1
  %233 = load i64, i64* %len237, align 8, !tbaa !132
  %234 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %rcvd238 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %234, i32 0, i32 7
  %235 = load i64, i64* %rcvd238, align 8, !tbaa !154
  %sub239 = sub i64 %235, %233
  store i64 %sub239, i64* %rcvd238, align 8, !tbaa !154
  %236 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %body_rcvd240 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %236, i32 0, i32 8
  store i64 0, i64* %body_rcvd240, align 8, !tbaa !156
  %237 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file241 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %237, i32 0, i32 0
  %fp242 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file241, i32 0, i32 0
  %238 = load %struct.__sFILE*, %struct.__sFILE** %fp242, align 8, !tbaa !152
  %cmp243 = icmp ne %struct.__sFILE* %238, null
  br i1 %cmp243, label %if.then245, label %if.end246

if.then245:                                       ; preds = %do.end232
  store i32 0, i32* %request_done, align 4, !tbaa !15
  br label %if.end246

if.end246:                                        ; preds = %if.then245, %do.end232
  %239 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %cgi247 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %239, i32 0, i32 1
  %cgi_nc248 = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %cgi247, i32 0, i32 0
  %240 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc248, align 8, !tbaa !150
  %cmp249 = icmp ne %struct.mg_connection* %240, null
  br i1 %cmp249, label %if.then251, label %if.end252

if.then251:                                       ; preds = %if.end246
  store i32 0, i32* %request_done, align 4, !tbaa !15
  br label %if.end252

if.end252:                                        ; preds = %if.then251, %if.end246
  %241 = load i32, i32* %request_done, align 4, !tbaa !15
  %242 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %finished253 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %242, i32 0, i32 10
  store i32 %241, i32* %finished253, align 8, !tbaa !153
  br label %do.body254

do.body254:                                       ; preds = %if.end252
  %call255 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 6623)
  %tobool256 = icmp ne i32 %call255, 0
  br i1 %tobool256, label %if.then257, label %if.end265

if.then257:                                       ; preds = %do.body254
  %243 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %244 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %finished258 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %244, i32 0, i32 10
  %245 = load i32, i32* %finished258, align 8, !tbaa !153
  %246 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %message259 = getelementptr inbounds %struct.http_message, %struct.http_message* %246, i32 0, i32 0
  %len260 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %message259, i32 0, i32 1
  %247 = load i64, i64* %len260, align 8, !tbaa !132
  %conv261 = trunc i64 %247 to i32
  %248 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %body262 = getelementptr inbounds %struct.http_message, %struct.http_message* %248, i32 0, i32 1
  %len263 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body262, i32 0, i32 1
  %249 = load i64, i64* %len263, align 8, !tbaa !131
  %conv264 = trunc i64 %249 to i32
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.51, i32 0, i32 0), %struct.mg_connection* %243, i32 %245, i32 %conv261, i32 %conv264)
  br label %if.end265

if.end265:                                        ; preds = %if.then257, %do.body254
  br label %do.cond266

do.cond266:                                       ; preds = %if.end265
  br label %do.end267

do.end267:                                        ; preds = %do.cond266
  %250 = load i32, i32* %request_done, align 4, !tbaa !15
  %tobool268 = icmp ne i32 %250, 0
  br i1 %tobool268, label %land.lhs.true269, label %if.end274

land.lhs.true269:                                 ; preds = %do.end267
  %251 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %len270 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %251, i32 0, i32 1
  %252 = load i64, i64* %len270, align 8, !tbaa !39
  %cmp271 = icmp ugt i64 %252, 0
  br i1 %cmp271, label %if.then273, label %if.end274

if.then273:                                       ; preds = %land.lhs.true269
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end274:                                        ; preds = %land.lhs.true269, %do.end267
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end274, %if.then273
  %253 = bitcast [32 x i8]* %addr to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %253) #5
  %254 = bitcast i32* %trigger_ev to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %254) #5
  %255 = bitcast i32* %request_done to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %255) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 2, label %again
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end277

if.end277:                                        ; preds = %cleanup.cont, %if.end210
  br label %if.end278

if.end278:                                        ; preds = %if.end277, %if.end174
  br label %if.end279

if.end279:                                        ; preds = %if.end278, %if.end139
  br label %if.end280

if.end280:                                        ; preds = %if.end279, %if.then107
  br label %if.end281

if.end281:                                        ; preds = %if.end280, %do.end
  %256 = bitcast %struct.mg_str** %s to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %256) #5
  br label %if.end282

if.end282:                                        ; preds = %if.end281, %if.end51
  %257 = bitcast %struct.mg_str** %vec to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %257) #5
  %258 = bitcast i32* %is_req to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %258) #5
  %259 = bitcast i32* %req_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %259) #5
  %260 = bitcast %struct.mbuf** %io to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %260) #5
  %261 = bitcast %struct.mg_http_proto_data** %pd to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %261) #5
  %262 = bitcast %struct.http_message** %hm to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %262) #5
  %263 = bitcast %struct.http_message* %shm to i8*
  call void @llvm.lifetime.end.p0i8(i64 1408, i8* %263) #5
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal void @deliver_chunk(%struct.mg_connection* %c, %struct.http_message* %hm, %struct.mg_http_proto_data* %pd, i32 %req_len) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %pd.addr = alloca %struct.mg_http_proto_data*, align 8
  %req_len.addr = alloca i32, align 4
  %body_remain = alloca i64, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  store %struct.mg_http_proto_data* %pd, %struct.mg_http_proto_data** %pd.addr, align 8, !tbaa !3
  store i32 %req_len, i32* %req_len.addr, align 4, !tbaa !15
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf, i32 0, i32 1
  %1 = load i64, i64* %len, align 8, !tbaa !54
  %2 = load i32, i32* %req_len.addr, align 4, !tbaa !15
  %conv = sext i32 %2 to i64
  %sub = sub i64 %1, %conv
  %3 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %body = getelementptr inbounds %struct.http_message, %struct.http_message* %3, i32 0, i32 1
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body, i32 0, i32 1
  store i64 %sub, i64* %len1, align 8, !tbaa !131
  %4 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %content_length = getelementptr inbounds %struct.http_message, %struct.http_message* %4, i32 0, i32 10
  %5 = load i64, i64* %content_length, align 8, !tbaa !140
  %cmp = icmp ne i64 %5, -1
  br i1 %cmp, label %if.then, label %if.end12

if.then:                                          ; preds = %entry
  %6 = bitcast i64* %body_remain to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #5
  %7 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %content_length3 = getelementptr inbounds %struct.http_message, %struct.http_message* %7, i32 0, i32 10
  %8 = load i64, i64* %content_length3, align 8, !tbaa !140
  %9 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd.addr, align 8, !tbaa !3
  %body_processed = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %9, i32 0, i32 9
  %10 = load i64, i64* %body_processed, align 8, !tbaa !158
  %sub4 = sub i64 %8, %10
  store i64 %sub4, i64* %body_remain, align 8, !tbaa !12
  %11 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %body5 = getelementptr inbounds %struct.http_message, %struct.http_message* %11, i32 0, i32 1
  %len6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body5, i32 0, i32 1
  %12 = load i64, i64* %len6, align 8, !tbaa !131
  %13 = load i64, i64* %body_remain, align 8, !tbaa !12
  %cmp7 = icmp ugt i64 %12, %13
  br i1 %cmp7, label %if.then9, label %if.end

if.then9:                                         ; preds = %if.then
  %14 = load i64, i64* %body_remain, align 8, !tbaa !12
  %15 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %body10 = getelementptr inbounds %struct.http_message, %struct.http_message* %15, i32 0, i32 1
  %len11 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body10, i32 0, i32 1
  store i64 %14, i64* %len11, align 8, !tbaa !131
  br label %if.end

if.end:                                           ; preds = %if.then9, %if.then
  %16 = bitcast i64* %body_remain to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %16) #5
  br label %if.end12

if.end12:                                         ; preds = %if.end, %entry
  %17 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd.addr, align 8, !tbaa !3
  %cmp13 = icmp ne %struct.mg_http_proto_data* %17, null
  br i1 %cmp13, label %if.then15, label %if.end19

if.then15:                                        ; preds = %if.end12
  %18 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd.addr, align 8, !tbaa !3
  %body_processed16 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %18, i32 0, i32 9
  %19 = load i64, i64* %body_processed16, align 8, !tbaa !158
  %20 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %body17 = getelementptr inbounds %struct.http_message, %struct.http_message* %20, i32 0, i32 1
  %len18 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body17, i32 0, i32 1
  %21 = load i64, i64* %len18, align 8, !tbaa !131
  %add = add i64 %19, %21
  %22 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd.addr, align 8, !tbaa !3
  %body_rcvd = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %22, i32 0, i32 8
  store i64 %add, i64* %body_rcvd, align 8, !tbaa !156
  br label %if.end19

if.end19:                                         ; preds = %if.then15, %if.end12
  %23 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %23, i32 0, i32 21
  %24 = load i64, i64* %flags, align 8, !tbaa !41
  %and = and i64 %24, -8193
  store i64 %and, i64* %flags, align 8, !tbaa !41
  %25 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %26 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %26, i32 0, i32 15
  %27 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler, align 8, !tbaa !53
  %28 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %28, i32 0, i32 16
  %29 = load i8*, i8** %user_data, align 8, !tbaa !44
  %30 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %31 = bitcast %struct.http_message* %30 to i8*
  call void @mg_call(%struct.mg_connection* %25, void (%struct.mg_connection*, i32, i8*)* %27, i8* %29, i32 102, i8* %31)
  %32 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %flags20 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %32, i32 0, i32 21
  %33 = load i64, i64* %flags20, align 8, !tbaa !41
  %and21 = and i64 %33, 8192
  %tobool = icmp ne i64 %and21, 0
  br i1 %tobool, label %if.then22, label %if.end32

if.then22:                                        ; preds = %if.end19
  %34 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %body23 = getelementptr inbounds %struct.http_message, %struct.http_message* %34, i32 0, i32 1
  %len24 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body23, i32 0, i32 1
  %35 = load i64, i64* %len24, align 8, !tbaa !131
  %36 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd.addr, align 8, !tbaa !3
  %body_processed25 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %36, i32 0, i32 9
  %37 = load i64, i64* %body_processed25, align 8, !tbaa !158
  %add26 = add i64 %37, %35
  store i64 %add26, i64* %body_processed25, align 8, !tbaa !158
  %38 = load i32, i32* %req_len.addr, align 4, !tbaa !15
  %conv27 = sext i32 %38 to i64
  %39 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %recv_mbuf28 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %39, i32 0, i32 8
  %len29 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf28, i32 0, i32 1
  store i64 %conv27, i64* %len29, align 8, !tbaa !54
  %40 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %body30 = getelementptr inbounds %struct.http_message, %struct.http_message* %40, i32 0, i32 1
  %len31 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body30, i32 0, i32 1
  store i64 0, i64* %len31, align 8, !tbaa !131
  br label %if.end32

if.end32:                                         ; preds = %if.then22, %if.end19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_http_call_endpoint_handler(%struct.mg_connection* %nc, i32 %ev, %struct.http_message* %hm) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %ev.addr = alloca i32, align 4
  %hm.addr = alloca %struct.http_message*, align 8
  %pd = alloca %struct.mg_http_proto_data*, align 8
  %user_data = alloca i8*, align 8
  %ep = alloca %struct.mg_http_endpoint*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i32 %ev, i32* %ev.addr, align 4, !tbaa !15
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_http_proto_data** %pd to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %call = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %1)
  store %struct.mg_http_proto_data* %call, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %2 = bitcast i8** %user_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %user_data1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 16
  %4 = load i8*, i8** %user_data1, align 8, !tbaa !44
  store i8* %4, i8** %user_data, align 8, !tbaa !3
  %5 = load i32, i32* %ev.addr, align 4, !tbaa !15
  %cmp = icmp eq i32 %5, 100
  br i1 %cmp, label %if.then, label %if.end10

if.then:                                          ; preds = %entry
  %6 = bitcast %struct.mg_http_endpoint** %ep to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #5
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %listener = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %7, i32 0, i32 2
  %8 = load %struct.mg_connection*, %struct.mg_connection** %listener, align 8, !tbaa !78
  %9 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri = getelementptr inbounds %struct.http_message, %struct.http_message* %9, i32 0, i32 3
  %call2 = call %struct.mg_http_endpoint* @mg_http_get_endpoint_handler(%struct.mg_connection* %8, %struct.mg_str* %uri)
  store %struct.mg_http_endpoint* %call2, %struct.mg_http_endpoint** %ep, align 8, !tbaa !3
  %10 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %ep, align 8, !tbaa !3
  %cmp3 = icmp ne %struct.mg_http_endpoint* %10, null
  br i1 %cmp3, label %if.then4, label %if.end9

if.then4:                                         ; preds = %if.then
  %11 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %12 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri5 = getelementptr inbounds %struct.http_message, %struct.http_message* %12, i32 0, i32 3
  %13 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %ep, align 8, !tbaa !3
  %auth_domain = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %13, i32 0, i32 2
  %14 = load i8*, i8** %auth_domain, align 8, !tbaa !159
  %15 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %ep, align 8, !tbaa !3
  %auth_file = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %15, i32 0, i32 3
  %16 = load i8*, i8** %auth_file, align 8, !tbaa !160
  %17 = bitcast %struct.mg_str* %uri5 to { i8*, i64 }*
  %18 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %17, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %17, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %call6 = call i32 @mg_http_is_authorized(%struct.http_message* %11, i8* %19, i64 %21, i8* %14, i8* %16, i32 2)
  %tobool = icmp ne i32 %call6, 0
  br i1 %tobool, label %if.end, label %if.then7

if.then7:                                         ; preds = %if.then4
  %22 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %23 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %ep, align 8, !tbaa !3
  %auth_domain8 = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %23, i32 0, i32 2
  %24 = load i8*, i8** %auth_domain8, align 8, !tbaa !159
  call void @mg_http_send_digest_auth_request(%struct.mg_connection* %22, i8* %24)
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %if.then4
  %25 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %ep, align 8, !tbaa !3
  %handler = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %25, i32 0, i32 4
  %26 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler, align 8, !tbaa !155
  %27 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %endpoint_handler = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %27, i32 0, i32 5
  store void (%struct.mg_connection*, i32, i8*)* %26, void (%struct.mg_connection*, i32, i8*)** %endpoint_handler, align 8, !tbaa !151
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end9, %if.then7
  %28 = bitcast %struct.mg_http_endpoint** %ep to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %28) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup15 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end10

if.end10:                                         ; preds = %cleanup.cont, %entry
  %29 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %30 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %endpoint_handler11 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %30, i32 0, i32 5
  %31 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %endpoint_handler11, align 8, !tbaa !151
  %tobool12 = icmp ne void (%struct.mg_connection*, i32, i8*)* %31, null
  br i1 %tobool12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end10
  %32 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %endpoint_handler13 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %32, i32 0, i32 5
  %33 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %endpoint_handler13, align 8, !tbaa !151
  br label %cond.end

cond.false:                                       ; preds = %if.end10
  %34 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %handler14 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %34, i32 0, i32 15
  %35 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler14, align 8, !tbaa !53
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi void (%struct.mg_connection*, i32, i8*)* [ %33, %cond.true ], [ %35, %cond.false ]
  %36 = load i8*, i8** %user_data, align 8, !tbaa !3
  %37 = load i32, i32* %ev.addr, align 4, !tbaa !15
  %38 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %39 = bitcast %struct.http_message* %38 to i8*
  call void @mg_call(%struct.mg_connection* %29, void (%struct.mg_connection*, i32, i8*)* %cond, i8* %36, i32 %37, i8* %39)
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup15

cleanup15:                                        ; preds = %cond.end, %cleanup
  %40 = bitcast i8** %user_data to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %40) #5
  %41 = bitcast %struct.mg_http_proto_data** %pd to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %41) #5
  %cleanup.dest17 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest17, label %unreachable [
    i32 0, label %cleanup.cont18
    i32 1, label %cleanup.cont18
  ]

cleanup.cont18:                                   ; preds = %cleanup15, %cleanup15
  ret void

unreachable:                                      ; preds = %cleanup15
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_http_transfer_file_data(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %pd = alloca %struct.mg_http_proto_data*, align 8
  %buf = alloca [4096 x i8], align 16
  %n = alloca i64, align 8
  %to_read = alloca i64, align 8
  %left = alloca i64, align 8
  %io = alloca %struct.mbuf*, align 8
  %io60 = alloca %struct.mbuf*, align 8
  %to_write = alloca i64, align 8
  %n71 = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_http_proto_data** %pd to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %call = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %1)
  store %struct.mg_http_proto_data* %call, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %2 = bitcast [4096 x i8]* %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* %2) #5
  %3 = bitcast i64* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  store i64 0, i64* %n, align 8, !tbaa !12
  %4 = bitcast i64* %to_read to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #5
  store i64 0, i64* %to_read, align 8, !tbaa !12
  %5 = bitcast i64* %left to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #5
  %6 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %6, i32 0, i32 0
  %cl = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file, i32 0, i32 1
  %7 = load i64, i64* %cl, align 8, !tbaa !161
  %8 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file1 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %8, i32 0, i32 0
  %sent = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file1, i32 0, i32 2
  %9 = load i64, i64* %sent, align 8, !tbaa !162
  %sub = sub nsw i64 %7, %9
  store i64 %sub, i64* %left, align 8, !tbaa !12
  %10 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file2 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %10, i32 0, i32 0
  %type = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file2, i32 0, i32 4
  %11 = load i32, i32* %type, align 4, !tbaa !163
  %cmp = icmp eq i32 %11, 1
  br i1 %cmp, label %if.then, label %if.else54

if.then:                                          ; preds = %entry
  %12 = bitcast %struct.mbuf** %io to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #5
  %13 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %13, i32 0, i32 9
  store %struct.mbuf* %send_mbuf, %struct.mbuf** %io, align 8, !tbaa !3
  %14 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %14, i32 0, i32 1
  %15 = load i64, i64* %len, align 8, !tbaa !39
  %cmp3 = icmp uge i64 %15, 4096
  br i1 %cmp3, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.then
  store i64 0, i64* %to_read, align 8, !tbaa !12
  br label %if.end

if.else:                                          ; preds = %if.then
  %16 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %len5 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %16, i32 0, i32 1
  %17 = load i64, i64* %len5, align 8, !tbaa !39
  %sub6 = sub i64 4096, %17
  store i64 %sub6, i64* %to_read, align 8, !tbaa !12
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  %18 = load i64, i64* %to_read, align 8, !tbaa !12
  %19 = load i64, i64* %left, align 8, !tbaa !12
  %cmp7 = icmp ugt i64 %18, %19
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  %20 = load i64, i64* %left, align 8, !tbaa !12
  store i64 %20, i64* %to_read, align 8, !tbaa !12
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end
  %21 = load i64, i64* %to_read, align 8, !tbaa !12
  %cmp10 = icmp ugt i64 %21, 0
  br i1 %cmp10, label %if.then11, label %if.else27

if.then11:                                        ; preds = %if.end9
  %arraydecay = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i32 0, i32 0
  %22 = load i64, i64* %to_read, align 8, !tbaa !12
  %23 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file12 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %23, i32 0, i32 0
  %fp = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file12, i32 0, i32 0
  %24 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !tbaa !152
  %call13 = call i64 @mg_fread(i8* %arraydecay, i64 1, i64 %22, %struct.__sFILE* %24)
  store i64 %call13, i64* %n, align 8, !tbaa !12
  %25 = load i64, i64* %n, align 8, !tbaa !12
  %cmp14 = icmp ugt i64 %25, 0
  br i1 %cmp14, label %if.then15, label %if.end26

if.then15:                                        ; preds = %if.then11
  %26 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %arraydecay16 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i32 0, i32 0
  %27 = load i64, i64* %n, align 8, !tbaa !12
  %conv = trunc i64 %27 to i32
  call void @mg_send(%struct.mg_connection* %26, i8* %arraydecay16, i32 %conv)
  %28 = load i64, i64* %n, align 8, !tbaa !12
  %29 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file17 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %29, i32 0, i32 0
  %sent18 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file17, i32 0, i32 2
  %30 = load i64, i64* %sent18, align 8, !tbaa !162
  %add = add i64 %30, %28
  store i64 %add, i64* %sent18, align 8, !tbaa !162
  br label %do.body

do.body:                                          ; preds = %if.then15
  %call19 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 6193)
  %tobool = icmp ne i32 %call19, 0
  br i1 %tobool, label %if.then20, label %if.end25

if.then20:                                        ; preds = %do.body
  %31 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %32 = load i64, i64* %n, align 8, !tbaa !12
  %conv21 = trunc i64 %32 to i32
  %33 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file22 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %33, i32 0, i32 0
  %sent23 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file22, i32 0, i32 2
  %34 = load i64, i64* %sent23, align 8, !tbaa !162
  %conv24 = trunc i64 %34 to i32
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.191, i32 0, i32 0), %struct.mg_connection* %31, i32 %conv21, i32 %conv24)
  br label %if.end25

if.end25:                                         ; preds = %if.then20, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end25
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end26

if.end26:                                         ; preds = %do.end, %if.then11
  br label %if.end28

if.else27:                                        ; preds = %if.end9
  br label %if.end28

if.end28:                                         ; preds = %if.else27, %if.end26
  %35 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file29 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %35, i32 0, i32 0
  %sent30 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file29, i32 0, i32 2
  %36 = load i64, i64* %sent30, align 8, !tbaa !162
  %37 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file31 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %37, i32 0, i32 0
  %cl32 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file31, i32 0, i32 1
  %38 = load i64, i64* %cl32, align 8, !tbaa !161
  %cmp33 = icmp sge i64 %36, %38
  br i1 %cmp33, label %if.then35, label %if.end53

if.then35:                                        ; preds = %if.end28
  br label %do.body36

do.body36:                                        ; preds = %if.then35
  %call37 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 6200)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.then39, label %if.end44

if.then39:                                        ; preds = %do.body36
  %39 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %40 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file40 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %40, i32 0, i32 0
  %sent41 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file40, i32 0, i32 2
  %41 = load i64, i64* %sent41, align 8, !tbaa !162
  %conv42 = trunc i64 %41 to i32
  %42 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file43 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %42, i32 0, i32 0
  %keepalive = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file43, i32 0, i32 3
  %43 = load i32, i32* %keepalive, align 8, !tbaa !164
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.192, i32 0, i32 0), %struct.mg_connection* %39, i32 %conv42, i32 %43)
  br label %if.end44

if.end44:                                         ; preds = %if.then39, %do.body36
  br label %do.cond45

do.cond45:                                        ; preds = %if.end44
  br label %do.end46

do.end46:                                         ; preds = %do.cond45
  %44 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file47 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %44, i32 0, i32 0
  %keepalive48 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file47, i32 0, i32 3
  %45 = load i32, i32* %keepalive48, align 8, !tbaa !164
  %tobool49 = icmp ne i32 %45, 0
  br i1 %tobool49, label %if.end51, label %if.then50

if.then50:                                        ; preds = %do.end46
  %46 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %46, i32 0, i32 21
  %47 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %47, 1024
  store i64 %or, i64* %flags, align 8, !tbaa !41
  br label %if.end51

if.end51:                                         ; preds = %if.then50, %do.end46
  %48 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file52 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %48, i32 0, i32 0
  call void @mg_http_free_proto_data_file(%struct.mg_http_proto_data_file* %file52)
  %49 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %finished = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %49, i32 0, i32 10
  store i32 1, i32* %finished, align 8, !tbaa !153
  br label %if.end53

if.end53:                                         ; preds = %if.end51, %if.end28
  %50 = bitcast %struct.mbuf** %io to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %50) #5
  br label %if.end119

if.else54:                                        ; preds = %entry
  %51 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file55 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %51, i32 0, i32 0
  %type56 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file55, i32 0, i32 4
  %52 = load i32, i32* %type56, align 4, !tbaa !163
  %cmp57 = icmp eq i32 %52, 2
  br i1 %cmp57, label %if.then59, label %if.else102

if.then59:                                        ; preds = %if.else54
  %53 = bitcast %struct.mbuf** %io60 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %53) #5
  %54 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %54, i32 0, i32 8
  store %struct.mbuf* %recv_mbuf, %struct.mbuf** %io60, align 8, !tbaa !3
  %55 = bitcast i64* %to_write to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %55) #5
  %56 = load i64, i64* %left, align 8, !tbaa !12
  %cmp61 = icmp ule i64 %56, 0
  br i1 %cmp61, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then59
  br label %cond.end69

cond.false:                                       ; preds = %if.then59
  %57 = load i64, i64* %left, align 8, !tbaa !12
  %58 = load %struct.mbuf*, %struct.mbuf** %io60, align 8, !tbaa !3
  %len63 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %58, i32 0, i32 1
  %59 = load i64, i64* %len63, align 8, !tbaa !39
  %cmp64 = icmp ult i64 %57, %59
  br i1 %cmp64, label %cond.true66, label %cond.false67

cond.true66:                                      ; preds = %cond.false
  %60 = load i64, i64* %left, align 8, !tbaa !12
  br label %cond.end

cond.false67:                                     ; preds = %cond.false
  %61 = load %struct.mbuf*, %struct.mbuf** %io60, align 8, !tbaa !3
  %len68 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %61, i32 0, i32 1
  %62 = load i64, i64* %len68, align 8, !tbaa !39
  br label %cond.end

cond.end:                                         ; preds = %cond.false67, %cond.true66
  %cond = phi i64 [ %60, %cond.true66 ], [ %62, %cond.false67 ]
  br label %cond.end69

cond.end69:                                       ; preds = %cond.end, %cond.true
  %cond70 = phi i64 [ 0, %cond.true ], [ %cond, %cond.end ]
  store i64 %cond70, i64* %to_write, align 8, !tbaa !12
  %63 = bitcast i64* %n71 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %63) #5
  %64 = load %struct.mbuf*, %struct.mbuf** %io60, align 8, !tbaa !3
  %buf72 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %64, i32 0, i32 0
  %65 = load i8*, i8** %buf72, align 8, !tbaa !40
  %66 = load i64, i64* %to_write, align 8, !tbaa !12
  %67 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file73 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %67, i32 0, i32 0
  %fp74 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file73, i32 0, i32 0
  %68 = load %struct.__sFILE*, %struct.__sFILE** %fp74, align 8, !tbaa !152
  %call75 = call i64 @mg_fwrite(i8* %65, i64 1, i64 %66, %struct.__sFILE* %68)
  store i64 %call75, i64* %n71, align 8, !tbaa !12
  %69 = load i64, i64* %n71, align 8, !tbaa !12
  %cmp76 = icmp ugt i64 %69, 0
  br i1 %cmp76, label %if.then78, label %if.end82

if.then78:                                        ; preds = %cond.end69
  %70 = load %struct.mbuf*, %struct.mbuf** %io60, align 8, !tbaa !3
  %71 = load i64, i64* %n71, align 8, !tbaa !12
  call void @mbuf_remove(%struct.mbuf* %70, i64 %71)
  %72 = load i64, i64* %n71, align 8, !tbaa !12
  %73 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file79 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %73, i32 0, i32 0
  %sent80 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file79, i32 0, i32 2
  %74 = load i64, i64* %sent80, align 8, !tbaa !162
  %add81 = add i64 %74, %72
  store i64 %add81, i64* %sent80, align 8, !tbaa !162
  br label %if.end82

if.end82:                                         ; preds = %if.then78, %cond.end69
  %75 = load i64, i64* %n71, align 8, !tbaa !12
  %cmp83 = icmp eq i64 %75, 0
  br i1 %cmp83, label %if.then91, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end82
  %76 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file85 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %76, i32 0, i32 0
  %sent86 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file85, i32 0, i32 2
  %77 = load i64, i64* %sent86, align 8, !tbaa !162
  %78 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file87 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %78, i32 0, i32 0
  %cl88 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file87, i32 0, i32 1
  %79 = load i64, i64* %cl88, align 8, !tbaa !161
  %cmp89 = icmp sge i64 %77, %79
  br i1 %cmp89, label %if.then91, label %if.end101

if.then91:                                        ; preds = %lor.lhs.false, %if.end82
  %80 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file92 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %80, i32 0, i32 0
  %keepalive93 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file92, i32 0, i32 3
  %81 = load i32, i32* %keepalive93, align 8, !tbaa !164
  %tobool94 = icmp ne i32 %81, 0
  br i1 %tobool94, label %if.end98, label %if.then95

if.then95:                                        ; preds = %if.then91
  %82 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags96 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %82, i32 0, i32 21
  %83 = load i64, i64* %flags96, align 8, !tbaa !41
  %or97 = or i64 %83, 1024
  store i64 %or97, i64* %flags96, align 8, !tbaa !41
  br label %if.end98

if.end98:                                         ; preds = %if.then95, %if.then91
  %84 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file99 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %84, i32 0, i32 0
  call void @mg_http_free_proto_data_file(%struct.mg_http_proto_data_file* %file99)
  %85 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %finished100 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %85, i32 0, i32 10
  store i32 1, i32* %finished100, align 8, !tbaa !153
  br label %if.end101

if.end101:                                        ; preds = %if.end98, %lor.lhs.false
  %86 = bitcast i64* %n71 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %86) #5
  %87 = bitcast i64* %to_write to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %87) #5
  %88 = bitcast %struct.mbuf** %io60 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %88) #5
  br label %if.end118

if.else102:                                       ; preds = %if.else54
  %89 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %cgi = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %89, i32 0, i32 1
  %cgi_nc = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %cgi, i32 0, i32 0
  %90 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc, align 8, !tbaa !150
  %cmp103 = icmp ne %struct.mg_connection* %90, null
  br i1 %cmp103, label %if.then105, label %if.end117

if.then105:                                       ; preds = %if.else102
  %91 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %cgi106 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %91, i32 0, i32 1
  %cgi_nc107 = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %cgi106, i32 0, i32 0
  %92 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc107, align 8, !tbaa !150
  %cmp108 = icmp ne %struct.mg_connection* %92, null
  br i1 %cmp108, label %if.then110, label %if.else113

if.then110:                                       ; preds = %if.then105
  %93 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %94 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %cgi111 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %94, i32 0, i32 1
  %cgi_nc112 = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %cgi111, i32 0, i32 0
  %95 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc112, align 8, !tbaa !150
  call void @mg_forward(%struct.mg_connection* %93, %struct.mg_connection* %95)
  br label %if.end116

if.else113:                                       ; preds = %if.then105
  %96 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags114 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %96, i32 0, i32 21
  %97 = load i64, i64* %flags114, align 8, !tbaa !41
  %or115 = or i64 %97, 1024
  store i64 %or115, i64* %flags114, align 8, !tbaa !41
  br label %if.end116

if.end116:                                        ; preds = %if.else113, %if.then110
  br label %if.end117

if.end117:                                        ; preds = %if.end116, %if.else102
  br label %if.end118

if.end118:                                        ; preds = %if.end117, %if.end101
  br label %if.end119

if.end119:                                        ; preds = %if.end118, %if.end53
  %98 = bitcast i64* %left to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %98) #5
  %99 = bitcast i64* %to_read to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %99) #5
  %100 = bitcast i64* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %100) #5
  %101 = bitcast [4096 x i8]* %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* %101) #5
  %102 = bitcast %struct.mg_http_proto_data** %pd to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %102) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal %struct.mg_http_proto_data* @mg_http_create_proto_data(%struct.mg_connection* %c) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %pd = alloca i8*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %proto_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 13
  %1 = load i8*, i8** %proto_data, align 8, !tbaa !59
  %cmp = icmp ne i8* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = bitcast i8** %pd to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  %3 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %proto_data1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 13
  %4 = load i8*, i8** %proto_data1, align 8, !tbaa !59
  store i8* %4, i8** %pd, align 8, !tbaa !3
  %5 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %proto_data2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 13
  store i8* null, i8** %proto_data2, align 8, !tbaa !59
  %6 = load i8*, i8** %pd, align 8, !tbaa !3
  call void @mg_http_proto_data_destructor(i8* %6)
  %7 = bitcast i8** %pd to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %7) #5
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call = call i8* @calloc(i64 1, i64 112) #20
  %8 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %proto_data3 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %8, i32 0, i32 13
  store i8* %call, i8** %proto_data3, align 8, !tbaa !59
  %9 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %proto_data_destructor = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %9, i32 0, i32 14
  store void (i8*)* @mg_http_proto_data_destructor, void (i8*)** %proto_data_destructor, align 8, !tbaa !60
  %10 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %proto_data4 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 13
  %11 = load i8*, i8** %proto_data4, align 8, !tbaa !59
  %12 = bitcast i8* %11 to %struct.mg_http_proto_data*
  ret %struct.mg_http_proto_data* %12
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @mg_handle_chunked(%struct.mg_connection* %nc, %struct.http_message* %hm, i8* %buf, i64 %blen) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %buf.addr = alloca i8*, align 8
  %blen.addr = alloca i64, align 8
  %pd = alloca %struct.mg_http_proto_data*, align 8
  %data = alloca i8*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %data_len = alloca i64, align 8
  %body_len = alloca i64, align 8
  %zero_chunk_received = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %blen, i64* %blen.addr, align 8, !tbaa !12
  %0 = bitcast %struct.mg_http_proto_data** %pd to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %call = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %1)
  store %struct.mg_http_proto_data* %call, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %2 = bitcast i8** %data to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  %3 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  %4 = bitcast i64* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #5
  %5 = bitcast i64* %data_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #5
  %6 = bitcast i64* %body_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #5
  %7 = bitcast i64* %zero_chunk_received to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #5
  store i64 0, i64* %zero_chunk_received, align 8, !tbaa !12
  %8 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %chunk = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %8, i32 0, i32 3
  %body_len1 = getelementptr inbounds %struct.mg_http_proto_data_chuncked, %struct.mg_http_proto_data_chuncked* %chunk, i32 0, i32 0
  %9 = load i64, i64* %body_len1, align 8, !tbaa !165
  store i64 %9, i64* %body_len, align 8, !tbaa !12
  %10 = load i64, i64* %blen.addr, align 8, !tbaa !12
  %11 = load i64, i64* %body_len, align 8, !tbaa !12
  %cmp = icmp uge i64 %10, %11
  %lnot = xor i1 %cmp, true
  %lnot.ext = zext i1 %lnot to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.mg_handle_chunked, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 6282, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.193, i32 0, i32 0)) #17
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %12
  %13 = load i64, i64* %body_len, align 8, !tbaa !12
  store i64 %13, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %14 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %15 = load i64, i64* %i, align 8, !tbaa !12
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 %15
  %16 = load i64, i64* %blen.addr, align 8, !tbaa !12
  %17 = load i64, i64* %i, align 8, !tbaa !12
  %sub = sub i64 %16, %17
  %call2 = call i64 @mg_http_parse_chunk(i8* %add.ptr, i64 %sub, i8** %data, i64* %data_len)
  store i64 %call2, i64* %n, align 8, !tbaa !12
  %cmp3 = icmp ugt i64 %call2, 0
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %19 = load i64, i64* %body_len, align 8, !tbaa !12
  %add.ptr5 = getelementptr inbounds i8, i8* %18, i64 %19
  %20 = load i8*, i8** %data, align 8, !tbaa !3
  %21 = load i64, i64* %data_len, align 8, !tbaa !12
  %22 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %23 = load i64, i64* %body_len, align 8, !tbaa !12
  %add.ptr6 = getelementptr inbounds i8, i8* %22, i64 %23
  %24 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr6, i1 false, i1 true)
  %call7 = call i8* @__memmove_chk(i8* %add.ptr5, i8* %20, i64 %21, i64 %24) #5
  %25 = load i64, i64* %data_len, align 8, !tbaa !12
  %26 = load i64, i64* %body_len, align 8, !tbaa !12
  %add = add i64 %26, %25
  store i64 %add, i64* %body_len, align 8, !tbaa !12
  %27 = load i64, i64* %body_len, align 8, !tbaa !12
  %28 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %body = getelementptr inbounds %struct.http_message, %struct.http_message* %28, i32 0, i32 1
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body, i32 0, i32 1
  store i64 %27, i64* %len, align 8, !tbaa !131
  %29 = load i64, i64* %data_len, align 8, !tbaa !12
  %cmp8 = icmp eq i64 %29, 0
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i64 1, i64* %zero_chunk_received, align 8, !tbaa !12
  %30 = load i64, i64* %n, align 8, !tbaa !12
  %31 = load i64, i64* %i, align 8, !tbaa !12
  %add10 = add i64 %31, %30
  store i64 %add10, i64* %i, align 8, !tbaa !12
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %32 = load i64, i64* %n, align 8, !tbaa !12
  %33 = load i64, i64* %i, align 8, !tbaa !12
  %add11 = add i64 %33, %32
  store i64 %add11, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %34 = load i64, i64* %i, align 8, !tbaa !12
  %35 = load i64, i64* %body_len, align 8, !tbaa !12
  %cmp12 = icmp ugt i64 %34, %35
  br i1 %cmp12, label %if.then14, label %if.end72

if.then14:                                        ; preds = %for.end
  %36 = load i64, i64* %i, align 8, !tbaa !12
  %37 = load i64, i64* %blen.addr, align 8, !tbaa !12
  %cmp15 = icmp ule i64 %36, %37
  %lnot17 = xor i1 %cmp15, true
  %lnot.ext18 = zext i1 %lnot17 to i32
  %conv19 = sext i32 %lnot.ext18 to i64
  %expval20 = call i64 @llvm.expect.i64(i64 %conv19, i64 0)
  %tobool21 = icmp ne i64 %expval20, 0
  br i1 %tobool21, label %cond.true22, label %cond.false23

cond.true22:                                      ; preds = %if.then14
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.mg_handle_chunked, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 6302, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.194, i32 0, i32 0)) #17
  unreachable
                                                  ; No predecessors!
  br label %cond.end24

cond.false23:                                     ; preds = %if.then14
  br label %cond.end24

cond.end24:                                       ; preds = %cond.false23, %38
  %39 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %40 = load i64, i64* %body_len, align 8, !tbaa !12
  %add.ptr25 = getelementptr inbounds i8, i8* %39, i64 %40
  %41 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %42 = load i64, i64* %i, align 8, !tbaa !12
  %add.ptr26 = getelementptr inbounds i8, i8* %41, i64 %42
  %43 = load i64, i64* %blen.addr, align 8, !tbaa !12
  %44 = load i64, i64* %i, align 8, !tbaa !12
  %sub27 = sub i64 %43, %44
  %45 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %46 = load i64, i64* %body_len, align 8, !tbaa !12
  %add.ptr28 = getelementptr inbounds i8, i8* %45, i64 %46
  %47 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr28, i1 false, i1 true)
  %call29 = call i8* @__memmove_chk(i8* %add.ptr25, i8* %add.ptr26, i64 %sub27, i64 %47) #5
  %48 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %49 = load i64, i64* %body_len, align 8, !tbaa !12
  %add.ptr30 = getelementptr inbounds i8, i8* %48, i64 %49
  %50 = load i64, i64* %blen.addr, align 8, !tbaa !12
  %add.ptr31 = getelementptr inbounds i8, i8* %add.ptr30, i64 %50
  %51 = load i64, i64* %i, align 8, !tbaa !12
  %idx.neg = sub i64 0, %51
  %add.ptr32 = getelementptr inbounds i8, i8* %add.ptr31, i64 %idx.neg
  %52 = load i64, i64* %i, align 8, !tbaa !12
  %53 = load i64, i64* %body_len, align 8, !tbaa !12
  %sub33 = sub i64 %52, %53
  %54 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %55 = load i64, i64* %body_len, align 8, !tbaa !12
  %add.ptr34 = getelementptr inbounds i8, i8* %54, i64 %55
  %56 = load i64, i64* %blen.addr, align 8, !tbaa !12
  %add.ptr35 = getelementptr inbounds i8, i8* %add.ptr34, i64 %56
  %57 = load i64, i64* %i, align 8, !tbaa !12
  %idx.neg36 = sub i64 0, %57
  %add.ptr37 = getelementptr inbounds i8, i8* %add.ptr35, i64 %idx.neg36
  %58 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr37, i1 false, i1 true)
  %call38 = call i8* @__memset_chk(i8* %add.ptr32, i32 0, i64 %sub33, i64 %58) #5
  %59 = load i64, i64* %i, align 8, !tbaa !12
  %60 = load i64, i64* %body_len, align 8, !tbaa !12
  %sub39 = sub i64 %59, %60
  %61 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %61, i32 0, i32 8
  %len40 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf, i32 0, i32 1
  %62 = load i64, i64* %len40, align 8, !tbaa !54
  %sub41 = sub i64 %62, %sub39
  store i64 %sub41, i64* %len40, align 8, !tbaa !54
  %63 = load i64, i64* %body_len, align 8, !tbaa !12
  %64 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %chunk42 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %64, i32 0, i32 3
  %body_len43 = getelementptr inbounds %struct.mg_http_proto_data_chuncked, %struct.mg_http_proto_data_chuncked* %chunk42, i32 0, i32 0
  store i64 %63, i64* %body_len43, align 8, !tbaa !165
  %65 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %65, i32 0, i32 21
  %66 = load i64, i64* %flags, align 8, !tbaa !41
  %and = and i64 %66, -8193
  store i64 %and, i64* %flags, align 8, !tbaa !41
  %67 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %68 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %68, i32 0, i32 15
  %69 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler, align 8, !tbaa !53
  %70 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %70, i32 0, i32 16
  %71 = load i8*, i8** %user_data, align 8, !tbaa !44
  %72 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %73 = bitcast %struct.http_message* %72 to i8*
  call void @mg_call(%struct.mg_connection* %67, void (%struct.mg_connection*, i32, i8*)* %69, i8* %71, i32 102, i8* %73)
  %74 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags44 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %74, i32 0, i32 21
  %75 = load i64, i64* %flags44, align 8, !tbaa !41
  %and45 = and i64 %75, 8192
  %tobool46 = icmp ne i64 %and45, 0
  br i1 %tobool46, label %if.then47, label %if.end59

if.then47:                                        ; preds = %cond.end24
  %76 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %77 = load i64, i64* %body_len, align 8, !tbaa !12
  %78 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %79 = call i64 @llvm.objectsize.i64.p0i8(i8* %78, i1 false, i1 true)
  %call48 = call i8* @__memset_chk(i8* %76, i32 0, i64 %77, i64 %79) #5
  %80 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %81 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %82 = load i64, i64* %body_len, align 8, !tbaa !12
  %add.ptr49 = getelementptr inbounds i8, i8* %81, i64 %82
  %83 = load i64, i64* %blen.addr, align 8, !tbaa !12
  %84 = load i64, i64* %i, align 8, !tbaa !12
  %sub50 = sub i64 %83, %84
  %85 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %86 = call i64 @llvm.objectsize.i64.p0i8(i8* %85, i1 false, i1 true)
  %call51 = call i8* @__memmove_chk(i8* %80, i8* %add.ptr49, i64 %sub50, i64 %86) #5
  %87 = load i64, i64* %body_len, align 8, !tbaa !12
  %88 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf52 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %88, i32 0, i32 8
  %len53 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf52, i32 0, i32 1
  %89 = load i64, i64* %len53, align 8, !tbaa !54
  %sub54 = sub i64 %89, %87
  store i64 %sub54, i64* %len53, align 8, !tbaa !54
  %90 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %body55 = getelementptr inbounds %struct.http_message, %struct.http_message* %90, i32 0, i32 1
  %len56 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body55, i32 0, i32 1
  store i64 0, i64* %len56, align 8, !tbaa !131
  %91 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %chunk57 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %91, i32 0, i32 3
  %body_len58 = getelementptr inbounds %struct.mg_http_proto_data_chuncked, %struct.mg_http_proto_data_chuncked* %chunk57, i32 0, i32 0
  store i64 0, i64* %body_len58, align 8, !tbaa !165
  br label %if.end59

if.end59:                                         ; preds = %if.then47, %cond.end24
  %92 = load i64, i64* %zero_chunk_received, align 8, !tbaa !12
  %tobool60 = icmp ne i64 %92, 0
  br i1 %tobool60, label %if.then61, label %if.end71

if.then61:                                        ; preds = %if.end59
  %93 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %chunk62 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %93, i32 0, i32 3
  %body_len63 = getelementptr inbounds %struct.mg_http_proto_data_chuncked, %struct.mg_http_proto_data_chuncked* %chunk62, i32 0, i32 0
  %94 = load i64, i64* %body_len63, align 8, !tbaa !165
  %95 = load i64, i64* %blen.addr, align 8, !tbaa !12
  %add64 = add i64 %94, %95
  %96 = load i64, i64* %i, align 8, !tbaa !12
  %sub65 = sub i64 %add64, %96
  %97 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %body66 = getelementptr inbounds %struct.http_message, %struct.http_message* %97, i32 0, i32 1
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body66, i32 0, i32 0
  %98 = load i8*, i8** %p, align 8, !tbaa !130
  %99 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %message = getelementptr inbounds %struct.http_message, %struct.http_message* %99, i32 0, i32 0
  %p67 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %message, i32 0, i32 0
  %100 = load i8*, i8** %p67, align 8, !tbaa !128
  %sub.ptr.lhs.cast = ptrtoint i8* %98 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %100 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %add68 = add i64 %sub65, %sub.ptr.sub
  %101 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %message69 = getelementptr inbounds %struct.http_message, %struct.http_message* %101, i32 0, i32 0
  %len70 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %message69, i32 0, i32 1
  store i64 %add68, i64* %len70, align 8, !tbaa !132
  br label %if.end71

if.end71:                                         ; preds = %if.then61, %if.end59
  br label %if.end72

if.end72:                                         ; preds = %if.end71, %for.end
  %102 = load i64, i64* %body_len, align 8, !tbaa !12
  %103 = bitcast i64* %zero_chunk_received to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %103) #5
  %104 = bitcast i64* %body_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %104) #5
  %105 = bitcast i64* %data_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %105) #5
  %106 = bitcast i64* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %106) #5
  %107 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %107) #5
  %108 = bitcast i8** %data to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %108) #5
  %109 = bitcast %struct.mg_http_proto_data** %pd to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %109) #5
  ret i64 %102
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_ws_handler(%struct.mg_connection* %nc, i32 %ev, i8* %ev_data) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %ev.addr = alloca i32, align 4
  %ev_data.addr = alloca i8*, align 8
  %now = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i32 %ev, i32* %ev.addr, align 4, !tbaa !15
  store i8* %ev_data, i8** %ev_data.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 15
  %2 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler, align 8, !tbaa !53
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 16
  %4 = load i8*, i8** %user_data, align 8, !tbaa !44
  %5 = load i32, i32* %ev.addr, align 4, !tbaa !15
  %6 = load i8*, i8** %ev_data.addr, align 8, !tbaa !3
  call void @mg_call(%struct.mg_connection* %0, void (%struct.mg_connection*, i32, i8*)* %2, i8* %4, i32 %5, i8* %6)
  %7 = load i32, i32* %ev.addr, align 4, !tbaa !15
  switch i32 %7, label %sw.default [
    i32 3, label %sw.bb
    i32 0, label %sw.bb1
  ]

sw.bb:                                            ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %do.cond, %sw.bb
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %call = call i32 @mg_deliver_websocket_data(%struct.mg_connection* %8)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  %9 = bitcast i64* %now to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #5
  %10 = load i8*, i8** %ev_data.addr, align 8, !tbaa !3
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !12
  store i64 %12, i64* %now, align 8, !tbaa !12
  %13 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %13, i32 0, i32 21
  %14 = load i64, i64* %flags, align 8, !tbaa !41
  %and = and i64 %14, 256
  %tobool2 = icmp ne i64 %and, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %sw.bb1
  %15 = load i64, i64* %now, align 8, !tbaa !12
  %16 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %last_io_time = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %16, i32 0, i32 10
  %17 = load i64, i64* %last_io_time, align 8, !tbaa !77
  %add = add nsw i64 %17, 5
  %cmp = icmp sgt i64 %15, %add
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %18 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_send_websocket_frame(%struct.mg_connection* %18, i32 9, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), i64 0)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %sw.bb1
  %19 = bitcast i64* %now to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %19) #5
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end, %do.end
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_ws_handshake(%struct.mg_connection* %nc, %struct.mg_str* %key, %struct.http_message* %hm) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %key.addr = alloca %struct.mg_str*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %msgs = alloca [2 x i8*], align 16
  %msg_lens = alloca [2 x i64], align 16
  %sha = alloca [20 x i8], align 16
  %b64_sha = alloca [30 x i8], align 16
  %s = alloca %struct.mg_str*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store %struct.mg_str* %key, %struct.mg_str** %key.addr, align 8, !tbaa !3
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %0 = bitcast [2 x i8*]* %msgs to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %0) #5
  %arrayinit.begin = getelementptr inbounds [2 x i8*], [2 x i8*]* %msgs, i64 0, i64 0
  %1 = load %struct.mg_str*, %struct.mg_str** %key.addr, align 8, !tbaa !3
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %1, i32 0, i32 0
  %2 = load i8*, i8** %p, align 8, !tbaa !16
  store i8* %2, i8** %arrayinit.begin, align 8, !tbaa !3
  %arrayinit.element = getelementptr inbounds i8*, i8** %arrayinit.begin, i64 1
  %3 = load i8*, i8** @mg_ws_handshake.magic, align 8, !tbaa !3
  store i8* %3, i8** %arrayinit.element, align 8, !tbaa !3
  %4 = bitcast [2 x i64]* %msg_lens to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %4) #5
  %arrayinit.begin1 = getelementptr inbounds [2 x i64], [2 x i64]* %msg_lens, i64 0, i64 0
  %5 = load %struct.mg_str*, %struct.mg_str** %key.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %5, i32 0, i32 1
  %6 = load i64, i64* %len, align 8, !tbaa !18
  store i64 %6, i64* %arrayinit.begin1, align 8, !tbaa !12
  %arrayinit.element2 = getelementptr inbounds i64, i64* %arrayinit.begin1, i64 1
  store i64 36, i64* %arrayinit.element2, align 8, !tbaa !12
  %7 = bitcast [20 x i8]* %sha to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* %7) #5
  %8 = bitcast [30 x i8]* %b64_sha to i8*
  call void @llvm.lifetime.start.p0i8(i64 30, i8* %8) #5
  %9 = bitcast %struct.mg_str** %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #5
  %arraydecay = getelementptr inbounds [2 x i8*], [2 x i8*]* %msgs, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [2 x i64], [2 x i64]* %msg_lens, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [20 x i8], [20 x i8]* %sha, i32 0, i32 0
  call void @mg_hash_sha1_v(i64 2, i8** %arraydecay, i64* %arraydecay3, i8* %arraydecay4)
  %arraydecay5 = getelementptr inbounds [20 x i8], [20 x i8]* %sha, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [30 x i8], [30 x i8]* %b64_sha, i32 0, i32 0
  call void @mg_base64_encode(i8* %arraydecay5, i32 20, i8* %arraydecay6)
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %call = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.394, i32 0, i32 0))
  %11 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %call7 = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %11, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.395, i32 0, i32 0))
  store %struct.mg_str* %call7, %struct.mg_str** %s, align 8, !tbaa !3
  %12 = load %struct.mg_str*, %struct.mg_str** %s, align 8, !tbaa !3
  %cmp = icmp ne %struct.mg_str* %12, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %13 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %14 = load %struct.mg_str*, %struct.mg_str** %s, align 8, !tbaa !3
  %len8 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %14, i32 0, i32 1
  %15 = load i64, i64* %len8, align 8, !tbaa !18
  %conv = trunc i64 %15 to i32
  %16 = load %struct.mg_str*, %struct.mg_str** %s, align 8, !tbaa !3
  %p9 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %16, i32 0, i32 0
  %17 = load i8*, i8** %p9, align 8, !tbaa !16
  %call10 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %13, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.137, i32 0, i32 0), i32 %conv, i8* %17)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %18 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %arraydecay11 = getelementptr inbounds [30 x i8], [30 x i8]* %b64_sha, i32 0, i32 0
  %call12 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %18, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.396, i32 0, i32 0), i8* %arraydecay11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.397, i32 0, i32 0))
  br label %do.body

do.body:                                          ; preds = %if.end
  %call13 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 10229)
  %tobool = icmp ne i32 %call13, 0
  br i1 %tobool, label %if.then14, label %if.end19

if.then14:                                        ; preds = %do.body
  %19 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %20 = load %struct.mg_str*, %struct.mg_str** %key.addr, align 8, !tbaa !3
  %len15 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %20, i32 0, i32 1
  %21 = load i64, i64* %len15, align 8, !tbaa !18
  %conv16 = trunc i64 %21 to i32
  %22 = load %struct.mg_str*, %struct.mg_str** %key.addr, align 8, !tbaa !3
  %p17 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %22, i32 0, i32 0
  %23 = load i8*, i8** %p17, align 8, !tbaa !16
  %arraydecay18 = getelementptr inbounds [30 x i8], [30 x i8]* %b64_sha, i32 0, i32 0
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.398, i32 0, i32 0), %struct.mg_connection* %19, i32 %conv16, i8* %23, i8* %arraydecay18)
  br label %if.end19

if.end19:                                         ; preds = %if.then14, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end19
  br label %do.end

do.end:                                           ; preds = %do.cond
  %24 = bitcast %struct.mg_str** %s to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %24) #5
  %25 = bitcast [30 x i8]* %b64_sha to i8*
  call void @llvm.lifetime.end.p0i8(i64 30, i8* %25) #5
  %26 = bitcast [20 x i8]* %sha to i8*
  call void @llvm.lifetime.end.p0i8(i64 20, i8* %26) #5
  %27 = bitcast [2 x i64]* %msg_lens to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %27) #5
  %28 = bitcast [2 x i8*]* %msgs to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %28) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_set_protocol_http_websocket(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %proto_handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 12
  store void (%struct.mg_connection*, i32, i8*)* @mg_http_handler, void (%struct.mg_connection*, i32, i8*)** %proto_handler, align 8, !tbaa !52
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i8* @mg_status_message(i32 %status_code) #0 {
entry:
  %retval = alloca i8*, align 8
  %status_code.addr = alloca i32, align 4
  store i32 %status_code, i32* %status_code.addr, align 4, !tbaa !15
  %0 = load i32, i32* %status_code.addr, align 4, !tbaa !15
  switch i32 %0, label %sw.default [
    i32 206, label %sw.bb
    i32 301, label %sw.bb1
    i32 302, label %sw.bb2
    i32 400, label %sw.bb3
    i32 401, label %sw.bb4
    i32 403, label %sw.bb5
    i32 404, label %sw.bb6
    i32 416, label %sw.bb7
    i32 418, label %sw.bb8
    i32 500, label %sw.bb9
    i32 502, label %sw.bb10
    i32 503, label %sw.bb11
  ]

sw.bb:                                            ; preds = %entry
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.52, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb1:                                           ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.53, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb2:                                           ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.54, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb3:                                           ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.55, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb4:                                           ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.56, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb5:                                           ; preds = %entry
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.57, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb6:                                           ; preds = %entry
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.58, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb7:                                           ; preds = %entry
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.59, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb8:                                           ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.60, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb9:                                           ; preds = %entry
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.61, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb10:                                          ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.62, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb11:                                          ; preds = %entry
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.63, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.default:                                       ; preds = %entry
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64, i32 0, i32 0), i8** %retval, align 8
  br label %return

return:                                           ; preds = %sw.default, %sw.bb11, %sw.bb10, %sw.bb9, %sw.bb8, %sw.bb7, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %1 = load i8*, i8** %retval, align 8
  ret i8* %1
}

; Function Attrs: nounwind ssp uwtable
define void @mg_send_response_line_s(%struct.mg_connection* %nc, i32 %status_code, i8* %extra_headers.coerce0, i64 %extra_headers.coerce1) #0 {
entry:
  %extra_headers = alloca %struct.mg_str, align 8
  %nc.addr = alloca %struct.mg_connection*, align 8
  %status_code.addr = alloca i32, align 4
  %0 = bitcast %struct.mg_str* %extra_headers to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %extra_headers.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %extra_headers.coerce1, i64* %2, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i32 %status_code, i32* %status_code.addr, align 4, !tbaa !15
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %4 = load i32, i32* %status_code.addr, align 4, !tbaa !15
  %5 = load i32, i32* %status_code.addr, align 4, !tbaa !15
  %call = call i8* @mg_status_message(i32 %5)
  %call1 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.65, i32 0, i32 0), i32 %4, i8* %call)
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %7 = load i8*, i8** @mg_version_header, align 8, !tbaa !3
  %call2 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %6, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.66, i32 0, i32 0), i8* %7)
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %extra_headers, i32 0, i32 1
  %8 = load i64, i64* %len, align 8, !tbaa !18
  %cmp = icmp ugt i64 %8, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %len3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %extra_headers, i32 0, i32 1
  %10 = load i64, i64* %len3, align 8, !tbaa !18
  %conv = trunc i64 %10 to i32
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %extra_headers, i32 0, i32 0
  %11 = load i8*, i8** %p, align 8, !tbaa !16
  %call4 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %9, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.67, i32 0, i32 0), i32 %conv, i8* %11)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_send_response_line(%struct.mg_connection* %nc, i32 %status_code, i8* %extra_headers) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %status_code.addr = alloca i32, align 4
  %extra_headers.addr = alloca i8*, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i32 %status_code, i32* %status_code.addr, align 4, !tbaa !15
  store i8* %extra_headers, i8** %extra_headers.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %1 = load i32, i32* %status_code.addr, align 4, !tbaa !15
  %2 = load i8*, i8** %extra_headers.addr, align 8, !tbaa !3
  %call = call { i8*, i64 } @mg_mk_str(i8* %2)
  %3 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  %5 = extractvalue { i8*, i64 } %call, 0
  store i8* %5, i8** %4, align 8
  %6 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  %7 = extractvalue { i8*, i64 } %call, 1
  store i64 %7, i64* %6, align 8
  %8 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  call void @mg_send_response_line_s(%struct.mg_connection* %0, i32 %1, i8* %10, i64 %12)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_http_send_redirect(%struct.mg_connection* %nc, i32 %status_code, i8* %location.coerce0, i64 %location.coerce1, i8* %extra_headers.coerce0, i64 %extra_headers.coerce1) #0 {
entry:
  %location = alloca %struct.mg_str, align 8
  %extra_headers = alloca %struct.mg_str, align 8
  %nc.addr = alloca %struct.mg_connection*, align 8
  %status_code.addr = alloca i32, align 4
  %bbody = alloca [100 x i8], align 16
  %pbody = alloca i8*, align 8
  %bl = alloca i32, align 4
  %bhead = alloca [150 x i8], align 16
  %phead = alloca i8*, align 8
  %0 = bitcast %struct.mg_str* %location to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %location.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %location.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %extra_headers to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %extra_headers.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %extra_headers.coerce1, i64* %5, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i32 %status_code, i32* %status_code.addr, align 4, !tbaa !15
  %6 = bitcast [100 x i8]* %bbody to i8*
  call void @llvm.lifetime.start.p0i8(i64 100, i8* %6) #5
  %7 = bitcast i8** %pbody to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #5
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %bbody, i32 0, i32 0
  store i8* %arraydecay, i8** %pbody, align 8, !tbaa !3
  %8 = bitcast i32* %bl to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %8) #5
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %location, i32 0, i32 1
  %9 = load i64, i64* %len, align 8, !tbaa !18
  %conv = trunc i64 %9 to i32
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %location, i32 0, i32 0
  %10 = load i8*, i8** %p, align 8, !tbaa !16
  %call = call i32 (i8**, i64, i8*, ...) @mg_asprintf(i8** %pbody, i64 100, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.68, i32 0, i32 0), i32 %conv, i8* %10)
  store i32 %call, i32* %bl, align 4, !tbaa !15
  %11 = bitcast [150 x i8]* %bhead to i8*
  call void @llvm.lifetime.start.p0i8(i64 150, i8* %11) #5
  %12 = bitcast i8** %phead to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #5
  %arraydecay1 = getelementptr inbounds [150 x i8], [150 x i8]* %bhead, i32 0, i32 0
  store i8* %arraydecay1, i8** %phead, align 8, !tbaa !3
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %location, i32 0, i32 1
  %13 = load i64, i64* %len2, align 8, !tbaa !18
  %conv3 = trunc i64 %13 to i32
  %p4 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %location, i32 0, i32 0
  %14 = load i8*, i8** %p4, align 8, !tbaa !16
  %15 = load i32, i32* %bl, align 4, !tbaa !15
  %len5 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %extra_headers, i32 0, i32 1
  %16 = load i64, i64* %len5, align 8, !tbaa !18
  %conv6 = trunc i64 %16 to i32
  %p7 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %extra_headers, i32 0, i32 0
  %17 = load i8*, i8** %p7, align 8, !tbaa !16
  %len8 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %extra_headers, i32 0, i32 1
  %18 = load i64, i64* %len8, align 8, !tbaa !18
  %cmp = icmp ugt i64 %18, 0
  %19 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0)
  %call10 = call i32 (i8**, i64, i8*, ...) @mg_asprintf(i8** %phead, i64 150, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.69, i32 0, i32 0), i32 %conv3, i8* %14, i32 %15, i32 %conv6, i8* %17, i8* %cond)
  %20 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %21 = load i32, i32* %status_code.addr, align 4, !tbaa !15
  %22 = load i8*, i8** %phead, align 8, !tbaa !3
  call void @mg_send_response_line(%struct.mg_connection* %20, i32 %21, i8* %22)
  %23 = load i8*, i8** %phead, align 8, !tbaa !3
  %arraydecay11 = getelementptr inbounds [150 x i8], [150 x i8]* %bhead, i32 0, i32 0
  %cmp12 = icmp ne i8* %23, %arraydecay11
  br i1 %cmp12, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %24 = load i8*, i8** %phead, align 8, !tbaa !3
  call void @free(i8* %24)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %25 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %26 = load i8*, i8** %pbody, align 8, !tbaa !3
  %27 = load i32, i32* %bl, align 4, !tbaa !15
  call void @mg_send(%struct.mg_connection* %25, i8* %26, i32 %27)
  %28 = load i8*, i8** %pbody, align 8, !tbaa !3
  %arraydecay14 = getelementptr inbounds [100 x i8], [100 x i8]* %bbody, i32 0, i32 0
  %cmp15 = icmp ne i8* %28, %arraydecay14
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end
  %29 = load i8*, i8** %pbody, align 8, !tbaa !3
  call void @free(i8* %29)
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %if.end
  %30 = bitcast i8** %phead to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %30) #5
  %31 = bitcast [150 x i8]* %bhead to i8*
  call void @llvm.lifetime.end.p0i8(i64 150, i8* %31) #5
  %32 = bitcast i32* %bl to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %32) #5
  %33 = bitcast i8** %pbody to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %33) #5
  %34 = bitcast [100 x i8]* %bbody to i8*
  call void @llvm.lifetime.end.p0i8(i64 100, i8* %34) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_send_head(%struct.mg_connection* %c, i32 %status_code, i64 %content_length, i8* %extra_headers) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %status_code.addr = alloca i32, align 4
  %content_length.addr = alloca i64, align 8
  %extra_headers.addr = alloca i8*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  store i32 %status_code, i32* %status_code.addr, align 4, !tbaa !15
  store i64 %content_length, i64* %content_length.addr, align 8, !tbaa !35
  store i8* %extra_headers, i8** %extra_headers.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %1 = load i32, i32* %status_code.addr, align 4, !tbaa !15
  %2 = load i8*, i8** %extra_headers.addr, align 8, !tbaa !3
  call void @mg_send_response_line(%struct.mg_connection* %0, i32 %1, i8* %2)
  %3 = load i64, i64* %content_length.addr, align 8, !tbaa !35
  %cmp = icmp slt i64 %3, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %call = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.71, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %6 = load i64, i64* %content_length.addr, align 8, !tbaa !35
  %call1 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %5, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.72, i32 0, i32 0), i64 %6)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  call void @mg_send(%struct.mg_connection* %7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i32 2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_http_send_error(%struct.mg_connection* %nc, i32 %code, i8* %reason) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %code.addr = alloca i32, align 4
  %reason.addr = alloca i8*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i32 %code, i32* %code.addr, align 4, !tbaa !15
  store i8* %reason, i8** %reason.addr, align 8, !tbaa !3
  %0 = load i8*, i8** %reason.addr, align 8, !tbaa !3
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %code.addr, align 4, !tbaa !15
  %call = call i8* @mg_status_message(i32 %1)
  store i8* %call, i8** %reason.addr, align 8, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %call1 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 7114)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %do.body
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %3 = load i32, i32* %code.addr, align 4, !tbaa !15
  %4 = load i8*, i8** %reason.addr, align 8, !tbaa !3
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.73, i32 0, i32 0), %struct.mg_connection* %2, i32 %3, i8* %4)
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end4
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %6 = load i32, i32* %code.addr, align 4, !tbaa !15
  %7 = load i8*, i8** %reason.addr, align 8, !tbaa !3
  %call5 = call i64 @strlen(i8* %7)
  call void @mg_send_head(%struct.mg_connection* %5, i32 %6, i64 %call5, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.74, i32 0, i32 0))
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %9 = load i8*, i8** %reason.addr, align 8, !tbaa !3
  %10 = load i8*, i8** %reason.addr, align 8, !tbaa !3
  %call6 = call i64 @strlen(i8* %10)
  %conv = trunc i64 %call6 to i32
  call void @mg_send(%struct.mg_connection* %8, i8* %9, i32 %conv)
  %11 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %11, i32 0, i32 21
  %12 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %12, 1024
  store i64 %or, i64* %flags, align 8, !tbaa !41
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_http_serve_file_internal(%struct.mg_connection* %nc, %struct.http_message* %hm, i8* %path, i8* %mime_type.coerce0, i64 %mime_type.coerce1, %struct.mg_str* byval align 8 %encoding, %struct.mg_str* byval align 8 %extra_headers) #0 {
entry:
  %mime_type = alloca %struct.mg_str, align 8
  %nc.addr = alloca %struct.mg_connection*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %path.addr = alloca i8*, align 8
  %pd = alloca %struct.mg_http_proto_data*, align 8
  %st = alloca %struct.stat, align 8
  %code = alloca i32, align 4
  %err = alloca i32, align 4
  %etag = alloca [50 x i8], align 16
  %current_time = alloca [50 x i8], align 16
  %last_modified = alloca [50 x i8], align 16
  %range = alloca [70 x i8], align 16
  %t = alloca i64, align 8
  %r1 = alloca i64, align 8
  %r2 = alloca i64, align 8
  %cl = alloca i64, align 8
  %range_hdr = alloca %struct.mg_str*, align 8
  %n = alloca i32, align 4
  %status_code = alloca i32, align 4
  %conn_hdr = alloca %struct.mg_str*, align 8
  %0 = bitcast %struct.mg_str* %mime_type to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %mime_type.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %mime_type.coerce1, i64* %2, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  store i8* %path, i8** %path.addr, align 8, !tbaa !3
  %3 = bitcast %struct.mg_http_proto_data** %pd to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %call = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %4)
  store %struct.mg_http_proto_data* %call, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %5 = bitcast %struct.stat* %st to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* %5) #5
  br label %do.body

do.body:                                          ; preds = %entry
  %call1 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 7161)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %7 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %mime_type, i32 0, i32 1
  %8 = load i64, i64* %len, align 8, !tbaa !18
  %conv = trunc i64 %8 to i32
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %mime_type, i32 0, i32 0
  %9 = load i8*, i8** %p, align 8, !tbaa !16
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %encoding, i32 0, i32 1
  %10 = load i64, i64* %len2, align 8, !tbaa !18
  %conv3 = trunc i64 %10 to i32
  %p4 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %encoding, i32 0, i32 0
  %11 = load i8*, i8** %p4, align 8, !tbaa !16
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.75, i32 0, i32 0), %struct.mg_connection* %6, i8* %7, i32 %conv, i8* %9, i32 %conv3, i8* %11)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %do.cond
  %12 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %call5 = call i32 @mg_stat(i8* %12, %struct.stat* %st)
  %cmp = icmp ne i32 %call5, 0
  br i1 %cmp, label %if.then10, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end
  %13 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %call7 = call %struct.__sFILE* @mg_fopen(i8* %13, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.76, i32 0, i32 0))
  %14 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %14, i32 0, i32 0
  %fp = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file, i32 0, i32 0
  store %struct.__sFILE* %call7, %struct.__sFILE** %fp, align 8, !tbaa !152
  %cmp8 = icmp eq %struct.__sFILE* %call7, null
  br i1 %cmp8, label %if.then10, label %if.else

if.then10:                                        ; preds = %lor.lhs.false, %do.end
  %15 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %15) #5
  %16 = bitcast i32* %err to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %16) #5
  %call11 = call i32 @mg_get_errno()
  store i32 %call11, i32* %err, align 4, !tbaa !15
  %17 = load i32, i32* %err, align 4, !tbaa !15
  switch i32 %17, label %sw.default [
    i32 13, label %sw.bb
    i32 2, label %sw.bb12
  ]

sw.bb:                                            ; preds = %if.then10
  store i32 403, i32* %code, align 4, !tbaa !15
  br label %sw.epilog

sw.bb12:                                          ; preds = %if.then10
  store i32 404, i32* %code, align 4, !tbaa !15
  br label %sw.epilog

sw.default:                                       ; preds = %if.then10
  store i32 500, i32* %code, align 4, !tbaa !15
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb12, %sw.bb
  %18 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %19 = load i32, i32* %code, align 4, !tbaa !15
  call void @mg_http_send_error(%struct.mg_connection* %18, i32 %19, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.77, i32 0, i32 0))
  %20 = bitcast i32* %err to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %20) #5
  %21 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %21) #5
  br label %if.end93

if.else:                                          ; preds = %lor.lhs.false
  %22 = bitcast [50 x i8]* %etag to i8*
  call void @llvm.lifetime.start.p0i8(i64 50, i8* %22) #5
  %23 = bitcast [50 x i8]* %current_time to i8*
  call void @llvm.lifetime.start.p0i8(i64 50, i8* %23) #5
  %24 = bitcast [50 x i8]* %last_modified to i8*
  call void @llvm.lifetime.start.p0i8(i64 50, i8* %24) #5
  %25 = bitcast [70 x i8]* %range to i8*
  call void @llvm.lifetime.start.p0i8(i64 70, i8* %25) #5
  %26 = bitcast i64* %t to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %26) #5
  %call13 = call double @mg_time()
  %conv14 = fptosi double %call13 to i64
  store i64 %conv14, i64* %t, align 8, !tbaa !12
  %27 = bitcast i64* %r1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %27) #5
  store i64 0, i64* %r1, align 8, !tbaa !35
  %28 = bitcast i64* %r2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %28) #5
  store i64 0, i64* %r2, align 8, !tbaa !35
  %29 = bitcast i64* %cl to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %29) #5
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 15
  %30 = load i64, i64* %st_size, align 8, !tbaa !166
  store i64 %30, i64* %cl, align 8, !tbaa !35
  %31 = bitcast %struct.mg_str** %range_hdr to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %31) #5
  %32 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %call15 = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %32, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.78, i32 0, i32 0))
  store %struct.mg_str* %call15, %struct.mg_str** %range_hdr, align 8, !tbaa !3
  %33 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %33) #5
  %34 = bitcast i32* %status_code to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %34) #5
  store i32 200, i32* %status_code, align 4, !tbaa !15
  %arrayidx = getelementptr inbounds [70 x i8], [70 x i8]* %range, i64 0, i64 0
  store i8 0, i8* %arrayidx, align 16, !tbaa !14
  %35 = load %struct.mg_str*, %struct.mg_str** %range_hdr, align 8, !tbaa !3
  %cmp16 = icmp ne %struct.mg_str* %35, null
  br i1 %cmp16, label %land.lhs.true, label %if.end51

land.lhs.true:                                    ; preds = %if.else
  %36 = load %struct.mg_str*, %struct.mg_str** %range_hdr, align 8, !tbaa !3
  %call18 = call i32 @mg_http_parse_range_header(%struct.mg_str* %36, i64* %r1, i64* %r2)
  store i32 %call18, i32* %n, align 4, !tbaa !15
  %cmp19 = icmp sgt i32 %call18, 0
  br i1 %cmp19, label %land.lhs.true21, label %if.end51

land.lhs.true21:                                  ; preds = %land.lhs.true
  %37 = load i64, i64* %r1, align 8, !tbaa !35
  %cmp22 = icmp sge i64 %37, 0
  br i1 %cmp22, label %land.lhs.true24, label %if.end51

land.lhs.true24:                                  ; preds = %land.lhs.true21
  %38 = load i64, i64* %r2, align 8, !tbaa !35
  %cmp25 = icmp sge i64 %38, 0
  br i1 %cmp25, label %if.then27, label %if.end51

if.then27:                                        ; preds = %land.lhs.true24
  %39 = load i32, i32* %n, align 4, !tbaa !15
  %cmp28 = icmp eq i32 %39, 1
  br i1 %cmp28, label %if.then30, label %if.end31

if.then30:                                        ; preds = %if.then27
  %40 = load i64, i64* %cl, align 8, !tbaa !35
  %sub = sub nsw i64 %40, 1
  store i64 %sub, i64* %r2, align 8, !tbaa !35
  br label %if.end31

if.end31:                                         ; preds = %if.then30, %if.then27
  %41 = load i64, i64* %r1, align 8, !tbaa !35
  %42 = load i64, i64* %r2, align 8, !tbaa !35
  %cmp32 = icmp sgt i64 %41, %42
  br i1 %cmp32, label %if.then37, label %lor.lhs.false34

lor.lhs.false34:                                  ; preds = %if.end31
  %43 = load i64, i64* %r2, align 8, !tbaa !35
  %44 = load i64, i64* %cl, align 8, !tbaa !35
  %cmp35 = icmp sge i64 %43, %44
  br i1 %cmp35, label %if.then37, label %if.else40

if.then37:                                        ; preds = %lor.lhs.false34, %if.end31
  store i32 416, i32* %status_code, align 4, !tbaa !15
  store i64 0, i64* %cl, align 8, !tbaa !35
  %arraydecay = getelementptr inbounds [70 x i8], [70 x i8]* %range, i32 0, i32 0
  %st_size38 = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 15
  %45 = load i64, i64* %st_size38, align 8, !tbaa !166
  %call39 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay, i64 70, i32 0, i64 70, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.79, i32 0, i32 0), i64 %45)
  br label %if.end50

if.else40:                                        ; preds = %lor.lhs.false34
  store i32 206, i32* %status_code, align 4, !tbaa !15
  %46 = load i64, i64* %r2, align 8, !tbaa !35
  %47 = load i64, i64* %r1, align 8, !tbaa !35
  %sub41 = sub nsw i64 %46, %47
  %add = add nsw i64 %sub41, 1
  store i64 %add, i64* %cl, align 8, !tbaa !35
  %arraydecay42 = getelementptr inbounds [70 x i8], [70 x i8]* %range, i32 0, i32 0
  %48 = load i64, i64* %r1, align 8, !tbaa !35
  %49 = load i64, i64* %r1, align 8, !tbaa !35
  %50 = load i64, i64* %cl, align 8, !tbaa !35
  %add43 = add nsw i64 %49, %50
  %sub44 = sub nsw i64 %add43, 1
  %st_size45 = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 15
  %51 = load i64, i64* %st_size45, align 8, !tbaa !166
  %call46 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay42, i64 70, i32 0, i64 70, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.80, i32 0, i32 0), i64 %48, i64 %sub44, i64 %51)
  %52 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file47 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %52, i32 0, i32 0
  %fp48 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file47, i32 0, i32 0
  %53 = load %struct.__sFILE*, %struct.__sFILE** %fp48, align 8, !tbaa !152
  %54 = load i64, i64* %r1, align 8, !tbaa !35
  %call49 = call i32 @fseeko(%struct.__sFILE* %53, i64 %54, i32 0)
  br label %if.end50

if.end50:                                         ; preds = %if.else40, %if.then37
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %land.lhs.true24, %land.lhs.true21, %land.lhs.true, %if.else
  %55 = bitcast %struct.mg_str** %conn_hdr to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %55) #5
  %56 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %call52 = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %56, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.81, i32 0, i32 0))
  store %struct.mg_str* %call52, %struct.mg_str** %conn_hdr, align 8, !tbaa !3
  %57 = load %struct.mg_str*, %struct.mg_str** %conn_hdr, align 8, !tbaa !3
  %cmp53 = icmp ne %struct.mg_str* %57, null
  br i1 %cmp53, label %if.then55, label %if.else60

if.then55:                                        ; preds = %if.end51
  %58 = load %struct.mg_str*, %struct.mg_str** %conn_hdr, align 8, !tbaa !3
  %call56 = call i32 @mg_vcasecmp(%struct.mg_str* %58, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.82, i32 0, i32 0))
  %cmp57 = icmp eq i32 %call56, 0
  %conv58 = zext i1 %cmp57 to i32
  %59 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file59 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %59, i32 0, i32 0
  %keepalive = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file59, i32 0, i32 3
  store i32 %conv58, i32* %keepalive, align 8, !tbaa !164
  br label %if.end66

if.else60:                                        ; preds = %if.end51
  %60 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %proto = getelementptr inbounds %struct.http_message, %struct.http_message* %60, i32 0, i32 4
  %call61 = call i32 @mg_vcmp(%struct.mg_str* %proto, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.83, i32 0, i32 0))
  %cmp62 = icmp eq i32 %call61, 0
  %conv63 = zext i1 %cmp62 to i32
  %61 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file64 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %61, i32 0, i32 0
  %keepalive65 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file64, i32 0, i32 3
  store i32 %conv63, i32* %keepalive65, align 8, !tbaa !164
  br label %if.end66

if.end66:                                         ; preds = %if.else60, %if.then55
  %62 = bitcast %struct.mg_str** %conn_hdr to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %62) #5
  %arraydecay67 = getelementptr inbounds [50 x i8], [50 x i8]* %etag, i32 0, i32 0
  call void @mg_http_construct_etag(i8* %arraydecay67, i64 50, %struct.stat* %st)
  %arraydecay68 = getelementptr inbounds [50 x i8], [50 x i8]* %current_time, i32 0, i32 0
  call void @mg_gmt_time_string(i8* %arraydecay68, i64 50, i64* %t)
  %arraydecay69 = getelementptr inbounds [50 x i8], [50 x i8]* %last_modified, i32 0, i32 0
  %st_mtime = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 9
  call void @mg_gmt_time_string(i8* %arraydecay69, i64 50, i64* %st_mtime)
  %63 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %64 = load i32, i32* %status_code, align 4, !tbaa !15
  %65 = bitcast %struct.mg_str* %extra_headers to { i8*, i64 }*
  %66 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %65, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %65, i32 0, i32 1
  %69 = load i64, i64* %68, align 8
  call void @mg_send_response_line_s(%struct.mg_connection* %63, i32 %64, i8* %67, i64 %69)
  %70 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %arraydecay70 = getelementptr inbounds [50 x i8], [50 x i8]* %current_time, i32 0, i32 0
  %arraydecay71 = getelementptr inbounds [50 x i8], [50 x i8]* %last_modified, i32 0, i32 0
  %len72 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %mime_type, i32 0, i32 1
  %71 = load i64, i64* %len72, align 8, !tbaa !18
  %conv73 = trunc i64 %71 to i32
  %p74 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %mime_type, i32 0, i32 0
  %72 = load i8*, i8** %p74, align 8, !tbaa !16
  %73 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file75 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %73, i32 0, i32 0
  %keepalive76 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file75, i32 0, i32 3
  %74 = load i32, i32* %keepalive76, align 8, !tbaa !164
  %tobool77 = icmp ne i32 %74, 0
  %75 = zext i1 %tobool77 to i64
  %cond = select i1 %tobool77, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.82, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.85, i32 0, i32 0)
  %76 = load i64, i64* %cl, align 8, !tbaa !35
  %arraydecay78 = getelementptr inbounds [70 x i8], [70 x i8]* %range, i32 0, i32 0
  %arraydecay79 = getelementptr inbounds [50 x i8], [50 x i8]* %etag, i32 0, i32 0
  %call80 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %70, i8* getelementptr inbounds ([121 x i8], [121 x i8]* @.str.84, i32 0, i32 0), i8* %arraydecay70, i8* %arraydecay71, i32 %conv73, i8* %72, i8* %cond, i64 %76, i8* %arraydecay78, i8* %arraydecay79)
  %len81 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %encoding, i32 0, i32 1
  %77 = load i64, i64* %len81, align 8, !tbaa !18
  %cmp82 = icmp ugt i64 %77, 0
  br i1 %cmp82, label %if.then84, label %if.end89

if.then84:                                        ; preds = %if.end66
  %78 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %len85 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %encoding, i32 0, i32 1
  %79 = load i64, i64* %len85, align 8, !tbaa !18
  %conv86 = trunc i64 %79 to i32
  %p87 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %encoding, i32 0, i32 0
  %80 = load i8*, i8** %p87, align 8, !tbaa !16
  %call88 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %78, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.86, i32 0, i32 0), i32 %conv86, i8* %80)
  br label %if.end89

if.end89:                                         ; preds = %if.then84, %if.end66
  %81 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_send(%struct.mg_connection* %81, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i32 2)
  %82 = load i64, i64* %cl, align 8, !tbaa !35
  %83 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file90 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %83, i32 0, i32 0
  %cl91 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file90, i32 0, i32 1
  store i64 %82, i64* %cl91, align 8, !tbaa !161
  %84 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file92 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %84, i32 0, i32 0
  %type = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file92, i32 0, i32 4
  store i32 1, i32* %type, align 4, !tbaa !163
  %85 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_http_transfer_file_data(%struct.mg_connection* %85)
  %86 = bitcast i32* %status_code to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %86) #5
  %87 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %87) #5
  %88 = bitcast %struct.mg_str** %range_hdr to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %88) #5
  %89 = bitcast i64* %cl to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %89) #5
  %90 = bitcast i64* %r2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %90) #5
  %91 = bitcast i64* %r1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %91) #5
  %92 = bitcast i64* %t to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %92) #5
  %93 = bitcast [70 x i8]* %range to i8*
  call void @llvm.lifetime.end.p0i8(i64 70, i8* %93) #5
  %94 = bitcast [50 x i8]* %last_modified to i8*
  call void @llvm.lifetime.end.p0i8(i64 50, i8* %94) #5
  %95 = bitcast [50 x i8]* %current_time to i8*
  call void @llvm.lifetime.end.p0i8(i64 50, i8* %95) #5
  %96 = bitcast [50 x i8]* %etag to i8*
  call void @llvm.lifetime.end.p0i8(i64 50, i8* %96) #5
  br label %if.end93

if.end93:                                         ; preds = %if.end89, %sw.epilog
  %97 = bitcast %struct.stat* %st to i8*
  call void @llvm.lifetime.end.p0i8(i64 144, i8* %97) #5
  %98 = bitcast %struct.mg_http_proto_data** %pd to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %98) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_stat(i8* %path, %struct.stat* %st) #0 {
entry:
  %path.addr = alloca i8*, align 8
  %st.addr = alloca %struct.stat*, align 8
  store i8* %path, i8** %path.addr, align 8, !tbaa !3
  store %struct.stat* %st, %struct.stat** %st.addr, align 8, !tbaa !3
  %0 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %1 = load %struct.stat*, %struct.stat** %st.addr, align 8, !tbaa !3
  %call = call i32 @"\01_stat$INODE64"(i8* %0, %struct.stat* %1)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define %struct.__sFILE* @mg_fopen(i8* %path, i8* %mode) #0 {
entry:
  %path.addr = alloca i8*, align 8
  %mode.addr = alloca i8*, align 8
  store i8* %path, i8** %path.addr, align 8, !tbaa !3
  store i8* %mode, i8** %mode.addr, align 8, !tbaa !3
  %0 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %1 = load i8*, i8** %mode.addr, align 8, !tbaa !3
  %call = call %struct.__sFILE* @"\01_fopen"(i8* %0, i8* %1)
  ret %struct.__sFILE* %call
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_http_parse_range_header(%struct.mg_str* %header, i64* %a, i64* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %header.addr = alloca %struct.mg_str*, align 8
  %a.addr = alloca i64*, align 8
  %b.addr = alloca i64*, align 8
  %result = alloca i32, align 4
  %p = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_str* %header, %struct.mg_str** %header.addr, align 8, !tbaa !3
  store i64* %a, i64** %a.addr, align 8, !tbaa !3
  store i64* %b, i64** %b.addr, align 8, !tbaa !3
  %0 = bitcast i32* %result to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %2 = load %struct.mg_str*, %struct.mg_str** %header.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %2, i32 0, i32 1
  %3 = load i64, i64* %len, align 8, !tbaa !18
  %add = add i64 %3, 1
  %call = call i8* @malloc(i64 %add) #18
  store i8* %call, i8** %p, align 8, !tbaa !3
  %4 = load i8*, i8** %p, align 8, !tbaa !3
  %cmp = icmp eq i8* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %5 = load i8*, i8** %p, align 8, !tbaa !3
  %6 = load %struct.mg_str*, %struct.mg_str** %header.addr, align 8, !tbaa !3
  %p1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %6, i32 0, i32 0
  %7 = load i8*, i8** %p1, align 8, !tbaa !16
  %8 = load %struct.mg_str*, %struct.mg_str** %header.addr, align 8, !tbaa !3
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %8, i32 0, i32 1
  %9 = load i64, i64* %len2, align 8, !tbaa !18
  %10 = load i8*, i8** %p, align 8, !tbaa !3
  %11 = call i64 @llvm.objectsize.i64.p0i8(i8* %10, i1 false, i1 true)
  %call3 = call i8* @__memcpy_chk(i8* %5, i8* %7, i64 %9, i64 %11) #5
  %12 = load i8*, i8** %p, align 8, !tbaa !3
  %13 = load %struct.mg_str*, %struct.mg_str** %header.addr, align 8, !tbaa !3
  %len4 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %13, i32 0, i32 1
  %14 = load i64, i64* %len4, align 8, !tbaa !18
  %arrayidx = getelementptr inbounds i8, i8* %12, i64 %14
  store i8 0, i8* %arrayidx, align 1, !tbaa !14
  %15 = load i8*, i8** %p, align 8, !tbaa !3
  %16 = load i64*, i64** %a.addr, align 8, !tbaa !3
  %17 = load i64*, i64** %b.addr, align 8, !tbaa !3
  %call5 = call i32 (i8*, i8*, ...) @sscanf(i8* %15, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.196, i32 0, i32 0), i64* %16, i64* %17)
  store i32 %call5, i32* %result, align 4, !tbaa !15
  %18 = load i8*, i8** %p, align 8, !tbaa !3
  call void @free(i8* %18)
  %19 = load i32, i32* %result, align 4, !tbaa !15
  store i32 %19, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %20 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %20) #5
  %21 = bitcast i32* %result to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %21) #5
  %22 = load i32, i32* %retval, align 4
  ret i32 %22
}

declare i32 @__snprintf_chk(i8*, i64, i32, i64, i8*, ...) #4

declare i32 @fseeko(%struct.__sFILE*, i64, i32) #4

; Function Attrs: nounwind ssp uwtable
define internal void @mg_http_construct_etag(i8* %buf, i64 %buf_len, %struct.stat* %st) #0 {
entry:
  %buf.addr = alloca i8*, align 8
  %buf_len.addr = alloca i64, align 8
  %st.addr = alloca %struct.stat*, align 8
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %buf_len, i64* %buf_len.addr, align 8, !tbaa !12
  store %struct.stat* %st, %struct.stat** %st.addr, align 8, !tbaa !3
  %0 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %1 = load i64, i64* %buf_len.addr, align 8, !tbaa !12
  %2 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %3 = call i64 @llvm.objectsize.i64.p0i8(i8* %2, i1 false, i1 true)
  %4 = load %struct.stat*, %struct.stat** %st.addr, align 8, !tbaa !3
  %st_mtime = getelementptr inbounds %struct.stat, %struct.stat* %4, i32 0, i32 9
  %5 = load i64, i64* %st_mtime, align 8, !tbaa !168
  %6 = load %struct.stat*, %struct.stat** %st.addr, align 8, !tbaa !3
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %6, i32 0, i32 15
  %7 = load i64, i64* %st_size, align 8, !tbaa !166
  %call = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %0, i64 %1, i32 0, i64 %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.197, i32 0, i32 0), i64 %5, i64 %7)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_gmt_time_string(i8* %buf, i64 %buf_len, i64* %t) #0 {
entry:
  %buf.addr = alloca i8*, align 8
  %buf_len.addr = alloca i64, align 8
  %t.addr = alloca i64*, align 8
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %buf_len, i64* %buf_len.addr, align 8, !tbaa !12
  store i64* %t, i64** %t.addr, align 8, !tbaa !3
  %0 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %1 = load i64, i64* %buf_len.addr, align 8, !tbaa !12
  %2 = load i64*, i64** %t.addr, align 8, !tbaa !3
  %call = call %struct.tm* @gmtime(i64* %2)
  %call1 = call i64 @"\01_strftime"(i8* %0, i64 %1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.198, i32 0, i32 0), %struct.tm* %call)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_http_serve_file(%struct.mg_connection* %nc, %struct.http_message* %hm, i8* %path, i8* %mime_type.coerce0, i64 %mime_type.coerce1, %struct.mg_str* byval align 8 %extra_headers) #0 {
entry:
  %mime_type = alloca %struct.mg_str, align 8
  %nc.addr = alloca %struct.mg_connection*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %path.addr = alloca i8*, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  %0 = bitcast %struct.mg_str* %mime_type to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %mime_type.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %mime_type.coerce1, i64* %2, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  store i8* %path, i8** %path.addr, align 8, !tbaa !3
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %4 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %5 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %call = call { i8*, i64 } @mg_mk_str(i8* null)
  %6 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %7 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %6, i32 0, i32 0
  %8 = extractvalue { i8*, i64 } %call, 0
  store i8* %8, i8** %7, align 8
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %6, i32 0, i32 1
  %10 = extractvalue { i8*, i64 } %call, 1
  store i64 %10, i64* %9, align 8
  %11 = bitcast %struct.mg_str* %mime_type to { i8*, i64 }*
  %12 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  call void @mg_http_serve_file_internal(%struct.mg_connection* %3, %struct.http_message* %4, i8* %5, i8* %13, i64 %15, %struct.mg_str* byval align 8 %agg.tmp, %struct.mg_str* byval align 8 %extra_headers)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_url_decode(i8* %src, i32 %src_len, i8* %dst, i32 %dst_len, i32 %is_form_url_encoded) #0 {
entry:
  %retval = alloca i32, align 4
  %src.addr = alloca i8*, align 8
  %src_len.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 8
  %dst_len.addr = alloca i32, align 4
  %is_form_url_encoded.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8, !tbaa !3
  store i32 %src_len, i32* %src_len.addr, align 4, !tbaa !15
  store i8* %dst, i8** %dst.addr, align 8, !tbaa !3
  store i32 %dst_len, i32* %dst_len.addr, align 4, !tbaa !15
  store i32 %is_form_url_encoded, i32* %is_form_url_encoded.addr, align 4, !tbaa !15
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = bitcast i32* %j to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  %2 = bitcast i32* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  %3 = bitcast i32* %b to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  store i32 0, i32* %j, align 4, !tbaa !15
  store i32 0, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4, !tbaa !15
  %5 = load i32, i32* %src_len.addr, align 4, !tbaa !15
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %j, align 4, !tbaa !15
  %7 = load i32, i32* %dst_len.addr, align 4, !tbaa !15
  %sub = sub nsw i32 %7, 1
  %cmp1 = icmp slt i32 %6, %sub
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %8 = phi i1 [ false, %for.cond ], [ %cmp1, %land.rhs ]
  br i1 %8, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %9 = load i8*, i8** %src.addr, align 8, !tbaa !3
  %10 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom = sext i32 %10 to i64
  %arrayidx = getelementptr inbounds i8, i8* %9, i64 %idxprom
  %11 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = sext i8 %11 to i32
  %cmp2 = icmp eq i32 %conv, 37
  br i1 %cmp2, label %if.then, label %if.else42

if.then:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4, !tbaa !15
  %13 = load i32, i32* %src_len.addr, align 4, !tbaa !15
  %sub4 = sub nsw i32 %13, 2
  %cmp5 = icmp slt i32 %12, %sub4
  br i1 %cmp5, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %14 = load i8*, i8** %src.addr, align 8, !tbaa !3
  %15 = load i32, i32* %i, align 4, !tbaa !15
  %idx.ext = sext i32 %15 to i64
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 %idx.ext
  %add.ptr7 = getelementptr inbounds i8, i8* %add.ptr, i64 1
  %16 = load i8, i8* %add.ptr7, align 1, !tbaa !14
  %conv8 = zext i8 %16 to i32
  %call = call i32 @isxdigit(i32 %conv8) #19
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.lhs.true9, label %if.else

land.lhs.true9:                                   ; preds = %land.lhs.true
  %17 = load i8*, i8** %src.addr, align 8, !tbaa !3
  %18 = load i32, i32* %i, align 4, !tbaa !15
  %idx.ext10 = sext i32 %18 to i64
  %add.ptr11 = getelementptr inbounds i8, i8* %17, i64 %idx.ext10
  %add.ptr12 = getelementptr inbounds i8, i8* %add.ptr11, i64 2
  %19 = load i8, i8* %add.ptr12, align 1, !tbaa !14
  %conv13 = zext i8 %19 to i32
  %call14 = call i32 @isxdigit(i32 %conv13) #19
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then16, label %if.else

if.then16:                                        ; preds = %land.lhs.true9
  %20 = load i8*, i8** %src.addr, align 8, !tbaa !3
  %21 = load i32, i32* %i, align 4, !tbaa !15
  %idx.ext17 = sext i32 %21 to i64
  %add.ptr18 = getelementptr inbounds i8, i8* %20, i64 %idx.ext17
  %add.ptr19 = getelementptr inbounds i8, i8* %add.ptr18, i64 1
  %22 = load i8, i8* %add.ptr19, align 1, !tbaa !14
  %conv20 = zext i8 %22 to i32
  %call21 = call i32 @tolower(i32 %conv20) #19
  store i32 %call21, i32* %a, align 4, !tbaa !15
  %23 = load i8*, i8** %src.addr, align 8, !tbaa !3
  %24 = load i32, i32* %i, align 4, !tbaa !15
  %idx.ext22 = sext i32 %24 to i64
  %add.ptr23 = getelementptr inbounds i8, i8* %23, i64 %idx.ext22
  %add.ptr24 = getelementptr inbounds i8, i8* %add.ptr23, i64 2
  %25 = load i8, i8* %add.ptr24, align 1, !tbaa !14
  %conv25 = zext i8 %25 to i32
  %call26 = call i32 @tolower(i32 %conv25) #19
  store i32 %call26, i32* %b, align 4, !tbaa !15
  %26 = load i32, i32* %a, align 4, !tbaa !15
  %call27 = call i32 @isdigit(i32 %26) #19
  %tobool28 = icmp ne i32 %call27, 0
  br i1 %tobool28, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then16
  %27 = load i32, i32* %a, align 4, !tbaa !15
  %sub29 = sub nsw i32 %27, 48
  br label %cond.end

cond.false:                                       ; preds = %if.then16
  %28 = load i32, i32* %a, align 4, !tbaa !15
  %sub30 = sub nsw i32 %28, 87
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub29, %cond.true ], [ %sub30, %cond.false ]
  %shl = shl i32 %cond, 4
  %29 = load i32, i32* %b, align 4, !tbaa !15
  %call31 = call i32 @isdigit(i32 %29) #19
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %cond.true33, label %cond.false35

cond.true33:                                      ; preds = %cond.end
  %30 = load i32, i32* %b, align 4, !tbaa !15
  %sub34 = sub nsw i32 %30, 48
  br label %cond.end37

cond.false35:                                     ; preds = %cond.end
  %31 = load i32, i32* %b, align 4, !tbaa !15
  %sub36 = sub nsw i32 %31, 87
  br label %cond.end37

cond.end37:                                       ; preds = %cond.false35, %cond.true33
  %cond38 = phi i32 [ %sub34, %cond.true33 ], [ %sub36, %cond.false35 ]
  %or = or i32 %shl, %cond38
  %conv39 = trunc i32 %or to i8
  %32 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %33 = load i32, i32* %j, align 4, !tbaa !15
  %idxprom40 = sext i32 %33 to i64
  %arrayidx41 = getelementptr inbounds i8, i8* %32, i64 %idxprom40
  store i8 %conv39, i8* %arrayidx41, align 1, !tbaa !14
  %34 = load i32, i32* %i, align 4, !tbaa !15
  %add = add nsw i32 %34, 2
  store i32 %add, i32* %i, align 4, !tbaa !15
  br label %if.end

if.else:                                          ; preds = %land.lhs.true9, %land.lhs.true, %if.then
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %cond.end37
  br label %if.end59

if.else42:                                        ; preds = %for.body
  %35 = load i32, i32* %is_form_url_encoded.addr, align 4, !tbaa !15
  %tobool43 = icmp ne i32 %35, 0
  br i1 %tobool43, label %land.lhs.true44, label %if.else53

land.lhs.true44:                                  ; preds = %if.else42
  %36 = load i8*, i8** %src.addr, align 8, !tbaa !3
  %37 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom45 = sext i32 %37 to i64
  %arrayidx46 = getelementptr inbounds i8, i8* %36, i64 %idxprom45
  %38 = load i8, i8* %arrayidx46, align 1, !tbaa !14
  %conv47 = sext i8 %38 to i32
  %cmp48 = icmp eq i32 %conv47, 43
  br i1 %cmp48, label %if.then50, label %if.else53

if.then50:                                        ; preds = %land.lhs.true44
  %39 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %40 = load i32, i32* %j, align 4, !tbaa !15
  %idxprom51 = sext i32 %40 to i64
  %arrayidx52 = getelementptr inbounds i8, i8* %39, i64 %idxprom51
  store i8 32, i8* %arrayidx52, align 1, !tbaa !14
  br label %if.end58

if.else53:                                        ; preds = %land.lhs.true44, %if.else42
  %41 = load i8*, i8** %src.addr, align 8, !tbaa !3
  %42 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom54 = sext i32 %42 to i64
  %arrayidx55 = getelementptr inbounds i8, i8* %41, i64 %idxprom54
  %43 = load i8, i8* %arrayidx55, align 1, !tbaa !14
  %44 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %45 = load i32, i32* %j, align 4, !tbaa !15
  %idxprom56 = sext i32 %45 to i64
  %arrayidx57 = getelementptr inbounds i8, i8* %44, i64 %idxprom56
  store i8 %43, i8* %arrayidx57, align 1, !tbaa !14
  br label %if.end58

if.end58:                                         ; preds = %if.else53, %if.then50
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end59
  %46 = load i32, i32* %i, align 4, !tbaa !15
  %inc = add nsw i32 %46, 1
  store i32 %inc, i32* %i, align 4, !tbaa !15
  %47 = load i32, i32* %j, align 4, !tbaa !15
  %inc60 = add nsw i32 %47, 1
  store i32 %inc60, i32* %j, align 4, !tbaa !15
  br label %for.cond

for.end:                                          ; preds = %land.end
  %48 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %49 = load i32, i32* %j, align 4, !tbaa !15
  %idxprom61 = sext i32 %49 to i64
  %arrayidx62 = getelementptr inbounds i8, i8* %48, i64 %idxprom61
  store i8 0, i8* %arrayidx62, align 1, !tbaa !14
  %50 = load i32, i32* %i, align 4, !tbaa !15
  %51 = load i32, i32* %src_len.addr, align 4, !tbaa !15
  %cmp63 = icmp sge i32 %50, %51
  br i1 %cmp63, label %cond.true65, label %cond.false66

cond.true65:                                      ; preds = %for.end
  %52 = load i32, i32* %j, align 4, !tbaa !15
  br label %cond.end67

cond.false66:                                     ; preds = %for.end
  br label %cond.end67

cond.end67:                                       ; preds = %cond.false66, %cond.true65
  %cond68 = phi i32 [ %52, %cond.true65 ], [ -1, %cond.false66 ]
  store i32 %cond68, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %cond.end67, %if.else
  %53 = bitcast i32* %b to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %53) #5
  %54 = bitcast i32* %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %54) #5
  %55 = bitcast i32* %j to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %55) #5
  %56 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %56) #5
  %57 = load i32, i32* %retval, align 4
  ret i32 %57
}

; Function Attrs: inlinehint nounwind readonly ssp uwtable
define available_externally i32 @isxdigit(i32 %_c) #9 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4, !tbaa !15
  %0 = load i32, i32* %_c.addr, align 4, !tbaa !15
  %call = call i32 @__isctype(i32 %0, i64 65536)
  ret i32 %call
}

; Function Attrs: inlinehint nounwind readonly ssp uwtable
define available_externally i32 @isdigit(i32 %_c) #9 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4, !tbaa !15
  %0 = load i32, i32* %_c.addr, align 4, !tbaa !15
  %call = call i32 @__isctype(i32 %0, i64 1024)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_get_http_var(%struct.mg_str* %buf, i8* %name, i8* %dst, i64 %dst_len) #0 {
entry:
  %buf.addr = alloca %struct.mg_str*, align 8
  %name.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %dst_len.addr = alloca i64, align 8
  %p = alloca i8*, align 8
  %e = alloca i8*, align 8
  %s = alloca i8*, align 8
  %name_len = alloca i64, align 8
  %len = alloca i32, align 4
  store %struct.mg_str* %buf, %struct.mg_str** %buf.addr, align 8, !tbaa !3
  store i8* %name, i8** %name.addr, align 8, !tbaa !3
  store i8* %dst, i8** %dst.addr, align 8, !tbaa !3
  store i64 %dst_len, i64* %dst_len.addr, align 8, !tbaa !12
  %0 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = bitcast i8** %e to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %2 = bitcast i8** %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  %3 = bitcast i64* %name_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  %4 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #5
  %5 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %cmp = icmp eq i8* %5, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %6 = load i64, i64* %dst_len.addr, align 8, !tbaa !12
  %cmp1 = icmp eq i64 %6, 0
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 -2, i32* %len, align 4, !tbaa !15
  br label %if.end47

if.else:                                          ; preds = %lor.lhs.false
  %7 = load %struct.mg_str*, %struct.mg_str** %buf.addr, align 8, !tbaa !3
  %p2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %7, i32 0, i32 0
  %8 = load i8*, i8** %p2, align 8, !tbaa !16
  %cmp3 = icmp eq i8* %8, null
  br i1 %cmp3, label %if.then9, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %if.else
  %9 = load i8*, i8** %name.addr, align 8, !tbaa !3
  %cmp5 = icmp eq i8* %9, null
  br i1 %cmp5, label %if.then9, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false4
  %10 = load %struct.mg_str*, %struct.mg_str** %buf.addr, align 8, !tbaa !3
  %len7 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %10, i32 0, i32 1
  %11 = load i64, i64* %len7, align 8, !tbaa !18
  %cmp8 = icmp eq i64 %11, 0
  br i1 %cmp8, label %if.then9, label %if.else10

if.then9:                                         ; preds = %lor.lhs.false6, %lor.lhs.false4, %if.else
  store i32 -1, i32* %len, align 4, !tbaa !15
  %12 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %arrayidx = getelementptr inbounds i8, i8* %12, i64 0
  store i8 0, i8* %arrayidx, align 1, !tbaa !14
  br label %if.end46

if.else10:                                        ; preds = %lor.lhs.false6
  %13 = load i8*, i8** %name.addr, align 8, !tbaa !3
  %call = call i64 @strlen(i8* %13)
  store i64 %call, i64* %name_len, align 8, !tbaa !12
  %14 = load %struct.mg_str*, %struct.mg_str** %buf.addr, align 8, !tbaa !3
  %p11 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %14, i32 0, i32 0
  %15 = load i8*, i8** %p11, align 8, !tbaa !16
  %16 = load %struct.mg_str*, %struct.mg_str** %buf.addr, align 8, !tbaa !3
  %len12 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %16, i32 0, i32 1
  %17 = load i64, i64* %len12, align 8, !tbaa !18
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 %17
  store i8* %add.ptr, i8** %e, align 8, !tbaa !3
  store i32 -4, i32* %len, align 4, !tbaa !15
  %18 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %arrayidx13 = getelementptr inbounds i8, i8* %18, i64 0
  store i8 0, i8* %arrayidx13, align 1, !tbaa !14
  %19 = load %struct.mg_str*, %struct.mg_str** %buf.addr, align 8, !tbaa !3
  %p14 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %19, i32 0, i32 0
  %20 = load i8*, i8** %p14, align 8, !tbaa !16
  store i8* %20, i8** %p, align 8, !tbaa !3
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else10
  %21 = load i8*, i8** %p, align 8, !tbaa !3
  %22 = load i64, i64* %name_len, align 8, !tbaa !12
  %add.ptr15 = getelementptr inbounds i8, i8* %21, i64 %22
  %23 = load i8*, i8** %e, align 8, !tbaa !3
  %cmp16 = icmp ult i8* %add.ptr15, %23
  br i1 %cmp16, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %24 = load i8*, i8** %p, align 8, !tbaa !3
  %25 = load %struct.mg_str*, %struct.mg_str** %buf.addr, align 8, !tbaa !3
  %p17 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %25, i32 0, i32 0
  %26 = load i8*, i8** %p17, align 8, !tbaa !16
  %cmp18 = icmp eq i8* %24, %26
  br i1 %cmp18, label %land.lhs.true, label %lor.lhs.false19

lor.lhs.false19:                                  ; preds = %for.body
  %27 = load i8*, i8** %p, align 8, !tbaa !3
  %arrayidx20 = getelementptr inbounds i8, i8* %27, i64 -1
  %28 = load i8, i8* %arrayidx20, align 1, !tbaa !14
  %conv = sext i8 %28 to i32
  %cmp21 = icmp eq i32 %conv, 38
  br i1 %cmp21, label %land.lhs.true, label %if.end45

land.lhs.true:                                    ; preds = %lor.lhs.false19, %for.body
  %29 = load i8*, i8** %p, align 8, !tbaa !3
  %30 = load i64, i64* %name_len, align 8, !tbaa !12
  %arrayidx23 = getelementptr inbounds i8, i8* %29, i64 %30
  %31 = load i8, i8* %arrayidx23, align 1, !tbaa !14
  %conv24 = sext i8 %31 to i32
  %cmp25 = icmp eq i32 %conv24, 61
  br i1 %cmp25, label %land.lhs.true27, label %if.end45

land.lhs.true27:                                  ; preds = %land.lhs.true
  %32 = load i8*, i8** %name.addr, align 8, !tbaa !3
  %33 = load i8*, i8** %p, align 8, !tbaa !3
  %34 = load i64, i64* %name_len, align 8, !tbaa !12
  %call28 = call i32 @mg_ncasecmp(i8* %32, i8* %33, i64 %34)
  %tobool = icmp ne i32 %call28, 0
  br i1 %tobool, label %if.end45, label %if.then29

if.then29:                                        ; preds = %land.lhs.true27
  %35 = load i64, i64* %name_len, align 8, !tbaa !12
  %add = add i64 %35, 1
  %36 = load i8*, i8** %p, align 8, !tbaa !3
  %add.ptr30 = getelementptr inbounds i8, i8* %36, i64 %add
  store i8* %add.ptr30, i8** %p, align 8, !tbaa !3
  %37 = load i8*, i8** %p, align 8, !tbaa !3
  %38 = load i8*, i8** %e, align 8, !tbaa !3
  %39 = load i8*, i8** %p, align 8, !tbaa !3
  %sub.ptr.lhs.cast = ptrtoint i8* %38 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %39 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call31 = call i8* @memchr(i8* %37, i32 38, i64 %sub.ptr.sub)
  store i8* %call31, i8** %s, align 8, !tbaa !3
  %40 = load i8*, i8** %s, align 8, !tbaa !3
  %cmp32 = icmp eq i8* %40, null
  br i1 %cmp32, label %if.then34, label %if.end

if.then34:                                        ; preds = %if.then29
  %41 = load i8*, i8** %e, align 8, !tbaa !3
  store i8* %41, i8** %s, align 8, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %if.then34, %if.then29
  %42 = load i8*, i8** %p, align 8, !tbaa !3
  %43 = load i8*, i8** %s, align 8, !tbaa !3
  %44 = load i8*, i8** %p, align 8, !tbaa !3
  %sub.ptr.lhs.cast35 = ptrtoint i8* %43 to i64
  %sub.ptr.rhs.cast36 = ptrtoint i8* %44 to i64
  %sub.ptr.sub37 = sub i64 %sub.ptr.lhs.cast35, %sub.ptr.rhs.cast36
  %conv38 = trunc i64 %sub.ptr.sub37 to i32
  %45 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %46 = load i64, i64* %dst_len.addr, align 8, !tbaa !12
  %conv39 = trunc i64 %46 to i32
  %call40 = call i32 @mg_url_decode(i8* %42, i32 %conv38, i8* %45, i32 %conv39, i32 1)
  store i32 %call40, i32* %len, align 4, !tbaa !15
  %47 = load i32, i32* %len, align 4, !tbaa !15
  %cmp41 = icmp eq i32 %47, -1
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %if.end
  store i32 -3, i32* %len, align 4, !tbaa !15
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %if.end
  br label %for.end

if.end45:                                         ; preds = %land.lhs.true27, %land.lhs.true, %lor.lhs.false19
  br label %for.inc

for.inc:                                          ; preds = %if.end45
  %48 = load i8*, i8** %p, align 8, !tbaa !3
  %incdec.ptr = getelementptr inbounds i8, i8* %48, i32 1
  store i8* %incdec.ptr, i8** %p, align 8, !tbaa !3
  br label %for.cond

for.end:                                          ; preds = %if.end44, %for.cond
  br label %if.end46

if.end46:                                         ; preds = %for.end, %if.then9
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %if.then
  %49 = load i32, i32* %len, align 4, !tbaa !15
  %50 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %50) #5
  %51 = bitcast i64* %name_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %51) #5
  %52 = bitcast i8** %s to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %52) #5
  %53 = bitcast i8** %e to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %53) #5
  %54 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %54) #5
  ret i32 %49
}

; Function Attrs: nounwind ssp uwtable
define void @mg_send_http_chunk(%struct.mg_connection* %nc, i8* %buf, i64 %len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %chunk_size = alloca [50 x i8], align 16
  %n = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  %0 = bitcast [50 x i8]* %chunk_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 50, i8* %0) #5
  %1 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  %arraydecay = getelementptr inbounds [50 x i8], [50 x i8]* %chunk_size, i32 0, i32 0
  %2 = load i64, i64* %len.addr, align 8, !tbaa !12
  %call = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay, i64 50, i32 0, i64 50, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.87, i32 0, i32 0), i64 %2)
  store i32 %call, i32* %n, align 4, !tbaa !15
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %arraydecay1 = getelementptr inbounds [50 x i8], [50 x i8]* %chunk_size, i32 0, i32 0
  %4 = load i32, i32* %n, align 4, !tbaa !15
  call void @mg_send(%struct.mg_connection* %3, i8* %arraydecay1, i32 %4)
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %6 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %7 = load i64, i64* %len.addr, align 8, !tbaa !12
  %conv = trunc i64 %7 to i32
  call void @mg_send(%struct.mg_connection* %5, i8* %6, i32 %conv)
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_send(%struct.mg_connection* %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i32 2)
  %9 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %9) #5
  %10 = bitcast [50 x i8]* %chunk_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 50, i8* %10) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_printf_http_chunk(%struct.mg_connection* %nc, i8* %fmt, ...) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %fmt.addr = alloca i8*, align 8
  %mem = alloca [100 x i8], align 16
  %buf = alloca i8*, align 8
  %len = alloca i32, align 4
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %fmt, i8** %fmt.addr, align 8, !tbaa !3
  %0 = bitcast [100 x i8]* %mem to i8*
  call void @llvm.lifetime.start.p0i8(i64 100, i8* %0) #5
  %1 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %mem, i32 0, i32 0
  store i8* %arraydecay, i8** %buf, align 8, !tbaa !3
  %2 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  %3 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %3) #5
  %arraydecay1 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay12 = bitcast %struct.__va_list_tag* %arraydecay1 to i8*
  call void @llvm.va_start(i8* %arraydecay12)
  %4 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %call = call i32 @mg_avprintf(i8** %buf, i64 100, i8* %4, %struct.__va_list_tag* %arraydecay3)
  store i32 %call, i32* %len, align 4, !tbaa !15
  %arraydecay4 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay45 = bitcast %struct.__va_list_tag* %arraydecay4 to i8*
  call void @llvm.va_end(i8* %arraydecay45)
  %5 = load i32, i32* %len, align 4, !tbaa !15
  %cmp = icmp sge i32 %5, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %7 = load i8*, i8** %buf, align 8, !tbaa !3
  %8 = load i32, i32* %len, align 4, !tbaa !15
  %conv = sext i32 %8 to i64
  call void @mg_send_http_chunk(%struct.mg_connection* %6, i8* %7, i64 %conv)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %9 = load i8*, i8** %buf, align 8, !tbaa !3
  %arraydecay6 = getelementptr inbounds [100 x i8], [100 x i8]* %mem, i32 0, i32 0
  %cmp7 = icmp ne i8* %9, %arraydecay6
  br i1 %cmp7, label %land.lhs.true, label %if.end12

land.lhs.true:                                    ; preds = %if.end
  %10 = load i8*, i8** %buf, align 8, !tbaa !3
  %cmp9 = icmp ne i8* %10, null
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %land.lhs.true
  %11 = load i8*, i8** %buf, align 8, !tbaa !3
  call void @free(i8* %11)
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %land.lhs.true, %if.end
  %12 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %12) #5
  %13 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %13) #5
  %14 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %14) #5
  %15 = bitcast [100 x i8]* %mem to i8*
  call void @llvm.lifetime.end.p0i8(i64 100, i8* %15) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_printf_html_escape(%struct.mg_connection* %nc, i8* %fmt, ...) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %fmt.addr = alloca i8*, align 8
  %mem = alloca [100 x i8], align 16
  %buf = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %len = alloca i32, align 4
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %fmt, i8** %fmt.addr, align 8, !tbaa !3
  %0 = bitcast [100 x i8]* %mem to i8*
  call void @llvm.lifetime.start.p0i8(i64 100, i8* %0) #5
  %1 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %mem, i32 0, i32 0
  store i8* %arraydecay, i8** %buf, align 8, !tbaa !3
  %2 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  %3 = bitcast i32* %j to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  %4 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #5
  %5 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %5) #5
  %arraydecay1 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay12 = bitcast %struct.__va_list_tag* %arraydecay1 to i8*
  call void @llvm.va_start(i8* %arraydecay12)
  %6 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %call = call i32 @mg_avprintf(i8** %buf, i64 100, i8* %6, %struct.__va_list_tag* %arraydecay3)
  store i32 %call, i32* %len, align 4, !tbaa !15
  %arraydecay4 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay45 = bitcast %struct.__va_list_tag* %arraydecay4 to i8*
  call void @llvm.va_end(i8* %arraydecay45)
  %7 = load i32, i32* %len, align 4, !tbaa !15
  %cmp = icmp sge i32 %7, 0
  br i1 %cmp, label %if.then, label %if.end23

if.then:                                          ; preds = %entry
  store i32 0, i32* %j, align 4, !tbaa !15
  store i32 0, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %8 = load i32, i32* %i, align 4, !tbaa !15
  %9 = load i32, i32* %len, align 4, !tbaa !15
  %cmp6 = icmp slt i32 %8, %9
  br i1 %cmp6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i8*, i8** %buf, align 8, !tbaa !3
  %11 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds i8, i8* %10, i64 %idxprom
  %12 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = sext i8 %12 to i32
  %cmp7 = icmp eq i32 %conv, 60
  br i1 %cmp7, label %if.then14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %13 = load i8*, i8** %buf, align 8, !tbaa !3
  %14 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom9 = sext i32 %14 to i64
  %arrayidx10 = getelementptr inbounds i8, i8* %13, i64 %idxprom9
  %15 = load i8, i8* %arrayidx10, align 1, !tbaa !14
  %conv11 = sext i8 %15 to i32
  %cmp12 = icmp eq i32 %conv11, 62
  br i1 %cmp12, label %if.then14, label %if.end

if.then14:                                        ; preds = %lor.lhs.false, %for.body
  %16 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %17 = load i8*, i8** %buf, align 8, !tbaa !3
  %18 = load i32, i32* %j, align 4, !tbaa !15
  %idx.ext = sext i32 %18 to i64
  %add.ptr = getelementptr inbounds i8, i8* %17, i64 %idx.ext
  %19 = load i32, i32* %i, align 4, !tbaa !15
  %20 = load i32, i32* %j, align 4, !tbaa !15
  %sub = sub nsw i32 %19, %20
  call void @mg_send(%struct.mg_connection* %16, i8* %add.ptr, i32 %sub)
  %21 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %22 = load i8*, i8** %buf, align 8, !tbaa !3
  %23 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom15 = sext i32 %23 to i64
  %arrayidx16 = getelementptr inbounds i8, i8* %22, i64 %idxprom15
  %24 = load i8, i8* %arrayidx16, align 1, !tbaa !14
  %conv17 = sext i8 %24 to i32
  %cmp18 = icmp eq i32 %conv17, 60
  %25 = zext i1 %cmp18 to i64
  %cond = select i1 %cmp18, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.88, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.89, i32 0, i32 0)
  call void @mg_send(%struct.mg_connection* %21, i8* %cond, i32 4)
  %26 = load i32, i32* %i, align 4, !tbaa !15
  %add = add nsw i32 %26, 1
  store i32 %add, i32* %j, align 4, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then14, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %27 = load i32, i32* %i, align 4, !tbaa !15
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %29 = load i8*, i8** %buf, align 8, !tbaa !3
  %30 = load i32, i32* %j, align 4, !tbaa !15
  %idx.ext20 = sext i32 %30 to i64
  %add.ptr21 = getelementptr inbounds i8, i8* %29, i64 %idx.ext20
  %31 = load i32, i32* %i, align 4, !tbaa !15
  %32 = load i32, i32* %j, align 4, !tbaa !15
  %sub22 = sub nsw i32 %31, %32
  call void @mg_send(%struct.mg_connection* %28, i8* %add.ptr21, i32 %sub22)
  br label %if.end23

if.end23:                                         ; preds = %for.end, %entry
  %33 = load i8*, i8** %buf, align 8, !tbaa !3
  %arraydecay24 = getelementptr inbounds [100 x i8], [100 x i8]* %mem, i32 0, i32 0
  %cmp25 = icmp ne i8* %33, %arraydecay24
  br i1 %cmp25, label %land.lhs.true, label %if.end30

land.lhs.true:                                    ; preds = %if.end23
  %34 = load i8*, i8** %buf, align 8, !tbaa !3
  %cmp27 = icmp ne i8* %34, null
  br i1 %cmp27, label %if.then29, label %if.end30

if.then29:                                        ; preds = %land.lhs.true
  %35 = load i8*, i8** %buf, align 8, !tbaa !3
  call void @free(i8* %35)
  br label %if.end30

if.end30:                                         ; preds = %if.then29, %land.lhs.true, %if.end23
  %36 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %36) #5
  %37 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %37) #5
  %38 = bitcast i32* %j to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %38) #5
  %39 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %39) #5
  %40 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %40) #5
  %41 = bitcast [100 x i8]* %mem to i8*
  call void @llvm.lifetime.end.p0i8(i64 100, i8* %41) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_http_parse_header2(%struct.mg_str* %hdr, i8* %var_name, i8** %buf, i64 %buf_size) #0 {
entry:
  %retval = alloca i32, align 4
  %hdr.addr = alloca %struct.mg_str*, align 8
  %var_name.addr = alloca i8*, align 8
  %buf.addr = alloca i8**, align 8
  %buf_size.addr = alloca i64, align 8
  %ab = alloca %struct.altbuf, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_str* %hdr, %struct.mg_str** %hdr.addr, align 8, !tbaa !3
  store i8* %var_name, i8** %var_name.addr, align 8, !tbaa !3
  store i8** %buf, i8*** %buf.addr, align 8, !tbaa !3
  store i64 %buf_size, i64* %buf_size.addr, align 8, !tbaa !12
  %0 = bitcast %struct.altbuf* %ab to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* %0) #5
  %1 = load i8**, i8*** %buf.addr, align 8, !tbaa !3
  %2 = load i8*, i8** %1, align 8, !tbaa !3
  %3 = load i64, i64* %buf_size.addr, align 8, !tbaa !12
  call void @altbuf_init(%struct.altbuf* %ab, i8* %2, i64 %3)
  %4 = load %struct.mg_str*, %struct.mg_str** %hdr.addr, align 8, !tbaa !3
  %cmp = icmp eq %struct.mg_str* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %5 = load i8**, i8*** %buf.addr, align 8, !tbaa !3
  %6 = load i8*, i8** %5, align 8, !tbaa !3
  %cmp1 = icmp ne i8* %6, null
  br i1 %cmp1, label %land.lhs.true, label %if.end4

land.lhs.true:                                    ; preds = %if.end
  %7 = load i64, i64* %buf_size.addr, align 8, !tbaa !12
  %cmp2 = icmp ugt i64 %7, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %land.lhs.true
  %8 = load i8**, i8*** %buf.addr, align 8, !tbaa !3
  %arrayidx = getelementptr inbounds i8*, i8** %8, i64 0
  %9 = load i8*, i8** %arrayidx, align 8, !tbaa !3
  store i8 0, i8* %9, align 1, !tbaa !14
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %land.lhs.true, %if.end
  %10 = load %struct.mg_str*, %struct.mg_str** %hdr.addr, align 8, !tbaa !3
  %11 = load i8*, i8** %var_name.addr, align 8, !tbaa !3
  call void @mg_http_parse_header_internal(%struct.mg_str* %10, i8* %11, %struct.altbuf* %ab)
  %call = call i8* @altbuf_get_buf(%struct.altbuf* %ab, i32 1)
  %12 = load i8**, i8*** %buf.addr, align 8, !tbaa !3
  store i8* %call, i8** %12, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.altbuf, %struct.altbuf* %ab, i32 0, i32 2
  %13 = load i64, i64* %len, align 8, !tbaa !169
  %cmp5 = icmp ugt i64 %13, 0
  br i1 %cmp5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end4
  %len6 = getelementptr inbounds %struct.altbuf, %struct.altbuf* %ab, i32 0, i32 2
  %14 = load i64, i64* %len6, align 8, !tbaa !169
  %sub = sub i64 %14, 1
  br label %cond.end

cond.false:                                       ; preds = %if.end4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub, %cond.true ], [ 0, %cond.false ]
  %conv = trunc i64 %cond to i32
  store i32 %conv, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %cond.end, %if.then
  %15 = bitcast %struct.altbuf* %ab to i8*
  call void @llvm.lifetime.end.p0i8(i64 48, i8* %15) #5
  %16 = load i32, i32* %retval, align 4
  ret i32 %16
}

; Function Attrs: nounwind ssp uwtable
define internal void @altbuf_init(%struct.altbuf* %ab, i8* %buf, i64 %buf_size) #0 {
entry:
  %ab.addr = alloca %struct.altbuf*, align 8
  %buf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  store %struct.altbuf* %ab, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %buf_size, i64* %buf_size.addr, align 8, !tbaa !12
  %0 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %m = getelementptr inbounds %struct.altbuf, %struct.altbuf* %0, i32 0, i32 0
  call void @mbuf_init(%struct.mbuf* %m, i64 0)
  %1 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %2 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %user_buf = getelementptr inbounds %struct.altbuf, %struct.altbuf* %2, i32 0, i32 1
  store i8* %1, i8** %user_buf, align 8, !tbaa !171
  %3 = load i64, i64* %buf_size.addr, align 8, !tbaa !12
  %4 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %user_buf_size = getelementptr inbounds %struct.altbuf, %struct.altbuf* %4, i32 0, i32 3
  store i64 %3, i64* %user_buf_size, align 8, !tbaa !172
  %5 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.altbuf, %struct.altbuf* %5, i32 0, i32 2
  store i64 0, i64* %len, align 8, !tbaa !169
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_http_parse_header_internal(%struct.mg_str* %hdr, i8* %var_name, %struct.altbuf* %ab) #0 {
entry:
  %hdr.addr = alloca %struct.mg_str*, align 8
  %var_name.addr = alloca i8*, align 8
  %ab.addr = alloca %struct.altbuf*, align 8
  %ch = alloca i32, align 4
  %ch1 = alloca i32, align 4
  %ch2 = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca i8*, align 8
  %end = alloca i8*, align 8
  %s = alloca i8*, align 8
  store %struct.mg_str* %hdr, %struct.mg_str** %hdr.addr, align 8, !tbaa !3
  store i8* %var_name, i8** %var_name.addr, align 8, !tbaa !3
  store %struct.altbuf* %ab, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %0 = bitcast i32* %ch to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  store i32 32, i32* %ch, align 4, !tbaa !15
  %1 = bitcast i32* %ch1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  store i32 44, i32* %ch1, align 4, !tbaa !15
  %2 = bitcast i32* %ch2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  store i32 59, i32* %ch2, align 4, !tbaa !15
  %3 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  %4 = load i8*, i8** %var_name.addr, align 8, !tbaa !3
  %call = call i64 @strlen(i8* %4)
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %n, align 4, !tbaa !15
  %5 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #5
  %6 = bitcast i8** %end to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #5
  %7 = load %struct.mg_str*, %struct.mg_str** %hdr.addr, align 8, !tbaa !3
  %tobool = icmp ne %struct.mg_str* %7, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %8 = load %struct.mg_str*, %struct.mg_str** %hdr.addr, align 8, !tbaa !3
  %p1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %8, i32 0, i32 0
  %9 = load i8*, i8** %p1, align 8, !tbaa !16
  %10 = load %struct.mg_str*, %struct.mg_str** %hdr.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %10, i32 0, i32 1
  %11 = load i64, i64* %len, align 8, !tbaa !18
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 %11
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ null, %cond.false ]
  store i8* %cond, i8** %end, align 8, !tbaa !3
  %12 = bitcast i8** %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #5
  store i8* null, i8** %s, align 8, !tbaa !3
  %13 = load %struct.mg_str*, %struct.mg_str** %hdr.addr, align 8, !tbaa !3
  %p2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %13, i32 0, i32 0
  %14 = load i8*, i8** %p2, align 8, !tbaa !16
  store i8* %14, i8** %s, align 8, !tbaa !3
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %15 = load i8*, i8** %s, align 8, !tbaa !3
  %cmp = icmp ne i8* %15, null
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %16 = load i8*, i8** %s, align 8, !tbaa !3
  %17 = load i32, i32* %n, align 4, !tbaa !15
  %idx.ext = sext i32 %17 to i64
  %add.ptr4 = getelementptr inbounds i8, i8* %16, i64 %idx.ext
  %18 = load i8*, i8** %end, align 8, !tbaa !3
  %cmp5 = icmp ult i8* %add.ptr4, %18
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %19 = phi i1 [ false, %for.cond ], [ %cmp5, %land.rhs ]
  br i1 %19, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %20 = load i8*, i8** %s, align 8, !tbaa !3
  %21 = load %struct.mg_str*, %struct.mg_str** %hdr.addr, align 8, !tbaa !3
  %p7 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %21, i32 0, i32 0
  %22 = load i8*, i8** %p7, align 8, !tbaa !16
  %cmp8 = icmp eq i8* %20, %22
  br i1 %cmp8, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %23 = load i8*, i8** %s, align 8, !tbaa !3
  %arrayidx = getelementptr inbounds i8, i8* %23, i64 -1
  %24 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv10 = sext i8 %24 to i32
  %25 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp11 = icmp eq i32 %conv10, %25
  br i1 %cmp11, label %land.lhs.true, label %lor.lhs.false13

lor.lhs.false13:                                  ; preds = %lor.lhs.false
  %26 = load i8*, i8** %s, align 8, !tbaa !3
  %arrayidx14 = getelementptr inbounds i8, i8* %26, i64 -1
  %27 = load i8, i8* %arrayidx14, align 1, !tbaa !14
  %conv15 = sext i8 %27 to i32
  %28 = load i32, i32* %ch1, align 4, !tbaa !15
  %cmp16 = icmp eq i32 %conv15, %28
  br i1 %cmp16, label %land.lhs.true, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %lor.lhs.false13
  %29 = load i8*, i8** %s, align 8, !tbaa !3
  %arrayidx19 = getelementptr inbounds i8, i8* %29, i64 -1
  %30 = load i8, i8* %arrayidx19, align 1, !tbaa !14
  %conv20 = sext i8 %30 to i32
  %cmp21 = icmp eq i32 %conv20, 59
  br i1 %cmp21, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false18, %lor.lhs.false13, %lor.lhs.false, %for.body
  %31 = load i8*, i8** %s, align 8, !tbaa !3
  %32 = load i32, i32* %n, align 4, !tbaa !15
  %idxprom = sext i32 %32 to i64
  %arrayidx23 = getelementptr inbounds i8, i8* %31, i64 %idxprom
  %33 = load i8, i8* %arrayidx23, align 1, !tbaa !14
  %conv24 = sext i8 %33 to i32
  %cmp25 = icmp eq i32 %conv24, 61
  br i1 %cmp25, label %land.lhs.true27, label %if.end

land.lhs.true27:                                  ; preds = %land.lhs.true
  %34 = load i8*, i8** %s, align 8, !tbaa !3
  %35 = load i8*, i8** %var_name.addr, align 8, !tbaa !3
  %36 = load i32, i32* %n, align 4, !tbaa !15
  %conv28 = sext i32 %36 to i64
  %call29 = call i32 @strncmp(i8* %34, i8* %35, i64 %conv28)
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true27
  br label %for.end

if.end:                                           ; preds = %land.lhs.true27, %land.lhs.true, %lor.lhs.false18
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %37 = load i8*, i8** %s, align 8, !tbaa !3
  %incdec.ptr = getelementptr inbounds i8, i8* %37, i32 1
  store i8* %incdec.ptr, i8** %s, align 8, !tbaa !3
  br label %for.cond

for.end:                                          ; preds = %if.then, %land.end
  %38 = load i8*, i8** %s, align 8, !tbaa !3
  %cmp31 = icmp ne i8* %38, null
  br i1 %cmp31, label %land.lhs.true33, label %if.end95

land.lhs.true33:                                  ; preds = %for.end
  %39 = load i8*, i8** %s, align 8, !tbaa !3
  %40 = load i32, i32* %n, align 4, !tbaa !15
  %add = add nsw i32 %40, 1
  %idxprom34 = sext i32 %add to i64
  %arrayidx35 = getelementptr inbounds i8, i8* %39, i64 %idxprom34
  %41 = load i8*, i8** %end, align 8, !tbaa !3
  %cmp36 = icmp ult i8* %arrayidx35, %41
  br i1 %cmp36, label %if.then38, label %if.end95

if.then38:                                        ; preds = %land.lhs.true33
  %42 = load i32, i32* %n, align 4, !tbaa !15
  %add39 = add nsw i32 %42, 1
  %43 = load i8*, i8** %s, align 8, !tbaa !3
  %idx.ext40 = sext i32 %add39 to i64
  %add.ptr41 = getelementptr inbounds i8, i8* %43, i64 %idx.ext40
  store i8* %add.ptr41, i8** %s, align 8, !tbaa !3
  %44 = load i8*, i8** %s, align 8, !tbaa !3
  %45 = load i8, i8* %44, align 1, !tbaa !14
  %conv42 = sext i8 %45 to i32
  %cmp43 = icmp eq i32 %conv42, 34
  br i1 %cmp43, label %if.then49, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %if.then38
  %46 = load i8*, i8** %s, align 8, !tbaa !3
  %47 = load i8, i8* %46, align 1, !tbaa !14
  %conv46 = sext i8 %47 to i32
  %cmp47 = icmp eq i32 %conv46, 39
  br i1 %cmp47, label %if.then49, label %if.end52

if.then49:                                        ; preds = %lor.lhs.false45, %if.then38
  %48 = load i8*, i8** %s, align 8, !tbaa !3
  %incdec.ptr50 = getelementptr inbounds i8, i8* %48, i32 1
  store i8* %incdec.ptr50, i8** %s, align 8, !tbaa !3
  %49 = load i8, i8* %48, align 1, !tbaa !14
  %conv51 = sext i8 %49 to i32
  store i32 %conv51, i32* %ch2, align 4, !tbaa !15
  store i32 %conv51, i32* %ch1, align 4, !tbaa !15
  store i32 %conv51, i32* %ch, align 4, !tbaa !15
  br label %if.end52

if.end52:                                         ; preds = %if.then49, %lor.lhs.false45
  %50 = load i8*, i8** %s, align 8, !tbaa !3
  store i8* %50, i8** %p, align 8, !tbaa !3
  br label %while.cond

while.cond:                                       ; preds = %if.end85, %if.end52
  %51 = load i8*, i8** %p, align 8, !tbaa !3
  %52 = load i8*, i8** %end, align 8, !tbaa !3
  %cmp53 = icmp ult i8* %51, %52
  br i1 %cmp53, label %land.lhs.true55, label %land.end70

land.lhs.true55:                                  ; preds = %while.cond
  %53 = load i8*, i8** %p, align 8, !tbaa !3
  %arrayidx56 = getelementptr inbounds i8, i8* %53, i64 0
  %54 = load i8, i8* %arrayidx56, align 1, !tbaa !14
  %conv57 = sext i8 %54 to i32
  %55 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp58 = icmp ne i32 %conv57, %55
  br i1 %cmp58, label %land.lhs.true60, label %land.end70

land.lhs.true60:                                  ; preds = %land.lhs.true55
  %56 = load i8*, i8** %p, align 8, !tbaa !3
  %arrayidx61 = getelementptr inbounds i8, i8* %56, i64 0
  %57 = load i8, i8* %arrayidx61, align 1, !tbaa !14
  %conv62 = sext i8 %57 to i32
  %58 = load i32, i32* %ch1, align 4, !tbaa !15
  %cmp63 = icmp ne i32 %conv62, %58
  br i1 %cmp63, label %land.rhs65, label %land.end70

land.rhs65:                                       ; preds = %land.lhs.true60
  %59 = load i8*, i8** %p, align 8, !tbaa !3
  %arrayidx66 = getelementptr inbounds i8, i8* %59, i64 0
  %60 = load i8, i8* %arrayidx66, align 1, !tbaa !14
  %conv67 = sext i8 %60 to i32
  %61 = load i32, i32* %ch2, align 4, !tbaa !15
  %cmp68 = icmp ne i32 %conv67, %61
  br label %land.end70

land.end70:                                       ; preds = %land.rhs65, %land.lhs.true60, %land.lhs.true55, %while.cond
  %62 = phi i1 [ false, %land.lhs.true60 ], [ false, %land.lhs.true55 ], [ false, %while.cond ], [ %cmp68, %land.rhs65 ]
  br i1 %62, label %while.body, label %while.end

while.body:                                       ; preds = %land.end70
  %63 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp71 = icmp ne i32 %63, 32
  br i1 %cmp71, label %land.lhs.true73, label %if.end85

land.lhs.true73:                                  ; preds = %while.body
  %64 = load i8*, i8** %p, align 8, !tbaa !3
  %arrayidx74 = getelementptr inbounds i8, i8* %64, i64 0
  %65 = load i8, i8* %arrayidx74, align 1, !tbaa !14
  %conv75 = sext i8 %65 to i32
  %cmp76 = icmp eq i32 %conv75, 92
  br i1 %cmp76, label %land.lhs.true78, label %if.end85

land.lhs.true78:                                  ; preds = %land.lhs.true73
  %66 = load i8*, i8** %p, align 8, !tbaa !3
  %arrayidx79 = getelementptr inbounds i8, i8* %66, i64 1
  %67 = load i8, i8* %arrayidx79, align 1, !tbaa !14
  %conv80 = sext i8 %67 to i32
  %68 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp81 = icmp eq i32 %conv80, %68
  br i1 %cmp81, label %if.then83, label %if.end85

if.then83:                                        ; preds = %land.lhs.true78
  %69 = load i8*, i8** %p, align 8, !tbaa !3
  %incdec.ptr84 = getelementptr inbounds i8, i8* %69, i32 1
  store i8* %incdec.ptr84, i8** %p, align 8, !tbaa !3
  br label %if.end85

if.end85:                                         ; preds = %if.then83, %land.lhs.true78, %land.lhs.true73, %while.body
  %70 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %71 = load i8*, i8** %p, align 8, !tbaa !3
  %incdec.ptr86 = getelementptr inbounds i8, i8* %71, i32 1
  store i8* %incdec.ptr86, i8** %p, align 8, !tbaa !3
  %72 = load i8, i8* %71, align 1, !tbaa !14
  call void @altbuf_append(%struct.altbuf* %70, i8 signext %72)
  br label %while.cond

while.end:                                        ; preds = %land.end70
  %73 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp87 = icmp ne i32 %73, 32
  br i1 %cmp87, label %land.lhs.true89, label %if.end94

land.lhs.true89:                                  ; preds = %while.end
  %74 = load i8*, i8** %p, align 8, !tbaa !3
  %75 = load i8, i8* %74, align 1, !tbaa !14
  %conv90 = sext i8 %75 to i32
  %76 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp91 = icmp ne i32 %conv90, %76
  br i1 %cmp91, label %if.then93, label %if.end94

if.then93:                                        ; preds = %land.lhs.true89
  %77 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  call void @altbuf_reset(%struct.altbuf* %77)
  br label %if.end94

if.end94:                                         ; preds = %if.then93, %land.lhs.true89, %while.end
  br label %if.end95

if.end95:                                         ; preds = %if.end94, %land.lhs.true33, %for.end
  %78 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %len96 = getelementptr inbounds %struct.altbuf, %struct.altbuf* %78, i32 0, i32 2
  %79 = load i64, i64* %len96, align 8, !tbaa !169
  %cmp97 = icmp ugt i64 %79, 0
  br i1 %cmp97, label %if.then99, label %if.end100

if.then99:                                        ; preds = %if.end95
  %80 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  call void @altbuf_append(%struct.altbuf* %80, i8 signext 0)
  br label %if.end100

if.end100:                                        ; preds = %if.then99, %if.end95
  %81 = bitcast i8** %s to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %81) #5
  %82 = bitcast i8** %end to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %82) #5
  %83 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %83) #5
  %84 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %84) #5
  %85 = bitcast i32* %ch2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %85) #5
  %86 = bitcast i32* %ch1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %86) #5
  %87 = bitcast i32* %ch to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %87) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @altbuf_get_buf(%struct.altbuf* %ab, i32 %trim) #0 {
entry:
  %retval = alloca i8*, align 8
  %ab.addr = alloca %struct.altbuf*, align 8
  %trim.addr = alloca i32, align 4
  store %struct.altbuf* %ab, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  store i32 %trim, i32* %trim.addr, align 4, !tbaa !15
  %0 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %call = call i32 @altbuf_reallocated(%struct.altbuf* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %trim.addr, align 4, !tbaa !15
  %tobool1 = icmp ne i32 %1, 0
  br i1 %tobool1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %2 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %m = getelementptr inbounds %struct.altbuf, %struct.altbuf* %2, i32 0, i32 0
  call void @mbuf_trim(%struct.mbuf* %m)
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %3 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %m3 = getelementptr inbounds %struct.altbuf, %struct.altbuf* %3, i32 0, i32 0
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %m3, i32 0, i32 0
  %4 = load i8*, i8** %buf, align 8, !tbaa !173
  store i8* %4, i8** %retval, align 8
  br label %return

if.else:                                          ; preds = %entry
  %5 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %user_buf = getelementptr inbounds %struct.altbuf, %struct.altbuf* %5, i32 0, i32 1
  %6 = load i8*, i8** %user_buf, align 8, !tbaa !171
  store i8* %6, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.else, %if.end
  %7 = load i8*, i8** %retval, align 8
  ret i8* %7
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_http_parse_header(%struct.mg_str* %hdr, i8* %var_name, i8* %buf, i64 %buf_size) #0 {
entry:
  %retval = alloca i32, align 4
  %hdr.addr = alloca %struct.mg_str*, align 8
  %var_name.addr = alloca i8*, align 8
  %buf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %buf2 = alloca i8*, align 8
  %len = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_str* %hdr, %struct.mg_str** %hdr.addr, align 8, !tbaa !3
  store i8* %var_name, i8** %var_name.addr, align 8, !tbaa !3
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %buf_size, i64* %buf_size.addr, align 8, !tbaa !12
  %0 = bitcast i8** %buf2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  store i8* %1, i8** %buf2, align 8, !tbaa !3
  %2 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  %3 = load %struct.mg_str*, %struct.mg_str** %hdr.addr, align 8, !tbaa !3
  %4 = load i8*, i8** %var_name.addr, align 8, !tbaa !3
  %5 = load i64, i64* %buf_size.addr, align 8, !tbaa !12
  %call = call i32 @mg_http_parse_header2(%struct.mg_str* %3, i8* %4, i8** %buf2, i64 %5)
  store i32 %call, i32* %len, align 4, !tbaa !15
  %6 = load i8*, i8** %buf2, align 8, !tbaa !3
  %7 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %cmp = icmp ne i8* %6, %7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load i8*, i8** %buf2, align 8, !tbaa !3
  call void @free(i8* %8)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %9 = load i32, i32* %len, align 4, !tbaa !15
  store i32 %9, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %10 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %10) #5
  %11 = bitcast i8** %buf2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %11) #5
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_get_http_basic_auth(%struct.http_message* %hm, i8* %user, i64 %user_len, i8* %pass, i64 %pass_len) #0 {
entry:
  %retval = alloca i32, align 4
  %hm.addr = alloca %struct.http_message*, align 8
  %user.addr = alloca i8*, align 8
  %user_len.addr = alloca i64, align 8
  %pass.addr = alloca i8*, align 8
  %pass_len.addr = alloca i64, align 8
  %hdr = alloca %struct.mg_str*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  store i8* %user, i8** %user.addr, align 8, !tbaa !3
  store i64 %user_len, i64* %user_len.addr, align 8, !tbaa !12
  store i8* %pass, i8** %pass.addr, align 8, !tbaa !3
  store i64 %pass_len, i64* %pass_len.addr, align 8, !tbaa !12
  %0 = bitcast %struct.mg_str** %hdr to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %call = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.90, i32 0, i32 0))
  store %struct.mg_str* %call, %struct.mg_str** %hdr, align 8, !tbaa !3
  %2 = load %struct.mg_str*, %struct.mg_str** %hdr, align 8, !tbaa !3
  %cmp = icmp eq %struct.mg_str* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %3 = load %struct.mg_str*, %struct.mg_str** %hdr, align 8, !tbaa !3
  %4 = load i8*, i8** %user.addr, align 8, !tbaa !3
  %5 = load i64, i64* %user_len.addr, align 8, !tbaa !12
  %6 = load i8*, i8** %pass.addr, align 8, !tbaa !3
  %7 = load i64, i64* %pass_len.addr, align 8, !tbaa !12
  %call1 = call i32 @mg_parse_http_basic_auth(%struct.mg_str* %3, i8* %4, i64 %5, i8* %6, i64 %7)
  store i32 %call1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %8 = bitcast %struct.mg_str** %hdr to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %8) #5
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_parse_http_basic_auth(%struct.mg_str* %hdr, i8* %user, i64 %user_len, i8* %pass, i64 %pass_len) #0 {
entry:
  %retval = alloca i32, align 4
  %hdr.addr = alloca %struct.mg_str*, align 8
  %user.addr = alloca i8*, align 8
  %user_len.addr = alloca i64, align 8
  %pass.addr = alloca i8*, align 8
  %pass_len.addr = alloca i64, align 8
  %buf = alloca i8*, align 8
  %fmt = alloca [64 x i8], align 16
  %res = alloca i32, align 4
  %agg.tmp = alloca %struct.mg_str, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_str* %hdr, %struct.mg_str** %hdr.addr, align 8, !tbaa !3
  store i8* %user, i8** %user.addr, align 8, !tbaa !3
  store i64 %user_len, i64* %user_len.addr, align 8, !tbaa !12
  store i8* %pass, i8** %pass.addr, align 8, !tbaa !3
  store i64 %pass_len, i64* %pass_len.addr, align 8, !tbaa !12
  %0 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  store i8* null, i8** %buf, align 8, !tbaa !3
  %1 = bitcast [64 x i8]* %fmt to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* %1) #5
  %2 = bitcast i32* %res to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  store i32 0, i32* %res, align 4, !tbaa !15
  %3 = load %struct.mg_str*, %struct.mg_str** %hdr.addr, align 8, !tbaa !3
  %call = call { i8*, i64 } @mg_mk_str(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.91, i32 0, i32 0))
  %4 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %4, i32 0, i32 0
  %6 = extractvalue { i8*, i64 } %call, 0
  store i8* %6, i8** %5, align 8
  %7 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %4, i32 0, i32 1
  %8 = extractvalue { i8*, i64 } %call, 1
  store i64 %8, i64* %7, align 8
  %9 = bitcast %struct.mg_str* %3 to { i8*, i64 }*
  %10 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %9, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %9, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %15 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  %call1 = call i32 @mg_strncmp(i8* %11, i64 %13, i8* %16, i64 %18, i64 6)
  %cmp = icmp ne i32 %call1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %19 = load %struct.mg_str*, %struct.mg_str** %hdr.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %19, i32 0, i32 1
  %20 = load i64, i64* %len, align 8, !tbaa !18
  %call2 = call i8* @malloc(i64 %20) #18
  store i8* %call2, i8** %buf, align 8, !tbaa !3
  %21 = load %struct.mg_str*, %struct.mg_str** %hdr.addr, align 8, !tbaa !3
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %21, i32 0, i32 0
  %22 = load i8*, i8** %p, align 8, !tbaa !16
  %add.ptr = getelementptr inbounds i8, i8* %22, i64 6
  %23 = load %struct.mg_str*, %struct.mg_str** %hdr.addr, align 8, !tbaa !3
  %len3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %23, i32 0, i32 1
  %24 = load i64, i64* %len3, align 8, !tbaa !18
  %conv = trunc i64 %24 to i32
  %25 = load i8*, i8** %buf, align 8, !tbaa !3
  %call4 = call i32 @cs_base64_decode(i8* %add.ptr, i32 %conv, i8* %25, i32* null)
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %fmt, i32 0, i32 0
  %26 = load i64, i64* %user_len.addr, align 8, !tbaa !12
  %sub = sub i64 %26, 1
  %27 = load i64, i64* %pass_len.addr, align 8, !tbaa !12
  %sub5 = sub i64 %27, 1
  %call6 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay, i64 64, i32 0, i64 64, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.92, i32 0, i32 0), i64 %sub, i64 %sub5)
  %28 = load i8*, i8** %buf, align 8, !tbaa !3
  %arraydecay7 = getelementptr inbounds [64 x i8], [64 x i8]* %fmt, i32 0, i32 0
  %29 = load i8*, i8** %user.addr, align 8, !tbaa !3
  %30 = load i8*, i8** %pass.addr, align 8, !tbaa !3
  %call8 = call i32 (i8*, i8*, ...) @sscanf(i8* %28, i8* %arraydecay7, i8* %29, i8* %30)
  %cmp9 = icmp eq i32 %call8, 0
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end
  store i32 -1, i32* %res, align 4, !tbaa !15
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.end
  %31 = load i8*, i8** %buf, align 8, !tbaa !3
  call void @free(i8* %31)
  %32 = load i32, i32* %res, align 4, !tbaa !15
  store i32 %32, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end12, %if.then
  %33 = bitcast i32* %res to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %33) #5
  %34 = bitcast [64 x i8]* %fmt to i8*
  call void @llvm.lifetime.end.p0i8(i64 64, i8* %34) #5
  %35 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %35) #5
  %36 = load i32, i32* %retval, align 4
  ret i32 %36
}

declare i32 @sscanf(i8*, i8*, ...) #4

; Function Attrs: nounwind ssp uwtable
define void @mg_hash_md5_v(i64 %num_msgs, i8** %msgs, i64* %msg_lens, i8* %digest) #0 {
entry:
  %num_msgs.addr = alloca i64, align 8
  %msgs.addr = alloca i8**, align 8
  %msg_lens.addr = alloca i64*, align 8
  %digest.addr = alloca i8*, align 8
  %i = alloca i64, align 8
  %md5_ctx = alloca %struct.cs_md5_ctx, align 4
  store i64 %num_msgs, i64* %num_msgs.addr, align 8, !tbaa !12
  store i8** %msgs, i8*** %msgs.addr, align 8, !tbaa !3
  store i64* %msg_lens, i64** %msg_lens.addr, align 8, !tbaa !3
  store i8* %digest, i8** %digest.addr, align 8, !tbaa !3
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = bitcast %struct.cs_md5_ctx* %md5_ctx to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* %1) #5
  call void @cs_md5_init(%struct.cs_md5_ctx* %md5_ctx)
  store i64 0, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, i64* %i, align 8, !tbaa !12
  %3 = load i64, i64* %num_msgs.addr, align 8, !tbaa !12
  %cmp = icmp ult i64 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8**, i8*** %msgs.addr, align 8, !tbaa !3
  %5 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx = getelementptr inbounds i8*, i8** %4, i64 %5
  %6 = load i8*, i8** %arrayidx, align 8, !tbaa !3
  %7 = load i64*, i64** %msg_lens.addr, align 8, !tbaa !3
  %8 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx1 = getelementptr inbounds i64, i64* %7, i64 %8
  %9 = load i64, i64* %arrayidx1, align 8, !tbaa !12
  call void @cs_md5_update(%struct.cs_md5_ctx* %md5_ctx, i8* %6, i64 %9)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i64, i64* %i, align 8, !tbaa !12
  %inc = add i64 %10, 1
  store i64 %inc, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i8*, i8** %digest.addr, align 8, !tbaa !3
  call void @cs_md5_final(i8* %11, %struct.cs_md5_ctx* %md5_ctx)
  %12 = bitcast %struct.cs_md5_ctx* %md5_ctx to i8*
  call void @llvm.lifetime.end.p0i8(i64 88, i8* %12) #5
  %13 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %13) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @cs_md5(i8* %buf, ...) #0 {
entry:
  %buf.addr = alloca i8*, align 8
  %hash = alloca [16 x i8], align 16
  %msgs = alloca [20 x i8*], align 16
  %p = alloca i8*, align 8
  %msg_lens = alloca [20 x i64], align 16
  %num_msgs = alloca i64, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  %0 = bitcast [16 x i8]* %hash to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %0) #5
  %1 = bitcast [20 x i8*]* %msgs to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* %1) #5
  %2 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  %3 = bitcast [20 x i64]* %msg_lens to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* %3) #5
  %4 = bitcast i64* %num_msgs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #5
  store i64 0, i64* %num_msgs, align 8, !tbaa !12
  %5 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %5) #5
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  br label %while.cond

while.cond:                                       ; preds = %vaarg.end13, %entry
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 0
  %gp_offset = load i32, i32* %gp_offset_p, align 16
  %fits_in_gp = icmp ule i32 %gp_offset, 40
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %while.cond
  %6 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 3
  %reg_save_area = load i8*, i8** %6, align 16
  %7 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset
  %8 = bitcast i8* %7 to i8**
  %9 = add i32 %gp_offset, 8
  store i32 %9, i32* %gp_offset_p, align 16
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %while.cond
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 2
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8
  %10 = bitcast i8* %overflow_arg_area to i8**
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi i8** [ %8, %vaarg.in_reg ], [ %10, %vaarg.in_mem ]
  %11 = load i8*, i8** %vaarg.addr, align 8
  store i8* %11, i8** %p, align 8, !tbaa !3
  %cmp = icmp ne i8* %11, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %vaarg.end
  %12 = load i8*, i8** %p, align 8, !tbaa !3
  %13 = load i64, i64* %num_msgs, align 8, !tbaa !12
  %arrayidx = getelementptr inbounds [20 x i8*], [20 x i8*]* %msgs, i64 0, i64 %13
  store i8* %12, i8** %arrayidx, align 8, !tbaa !3
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %gp_offset_p4 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay3, i32 0, i32 0
  %gp_offset5 = load i32, i32* %gp_offset_p4, align 16
  %fits_in_gp6 = icmp ule i32 %gp_offset5, 40
  br i1 %fits_in_gp6, label %vaarg.in_reg7, label %vaarg.in_mem9

vaarg.in_reg7:                                    ; preds = %while.body
  %14 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay3, i32 0, i32 3
  %reg_save_area8 = load i8*, i8** %14, align 16
  %15 = getelementptr i8, i8* %reg_save_area8, i32 %gp_offset5
  %16 = bitcast i8* %15 to i64*
  %17 = add i32 %gp_offset5, 8
  store i32 %17, i32* %gp_offset_p4, align 16
  br label %vaarg.end13

vaarg.in_mem9:                                    ; preds = %while.body
  %overflow_arg_area_p10 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay3, i32 0, i32 2
  %overflow_arg_area11 = load i8*, i8** %overflow_arg_area_p10, align 8
  %18 = bitcast i8* %overflow_arg_area11 to i64*
  %overflow_arg_area.next12 = getelementptr i8, i8* %overflow_arg_area11, i32 8
  store i8* %overflow_arg_area.next12, i8** %overflow_arg_area_p10, align 8
  br label %vaarg.end13

vaarg.end13:                                      ; preds = %vaarg.in_mem9, %vaarg.in_reg7
  %vaarg.addr14 = phi i64* [ %16, %vaarg.in_reg7 ], [ %18, %vaarg.in_mem9 ]
  %19 = load i64, i64* %vaarg.addr14, align 8
  %20 = load i64, i64* %num_msgs, align 8, !tbaa !12
  %arrayidx15 = getelementptr inbounds [20 x i64], [20 x i64]* %msg_lens, i64 0, i64 %20
  store i64 %19, i64* %arrayidx15, align 8, !tbaa !12
  %21 = load i64, i64* %num_msgs, align 8, !tbaa !12
  %inc = add i64 %21, 1
  store i64 %inc, i64* %num_msgs, align 8, !tbaa !12
  br label %while.cond

while.end:                                        ; preds = %vaarg.end
  %arraydecay16 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay1617 = bitcast %struct.__va_list_tag* %arraydecay16 to i8*
  call void @llvm.va_end(i8* %arraydecay1617)
  %22 = load i64, i64* %num_msgs, align 8, !tbaa !12
  %arraydecay18 = getelementptr inbounds [20 x i8*], [20 x i8*]* %msgs, i32 0, i32 0
  %arraydecay19 = getelementptr inbounds [20 x i64], [20 x i64]* %msg_lens, i32 0, i32 0
  %arraydecay20 = getelementptr inbounds [16 x i8], [16 x i8]* %hash, i32 0, i32 0
  call void @mg_hash_md5_v(i64 %22, i8** %arraydecay18, i64* %arraydecay19, i8* %arraydecay20)
  %23 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %arraydecay21 = getelementptr inbounds [16 x i8], [16 x i8]* %hash, i32 0, i32 0
  call void @cs_to_hex(i8* %23, i8* %arraydecay21, i64 16)
  %24 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %24) #5
  %25 = bitcast i64* %num_msgs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %25) #5
  %26 = bitcast [20 x i64]* %msg_lens to i8*
  call void @llvm.lifetime.end.p0i8(i64 160, i8* %26) #5
  %27 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %27) #5
  %28 = bitcast [20 x i8*]* %msgs to i8*
  call void @llvm.lifetime.end.p0i8(i64 160, i8* %28) #5
  %29 = bitcast [16 x i8]* %hash to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %29) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_http_create_digest_auth_header(i8* %buf, i64 %buf_len, i8* %method, i8* %uri, i8* %auth_domain, i8* %user, i8* %passwd, i8* %nonce) #0 {
entry:
  %buf.addr = alloca i8*, align 8
  %buf_len.addr = alloca i64, align 8
  %method.addr = alloca i8*, align 8
  %uri.addr = alloca i8*, align 8
  %auth_domain.addr = alloca i8*, align 8
  %user.addr = alloca i8*, align 8
  %passwd.addr = alloca i8*, align 8
  %nonce.addr = alloca i8*, align 8
  %ha1 = alloca [33 x i8], align 16
  %resp = alloca [33 x i8], align 16
  %cnonce = alloca [40 x i8], align 16
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %buf_len, i64* %buf_len.addr, align 8, !tbaa !12
  store i8* %method, i8** %method.addr, align 8, !tbaa !3
  store i8* %uri, i8** %uri.addr, align 8, !tbaa !3
  store i8* %auth_domain, i8** %auth_domain.addr, align 8, !tbaa !3
  store i8* %user, i8** %user.addr, align 8, !tbaa !3
  store i8* %passwd, i8** %passwd.addr, align 8, !tbaa !3
  store i8* %nonce, i8** %nonce.addr, align 8, !tbaa !3
  %0 = bitcast [33 x i8]* %ha1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 33, i8* %0) #5
  %1 = bitcast [33 x i8]* %resp to i8*
  call void @llvm.lifetime.start.p0i8(i64 33, i8* %1) #5
  %2 = bitcast [40 x i8]* %cnonce to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* %2) #5
  %arraydecay = getelementptr inbounds [40 x i8], [40 x i8]* %cnonce, i32 0, i32 0
  %call = call double @mg_time()
  %conv = fptoui double %call to i64
  %call1 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay, i64 40, i32 0, i64 40, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.93, i32 0, i32 0), i64 %conv)
  %arraydecay2 = getelementptr inbounds [33 x i8], [33 x i8]* %ha1, i32 0, i32 0
  %3 = load i8*, i8** %user.addr, align 8, !tbaa !3
  %4 = load i8*, i8** %user.addr, align 8, !tbaa !3
  %call3 = call i64 @strlen(i8* %4)
  %5 = load i8*, i8** %auth_domain.addr, align 8, !tbaa !3
  %6 = load i8*, i8** %auth_domain.addr, align 8, !tbaa !3
  %call4 = call i64 @strlen(i8* %6)
  %7 = load i8*, i8** %passwd.addr, align 8, !tbaa !3
  %8 = load i8*, i8** %passwd.addr, align 8, !tbaa !3
  %call5 = call i64 @strlen(i8* %8)
  call void (i8*, ...) @cs_md5(i8* %arraydecay2, i8* %3, i64 %call3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @mg_http_create_digest_auth_header.colon, i32 0, i32 0), i64 1, i8* %5, i64 %call4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @mg_http_create_digest_auth_header.colon, i32 0, i32 0), i64 1, i8* %7, i64 %call5, i8* null)
  %9 = load i8*, i8** %method.addr, align 8, !tbaa !3
  %10 = load i8*, i8** %method.addr, align 8, !tbaa !3
  %call6 = call i64 @strlen(i8* %10)
  %11 = load i8*, i8** %uri.addr, align 8, !tbaa !3
  %12 = load i8*, i8** %uri.addr, align 8, !tbaa !3
  %call7 = call i64 @strlen(i8* %12)
  %arraydecay8 = getelementptr inbounds [33 x i8], [33 x i8]* %ha1, i32 0, i32 0
  %13 = load i8*, i8** %nonce.addr, align 8, !tbaa !3
  %14 = load i8*, i8** %nonce.addr, align 8, !tbaa !3
  %call9 = call i64 @strlen(i8* %14)
  %arraydecay10 = getelementptr inbounds [40 x i8], [40 x i8]* %cnonce, i32 0, i32 0
  %arraydecay11 = getelementptr inbounds [40 x i8], [40 x i8]* %cnonce, i32 0, i32 0
  %call12 = call i64 @strlen(i8* %arraydecay11)
  %arraydecay13 = getelementptr inbounds [33 x i8], [33 x i8]* %resp, i32 0, i32 0
  call void @mg_mkmd5resp(i8* %9, i64 %call6, i8* %11, i64 %call7, i8* %arraydecay8, i64 32, i8* %13, i64 %call9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.94, i32 0, i32 0), i64 1, i8* %arraydecay10, i64 %call12, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @mg_http_create_digest_auth_header.qop, i32 0, i32 0), i64 4, i8* %arraydecay13)
  %15 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %16 = load i64, i64* %buf_len.addr, align 8, !tbaa !12
  %17 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %18 = call i64 @llvm.objectsize.i64.p0i8(i8* %17, i1 false, i1 true)
  %19 = load i8*, i8** %user.addr, align 8, !tbaa !3
  %20 = load i8*, i8** %auth_domain.addr, align 8, !tbaa !3
  %21 = load i8*, i8** %uri.addr, align 8, !tbaa !3
  %arraydecay14 = getelementptr inbounds [40 x i8], [40 x i8]* %cnonce, i32 0, i32 0
  %22 = load i8*, i8** %nonce.addr, align 8, !tbaa !3
  %arraydecay15 = getelementptr inbounds [33 x i8], [33 x i8]* %resp, i32 0, i32 0
  %call16 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %15, i64 %16, i32 0, i64 %18, i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.95, i32 0, i32 0), i8* %19, i8* %20, i8* %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @mg_http_create_digest_auth_header.qop, i32 0, i32 0), i8* %arraydecay14, i8* %22, i8* %arraydecay15)
  %23 = bitcast [40 x i8]* %cnonce to i8*
  call void @llvm.lifetime.end.p0i8(i64 40, i8* %23) #5
  %24 = bitcast [33 x i8]* %resp to i8*
  call void @llvm.lifetime.end.p0i8(i64 33, i8* %24) #5
  %25 = bitcast [33 x i8]* %ha1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 33, i8* %25) #5
  ret i32 %call16
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_mkmd5resp(i8* %method, i64 %method_len, i8* %uri, i64 %uri_len, i8* %ha1, i64 %ha1_len, i8* %nonce, i64 %nonce_len, i8* %nc, i64 %nc_len, i8* %cnonce, i64 %cnonce_len, i8* %qop, i64 %qop_len, i8* %resp) #0 {
entry:
  %method.addr = alloca i8*, align 8
  %method_len.addr = alloca i64, align 8
  %uri.addr = alloca i8*, align 8
  %uri_len.addr = alloca i64, align 8
  %ha1.addr = alloca i8*, align 8
  %ha1_len.addr = alloca i64, align 8
  %nonce.addr = alloca i8*, align 8
  %nonce_len.addr = alloca i64, align 8
  %nc.addr = alloca i8*, align 8
  %nc_len.addr = alloca i64, align 8
  %cnonce.addr = alloca i8*, align 8
  %cnonce_len.addr = alloca i64, align 8
  %qop.addr = alloca i8*, align 8
  %qop_len.addr = alloca i64, align 8
  %resp.addr = alloca i8*, align 8
  %ha2 = alloca [33 x i8], align 16
  store i8* %method, i8** %method.addr, align 8, !tbaa !3
  store i64 %method_len, i64* %method_len.addr, align 8, !tbaa !12
  store i8* %uri, i8** %uri.addr, align 8, !tbaa !3
  store i64 %uri_len, i64* %uri_len.addr, align 8, !tbaa !12
  store i8* %ha1, i8** %ha1.addr, align 8, !tbaa !3
  store i64 %ha1_len, i64* %ha1_len.addr, align 8, !tbaa !12
  store i8* %nonce, i8** %nonce.addr, align 8, !tbaa !3
  store i64 %nonce_len, i64* %nonce_len.addr, align 8, !tbaa !12
  store i8* %nc, i8** %nc.addr, align 8, !tbaa !3
  store i64 %nc_len, i64* %nc_len.addr, align 8, !tbaa !12
  store i8* %cnonce, i8** %cnonce.addr, align 8, !tbaa !3
  store i64 %cnonce_len, i64* %cnonce_len.addr, align 8, !tbaa !12
  store i8* %qop, i8** %qop.addr, align 8, !tbaa !3
  store i64 %qop_len, i64* %qop_len.addr, align 8, !tbaa !12
  store i8* %resp, i8** %resp.addr, align 8, !tbaa !3
  %0 = bitcast [33 x i8]* %ha2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 33, i8* %0) #5
  %arraydecay = getelementptr inbounds [33 x i8], [33 x i8]* %ha2, i32 0, i32 0
  %1 = load i8*, i8** %method.addr, align 8, !tbaa !3
  %2 = load i64, i64* %method_len.addr, align 8, !tbaa !12
  %3 = load i8*, i8** %uri.addr, align 8, !tbaa !3
  %4 = load i64, i64* %uri_len.addr, align 8, !tbaa !12
  call void (i8*, ...) @cs_md5(i8* %arraydecay, i8* %1, i64 %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @mg_mkmd5resp.colon, i32 0, i32 0), i64 1, i8* %3, i64 %4, i8* null)
  %5 = load i8*, i8** %resp.addr, align 8, !tbaa !3
  %6 = load i8*, i8** %ha1.addr, align 8, !tbaa !3
  %7 = load i64, i64* %ha1_len.addr, align 8, !tbaa !12
  %8 = load i8*, i8** %nonce.addr, align 8, !tbaa !3
  %9 = load i64, i64* %nonce_len.addr, align 8, !tbaa !12
  %10 = load i8*, i8** %nc.addr, align 8, !tbaa !3
  %11 = load i64, i64* %nc_len.addr, align 8, !tbaa !12
  %12 = load i8*, i8** %cnonce.addr, align 8, !tbaa !3
  %13 = load i64, i64* %cnonce_len.addr, align 8, !tbaa !12
  %14 = load i8*, i8** %qop.addr, align 8, !tbaa !3
  %15 = load i64, i64* %qop_len.addr, align 8, !tbaa !12
  %arraydecay1 = getelementptr inbounds [33 x i8], [33 x i8]* %ha2, i32 0, i32 0
  call void (i8*, ...) @cs_md5(i8* %5, i8* %6, i64 %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @mg_mkmd5resp.colon, i32 0, i32 0), i64 1, i8* %8, i64 %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @mg_mkmd5resp.colon, i32 0, i32 0), i64 1, i8* %10, i64 %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @mg_mkmd5resp.colon, i32 0, i32 0), i64 1, i8* %12, i64 %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @mg_mkmd5resp.colon, i32 0, i32 0), i64 1, i8* %14, i64 %15, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @mg_mkmd5resp.colon, i32 0, i32 0), i64 1, i8* %arraydecay1, i64 32, i8* null)
  %16 = bitcast [33 x i8]* %ha2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 33, i8* %16) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_http_check_digest_auth(%struct.http_message* %hm, i8* %auth_domain, %struct.__sFILE* %fp) #0 {
entry:
  %hm.addr = alloca %struct.http_message*, align 8
  %auth_domain.addr = alloca i8*, align 8
  %fp.addr = alloca %struct.__sFILE*, align 8
  %ret = alloca i32, align 4
  %hdr = alloca %struct.mg_str*, align 8
  %username_buf = alloca [50 x i8], align 16
  %cnonce_buf = alloca [64 x i8], align 16
  %response_buf = alloca [40 x i8], align 16
  %uri_buf = alloca [200 x i8], align 16
  %qop_buf = alloca [20 x i8], align 16
  %nc_buf = alloca [20 x i8], align 16
  %nonce_buf = alloca [16 x i8], align 16
  %username = alloca i8*, align 8
  %cnonce = alloca i8*, align 8
  %response = alloca i8*, align 8
  %uri = alloca i8*, align 8
  %qop = alloca i8*, align 8
  %nc = alloca i8*, align 8
  %nonce = alloca i8*, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  %agg.tmp41 = alloca %struct.mg_str, align 8
  %agg.tmp43 = alloca %struct.mg_str, align 8
  %agg.tmp45 = alloca %struct.mg_str, align 8
  %agg.tmp47 = alloca %struct.mg_str, align 8
  %agg.tmp49 = alloca %struct.mg_str, align 8
  %agg.tmp51 = alloca %struct.mg_str, align 8
  %agg.tmp53 = alloca %struct.mg_str, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  store i8* %auth_domain, i8** %auth_domain.addr, align 8, !tbaa !3
  store %struct.__sFILE* %fp, %struct.__sFILE** %fp.addr, align 8, !tbaa !3
  %0 = bitcast i32* %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  store i32 0, i32* %ret, align 4, !tbaa !15
  %1 = bitcast %struct.mg_str** %hdr to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %2 = bitcast [50 x i8]* %username_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 50, i8* %2) #5
  %3 = bitcast [64 x i8]* %cnonce_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* %3) #5
  %4 = bitcast [40 x i8]* %response_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* %4) #5
  %5 = bitcast [200 x i8]* %uri_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* %5) #5
  %6 = bitcast [20 x i8]* %qop_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* %6) #5
  %7 = bitcast [20 x i8]* %nc_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* %7) #5
  %8 = bitcast [16 x i8]* %nonce_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %8) #5
  %9 = bitcast i8** %username to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #5
  %arraydecay = getelementptr inbounds [50 x i8], [50 x i8]* %username_buf, i32 0, i32 0
  store i8* %arraydecay, i8** %username, align 8, !tbaa !3
  %10 = bitcast i8** %cnonce to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #5
  %arraydecay1 = getelementptr inbounds [64 x i8], [64 x i8]* %cnonce_buf, i32 0, i32 0
  store i8* %arraydecay1, i8** %cnonce, align 8, !tbaa !3
  %11 = bitcast i8** %response to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %11) #5
  %arraydecay2 = getelementptr inbounds [40 x i8], [40 x i8]* %response_buf, i32 0, i32 0
  store i8* %arraydecay2, i8** %response, align 8, !tbaa !3
  %12 = bitcast i8** %uri to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #5
  %arraydecay3 = getelementptr inbounds [200 x i8], [200 x i8]* %uri_buf, i32 0, i32 0
  store i8* %arraydecay3, i8** %uri, align 8, !tbaa !3
  %13 = bitcast i8** %qop to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %13) #5
  %arraydecay4 = getelementptr inbounds [20 x i8], [20 x i8]* %qop_buf, i32 0, i32 0
  store i8* %arraydecay4, i8** %qop, align 8, !tbaa !3
  %14 = bitcast i8** %nc to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %14) #5
  %arraydecay5 = getelementptr inbounds [20 x i8], [20 x i8]* %nc_buf, i32 0, i32 0
  store i8* %arraydecay5, i8** %nc, align 8, !tbaa !3
  %15 = bitcast i8** %nonce to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %15) #5
  %arraydecay6 = getelementptr inbounds [16 x i8], [16 x i8]* %nonce_buf, i32 0, i32 0
  store i8* %arraydecay6, i8** %nonce, align 8, !tbaa !3
  %16 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %cmp = icmp eq %struct.http_message* %16, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %17 = load %struct.__sFILE*, %struct.__sFILE** %fp.addr, align 8, !tbaa !3
  %cmp7 = icmp eq %struct.__sFILE* %17, null
  br i1 %cmp7, label %if.then, label %lor.lhs.false8

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %18 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %call = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %18, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.90, i32 0, i32 0))
  store %struct.mg_str* %call, %struct.mg_str** %hdr, align 8, !tbaa !3
  %cmp9 = icmp eq %struct.mg_str* %call, null
  br i1 %cmp9, label %if.then, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %lor.lhs.false8
  %19 = load %struct.mg_str*, %struct.mg_str** %hdr, align 8, !tbaa !3
  %call11 = call i32 @mg_http_parse_header2(%struct.mg_str* %19, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.96, i32 0, i32 0), i8** %username, i64 50)
  %cmp12 = icmp eq i32 %call11, 0
  br i1 %cmp12, label %if.then, label %lor.lhs.false13

lor.lhs.false13:                                  ; preds = %lor.lhs.false10
  %20 = load %struct.mg_str*, %struct.mg_str** %hdr, align 8, !tbaa !3
  %call14 = call i32 @mg_http_parse_header2(%struct.mg_str* %20, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.97, i32 0, i32 0), i8** %cnonce, i64 64)
  %cmp15 = icmp eq i32 %call14, 0
  br i1 %cmp15, label %if.then, label %lor.lhs.false16

lor.lhs.false16:                                  ; preds = %lor.lhs.false13
  %21 = load %struct.mg_str*, %struct.mg_str** %hdr, align 8, !tbaa !3
  %call17 = call i32 @mg_http_parse_header2(%struct.mg_str* %21, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.98, i32 0, i32 0), i8** %response, i64 40)
  %cmp18 = icmp eq i32 %call17, 0
  br i1 %cmp18, label %if.then, label %lor.lhs.false19

lor.lhs.false19:                                  ; preds = %lor.lhs.false16
  %22 = load %struct.mg_str*, %struct.mg_str** %hdr, align 8, !tbaa !3
  %call20 = call i32 @mg_http_parse_header2(%struct.mg_str* %22, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.99, i32 0, i32 0), i8** %uri, i64 200)
  %cmp21 = icmp eq i32 %call20, 0
  br i1 %cmp21, label %if.then, label %lor.lhs.false22

lor.lhs.false22:                                  ; preds = %lor.lhs.false19
  %23 = load %struct.mg_str*, %struct.mg_str** %hdr, align 8, !tbaa !3
  %call23 = call i32 @mg_http_parse_header2(%struct.mg_str* %23, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.100, i32 0, i32 0), i8** %qop, i64 20)
  %cmp24 = icmp eq i32 %call23, 0
  br i1 %cmp24, label %if.then, label %lor.lhs.false25

lor.lhs.false25:                                  ; preds = %lor.lhs.false22
  %24 = load %struct.mg_str*, %struct.mg_str** %hdr, align 8, !tbaa !3
  %call26 = call i32 @mg_http_parse_header2(%struct.mg_str* %24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.101, i32 0, i32 0), i8** %nc, i64 20)
  %cmp27 = icmp eq i32 %call26, 0
  br i1 %cmp27, label %if.then, label %lor.lhs.false28

lor.lhs.false28:                                  ; preds = %lor.lhs.false25
  %25 = load %struct.mg_str*, %struct.mg_str** %hdr, align 8, !tbaa !3
  %call29 = call i32 @mg_http_parse_header2(%struct.mg_str* %25, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.102, i32 0, i32 0), i8** %nonce, i64 16)
  %cmp30 = icmp eq i32 %call29, 0
  br i1 %cmp30, label %if.then, label %lor.lhs.false31

lor.lhs.false31:                                  ; preds = %lor.lhs.false28
  %26 = load i8*, i8** %nonce, align 8, !tbaa !3
  %call32 = call i32 @mg_check_nonce(i8* %26)
  %cmp33 = icmp eq i32 %call32, 0
  br i1 %cmp33, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false31, %lor.lhs.false28, %lor.lhs.false25, %lor.lhs.false22, %lor.lhs.false19, %lor.lhs.false16, %lor.lhs.false13, %lor.lhs.false10, %lor.lhs.false8, %lor.lhs.false, %entry
  store i32 0, i32* %ret, align 4, !tbaa !15
  br label %clean

if.end:                                           ; preds = %lor.lhs.false31
  %27 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %method = getelementptr inbounds %struct.http_message, %struct.http_message* %27, i32 0, i32 2
  %28 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri34 = getelementptr inbounds %struct.http_message, %struct.http_message* %28, i32 0, i32 3
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri34, i32 0, i32 0
  %29 = load i8*, i8** %p, align 8, !tbaa !133
  %30 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri35 = getelementptr inbounds %struct.http_message, %struct.http_message* %30, i32 0, i32 3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri35, i32 0, i32 1
  %31 = load i64, i64* %len, align 8, !tbaa !136
  %32 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %query_string = getelementptr inbounds %struct.http_message, %struct.http_message* %32, i32 0, i32 7
  %len36 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %query_string, i32 0, i32 1
  %33 = load i64, i64* %len36, align 8, !tbaa !138
  %tobool = icmp ne i64 %33, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %34 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %query_string37 = getelementptr inbounds %struct.http_message, %struct.http_message* %34, i32 0, i32 7
  %len38 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %query_string37, i32 0, i32 1
  %35 = load i64, i64* %len38, align 8, !tbaa !138
  %add = add i64 %35, 1
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %add, %cond.true ], [ 0, %cond.false ]
  %add39 = add i64 %31, %cond
  %call40 = call { i8*, i64 } @mg_mk_str_n(i8* %29, i64 %add39)
  %36 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %37 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %36, i32 0, i32 0
  %38 = extractvalue { i8*, i64 } %call40, 0
  store i8* %38, i8** %37, align 8
  %39 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %36, i32 0, i32 1
  %40 = extractvalue { i8*, i64 } %call40, 1
  store i64 %40, i64* %39, align 8
  %41 = load i8*, i8** %username, align 8, !tbaa !3
  %call42 = call { i8*, i64 } @mg_mk_str(i8* %41)
  %42 = bitcast %struct.mg_str* %agg.tmp41 to { i8*, i64 }*
  %43 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %42, i32 0, i32 0
  %44 = extractvalue { i8*, i64 } %call42, 0
  store i8* %44, i8** %43, align 8
  %45 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %42, i32 0, i32 1
  %46 = extractvalue { i8*, i64 } %call42, 1
  store i64 %46, i64* %45, align 8
  %47 = load i8*, i8** %cnonce, align 8, !tbaa !3
  %call44 = call { i8*, i64 } @mg_mk_str(i8* %47)
  %48 = bitcast %struct.mg_str* %agg.tmp43 to { i8*, i64 }*
  %49 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %48, i32 0, i32 0
  %50 = extractvalue { i8*, i64 } %call44, 0
  store i8* %50, i8** %49, align 8
  %51 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %48, i32 0, i32 1
  %52 = extractvalue { i8*, i64 } %call44, 1
  store i64 %52, i64* %51, align 8
  %53 = load i8*, i8** %response, align 8, !tbaa !3
  %call46 = call { i8*, i64 } @mg_mk_str(i8* %53)
  %54 = bitcast %struct.mg_str* %agg.tmp45 to { i8*, i64 }*
  %55 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %54, i32 0, i32 0
  %56 = extractvalue { i8*, i64 } %call46, 0
  store i8* %56, i8** %55, align 8
  %57 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %54, i32 0, i32 1
  %58 = extractvalue { i8*, i64 } %call46, 1
  store i64 %58, i64* %57, align 8
  %59 = load i8*, i8** %qop, align 8, !tbaa !3
  %call48 = call { i8*, i64 } @mg_mk_str(i8* %59)
  %60 = bitcast %struct.mg_str* %agg.tmp47 to { i8*, i64 }*
  %61 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %60, i32 0, i32 0
  %62 = extractvalue { i8*, i64 } %call48, 0
  store i8* %62, i8** %61, align 8
  %63 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %60, i32 0, i32 1
  %64 = extractvalue { i8*, i64 } %call48, 1
  store i64 %64, i64* %63, align 8
  %65 = load i8*, i8** %nc, align 8, !tbaa !3
  %call50 = call { i8*, i64 } @mg_mk_str(i8* %65)
  %66 = bitcast %struct.mg_str* %agg.tmp49 to { i8*, i64 }*
  %67 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %66, i32 0, i32 0
  %68 = extractvalue { i8*, i64 } %call50, 0
  store i8* %68, i8** %67, align 8
  %69 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %66, i32 0, i32 1
  %70 = extractvalue { i8*, i64 } %call50, 1
  store i64 %70, i64* %69, align 8
  %71 = load i8*, i8** %nonce, align 8, !tbaa !3
  %call52 = call { i8*, i64 } @mg_mk_str(i8* %71)
  %72 = bitcast %struct.mg_str* %agg.tmp51 to { i8*, i64 }*
  %73 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %72, i32 0, i32 0
  %74 = extractvalue { i8*, i64 } %call52, 0
  store i8* %74, i8** %73, align 8
  %75 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %72, i32 0, i32 1
  %76 = extractvalue { i8*, i64 } %call52, 1
  store i64 %76, i64* %75, align 8
  %77 = load i8*, i8** %auth_domain.addr, align 8, !tbaa !3
  %call54 = call { i8*, i64 } @mg_mk_str(i8* %77)
  %78 = bitcast %struct.mg_str* %agg.tmp53 to { i8*, i64 }*
  %79 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %78, i32 0, i32 0
  %80 = extractvalue { i8*, i64 } %call54, 0
  store i8* %80, i8** %79, align 8
  %81 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %78, i32 0, i32 1
  %82 = extractvalue { i8*, i64 } %call54, 1
  store i64 %82, i64* %81, align 8
  %83 = load %struct.__sFILE*, %struct.__sFILE** %fp.addr, align 8, !tbaa !3
  %84 = bitcast %struct.mg_str* %method to { i8*, i64 }*
  %85 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %84, i32 0, i32 0
  %86 = load i8*, i8** %85, align 8
  %87 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %84, i32 0, i32 1
  %88 = load i64, i64* %87, align 8
  %89 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %90 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %89, i32 0, i32 0
  %91 = load i8*, i8** %90, align 8
  %92 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %89, i32 0, i32 1
  %93 = load i64, i64* %92, align 8
  %94 = bitcast %struct.mg_str* %agg.tmp41 to { i8*, i64 }*
  %95 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %94, i32 0, i32 0
  %96 = load i8*, i8** %95, align 8
  %97 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %94, i32 0, i32 1
  %98 = load i64, i64* %97, align 8
  %call55 = call i32 @mg_check_digest_auth(i8* %86, i64 %88, i8* %91, i64 %93, i8* %96, i64 %98, %struct.mg_str* byval align 8 %agg.tmp43, %struct.mg_str* byval align 8 %agg.tmp45, %struct.mg_str* byval align 8 %agg.tmp47, %struct.mg_str* byval align 8 %agg.tmp49, %struct.mg_str* byval align 8 %agg.tmp51, %struct.mg_str* byval align 8 %agg.tmp53, %struct.__sFILE* %83)
  store i32 %call55, i32* %ret, align 4, !tbaa !15
  br label %clean

clean:                                            ; preds = %cond.end, %if.then
  %99 = load i8*, i8** %username, align 8, !tbaa !3
  %arraydecay56 = getelementptr inbounds [50 x i8], [50 x i8]* %username_buf, i32 0, i32 0
  %cmp57 = icmp ne i8* %99, %arraydecay56
  br i1 %cmp57, label %if.then58, label %if.end59

if.then58:                                        ; preds = %clean
  %100 = load i8*, i8** %username, align 8, !tbaa !3
  call void @free(i8* %100)
  br label %if.end59

if.end59:                                         ; preds = %if.then58, %clean
  %101 = load i8*, i8** %cnonce, align 8, !tbaa !3
  %arraydecay60 = getelementptr inbounds [64 x i8], [64 x i8]* %cnonce_buf, i32 0, i32 0
  %cmp61 = icmp ne i8* %101, %arraydecay60
  br i1 %cmp61, label %if.then62, label %if.end63

if.then62:                                        ; preds = %if.end59
  %102 = load i8*, i8** %cnonce, align 8, !tbaa !3
  call void @free(i8* %102)
  br label %if.end63

if.end63:                                         ; preds = %if.then62, %if.end59
  %103 = load i8*, i8** %response, align 8, !tbaa !3
  %arraydecay64 = getelementptr inbounds [40 x i8], [40 x i8]* %response_buf, i32 0, i32 0
  %cmp65 = icmp ne i8* %103, %arraydecay64
  br i1 %cmp65, label %if.then66, label %if.end67

if.then66:                                        ; preds = %if.end63
  %104 = load i8*, i8** %response, align 8, !tbaa !3
  call void @free(i8* %104)
  br label %if.end67

if.end67:                                         ; preds = %if.then66, %if.end63
  %105 = load i8*, i8** %uri, align 8, !tbaa !3
  %arraydecay68 = getelementptr inbounds [200 x i8], [200 x i8]* %uri_buf, i32 0, i32 0
  %cmp69 = icmp ne i8* %105, %arraydecay68
  br i1 %cmp69, label %if.then70, label %if.end71

if.then70:                                        ; preds = %if.end67
  %106 = load i8*, i8** %uri, align 8, !tbaa !3
  call void @free(i8* %106)
  br label %if.end71

if.end71:                                         ; preds = %if.then70, %if.end67
  %107 = load i8*, i8** %qop, align 8, !tbaa !3
  %arraydecay72 = getelementptr inbounds [20 x i8], [20 x i8]* %qop_buf, i32 0, i32 0
  %cmp73 = icmp ne i8* %107, %arraydecay72
  br i1 %cmp73, label %if.then74, label %if.end75

if.then74:                                        ; preds = %if.end71
  %108 = load i8*, i8** %qop, align 8, !tbaa !3
  call void @free(i8* %108)
  br label %if.end75

if.end75:                                         ; preds = %if.then74, %if.end71
  %109 = load i8*, i8** %nc, align 8, !tbaa !3
  %arraydecay76 = getelementptr inbounds [20 x i8], [20 x i8]* %nc_buf, i32 0, i32 0
  %cmp77 = icmp ne i8* %109, %arraydecay76
  br i1 %cmp77, label %if.then78, label %if.end79

if.then78:                                        ; preds = %if.end75
  %110 = load i8*, i8** %nc, align 8, !tbaa !3
  call void @free(i8* %110)
  br label %if.end79

if.end79:                                         ; preds = %if.then78, %if.end75
  %111 = load i8*, i8** %nonce, align 8, !tbaa !3
  %arraydecay80 = getelementptr inbounds [16 x i8], [16 x i8]* %nonce_buf, i32 0, i32 0
  %cmp81 = icmp ne i8* %111, %arraydecay80
  br i1 %cmp81, label %if.then82, label %if.end83

if.then82:                                        ; preds = %if.end79
  %112 = load i8*, i8** %nonce, align 8, !tbaa !3
  call void @free(i8* %112)
  br label %if.end83

if.end83:                                         ; preds = %if.then82, %if.end79
  %113 = load i32, i32* %ret, align 4, !tbaa !15
  %114 = bitcast i8** %nonce to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %114) #5
  %115 = bitcast i8** %nc to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %115) #5
  %116 = bitcast i8** %qop to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %116) #5
  %117 = bitcast i8** %uri to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %117) #5
  %118 = bitcast i8** %response to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %118) #5
  %119 = bitcast i8** %cnonce to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %119) #5
  %120 = bitcast i8** %username to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %120) #5
  %121 = bitcast [16 x i8]* %nonce_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %121) #5
  %122 = bitcast [20 x i8]* %nc_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 20, i8* %122) #5
  %123 = bitcast [20 x i8]* %qop_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 20, i8* %123) #5
  %124 = bitcast [200 x i8]* %uri_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 200, i8* %124) #5
  %125 = bitcast [40 x i8]* %response_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 40, i8* %125) #5
  %126 = bitcast [64 x i8]* %cnonce_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 64, i8* %126) #5
  %127 = bitcast [50 x i8]* %username_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 50, i8* %127) #5
  %128 = bitcast %struct.mg_str** %hdr to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %128) #5
  %129 = bitcast i32* %ret to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %129) #5
  ret i32 %113
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_check_nonce(i8* %nonce) #0 {
entry:
  %nonce.addr = alloca i8*, align 8
  %now = alloca i64, align 8
  %val = alloca i64, align 8
  store i8* %nonce, i8** %nonce.addr, align 8, !tbaa !3
  %0 = bitcast i64* %now to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %call = call double @mg_time()
  %conv = fptoui double %call to i64
  store i64 %conv, i64* %now, align 8, !tbaa !12
  %1 = bitcast i64* %val to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %2 = load i8*, i8** %nonce.addr, align 8, !tbaa !3
  %call1 = call i64 @strtoul(i8* %2, i8** null, i32 16)
  store i64 %call1, i64* %val, align 8, !tbaa !12
  %3 = load i64, i64* %now, align 8, !tbaa !12
  %4 = load i64, i64* %val, align 8, !tbaa !12
  %cmp = icmp uge i64 %3, %4
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %5 = load i64, i64* %now, align 8, !tbaa !12
  %6 = load i64, i64* %val, align 8, !tbaa !12
  %sub = sub i64 %5, %6
  %cmp3 = icmp ult i64 %sub, 3600
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %7 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  %land.ext = zext i1 %7 to i32
  %8 = bitcast i64* %val to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %8) #5
  %9 = bitcast i64* %now to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %9) #5
  ret i32 %land.ext
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_check_digest_auth(i8* %method.coerce0, i64 %method.coerce1, i8* %uri.coerce0, i64 %uri.coerce1, i8* %username.coerce0, i64 %username.coerce1, %struct.mg_str* byval align 8 %cnonce, %struct.mg_str* byval align 8 %response, %struct.mg_str* byval align 8 %qop, %struct.mg_str* byval align 8 %nc, %struct.mg_str* byval align 8 %nonce, %struct.mg_str* byval align 8 %auth_domain, %struct.__sFILE* %fp) #0 {
entry:
  %retval = alloca i32, align 4
  %method = alloca %struct.mg_str, align 8
  %uri = alloca %struct.mg_str, align 8
  %username = alloca %struct.mg_str, align 8
  %fp.addr = alloca %struct.__sFILE*, align 8
  %buf = alloca [128 x i8], align 16
  %f_user = alloca [128 x i8], align 16
  %f_ha1 = alloca [128 x i8], align 16
  %f_domain = alloca [128 x i8], align 16
  %exp_resp = alloca [33 x i8], align 16
  %cleanup.dest.slot = alloca i32, align 4
  %0 = bitcast %struct.mg_str* %method to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %method.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %method.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %uri to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %uri.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %uri.coerce1, i64* %5, align 8
  %6 = bitcast %struct.mg_str* %username to { i8*, i64 }*
  %7 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %6, i32 0, i32 0
  store i8* %username.coerce0, i8** %7, align 8
  %8 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %6, i32 0, i32 1
  store i64 %username.coerce1, i64* %8, align 8
  store %struct.__sFILE* %fp, %struct.__sFILE** %fp.addr, align 8, !tbaa !3
  %9 = bitcast [128 x i8]* %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* %9) #5
  %10 = bitcast [128 x i8]* %f_user to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* %10) #5
  %11 = bitcast [128 x i8]* %f_ha1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* %11) #5
  %12 = bitcast [128 x i8]* %f_domain to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* %12) #5
  %13 = bitcast [33 x i8]* %exp_resp to i8*
  call void @llvm.lifetime.start.p0i8(i64 33, i8* %13) #5
  br label %while.cond

while.cond:                                       ; preds = %if.end44, %entry
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buf, i32 0, i32 0
  %14 = load %struct.__sFILE*, %struct.__sFILE** %fp.addr, align 8, !tbaa !3
  %call = call i8* @fgets(i8* %arraydecay, i32 128, %struct.__sFILE* %14)
  %cmp = icmp ne i8* %call, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %arraydecay1 = getelementptr inbounds [128 x i8], [128 x i8]* %buf, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %f_user, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [128 x i8], [128 x i8]* %f_domain, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [128 x i8], [128 x i8]* %f_ha1, i32 0, i32 0
  %call5 = call i32 (i8*, i8*, ...) @sscanf(i8* %arraydecay1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.103, i32 0, i32 0), i8* %arraydecay2, i8* %arraydecay3, i8* %arraydecay4)
  %cmp6 = icmp eq i32 %call5, 3
  br i1 %cmp6, label %land.lhs.true, label %if.end44

land.lhs.true:                                    ; preds = %while.body
  %arraydecay7 = getelementptr inbounds [128 x i8], [128 x i8]* %f_user, i32 0, i32 0
  %call8 = call i32 @mg_vcmp(%struct.mg_str* %username, i8* %arraydecay7)
  %cmp9 = icmp eq i32 %call8, 0
  br i1 %cmp9, label %land.lhs.true10, label %if.end44

land.lhs.true10:                                  ; preds = %land.lhs.true
  %arraydecay11 = getelementptr inbounds [128 x i8], [128 x i8]* %f_domain, i32 0, i32 0
  %call12 = call i32 @mg_vcmp(%struct.mg_str* %auth_domain, i8* %arraydecay11)
  %cmp13 = icmp eq i32 %call12, 0
  br i1 %cmp13, label %if.then, label %if.end44

if.then:                                          ; preds = %land.lhs.true10
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %method, i32 0, i32 0
  %15 = load i8*, i8** %p, align 8, !tbaa !16
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %method, i32 0, i32 1
  %16 = load i64, i64* %len, align 8, !tbaa !18
  %p14 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 0
  %17 = load i8*, i8** %p14, align 8, !tbaa !16
  %len15 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 1
  %18 = load i64, i64* %len15, align 8, !tbaa !18
  %arraydecay16 = getelementptr inbounds [128 x i8], [128 x i8]* %f_ha1, i32 0, i32 0
  %arraydecay17 = getelementptr inbounds [128 x i8], [128 x i8]* %f_ha1, i32 0, i32 0
  %call18 = call i64 @strlen(i8* %arraydecay17)
  %p19 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %nonce, i32 0, i32 0
  %19 = load i8*, i8** %p19, align 8, !tbaa !16
  %len20 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %nonce, i32 0, i32 1
  %20 = load i64, i64* %len20, align 8, !tbaa !18
  %p21 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %nc, i32 0, i32 0
  %21 = load i8*, i8** %p21, align 8, !tbaa !16
  %len22 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %nc, i32 0, i32 1
  %22 = load i64, i64* %len22, align 8, !tbaa !18
  %p23 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %cnonce, i32 0, i32 0
  %23 = load i8*, i8** %p23, align 8, !tbaa !16
  %len24 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %cnonce, i32 0, i32 1
  %24 = load i64, i64* %len24, align 8, !tbaa !18
  %p25 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %qop, i32 0, i32 0
  %25 = load i8*, i8** %p25, align 8, !tbaa !16
  %len26 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %qop, i32 0, i32 1
  %26 = load i64, i64* %len26, align 8, !tbaa !18
  %arraydecay27 = getelementptr inbounds [33 x i8], [33 x i8]* %exp_resp, i32 0, i32 0
  call void @mg_mkmd5resp(i8* %15, i64 %16, i8* %17, i64 %18, i8* %arraydecay16, i64 %call18, i8* %19, i64 %20, i8* %21, i64 %22, i8* %23, i64 %24, i8* %25, i64 %26, i8* %arraydecay27)
  br label %do.body

do.body:                                          ; preds = %if.then
  %call28 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 7680)
  %tobool = icmp ne i32 %call28, 0
  br i1 %tobool, label %if.then29, label %if.end

if.then29:                                        ; preds = %do.body
  %len30 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %username, i32 0, i32 1
  %27 = load i64, i64* %len30, align 8, !tbaa !18
  %conv = trunc i64 %27 to i32
  %p31 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %username, i32 0, i32 0
  %28 = load i8*, i8** %p31, align 8, !tbaa !16
  %arraydecay32 = getelementptr inbounds [128 x i8], [128 x i8]* %f_domain, i32 0, i32 0
  %len33 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %response, i32 0, i32 1
  %29 = load i64, i64* %len33, align 8, !tbaa !18
  %conv34 = trunc i64 %29 to i32
  %p35 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %response, i32 0, i32 0
  %30 = load i8*, i8** %p35, align 8, !tbaa !16
  %arraydecay36 = getelementptr inbounds [33 x i8], [33 x i8]* %exp_resp, i32 0, i32 0
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.104, i32 0, i32 0), i32 %conv, i8* %28, i8* %arraydecay32, i32 %conv34, i8* %30, i8* %arraydecay36)
  br label %if.end

if.end:                                           ; preds = %if.then29, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %do.cond
  %p37 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %response, i32 0, i32 0
  %31 = load i8*, i8** %p37, align 8, !tbaa !16
  %arraydecay38 = getelementptr inbounds [33 x i8], [33 x i8]* %exp_resp, i32 0, i32 0
  %arraydecay39 = getelementptr inbounds [33 x i8], [33 x i8]* %exp_resp, i32 0, i32 0
  %call40 = call i64 @strlen(i8* %arraydecay39)
  %call41 = call i32 @mg_ncasecmp(i8* %31, i8* %arraydecay38, i64 %call40)
  %cmp42 = icmp eq i32 %call41, 0
  %conv43 = zext i1 %cmp42 to i32
  store i32 %conv43, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end44:                                         ; preds = %land.lhs.true10, %land.lhs.true, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %while.end, %do.end
  %32 = bitcast [33 x i8]* %exp_resp to i8*
  call void @llvm.lifetime.end.p0i8(i64 33, i8* %32) #5
  %33 = bitcast [128 x i8]* %f_domain to i8*
  call void @llvm.lifetime.end.p0i8(i64 128, i8* %33) #5
  %34 = bitcast [128 x i8]* %f_ha1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 128, i8* %34) #5
  %35 = bitcast [128 x i8]* %f_user to i8*
  call void @llvm.lifetime.end.p0i8(i64 128, i8* %35) #5
  %36 = bitcast [128 x i8]* %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 128, i8* %36) #5
  %37 = load i32, i32* %retval, align 4
  ret i32 %37
}

declare i8* @fgets(i8*, i32, %struct.__sFILE*) #4

; Function Attrs: nounwind ssp uwtable
define i32 @mg_http_is_authorized(%struct.http_message* %hm, i8* %path.coerce0, i64 %path.coerce1, i8* %domain, i8* %passwords_file, i32 %flags) #0 {
entry:
  %path = alloca %struct.mg_str, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %domain.addr = alloca i8*, align 8
  %passwords_file.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %buf = alloca [1024 x i8], align 16
  %p = alloca i8*, align 8
  %fp = alloca %struct.__sFILE*, align 8
  %authorized = alloca i32, align 4
  %0 = bitcast %struct.mg_str* %path to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %path.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %path.coerce1, i64* %2, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  store i8* %domain, i8** %domain.addr, align 8, !tbaa !3
  store i8* %passwords_file, i8** %passwords_file.addr, align 8, !tbaa !3
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !15
  %3 = bitcast [1024 x i8]* %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* %3) #5
  %4 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #5
  %5 = bitcast %struct.__sFILE** %fp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #5
  %6 = bitcast i32* %authorized to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #5
  store i32 1, i32* %authorized, align 4, !tbaa !15
  %7 = load i8*, i8** %domain.addr, align 8, !tbaa !3
  %cmp = icmp ne i8* %7, null
  br i1 %cmp, label %land.lhs.true, label %if.end37

land.lhs.true:                                    ; preds = %entry
  %8 = load i8*, i8** %passwords_file.addr, align 8, !tbaa !3
  %cmp1 = icmp ne i8* %8, null
  br i1 %cmp1, label %if.then, label %if.end37

if.then:                                          ; preds = %land.lhs.true
  %9 = load i32, i32* %flags.addr, align 4, !tbaa !15
  %and = and i32 %9, 2
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  %10 = load i8*, i8** %passwords_file.addr, align 8, !tbaa !3
  %call = call %struct.__sFILE* @mg_fopen(i8* %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.105, i32 0, i32 0))
  store %struct.__sFILE* %call, %struct.__sFILE** %fp, align 8, !tbaa !3
  br label %if.end25

if.else:                                          ; preds = %if.then
  %11 = load i32, i32* %flags.addr, align 4, !tbaa !15
  %and3 = and i32 %11, 1
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i32 0, i32 0
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 1
  %12 = load i64, i64* %len, align 8, !tbaa !18
  %conv = trunc i64 %12 to i32
  %p6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %13 = load i8*, i8** %p6, align 8, !tbaa !16
  %14 = load i8*, i8** %passwords_file.addr, align 8, !tbaa !3
  %call7 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay, i64 1024, i32 0, i64 1024, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.106, i32 0, i32 0), i32 %conv, i8* %13, i32 47, i8* %14)
  %arraydecay8 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i32 0, i32 0
  %call9 = call %struct.__sFILE* @mg_fopen(i8* %arraydecay8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.105, i32 0, i32 0))
  store %struct.__sFILE* %call9, %struct.__sFILE** %fp, align 8, !tbaa !3
  br label %if.end24

if.else10:                                        ; preds = %if.else
  %p11 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %15 = load i8*, i8** %p11, align 8, !tbaa !16
  %call12 = call i8* @strrchr(i8* %15, i32 47)
  store i8* %call12, i8** %p, align 8, !tbaa !3
  %16 = load i8*, i8** %p, align 8, !tbaa !3
  %cmp13 = icmp eq i8* %16, null
  br i1 %cmp13, label %if.then15, label %if.end

if.then15:                                        ; preds = %if.else10
  %p16 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %17 = load i8*, i8** %p16, align 8, !tbaa !16
  store i8* %17, i8** %p, align 8, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %if.then15, %if.else10
  %arraydecay17 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i32 0, i32 0
  %18 = load i8*, i8** %p, align 8, !tbaa !3
  %p18 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %19 = load i8*, i8** %p18, align 8, !tbaa !16
  %sub.ptr.lhs.cast = ptrtoint i8* %18 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %19 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv19 = trunc i64 %sub.ptr.sub to i32
  %p20 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %20 = load i8*, i8** %p20, align 8, !tbaa !16
  %21 = load i8*, i8** %passwords_file.addr, align 8, !tbaa !3
  %call21 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay17, i64 1024, i32 0, i64 1024, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.106, i32 0, i32 0), i32 %conv19, i8* %20, i32 47, i8* %21)
  %arraydecay22 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i32 0, i32 0
  %call23 = call %struct.__sFILE* @mg_fopen(i8* %arraydecay22, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.105, i32 0, i32 0))
  store %struct.__sFILE* %call23, %struct.__sFILE** %fp, align 8, !tbaa !3
  br label %if.end24

if.end24:                                         ; preds = %if.end, %if.then5
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %if.then2
  %22 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !tbaa !3
  %cmp26 = icmp ne %struct.__sFILE* %22, null
  br i1 %cmp26, label %if.then28, label %if.else31

if.then28:                                        ; preds = %if.end25
  %23 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %24 = load i8*, i8** %domain.addr, align 8, !tbaa !3
  %25 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !tbaa !3
  %call29 = call i32 @mg_http_check_digest_auth(%struct.http_message* %23, i8* %24, %struct.__sFILE* %25)
  store i32 %call29, i32* %authorized, align 4, !tbaa !15
  %26 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !tbaa !3
  %call30 = call i32 @fclose(%struct.__sFILE* %26)
  br label %if.end36

if.else31:                                        ; preds = %if.end25
  %27 = load i32, i32* %flags.addr, align 4, !tbaa !15
  %and32 = and i32 %27, 4
  %tobool33 = icmp ne i32 %and32, 0
  br i1 %tobool33, label %if.end35, label %if.then34

if.then34:                                        ; preds = %if.else31
  store i32 0, i32* %authorized, align 4, !tbaa !15
  br label %if.end35

if.end35:                                         ; preds = %if.then34, %if.else31
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.then28
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %land.lhs.true, %entry
  br label %do.body

do.body:                                          ; preds = %if.end37
  %call38 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 7721)
  %tobool39 = icmp ne i32 %call38, 0
  br i1 %tobool39, label %if.then40, label %if.end45

if.then40:                                        ; preds = %do.body
  %len41 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 1
  %28 = load i64, i64* %len41, align 8, !tbaa !18
  %conv42 = trunc i64 %28 to i32
  %p43 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %29 = load i8*, i8** %p43, align 8, !tbaa !16
  %30 = load i8*, i8** %passwords_file.addr, align 8, !tbaa !3
  %tobool44 = icmp ne i8* %30, null
  br i1 %tobool44, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then40
  %31 = load i8*, i8** %passwords_file.addr, align 8, !tbaa !3
  br label %cond.end

cond.false:                                       ; preds = %if.then40
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %31, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), %cond.false ]
  %32 = load i32, i32* %flags.addr, align 4, !tbaa !15
  %33 = load i32, i32* %authorized, align 4, !tbaa !15
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.107, i32 0, i32 0), i32 %conv42, i8* %29, i8* %cond, i32 %32, i32 %33)
  br label %if.end45

if.end45:                                         ; preds = %cond.end, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end45
  br label %do.end

do.end:                                           ; preds = %do.cond
  %34 = load i32, i32* %authorized, align 4, !tbaa !15
  %35 = bitcast i32* %authorized to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %35) #5
  %36 = bitcast %struct.__sFILE** %fp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %36) #5
  %37 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %37) #5
  %38 = bitcast [1024 x i8]* %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* %38) #5
  ret i32 %34
}

declare i8* @strrchr(i8*, i32) #4

declare i32 @fclose(%struct.__sFILE*) #4

; Function Attrs: nounwind ssp uwtable
define void @mg_http_reverse_proxy(%struct.mg_connection* %nc, %struct.http_message* %hm, i8* %mount.coerce0, i64 %mount.coerce1, i8* %upstream.coerce0, i64 %upstream.coerce1) #0 {
entry:
  %mount = alloca %struct.mg_str, align 8
  %upstream = alloca %struct.mg_str, align 8
  %nc.addr = alloca %struct.mg_connection*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %be = alloca %struct.mg_connection*, align 8
  %burl = alloca [256 x i8], align 16
  %purl = alloca i8*, align 8
  %i = alloca i32, align 4
  %error = alloca i8*, align 8
  %opts = alloca %struct.mg_connect_opts, align 8
  %path = alloca %struct.mg_str, align 8
  %user_info = alloca %struct.mg_str, align 8
  %host = alloca %struct.mg_str, align 8
  %hn = alloca %struct.mg_str, align 8
  %hv = alloca %struct.mg_str, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %0 = bitcast %struct.mg_str* %mount to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %mount.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %mount.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %upstream to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %upstream.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %upstream.coerce1, i64* %5, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %6 = bitcast %struct.mg_connection** %be to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #5
  %7 = bitcast [256 x i8]* %burl to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* %7) #5
  %8 = bitcast i8** %purl to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #5
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %burl, i32 0, i32 0
  store i8* %arraydecay, i8** %purl, align 8, !tbaa !3
  %9 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %9) #5
  %10 = bitcast i8** %error to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #5
  %11 = bitcast %struct.mg_connect_opts* %opts to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* %11) #5
  %12 = bitcast %struct.mg_str* %path to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %12) #5
  %13 = bitcast %struct.mg_str* %path to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 16, i1 false)
  %14 = bitcast %struct.mg_str* %user_info to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %14) #5
  %15 = bitcast %struct.mg_str* %user_info to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 16, i1 false)
  %16 = bitcast %struct.mg_str* %host to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %16) #5
  %17 = bitcast %struct.mg_str* %host to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 16, i1 false)
  %18 = bitcast %struct.mg_connect_opts* %opts to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 40, i1 false)
  %error_string = getelementptr inbounds %struct.mg_connect_opts, %struct.mg_connect_opts* %opts, i32 0, i32 2
  store i8** %error, i8*** %error_string, align 8, !tbaa !93
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %upstream, i32 0, i32 1
  %19 = load i64, i64* %len, align 8, !tbaa !18
  %conv = trunc i64 %19 to i32
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %upstream, i32 0, i32 0
  %20 = load i8*, i8** %p, align 8, !tbaa !16
  %21 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri = getelementptr inbounds %struct.http_message, %struct.http_message* %21, i32 0, i32 3
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 1
  %22 = load i64, i64* %len1, align 8, !tbaa !136
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %mount, i32 0, i32 1
  %23 = load i64, i64* %len2, align 8, !tbaa !18
  %sub = sub i64 %22, %23
  %conv3 = trunc i64 %sub to i32
  %24 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri4 = getelementptr inbounds %struct.http_message, %struct.http_message* %24, i32 0, i32 3
  %p5 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri4, i32 0, i32 0
  %25 = load i8*, i8** %p5, align 8, !tbaa !133
  %len6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %mount, i32 0, i32 1
  %26 = load i64, i64* %len6, align 8, !tbaa !18
  %add.ptr = getelementptr inbounds i8, i8* %25, i64 %26
  %call = call i32 (i8**, i64, i8*, ...) @mg_asprintf(i8** %purl, i64 256, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.108, i32 0, i32 0), i32 %conv, i8* %20, i32 %conv3, i8* %add.ptr)
  %27 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %mgr = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %27, i32 0, i32 3
  %28 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8, !tbaa !55
  %29 = load i8*, i8** %purl, align 8, !tbaa !3
  %call7 = call %struct.mg_connection* @mg_connect_http_base(%struct.mg_mgr* %28, void (%struct.mg_connection*, i32, i8*)* @mg_reverse_proxy_handler, %struct.mg_connect_opts* byval align 8 %opts, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.109, i32 0, i32 0), i8* null, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.110, i32 0, i32 0), i8* null, i8* %29, %struct.mg_str* %path, %struct.mg_str* %user_info, %struct.mg_str* %host)
  store %struct.mg_connection* %call7, %struct.mg_connection** %be, align 8, !tbaa !3
  br label %do.body

do.body:                                          ; preds = %entry
  %call8 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 7987)
  %tobool = icmp ne i32 %call8, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %30 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri9 = getelementptr inbounds %struct.http_message, %struct.http_message* %30, i32 0, i32 3
  %len10 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri9, i32 0, i32 1
  %31 = load i64, i64* %len10, align 8, !tbaa !136
  %conv11 = trunc i64 %31 to i32
  %32 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri12 = getelementptr inbounds %struct.http_message, %struct.http_message* %32, i32 0, i32 3
  %p13 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri12, i32 0, i32 0
  %33 = load i8*, i8** %p13, align 8, !tbaa !133
  %34 = load i8*, i8** %purl, align 8, !tbaa !3
  %len14 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %mount, i32 0, i32 1
  %35 = load i64, i64* %len14, align 8, !tbaa !18
  %conv15 = trunc i64 %35 to i32
  %p16 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %mount, i32 0, i32 0
  %36 = load i8*, i8** %p16, align 8, !tbaa !16
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.111, i32 0, i32 0), i32 %conv11, i8* %33, i8* %34, i32 %conv15, i8* %36)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %do.cond
  %37 = load %struct.mg_connection*, %struct.mg_connection** %be, align 8, !tbaa !3
  %cmp = icmp eq %struct.mg_connection* %37, null
  br i1 %cmp, label %if.then18, label %if.end26

if.then18:                                        ; preds = %do.end
  br label %do.body19

do.body19:                                        ; preds = %if.then18
  %call20 = call i32 @cs_log_print_prefix(i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 7990)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %do.body19
  %38 = load i8*, i8** %purl, align 8, !tbaa !3
  %39 = load i8*, i8** %error, align 8, !tbaa !3
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.112, i32 0, i32 0), i8* %38, i8* %39)
  br label %if.end23

if.end23:                                         ; preds = %if.then22, %do.body19
  br label %do.cond24

do.cond24:                                        ; preds = %if.end23
  br label %do.end25

do.end25:                                         ; preds = %do.cond24
  %40 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_http_send_error(%struct.mg_connection* %40, i32 502, i8* null)
  br label %cleanup90

if.end26:                                         ; preds = %do.end
  %41 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %42 = load %struct.mg_connection*, %struct.mg_connection** %be, align 8, !tbaa !3
  %call27 = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %42)
  %reverse_proxy_data = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %call27, i32 0, i32 6
  %linked_conn = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %reverse_proxy_data, i32 0, i32 0
  store %struct.mg_connection* %41, %struct.mg_connection** %linked_conn, align 8, !tbaa !174
  %43 = load %struct.mg_connection*, %struct.mg_connection** %be, align 8, !tbaa !3
  %44 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %call28 = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %44)
  %reverse_proxy_data29 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %call28, i32 0, i32 6
  %linked_conn30 = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %reverse_proxy_data29, i32 0, i32 0
  store %struct.mg_connection* %43, %struct.mg_connection** %linked_conn30, align 8, !tbaa !174
  %45 = load %struct.mg_connection*, %struct.mg_connection** %be, align 8, !tbaa !3
  %46 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %method = getelementptr inbounds %struct.http_message, %struct.http_message* %46, i32 0, i32 2
  %len31 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %method, i32 0, i32 1
  %47 = load i64, i64* %len31, align 8, !tbaa !157
  %conv32 = trunc i64 %47 to i32
  %48 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %method33 = getelementptr inbounds %struct.http_message, %struct.http_message* %48, i32 0, i32 2
  %p34 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %method33, i32 0, i32 0
  %49 = load i8*, i8** %p34, align 8, !tbaa !134
  %len35 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 1
  %50 = load i64, i64* %len35, align 8, !tbaa !18
  %conv36 = trunc i64 %50 to i32
  %p37 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %51 = load i8*, i8** %p37, align 8, !tbaa !16
  %call38 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %45, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.113, i32 0, i32 0), i32 %conv32, i8* %49, i32 %conv36, i8* %51)
  %52 = load %struct.mg_connection*, %struct.mg_connection** %be, align 8, !tbaa !3
  %len39 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %host, i32 0, i32 1
  %53 = load i64, i64* %len39, align 8, !tbaa !18
  %conv40 = trunc i64 %53 to i32
  %p41 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %host, i32 0, i32 0
  %54 = load i8*, i8** %p41, align 8, !tbaa !16
  %call42 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %52, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.114, i32 0, i32 0), i32 %conv40, i8* %54)
  store i32 0, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end26
  %55 = load i32, i32* %i, align 4, !tbaa !15
  %cmp43 = icmp slt i32 %55, 40
  br i1 %cmp43, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %56 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %header_names = getelementptr inbounds %struct.http_message, %struct.http_message* %56, i32 0, i32 8
  %57 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom = sext i32 %57 to i64
  %arrayidx = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_names, i64 0, i64 %idxprom
  %len45 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %arrayidx, i32 0, i32 1
  %58 = load i64, i64* %len45, align 8, !tbaa !18
  %cmp46 = icmp ugt i64 %58, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %59 = phi i1 [ false, %for.cond ], [ %cmp46, %land.rhs ]
  br i1 %59, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %60 = bitcast %struct.mg_str* %hn to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %60) #5
  %61 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %header_names48 = getelementptr inbounds %struct.http_message, %struct.http_message* %61, i32 0, i32 8
  %62 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom49 = sext i32 %62 to i64
  %arrayidx50 = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_names48, i64 0, i64 %idxprom49
  %63 = bitcast %struct.mg_str* %hn to i8*
  %64 = bitcast %struct.mg_str* %arrayidx50 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 16, i1 false), !tbaa.struct !19
  %65 = bitcast %struct.mg_str* %hv to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %65) #5
  %66 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %header_values = getelementptr inbounds %struct.http_message, %struct.http_message* %66, i32 0, i32 9
  %67 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom51 = sext i32 %67 to i64
  %arrayidx52 = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_values, i64 0, i64 %idxprom51
  %68 = bitcast %struct.mg_str* %hv to i8*
  %69 = bitcast %struct.mg_str* %arrayidx52 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %69, i64 16, i1 false), !tbaa.struct !19
  %call53 = call i32 @mg_vcasecmp(%struct.mg_str* %hn, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.115, i32 0, i32 0))
  %cmp54 = icmp eq i32 %call53, 0
  br i1 %cmp54, label %if.then56, label %if.end57

if.then56:                                        ; preds = %for.body
  store i32 9, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end57:                                         ; preds = %for.body
  %call58 = call i32 @mg_vcasecmp(%struct.mg_str* %hn, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.116, i32 0, i32 0))
  %cmp59 = icmp eq i32 %call58, 0
  br i1 %cmp59, label %land.lhs.true, label %if.end67

land.lhs.true:                                    ; preds = %if.end57
  %call61 = call i32 @mg_vcasecmp(%struct.mg_str* %hv, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i32 0))
  %cmp62 = icmp eq i32 %call61, 0
  br i1 %cmp62, label %if.then64, label %if.end67

if.then64:                                        ; preds = %land.lhs.true
  %70 = load %struct.mg_connection*, %struct.mg_connection** %be, align 8, !tbaa !3
  %71 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %body = getelementptr inbounds %struct.http_message, %struct.http_message* %71, i32 0, i32 1
  %len65 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body, i32 0, i32 1
  %72 = load i64, i64* %len65, align 8, !tbaa !131
  %call66 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %70, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.117, i32 0, i32 0), i64 %72)
  store i32 9, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end67:                                         ; preds = %land.lhs.true, %if.end57
  %call68 = call i32 @mg_vcasecmp(%struct.mg_str* %hn, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.118, i32 0, i32 0))
  %cmp69 = icmp eq i32 %call68, 0
  br i1 %cmp69, label %land.lhs.true71, label %if.end76

land.lhs.true71:                                  ; preds = %if.end67
  %call72 = call i32 @mg_vcasecmp(%struct.mg_str* %hv, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.119, i32 0, i32 0))
  %cmp73 = icmp eq i32 %call72, 0
  br i1 %cmp73, label %if.then75, label %if.end76

if.then75:                                        ; preds = %land.lhs.true71
  store i32 9, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end76:                                         ; preds = %land.lhs.true71, %if.end67
  %73 = load %struct.mg_connection*, %struct.mg_connection** %be, align 8, !tbaa !3
  %len77 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %hn, i32 0, i32 1
  %74 = load i64, i64* %len77, align 8, !tbaa !18
  %conv78 = trunc i64 %74 to i32
  %p79 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %hn, i32 0, i32 0
  %75 = load i8*, i8** %p79, align 8, !tbaa !16
  %len80 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %hv, i32 0, i32 1
  %76 = load i64, i64* %len80, align 8, !tbaa !18
  %conv81 = trunc i64 %76 to i32
  %p82 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %hv, i32 0, i32 0
  %77 = load i8*, i8** %p82, align 8, !tbaa !16
  %call83 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %73, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.120, i32 0, i32 0), i32 %conv78, i8* %75, i32 %conv81, i8* %77)
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end76, %if.then75, %if.then64, %if.then56
  %78 = bitcast %struct.mg_str* %hv to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %78) #5
  %79 = bitcast %struct.mg_str* %hn to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %79) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 9, label %for.inc
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc

for.inc:                                          ; preds = %cleanup.cont, %cleanup
  %80 = load i32, i32* %i, align 4, !tbaa !15
  %inc = add nsw i32 %80, 1
  store i32 %inc, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.end:                                          ; preds = %land.end
  %81 = load %struct.mg_connection*, %struct.mg_connection** %be, align 8, !tbaa !3
  call void @mg_send(%struct.mg_connection* %81, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i32 2)
  %82 = load %struct.mg_connection*, %struct.mg_connection** %be, align 8, !tbaa !3
  %83 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %body85 = getelementptr inbounds %struct.http_message, %struct.http_message* %83, i32 0, i32 1
  %p86 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body85, i32 0, i32 0
  %84 = load i8*, i8** %p86, align 8, !tbaa !130
  %85 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %body87 = getelementptr inbounds %struct.http_message, %struct.http_message* %85, i32 0, i32 1
  %len88 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body87, i32 0, i32 1
  %86 = load i64, i64* %len88, align 8, !tbaa !131
  %conv89 = trunc i64 %86 to i32
  call void @mg_send(%struct.mg_connection* %82, i8* %84, i32 %conv89)
  br label %cleanup90

cleanup90:                                        ; preds = %for.end, %do.end25
  %87 = load i8*, i8** %purl, align 8, !tbaa !3
  %arraydecay91 = getelementptr inbounds [256 x i8], [256 x i8]* %burl, i32 0, i32 0
  %cmp92 = icmp ne i8* %87, %arraydecay91
  br i1 %cmp92, label %if.then94, label %if.end95

if.then94:                                        ; preds = %cleanup90
  %88 = load i8*, i8** %purl, align 8, !tbaa !3
  call void @free(i8* %88)
  br label %if.end95

if.end95:                                         ; preds = %if.then94, %cleanup90
  %89 = bitcast %struct.mg_str* %host to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %89) #5
  %90 = bitcast %struct.mg_str* %user_info to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %90) #5
  %91 = bitcast %struct.mg_str* %path to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %91) #5
  %92 = bitcast %struct.mg_connect_opts* %opts to i8*
  call void @llvm.lifetime.end.p0i8(i64 40, i8* %92) #5
  %93 = bitcast i8** %error to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %93) #5
  %94 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %94) #5
  %95 = bitcast i8** %purl to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %95) #5
  %96 = bitcast [256 x i8]* %burl to i8*
  call void @llvm.lifetime.end.p0i8(i64 256, i8* %96) #5
  %97 = bitcast %struct.mg_connection** %be to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %97) #5
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define %struct.mg_connection* @mg_connect_http_base(%struct.mg_mgr* %mgr, void (%struct.mg_connection*, i32, i8*)* %ev_handler, %struct.mg_connect_opts* byval align 8 %opts, i8* %scheme1, i8* %scheme2, i8* %scheme_ssl1, i8* %scheme_ssl2, i8* %url, %struct.mg_str* %path, %struct.mg_str* %user_info, %struct.mg_str* %host) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %ev_handler.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %scheme1.addr = alloca i8*, align 8
  %scheme2.addr = alloca i8*, align 8
  %scheme_ssl1.addr = alloca i8*, align 8
  %scheme_ssl2.addr = alloca i8*, align 8
  %url.addr = alloca i8*, align 8
  %path.addr = alloca %struct.mg_str*, align 8
  %user_info.addr = alloca %struct.mg_str*, align 8
  %host.addr = alloca %struct.mg_str*, align 8
  %nc = alloca %struct.mg_connection*, align 8
  %port_i = alloca i32, align 4
  %use_ssl = alloca i32, align 4
  %scheme = alloca %struct.mg_str, align 8
  %query = alloca %struct.mg_str, align 8
  %fragment = alloca %struct.mg_str, align 8
  %conn_addr_buf = alloca [2 x i8], align 1
  %conn_addr = alloca i8*, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  store void (%struct.mg_connection*, i32, i8*)* %ev_handler, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8, !tbaa !3
  store i8* %scheme1, i8** %scheme1.addr, align 8, !tbaa !3
  store i8* %scheme2, i8** %scheme2.addr, align 8, !tbaa !3
  store i8* %scheme_ssl1, i8** %scheme_ssl1.addr, align 8, !tbaa !3
  store i8* %scheme_ssl2, i8** %scheme_ssl2.addr, align 8, !tbaa !3
  store i8* %url, i8** %url.addr, align 8, !tbaa !3
  store %struct.mg_str* %path, %struct.mg_str** %path.addr, align 8, !tbaa !3
  store %struct.mg_str* %user_info, %struct.mg_str** %user_info.addr, align 8, !tbaa !3
  store %struct.mg_str* %host, %struct.mg_str** %host.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  store %struct.mg_connection* null, %struct.mg_connection** %nc, align 8, !tbaa !3
  %1 = bitcast i32* %port_i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  store i32 0, i32* %port_i, align 4, !tbaa !15
  %2 = bitcast i32* %use_ssl to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  store i32 0, i32* %use_ssl, align 4, !tbaa !15
  %3 = bitcast %struct.mg_str* %scheme to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %3) #5
  %4 = bitcast %struct.mg_str* %query to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %4) #5
  %5 = bitcast %struct.mg_str* %fragment to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %5) #5
  %6 = bitcast [2 x i8]* %conn_addr_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %6) #5
  %7 = bitcast i8** %conn_addr to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #5
  %arraydecay = getelementptr inbounds [2 x i8], [2 x i8]* %conn_addr_buf, i32 0, i32 0
  store i8* %arraydecay, i8** %conn_addr, align 8, !tbaa !3
  %8 = load i8*, i8** %url.addr, align 8, !tbaa !3
  %call = call { i8*, i64 } @mg_mk_str(i8* %8)
  %9 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %10 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %9, i32 0, i32 0
  %11 = extractvalue { i8*, i64 } %call, 0
  store i8* %11, i8** %10, align 8
  %12 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %9, i32 0, i32 1
  %13 = extractvalue { i8*, i64 } %call, 1
  store i64 %13, i64* %12, align 8
  %14 = load %struct.mg_str*, %struct.mg_str** %user_info.addr, align 8, !tbaa !3
  %15 = load %struct.mg_str*, %struct.mg_str** %host.addr, align 8, !tbaa !3
  %16 = load %struct.mg_str*, %struct.mg_str** %path.addr, align 8, !tbaa !3
  %17 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %18 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %17, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %17, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %call1 = call i32 @mg_parse_uri(i8* %19, i64 %21, %struct.mg_str* %scheme, %struct.mg_str* %14, %struct.mg_str* %15, i32* %port_i, %struct.mg_str* %16, %struct.mg_str* %query, %struct.mg_str* %fragment)
  %cmp = icmp ne i32 %call1, 0
  br i1 %cmp, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %error_string = getelementptr inbounds %struct.mg_connect_opts, %struct.mg_connect_opts* %opts, i32 0, i32 2
  %22 = load i8**, i8*** %error_string, align 8, !tbaa !93
  %tobool = icmp ne i8** %22, null
  br i1 %tobool, label %if.then2, label %if.end

if.then2:                                         ; preds = %do.body
  %error_string3 = getelementptr inbounds %struct.mg_connect_opts, %struct.mg_connect_opts* %opts, i32 0, i32 2
  %23 = load i8**, i8*** %error_string3, align 8, !tbaa !93
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.127, i32 0, i32 0), i8** %23, align 8, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %if.then2, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %out

if.end4:                                          ; preds = %entry
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %query, i32 0, i32 1
  %24 = load i64, i64* %len, align 8, !tbaa !18
  %cmp5 = icmp ugt i64 %24, 0
  br i1 %cmp5, label %if.then6, label %if.end10

if.then6:                                         ; preds = %if.end4
  %len7 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %query, i32 0, i32 1
  %25 = load i64, i64* %len7, align 8, !tbaa !18
  %add = add i64 %25, 1
  %26 = load %struct.mg_str*, %struct.mg_str** %path.addr, align 8, !tbaa !3
  %len8 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %26, i32 0, i32 1
  %27 = load i64, i64* %len8, align 8, !tbaa !18
  %add9 = add i64 %27, %add
  store i64 %add9, i64* %len8, align 8, !tbaa !18
  br label %if.end10

if.end10:                                         ; preds = %if.then6, %if.end4
  %len11 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %scheme, i32 0, i32 1
  %28 = load i64, i64* %len11, align 8, !tbaa !18
  %cmp12 = icmp eq i64 %28, 0
  br i1 %cmp12, label %if.then19, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end10
  %29 = load i8*, i8** %scheme1.addr, align 8, !tbaa !3
  %call13 = call i32 @mg_vcmp(%struct.mg_str* %scheme, i8* %29)
  %cmp14 = icmp eq i32 %call13, 0
  br i1 %cmp14, label %if.then19, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %lor.lhs.false
  %30 = load i8*, i8** %scheme2.addr, align 8, !tbaa !3
  %cmp16 = icmp ne i8* %30, null
  br i1 %cmp16, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false15
  %31 = load i8*, i8** %scheme2.addr, align 8, !tbaa !3
  %call17 = call i32 @mg_vcmp(%struct.mg_str* %scheme, i8* %31)
  %cmp18 = icmp eq i32 %call17, 0
  br i1 %cmp18, label %if.then19, label %if.else

if.then19:                                        ; preds = %land.lhs.true, %lor.lhs.false, %if.end10
  store i32 0, i32* %use_ssl, align 4, !tbaa !15
  %32 = load i32, i32* %port_i, align 4, !tbaa !15
  %cmp20 = icmp eq i32 %32, 0
  br i1 %cmp20, label %if.then21, label %if.end22

if.then21:                                        ; preds = %if.then19
  store i32 80, i32* %port_i, align 4, !tbaa !15
  br label %if.end22

if.end22:                                         ; preds = %if.then21, %if.then19
  br label %if.end36

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false15
  %33 = load i8*, i8** %scheme_ssl1.addr, align 8, !tbaa !3
  %call23 = call i32 @mg_vcmp(%struct.mg_str* %scheme, i8* %33)
  %cmp24 = icmp eq i32 %call23, 0
  br i1 %cmp24, label %if.then30, label %lor.lhs.false25

lor.lhs.false25:                                  ; preds = %if.else
  %34 = load i8*, i8** %scheme2.addr, align 8, !tbaa !3
  %cmp26 = icmp ne i8* %34, null
  br i1 %cmp26, label %land.lhs.true27, label %if.else34

land.lhs.true27:                                  ; preds = %lor.lhs.false25
  %35 = load i8*, i8** %scheme_ssl2.addr, align 8, !tbaa !3
  %call28 = call i32 @mg_vcmp(%struct.mg_str* %scheme, i8* %35)
  %cmp29 = icmp eq i32 %call28, 0
  br i1 %cmp29, label %if.then30, label %if.else34

if.then30:                                        ; preds = %land.lhs.true27, %if.else
  store i32 1, i32* %use_ssl, align 4, !tbaa !15
  %36 = load i32, i32* %port_i, align 4, !tbaa !15
  %cmp31 = icmp eq i32 %36, 0
  br i1 %cmp31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %if.then30
  store i32 443, i32* %port_i, align 4, !tbaa !15
  br label %if.end33

if.end33:                                         ; preds = %if.then32, %if.then30
  br label %if.end35

if.else34:                                        ; preds = %land.lhs.true27, %lor.lhs.false25
  br label %out

if.end35:                                         ; preds = %if.end33
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.end22
  %37 = load %struct.mg_str*, %struct.mg_str** %host.addr, align 8, !tbaa !3
  %len37 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %37, i32 0, i32 1
  %38 = load i64, i64* %len37, align 8, !tbaa !18
  %conv = trunc i64 %38 to i32
  %39 = load %struct.mg_str*, %struct.mg_str** %host.addr, align 8, !tbaa !3
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %39, i32 0, i32 0
  %40 = load i8*, i8** %p, align 8, !tbaa !16
  %41 = load i32, i32* %port_i, align 4, !tbaa !15
  %call38 = call i32 (i8**, i64, i8*, ...) @mg_asprintf(i8** %conn_addr, i64 2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.128, i32 0, i32 0), i32 %conv, i8* %40, i32 %41)
  %42 = load i8*, i8** %conn_addr, align 8, !tbaa !3
  %cmp39 = icmp eq i8* %42, null
  br i1 %cmp39, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end36
  br label %out

if.end42:                                         ; preds = %if.end36
  br label %do.body43

do.body43:                                        ; preds = %if.end42
  %call44 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 8642)
  %tobool45 = icmp ne i32 %call44, 0
  br i1 %tobool45, label %if.then46, label %if.end47

if.then46:                                        ; preds = %do.body43
  %43 = load i8*, i8** %url.addr, align 8, !tbaa !3
  %44 = load i32, i32* %use_ssl, align 4, !tbaa !15
  %45 = load i8*, i8** %conn_addr, align 8, !tbaa !3
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.129, i32 0, i32 0), i8* %43, i32 %44, i8* %45)
  br label %if.end47

if.end47:                                         ; preds = %if.then46, %do.body43
  br label %do.cond48

do.cond48:                                        ; preds = %if.end47
  br label %do.end49

do.end49:                                         ; preds = %do.cond48
  %46 = load i32, i32* %use_ssl, align 4, !tbaa !15
  %tobool50 = icmp ne i32 %46, 0
  br i1 %tobool50, label %if.then51, label %if.end60

if.then51:                                        ; preds = %do.end49
  br label %do.body52

do.body52:                                        ; preds = %if.then51
  %error_string53 = getelementptr inbounds %struct.mg_connect_opts, %struct.mg_connect_opts* %opts, i32 0, i32 2
  %47 = load i8**, i8*** %error_string53, align 8, !tbaa !93
  %tobool54 = icmp ne i8** %47, null
  br i1 %tobool54, label %if.then55, label %if.end57

if.then55:                                        ; preds = %do.body52
  %error_string56 = getelementptr inbounds %struct.mg_connect_opts, %struct.mg_connect_opts* %opts, i32 0, i32 2
  %48 = load i8**, i8*** %error_string56, align 8, !tbaa !93
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.130, i32 0, i32 0), i8** %48, align 8, !tbaa !3
  br label %if.end57

if.end57:                                         ; preds = %if.then55, %do.body52
  br label %do.cond58

do.cond58:                                        ; preds = %if.end57
  br label %do.end59

do.end59:                                         ; preds = %do.cond58
  br label %out

if.end60:                                         ; preds = %do.end49
  %49 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %50 = load i8*, i8** %conn_addr, align 8, !tbaa !3
  %51 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8, !tbaa !3
  %call61 = call %struct.mg_connection* @mg_connect_opt(%struct.mg_mgr* %49, i8* %50, void (%struct.mg_connection*, i32, i8*)* %51, %struct.mg_connect_opts* byval align 8 %opts)
  store %struct.mg_connection* %call61, %struct.mg_connection** %nc, align 8, !tbaa !3
  %cmp62 = icmp ne %struct.mg_connection* %call61, null
  br i1 %cmp62, label %if.then64, label %if.end65

if.then64:                                        ; preds = %if.end60
  %52 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  call void @mg_set_protocol_http_websocket(%struct.mg_connection* %52)
  br label %if.end65

if.end65:                                         ; preds = %if.then64, %if.end60
  br label %out

out:                                              ; preds = %if.end65, %do.end59, %if.then41, %if.else34, %do.end
  %53 = load i8*, i8** %conn_addr, align 8, !tbaa !3
  %cmp66 = icmp ne i8* %53, null
  br i1 %cmp66, label %land.lhs.true68, label %if.end73

land.lhs.true68:                                  ; preds = %out
  %54 = load i8*, i8** %conn_addr, align 8, !tbaa !3
  %arraydecay69 = getelementptr inbounds [2 x i8], [2 x i8]* %conn_addr_buf, i32 0, i32 0
  %cmp70 = icmp ne i8* %54, %arraydecay69
  br i1 %cmp70, label %if.then72, label %if.end73

if.then72:                                        ; preds = %land.lhs.true68
  %55 = load i8*, i8** %conn_addr, align 8, !tbaa !3
  call void @free(i8* %55)
  br label %if.end73

if.end73:                                         ; preds = %if.then72, %land.lhs.true68, %out
  %56 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %57 = bitcast i8** %conn_addr to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %57) #5
  %58 = bitcast [2 x i8]* %conn_addr_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %58) #5
  %59 = bitcast %struct.mg_str* %fragment to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %59) #5
  %60 = bitcast %struct.mg_str* %query to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %60) #5
  %61 = bitcast %struct.mg_str* %scheme to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %61) #5
  %62 = bitcast i32* %use_ssl to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %62) #5
  %63 = bitcast i32* %port_i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %63) #5
  %64 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %64) #5
  ret %struct.mg_connection* %56
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_reverse_proxy_handler(%struct.mg_connection* %nc, i32 %ev, i8* %ev_data) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %ev.addr = alloca i32, align 4
  %ev_data.addr = alloca i8*, align 8
  %hm = alloca %struct.http_message*, align 8
  %pd = alloca %struct.mg_http_proto_data*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i32 %ev, i32* %ev.addr, align 4, !tbaa !15
  store i8* %ev_data, i8** %ev_data.addr, align 8, !tbaa !3
  %0 = bitcast %struct.http_message** %hm to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load i8*, i8** %ev_data.addr, align 8, !tbaa !3
  %2 = bitcast i8* %1 to %struct.http_message*
  store %struct.http_message* %2, %struct.http_message** %hm, align 8, !tbaa !3
  %3 = bitcast %struct.mg_http_proto_data** %pd to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %call = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %4)
  store %struct.mg_http_proto_data* %call, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %5 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %cmp = icmp eq %struct.mg_http_proto_data* %5, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %6 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %reverse_proxy_data = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %6, i32 0, i32 6
  %linked_conn = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %reverse_proxy_data, i32 0, i32 0
  %7 = load %struct.mg_connection*, %struct.mg_connection** %linked_conn, align 8, !tbaa !174
  %cmp1 = icmp eq %struct.mg_connection* %7, null
  br i1 %cmp1, label %if.then, label %if.end4

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %call2 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 7941)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.then3, label %if.end

if.then3:                                         ; preds = %do.body
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.199, i32 0, i32 0), %struct.mg_connection* %8)
  br label %if.end

if.end:                                           ; preds = %if.then3, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %do.cond
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end4:                                          ; preds = %lor.lhs.false
  %9 = load i32, i32* %ev.addr, align 4, !tbaa !15
  switch i32 %9, label %sw.epilog [
    i32 2, label %sw.bb
    i32 101, label %sw.bb10
    i32 5, label %sw.bb18
  ]

sw.bb:                                            ; preds = %if.end4
  %10 = load i8*, i8** %ev_data.addr, align 8, !tbaa !3
  %11 = bitcast i8* %10 to i32*
  %12 = load i32, i32* %11, align 4, !tbaa !15
  %cmp5 = icmp ne i32 %12, 0
  br i1 %cmp5, label %if.then6, label %if.end9

if.then6:                                         ; preds = %sw.bb
  %13 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %reverse_proxy_data7 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %13, i32 0, i32 6
  %linked_conn8 = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %reverse_proxy_data7, i32 0, i32 0
  %14 = load %struct.mg_connection*, %struct.mg_connection** %linked_conn8, align 8, !tbaa !174
  call void @mg_http_send_error(%struct.mg_connection* %14, i32 502, i8* null)
  br label %if.end9

if.end9:                                          ; preds = %if.then6, %sw.bb
  br label %sw.epilog

sw.bb10:                                          ; preds = %if.end4
  %15 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %reverse_proxy_data11 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %15, i32 0, i32 6
  %linked_conn12 = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %reverse_proxy_data11, i32 0, i32 0
  %16 = load %struct.mg_connection*, %struct.mg_connection** %linked_conn12, align 8, !tbaa !174
  %17 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %message = getelementptr inbounds %struct.http_message, %struct.http_message* %17, i32 0, i32 0
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %message, i32 0, i32 0
  %18 = load i8*, i8** %p, align 8, !tbaa !128
  %19 = load %struct.http_message*, %struct.http_message** %hm, align 8, !tbaa !3
  %message13 = getelementptr inbounds %struct.http_message, %struct.http_message* %19, i32 0, i32 0
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %message13, i32 0, i32 1
  %20 = load i64, i64* %len, align 8, !tbaa !132
  %conv = trunc i64 %20 to i32
  call void @mg_send(%struct.mg_connection* %16, i8* %18, i32 %conv)
  %21 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %reverse_proxy_data14 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %21, i32 0, i32 6
  %linked_conn15 = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %reverse_proxy_data14, i32 0, i32 0
  %22 = load %struct.mg_connection*, %struct.mg_connection** %linked_conn15, align 8, !tbaa !174
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %22, i32 0, i32 21
  %23 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %23, 1024
  store i64 %or, i64* %flags, align 8, !tbaa !41
  %24 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags16 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %24, i32 0, i32 21
  %25 = load i64, i64* %flags16, align 8, !tbaa !41
  %or17 = or i64 %25, 2048
  store i64 %or17, i64* %flags16, align 8, !tbaa !41
  br label %sw.epilog

sw.bb18:                                          ; preds = %if.end4
  %26 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %reverse_proxy_data19 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %26, i32 0, i32 6
  %linked_conn20 = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %reverse_proxy_data19, i32 0, i32 0
  %27 = load %struct.mg_connection*, %struct.mg_connection** %linked_conn20, align 8, !tbaa !174
  %flags21 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %27, i32 0, i32 21
  %28 = load i64, i64* %flags21, align 8, !tbaa !41
  %or22 = or i64 %28, 1024
  store i64 %or22, i64* %flags21, align 8, !tbaa !41
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end4, %sw.bb18, %sw.bb10, %if.end9
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %sw.epilog, %do.end
  %29 = bitcast %struct.mg_http_proto_data** %pd to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %29) #5
  %30 = bitcast %struct.http_message** %hm to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %30) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup, %cleanup
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define void @mg_http_send_digest_auth_request(%struct.mg_connection* %c, i8* %domain) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %domain.addr = alloca i8*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  store i8* %domain, i8** %domain.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %1 = load i8*, i8** %domain.addr, align 8, !tbaa !3
  %call = call double @mg_time()
  %conv = fptoui double %call to i64
  %call1 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %0, i8* getelementptr inbounds ([111 x i8], [111 x i8]* @.str.121, i32 0, i32 0), i8* %1, i64 %conv)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_serve_http(%struct.mg_connection* %nc, %struct.http_message* %hm, %struct.mg_serve_http_opts* byval align 8 %opts) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %path = alloca i8*, align 8
  %hdr = alloca %struct.mg_str*, align 8
  %path_info = alloca %struct.mg_str, align 8
  %remote_ip = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %0 = bitcast i8** %path to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  store i8* null, i8** %path, align 8, !tbaa !3
  %1 = bitcast %struct.mg_str** %hdr to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %2 = bitcast %struct.mg_str* %path_info to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %2) #5
  %3 = bitcast i32* %remote_ip to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sa = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 6
  %sin = bitcast %union.socket_address* %sa to %struct.sockaddr_in*
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin, i32 0, i32 3
  %5 = bitcast %struct.in_addr* %sin_addr to i32*
  %6 = load i32, i32* %5, align 4, !tbaa !14
  %call = call i32 @_OSSwapInt32(i32 %6)
  store i32 %call, i32* %remote_ip, align 4, !tbaa !15
  %ip_acl = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 7
  %7 = load i8*, i8** %ip_acl, align 8, !tbaa !175
  %8 = load i32, i32* %remote_ip, align 4, !tbaa !15
  %call1 = call i32 @mg_check_ip_acl(i8* %7, i32 %8)
  %cmp = icmp ne i32 %call1, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_http_send_error(%struct.mg_connection* %9, i32 403, i8* null)
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 21
  %11 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %11, 1024
  store i64 %or, i64* %flags, align 8, !tbaa !41
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %13 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %call2 = call i32 @mg_http_handle_forwarding(%struct.mg_connection* %12, %struct.http_message* %13, %struct.mg_serve_http_opts* %opts)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %15 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %call5 = call i32 @mg_http_send_port_based_redirect(%struct.mg_connection* %14, %struct.http_message* %15, %struct.mg_serve_http_opts* %opts)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end8:                                          ; preds = %if.end4
  %document_root = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 0
  %16 = load i8*, i8** %document_root, align 8, !tbaa !177
  %cmp9 = icmp eq i8* %16, null
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end8
  %document_root11 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 0
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0), i8** %document_root11, align 8, !tbaa !177
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end8
  %per_directory_auth_file = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 2
  %17 = load i8*, i8** %per_directory_auth_file, align 8, !tbaa !178
  %cmp13 = icmp eq i8* %17, null
  br i1 %cmp13, label %if.then14, label %if.end16

if.then14:                                        ; preds = %if.end12
  %per_directory_auth_file15 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 2
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.122, i32 0, i32 0), i8** %per_directory_auth_file15, align 8, !tbaa !178
  br label %if.end16

if.end16:                                         ; preds = %if.then14, %if.end12
  %enable_directory_listing = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 5
  %18 = load i8*, i8** %enable_directory_listing, align 8, !tbaa !179
  %cmp17 = icmp eq i8* %18, null
  br i1 %cmp17, label %if.then18, label %if.end20

if.then18:                                        ; preds = %if.end16
  %enable_directory_listing19 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 5
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.123, i32 0, i32 0), i8** %enable_directory_listing19, align 8, !tbaa !179
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %cgi_file_pattern = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 12
  %19 = load i8*, i8** %cgi_file_pattern, align 8, !tbaa !180
  %cmp21 = icmp eq i8* %19, null
  br i1 %cmp21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %if.end20
  %cgi_file_pattern23 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 12
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.124, i32 0, i32 0), i8** %cgi_file_pattern23, align 8, !tbaa !180
  br label %if.end24

if.end24:                                         ; preds = %if.then22, %if.end20
  %ssi_pattern = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 6
  %20 = load i8*, i8** %ssi_pattern, align 8, !tbaa !181
  %cmp25 = icmp eq i8* %20, null
  br i1 %cmp25, label %if.then26, label %if.end28

if.then26:                                        ; preds = %if.end24
  %ssi_pattern27 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 6
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.125, i32 0, i32 0), i8** %ssi_pattern27, align 8, !tbaa !181
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end24
  %index_files = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 1
  %21 = load i8*, i8** %index_files, align 8, !tbaa !182
  %cmp29 = icmp eq i8* %21, null
  br i1 %cmp29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end28
  %index_files31 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 1
  store i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.126, i32 0, i32 0), i8** %index_files31, align 8, !tbaa !182
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end28
  %22 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri = getelementptr inbounds %struct.http_message, %struct.http_message* %22, i32 0, i32 3
  %23 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri33 = getelementptr inbounds %struct.http_message, %struct.http_message* %23, i32 0, i32 3
  %call34 = call i32 @mg_normalize_uri_path(%struct.mg_str* %uri, %struct.mg_str* %uri33)
  %tobool35 = icmp ne i32 %call34, 0
  br i1 %tobool35, label %if.end37, label %if.then36

if.then36:                                        ; preds = %if.end32
  %24 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_http_send_error(%struct.mg_connection* %24, i32 400, i8* null)
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end37:                                         ; preds = %if.end32
  %25 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %call38 = call i32 @mg_uri_to_local_path(%struct.http_message* %25, %struct.mg_serve_http_opts* %opts, i8** %path, %struct.mg_str* %path_info)
  %cmp39 = icmp eq i32 %call38, 0
  br i1 %cmp39, label %if.then40, label %if.end41

if.then40:                                        ; preds = %if.end37
  %26 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_http_send_error(%struct.mg_connection* %26, i32 404, i8* null)
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end41:                                         ; preds = %if.end37
  %27 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %28 = load i8*, i8** %path, align 8, !tbaa !3
  %29 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  call void @mg_send_http_file(%struct.mg_connection* %27, i8* %28, %struct.mg_str* %path_info, %struct.http_message* %29, %struct.mg_serve_http_opts* %opts)
  %30 = load i8*, i8** %path, align 8, !tbaa !3
  call void @free(i8* %30)
  store i8* null, i8** %path, align 8, !tbaa !3
  %31 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %proto = getelementptr inbounds %struct.http_message, %struct.http_message* %31, i32 0, i32 4
  %call42 = call i32 @mg_vcmp(%struct.mg_str* %proto, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.83, i32 0, i32 0))
  %cmp43 = icmp ne i32 %call42, 0
  br i1 %cmp43, label %if.then48, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end41
  %32 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %call44 = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %32, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.81, i32 0, i32 0))
  store %struct.mg_str* %call44, %struct.mg_str** %hdr, align 8, !tbaa !3
  %cmp45 = icmp ne %struct.mg_str* %call44, null
  br i1 %cmp45, label %land.lhs.true, label %if.end49

land.lhs.true:                                    ; preds = %lor.lhs.false
  %33 = load %struct.mg_str*, %struct.mg_str** %hdr, align 8, !tbaa !3
  %call46 = call i32 @mg_vcmp(%struct.mg_str* %33, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.82, i32 0, i32 0))
  %cmp47 = icmp ne i32 %call46, 0
  br i1 %cmp47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %land.lhs.true, %if.end41
  br label %if.end49

if.end49:                                         ; preds = %if.then48, %land.lhs.true, %lor.lhs.false
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end49, %if.then40, %if.then36, %if.then7, %if.then3, %if.then
  %34 = bitcast i32* %remote_ip to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %34) #5
  %35 = bitcast %struct.mg_str* %path_info to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %35) #5
  %36 = bitcast %struct.mg_str** %hdr to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %36) #5
  %37 = bitcast i8** %path to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %37) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup, %cleanup
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal i32 @_OSSwapInt32(i32 %_data) #12 {
entry:
  %_data.addr = alloca i32, align 4
  store i32 %_data, i32* %_data.addr, align 4, !tbaa !15
  %0 = load i32, i32* %_data.addr, align 4, !tbaa !15
  %1 = call i32 @llvm.bswap.i32(i32 %0)
  ret i32 %1
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_http_handle_forwarding(%struct.mg_connection* %nc, %struct.http_message* %hm, %struct.mg_serve_http_opts* %opts) #0 {
entry:
  %retval = alloca i32, align 4
  %nc.addr = alloca %struct.mg_connection*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %rewrites = alloca i8*, align 8
  %a = alloca %struct.mg_str, align 8
  %b = alloca %struct.mg_str, align 8
  %p1 = alloca %struct.mg_str, align 8
  %p2 = alloca %struct.mg_str, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %0 = bitcast i8** %rewrites to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %url_rewrites = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %1, i32 0, i32 8
  %2 = load i8*, i8** %url_rewrites, align 8, !tbaa !183
  store i8* %2, i8** %rewrites, align 8, !tbaa !3
  %3 = bitcast %struct.mg_str* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %3) #5
  %4 = bitcast %struct.mg_str* %b to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %4) #5
  %5 = bitcast %struct.mg_str* %p1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %5) #5
  %6 = bitcast %struct.mg_str* %p1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 bitcast (%struct.mg_str* @mg_http_handle_forwarding.p1 to i8*), i64 16, i1 false)
  %7 = bitcast %struct.mg_str* %p2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %7) #5
  %8 = bitcast %struct.mg_str* %p2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 bitcast (%struct.mg_str* @mg_http_handle_forwarding.p2 to i8*), i64 16, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %if.end10, %entry
  %9 = load i8*, i8** %rewrites, align 8, !tbaa !3
  %call = call i8* @mg_next_comma_list_entry(i8* %9, %struct.mg_str* %a, %struct.mg_str* %b)
  store i8* %call, i8** %rewrites, align 8, !tbaa !3
  %cmp = icmp ne i8* %call, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %10 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri = getelementptr inbounds %struct.http_message, %struct.http_message* %10, i32 0, i32 3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %a, i32 0, i32 1
  %11 = load i64, i64* %len, align 8, !tbaa !18
  %12 = bitcast %struct.mg_str* %a to { i8*, i64 }*
  %13 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %12, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %12, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %struct.mg_str* %uri to { i8*, i64 }*
  %18 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %17, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %17, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %call1 = call i32 @mg_strncmp(i8* %14, i64 %16, i8* %19, i64 %21, i64 %11)
  %cmp2 = icmp eq i32 %call1, 0
  br i1 %cmp2, label %if.then, label %if.end10

if.then:                                          ; preds = %while.body
  %len3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %p1, i32 0, i32 1
  %22 = load i64, i64* %len3, align 8, !tbaa !18
  %23 = bitcast %struct.mg_str* %b to { i8*, i64 }*
  %24 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %23, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %23, i32 0, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = bitcast %struct.mg_str* %p1 to { i8*, i64 }*
  %29 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %28, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %28, i32 0, i32 1
  %32 = load i64, i64* %31, align 8
  %call4 = call i32 @mg_strncmp(i8* %25, i64 %27, i8* %30, i64 %32, i64 %22)
  %cmp5 = icmp eq i32 %call4, 0
  br i1 %cmp5, label %if.then9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %len6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %p2, i32 0, i32 1
  %33 = load i64, i64* %len6, align 8, !tbaa !18
  %34 = bitcast %struct.mg_str* %b to { i8*, i64 }*
  %35 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %34, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %34, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %struct.mg_str* %p2 to { i8*, i64 }*
  %40 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %39, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %39, i32 0, i32 1
  %43 = load i64, i64* %42, align 8
  %call7 = call i32 @mg_strncmp(i8* %36, i64 %38, i8* %41, i64 %43, i64 %33)
  %cmp8 = icmp eq i32 %call7, 0
  br i1 %cmp8, label %if.then9, label %if.end

if.then9:                                         ; preds = %lor.lhs.false, %if.then
  %44 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %45 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %46 = bitcast %struct.mg_str* %a to { i8*, i64 }*
  %47 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %46, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %46, i32 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = bitcast %struct.mg_str* %b to { i8*, i64 }*
  %52 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %51, i32 0, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %51, i32 0, i32 1
  %55 = load i64, i64* %54, align 8
  call void @mg_http_reverse_proxy(%struct.mg_connection* %44, %struct.http_message* %45, i8* %48, i64 %50, i8* %53, i64 %55)
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  br label %if.end10

if.end10:                                         ; preds = %if.end, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then9
  %56 = bitcast %struct.mg_str* %p2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %56) #5
  %57 = bitcast %struct.mg_str* %p1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %57) #5
  %58 = bitcast %struct.mg_str* %b to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %58) #5
  %59 = bitcast %struct.mg_str* %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %59) #5
  %60 = bitcast i8** %rewrites to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %60) #5
  %61 = load i32, i32* %retval, align 4
  ret i32 %61
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_http_send_port_based_redirect(%struct.mg_connection* %c, %struct.http_message* %hm, %struct.mg_serve_http_opts* %opts) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.mg_connection*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %rewrites = alloca i8*, align 8
  %a = alloca %struct.mg_str, align 8
  %b = alloca %struct.mg_str, align 8
  %local_port = alloca [20 x i8], align 16
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %0 = bitcast i8** %rewrites to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %url_rewrites = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %1, i32 0, i32 8
  %2 = load i8*, i8** %url_rewrites, align 8, !tbaa !183
  store i8* %2, i8** %rewrites, align 8, !tbaa !3
  %3 = bitcast %struct.mg_str* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %3) #5
  %4 = bitcast %struct.mg_str* %b to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %4) #5
  %5 = bitcast [20 x i8]* %local_port to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* %5) #5
  %6 = bitcast [20 x i8]* %local_port to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %6, i8* align 16 getelementptr inbounds (<{ i8, [19 x i8] }>, <{ i8, [19 x i8] }>* @mg_http_send_port_based_redirect.local_port, i32 0, i32 0), i64 20, i1 false)
  %7 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %arraydecay = getelementptr inbounds [20 x i8], [20 x i8]* %local_port, i32 0, i32 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 1
  %call = call i32 @mg_conn_addr_to_str(%struct.mg_connection* %7, i8* %add.ptr, i64 19, i32 2)
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %8 = load i8*, i8** %rewrites, align 8, !tbaa !3
  %call1 = call i8* @mg_next_comma_list_entry(i8* %8, %struct.mg_str* %a, %struct.mg_str* %b)
  store i8* %call1, i8** %rewrites, align 8, !tbaa !3
  %cmp = icmp ne i8* %call1, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %arraydecay2 = getelementptr inbounds [20 x i8], [20 x i8]* %local_port, i32 0, i32 0
  %call3 = call i32 @mg_vcmp(%struct.mg_str* %a, i8* %arraydecay2)
  %cmp4 = icmp eq i32 %call3, 0
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %9 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  call void @mg_send_response_line(%struct.mg_connection* %9, i32 301, i8* null)
  %10 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %b, i32 0, i32 1
  %11 = load i64, i64* %len, align 8, !tbaa !18
  %conv = trunc i64 %11 to i32
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %b, i32 0, i32 0
  %12 = load i8*, i8** %p, align 8, !tbaa !16
  %13 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %proto = getelementptr inbounds %struct.http_message, %struct.http_message* %13, i32 0, i32 4
  %p5 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %proto, i32 0, i32 0
  %14 = load i8*, i8** %p5, align 8, !tbaa !135
  %15 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri = getelementptr inbounds %struct.http_message, %struct.http_message* %15, i32 0, i32 3
  %p6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 0
  %16 = load i8*, i8** %p6, align 8, !tbaa !133
  %sub.ptr.lhs.cast = ptrtoint i8* %14 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %16 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub = sub nsw i64 %sub.ptr.sub, 1
  %conv7 = trunc i64 %sub to i32
  %17 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri8 = getelementptr inbounds %struct.http_message, %struct.http_message* %17, i32 0, i32 3
  %p9 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri8, i32 0, i32 0
  %18 = load i8*, i8** %p9, align 8, !tbaa !133
  %call10 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %10, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.202, i32 0, i32 0), i32 %conv, i8* %12, i32 %conv7, i8* %18)
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then
  %19 = bitcast [20 x i8]* %local_port to i8*
  call void @llvm.lifetime.end.p0i8(i64 20, i8* %19) #5
  %20 = bitcast %struct.mg_str* %b to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %20) #5
  %21 = bitcast %struct.mg_str* %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %21) #5
  %22 = bitcast i8** %rewrites to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %22) #5
  %23 = load i32, i32* %retval, align 4
  ret i32 %23
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_uri_to_local_path(%struct.http_message* %hm, %struct.mg_serve_http_opts* %opts, i8** %local_path, %struct.mg_str* %remainder) #0 {
entry:
  %retval = alloca i32, align 4
  %hm.addr = alloca %struct.http_message*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %local_path.addr = alloca i8**, align 8
  %remainder.addr = alloca %struct.mg_str*, align 8
  %ok = alloca i32, align 4
  %cp = alloca i8*, align 8
  %cp_end = alloca i8*, align 8
  %root = alloca %struct.mg_str, align 8
  %file_uri_start = alloca i8*, align 8
  %rewrites = alloca i8*, align 8
  %hh = alloca %struct.mg_str*, align 8
  %a = alloca %struct.mg_str, align 8
  %b = alloca %struct.mg_str, align 8
  %match_len = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %u = alloca i8*, align 8
  %lp = alloca i8*, align 8
  %lp_end = alloca i8*, align 8
  %p82 = alloca i8*, align 8
  %ps = alloca i8*, align 8
  %exists = alloca i32, align 4
  %next = alloca i8*, align 8
  %component = alloca %struct.mg_str, align 8
  %st = alloca %struct.stat, align 8
  %len134 = alloca i32, align 4
  %i = alloca i64, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  store i8** %local_path, i8*** %local_path.addr, align 8, !tbaa !3
  store %struct.mg_str* %remainder, %struct.mg_str** %remainder.addr, align 8, !tbaa !3
  %0 = bitcast i32* %ok to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  store i32 1, i32* %ok, align 4, !tbaa !15
  %1 = bitcast i8** %cp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %2 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri = getelementptr inbounds %struct.http_message, %struct.http_message* %2, i32 0, i32 3
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 0
  %3 = load i8*, i8** %p, align 8, !tbaa !133
  store i8* %3, i8** %cp, align 8, !tbaa !3
  %4 = bitcast i8** %cp_end to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #5
  %5 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri1 = getelementptr inbounds %struct.http_message, %struct.http_message* %5, i32 0, i32 3
  %p2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri1, i32 0, i32 0
  %6 = load i8*, i8** %p2, align 8, !tbaa !133
  %7 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri3 = getelementptr inbounds %struct.http_message, %struct.http_message* %7, i32 0, i32 3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri3, i32 0, i32 1
  %8 = load i64, i64* %len, align 8, !tbaa !136
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 %8
  store i8* %add.ptr, i8** %cp_end, align 8, !tbaa !3
  %9 = bitcast %struct.mg_str* %root to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %9) #5
  %10 = bitcast %struct.mg_str* %root to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false)
  %11 = bitcast i8** %file_uri_start to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %11) #5
  %12 = load i8*, i8** %cp, align 8, !tbaa !3
  store i8* %12, i8** %file_uri_start, align 8, !tbaa !3
  %13 = load i8**, i8*** %local_path.addr, align 8, !tbaa !3
  store i8* null, i8** %13, align 8, !tbaa !3
  %14 = load %struct.mg_str*, %struct.mg_str** %remainder.addr, align 8, !tbaa !3
  %p4 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %14, i32 0, i32 0
  store i8* null, i8** %p4, align 8, !tbaa !16
  %15 = load %struct.mg_str*, %struct.mg_str** %remainder.addr, align 8, !tbaa !3
  %len5 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %15, i32 0, i32 1
  store i64 0, i64* %len5, align 8, !tbaa !18
  %16 = bitcast i8** %rewrites to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %16) #5
  %17 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %url_rewrites = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %17, i32 0, i32 8
  %18 = load i8*, i8** %url_rewrites, align 8, !tbaa !183
  store i8* %18, i8** %rewrites, align 8, !tbaa !3
  %19 = bitcast %struct.mg_str** %hh to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %19) #5
  %20 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %call = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %20, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.115, i32 0, i32 0))
  store %struct.mg_str* %call, %struct.mg_str** %hh, align 8, !tbaa !3
  %21 = bitcast %struct.mg_str* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %21) #5
  %22 = bitcast %struct.mg_str* %b to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %22) #5
  br label %while.cond

while.cond:                                       ; preds = %if.end53, %cleanup, %entry
  %23 = load i8*, i8** %rewrites, align 8, !tbaa !3
  %call6 = call i8* @mg_next_comma_list_entry(i8* %23, %struct.mg_str* %a, %struct.mg_str* %b)
  store i8* %call6, i8** %rewrites, align 8, !tbaa !3
  %cmp = icmp ne i8* %call6, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %len7 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %a, i32 0, i32 1
  %24 = load i64, i64* %len7, align 8, !tbaa !18
  %cmp8 = icmp ugt i64 %24, 1
  br i1 %cmp8, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %while.body
  %p9 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %a, i32 0, i32 0
  %25 = load i8*, i8** %p9, align 8, !tbaa !16
  %arrayidx = getelementptr inbounds i8, i8* %25, i64 0
  %26 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = sext i8 %26 to i32
  %cmp10 = icmp eq i32 %conv, 64
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %27 = load %struct.mg_str*, %struct.mg_str** %hh, align 8, !tbaa !3
  %cmp12 = icmp ne %struct.mg_str* %27, null
  br i1 %cmp12, label %land.lhs.true14, label %if.end

land.lhs.true14:                                  ; preds = %if.then
  %28 = load %struct.mg_str*, %struct.mg_str** %hh, align 8, !tbaa !3
  %len15 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %28, i32 0, i32 1
  %29 = load i64, i64* %len15, align 8, !tbaa !18
  %len16 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %a, i32 0, i32 1
  %30 = load i64, i64* %len16, align 8, !tbaa !18
  %sub = sub i64 %30, 1
  %cmp17 = icmp eq i64 %29, %sub
  br i1 %cmp17, label %land.lhs.true19, label %if.end

land.lhs.true19:                                  ; preds = %land.lhs.true14
  %p20 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %a, i32 0, i32 0
  %31 = load i8*, i8** %p20, align 8, !tbaa !16
  %add.ptr21 = getelementptr inbounds i8, i8* %31, i64 1
  %32 = load %struct.mg_str*, %struct.mg_str** %hh, align 8, !tbaa !3
  %p22 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %32, i32 0, i32 0
  %33 = load i8*, i8** %p22, align 8, !tbaa !16
  %len23 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %a, i32 0, i32 1
  %34 = load i64, i64* %len23, align 8, !tbaa !18
  %sub24 = sub i64 %34, 1
  %call25 = call i32 @mg_ncasecmp(i8* %add.ptr21, i8* %33, i64 %sub24)
  %cmp26 = icmp eq i32 %call25, 0
  br i1 %cmp26, label %if.then28, label %if.end

if.then28:                                        ; preds = %land.lhs.true19
  %35 = bitcast %struct.mg_str* %root to i8*
  %36 = bitcast %struct.mg_str* %b to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 16, i1 false), !tbaa.struct !19
  br label %while.end

if.end:                                           ; preds = %land.lhs.true19, %land.lhs.true14, %if.then
  br label %if.end53

if.else:                                          ; preds = %land.lhs.true, %while.body
  %37 = bitcast i64* %match_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %37) #5
  %38 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri29 = getelementptr inbounds %struct.http_message, %struct.http_message* %38, i32 0, i32 3
  %39 = bitcast %struct.mg_str* %a to { i8*, i64 }*
  %40 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %39, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %39, i32 0, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = bitcast %struct.mg_str* %uri29 to { i8*, i64 }*
  %45 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %44, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %44, i32 0, i32 1
  %48 = load i64, i64* %47, align 8
  %call30 = call i64 @mg_match_prefix_n(i8* %41, i64 %43, i8* %46, i64 %48)
  store i64 %call30, i64* %match_len, align 8, !tbaa !12
  %49 = load i64, i64* %match_len, align 8, !tbaa !12
  %cmp31 = icmp ugt i64 %49, 0
  br i1 %cmp31, label %if.then33, label %if.end52

if.then33:                                        ; preds = %if.else
  %50 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri34 = getelementptr inbounds %struct.http_message, %struct.http_message* %50, i32 0, i32 3
  %p35 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri34, i32 0, i32 0
  %51 = load i8*, i8** %p35, align 8, !tbaa !133
  %52 = load i64, i64* %match_len, align 8, !tbaa !12
  %add.ptr36 = getelementptr inbounds i8, i8* %51, i64 %52
  store i8* %add.ptr36, i8** %file_uri_start, align 8, !tbaa !3
  %53 = load i8*, i8** %file_uri_start, align 8, !tbaa !3
  %54 = load i8, i8* %53, align 1, !tbaa !14
  %conv37 = sext i8 %54 to i32
  %cmp38 = icmp eq i32 %conv37, 47
  br i1 %cmp38, label %if.then42, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then33
  %55 = load i8*, i8** %file_uri_start, align 8, !tbaa !3
  %56 = load i8*, i8** %cp_end, align 8, !tbaa !3
  %cmp40 = icmp eq i8* %55, %56
  br i1 %cmp40, label %if.then42, label %if.else43

if.then42:                                        ; preds = %lor.lhs.false, %if.then33
  br label %if.end51

if.else43:                                        ; preds = %lor.lhs.false
  %57 = load i8*, i8** %file_uri_start, align 8, !tbaa !3
  %add.ptr44 = getelementptr inbounds i8, i8* %57, i64 -1
  %58 = load i8, i8* %add.ptr44, align 1, !tbaa !14
  %conv45 = sext i8 %58 to i32
  %cmp46 = icmp eq i32 %conv45, 47
  br i1 %cmp46, label %if.then48, label %if.else49

if.then48:                                        ; preds = %if.else43
  %59 = load i8*, i8** %file_uri_start, align 8, !tbaa !3
  %incdec.ptr = getelementptr inbounds i8, i8* %59, i32 -1
  store i8* %incdec.ptr, i8** %file_uri_start, align 8, !tbaa !3
  br label %if.end50

if.else49:                                        ; preds = %if.else43
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end50:                                         ; preds = %if.then48
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then42
  %60 = bitcast %struct.mg_str* %root to i8*
  %61 = bitcast %struct.mg_str* %b to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 8 %61, i64 16, i1 false), !tbaa.struct !19
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end52:                                         ; preds = %if.else
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end52, %if.end51, %if.else49
  %62 = bitcast i64* %match_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %62) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 2, label %while.cond
    i32 3, label %while.end
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end53

if.end53:                                         ; preds = %cleanup.cont, %if.end
  br label %while.cond

while.end:                                        ; preds = %cleanup, %if.then28, %while.cond
  %p54 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %root, i32 0, i32 0
  %63 = load i8*, i8** %p54, align 8, !tbaa !16
  %cmp55 = icmp eq i8* %63, null
  br i1 %cmp55, label %if.then57, label %if.end62

if.then57:                                        ; preds = %while.end
  %64 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %document_root = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %64, i32 0, i32 0
  %65 = load i8*, i8** %document_root, align 8, !tbaa !177
  %p58 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %root, i32 0, i32 0
  store i8* %65, i8** %p58, align 8, !tbaa !16
  %66 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %document_root59 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %66, i32 0, i32 0
  %67 = load i8*, i8** %document_root59, align 8, !tbaa !177
  %call60 = call i64 @strlen(i8* %67)
  %len61 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %root, i32 0, i32 1
  store i64 %call60, i64* %len61, align 8, !tbaa !18
  br label %if.end62

if.end62:                                         ; preds = %if.then57, %while.end
  %p63 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %root, i32 0, i32 0
  %68 = load i8*, i8** %p63, align 8, !tbaa !16
  %cmp64 = icmp ne i8* %68, null
  br i1 %cmp64, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end62
  %len66 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %root, i32 0, i32 1
  %69 = load i64, i64* %len66, align 8, !tbaa !18
  %cmp67 = icmp ugt i64 %69, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end62
  %70 = phi i1 [ false, %if.end62 ], [ %cmp67, %land.rhs ]
  %lnot = xor i1 %70, true
  %lnot.ext = zext i1 %lnot to i32
  %conv69 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv69, i64 0)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.end
  call void @__assert_rtn(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__func__.mg_uri_to_local_path, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 8117, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.203, i32 0, i32 0)) #17
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %land.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %71
  %72 = bitcast %struct.mg_str* %b to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %72) #5
  %73 = bitcast %struct.mg_str* %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %73) #5
  %74 = bitcast %struct.mg_str** %hh to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %74) #5
  %75 = bitcast i8** %rewrites to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %75) #5
  %76 = bitcast i8** %u to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %76) #5
  %77 = load i8*, i8** %file_uri_start, align 8, !tbaa !3
  %add.ptr70 = getelementptr inbounds i8, i8* %77, i64 1
  store i8* %add.ptr70, i8** %u, align 8, !tbaa !3
  %78 = bitcast i8** %lp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %78) #5
  %len71 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %root, i32 0, i32 1
  %79 = load i64, i64* %len71, align 8, !tbaa !18
  %80 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri72 = getelementptr inbounds %struct.http_message, %struct.http_message* %80, i32 0, i32 3
  %len73 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri72, i32 0, i32 1
  %81 = load i64, i64* %len73, align 8, !tbaa !136
  %add = add i64 %79, %81
  %add74 = add i64 %add, 1
  %call75 = call i8* @malloc(i64 %add74) #18
  store i8* %call75, i8** %lp, align 8, !tbaa !3
  %82 = bitcast i8** %lp_end to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %82) #5
  %83 = load i8*, i8** %lp, align 8, !tbaa !3
  %len76 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %root, i32 0, i32 1
  %84 = load i64, i64* %len76, align 8, !tbaa !18
  %add.ptr77 = getelementptr inbounds i8, i8* %83, i64 %84
  %85 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri78 = getelementptr inbounds %struct.http_message, %struct.http_message* %85, i32 0, i32 3
  %len79 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri78, i32 0, i32 1
  %86 = load i64, i64* %len79, align 8, !tbaa !136
  %add.ptr80 = getelementptr inbounds i8, i8* %add.ptr77, i64 %86
  %add.ptr81 = getelementptr inbounds i8, i8* %add.ptr80, i64 1
  store i8* %add.ptr81, i8** %lp_end, align 8, !tbaa !3
  %87 = bitcast i8** %p82 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %87) #5
  %88 = load i8*, i8** %lp, align 8, !tbaa !3
  store i8* %88, i8** %p82, align 8, !tbaa !3
  %89 = bitcast i8** %ps to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %89) #5
  %90 = bitcast i32* %exists to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %90) #5
  store i32 1, i32* %exists, align 4, !tbaa !15
  %91 = load i8*, i8** %lp, align 8, !tbaa !3
  %cmp83 = icmp eq i8* %91, null
  br i1 %cmp83, label %if.then85, label %if.end86

if.then85:                                        ; preds = %cond.end
  store i32 0, i32* %ok, align 4, !tbaa !15
  store i32 4, i32* %cleanup.dest.slot, align 4
  br label %cleanup214

if.end86:                                         ; preds = %cond.end
  %92 = load i8*, i8** %p82, align 8, !tbaa !3
  %p87 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %root, i32 0, i32 0
  %93 = load i8*, i8** %p87, align 8, !tbaa !16
  %len88 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %root, i32 0, i32 1
  %94 = load i64, i64* %len88, align 8, !tbaa !18
  %95 = load i8*, i8** %p82, align 8, !tbaa !3
  %96 = call i64 @llvm.objectsize.i64.p0i8(i8* %95, i1 false, i1 true)
  %call89 = call i8* @__memcpy_chk(i8* %92, i8* %93, i64 %94, i64 %96) #5
  %len90 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %root, i32 0, i32 1
  %97 = load i64, i64* %len90, align 8, !tbaa !18
  %98 = load i8*, i8** %p82, align 8, !tbaa !3
  %add.ptr91 = getelementptr inbounds i8, i8* %98, i64 %97
  store i8* %add.ptr91, i8** %p82, align 8, !tbaa !3
  %99 = load i8*, i8** %p82, align 8, !tbaa !3
  %add.ptr92 = getelementptr inbounds i8, i8* %99, i64 -1
  %100 = load i8, i8* %add.ptr92, align 1, !tbaa !14
  %conv93 = sext i8 %100 to i32
  %cmp94 = icmp eq i32 %conv93, 47
  br i1 %cmp94, label %if.then96, label %if.end98

if.then96:                                        ; preds = %if.end86
  %101 = load i8*, i8** %p82, align 8, !tbaa !3
  %incdec.ptr97 = getelementptr inbounds i8, i8* %101, i32 -1
  store i8* %incdec.ptr97, i8** %p82, align 8, !tbaa !3
  br label %if.end98

if.end98:                                         ; preds = %if.then96, %if.end86
  %102 = load i8*, i8** %p82, align 8, !tbaa !3
  store i8 0, i8* %102, align 1, !tbaa !14
  %103 = load i8*, i8** %p82, align 8, !tbaa !3
  store i8* %103, i8** %ps, align 8, !tbaa !3
  br label %while.cond99

while.cond99:                                     ; preds = %cleanup.cont199, %if.end98
  %104 = load i8*, i8** %u, align 8, !tbaa !3
  %105 = load i8*, i8** %cp_end, align 8, !tbaa !3
  %cmp100 = icmp ule i8* %104, %105
  br i1 %cmp100, label %while.body102, label %while.end200

while.body102:                                    ; preds = %while.cond99
  %106 = bitcast i8** %next to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %106) #5
  %107 = load i8*, i8** %u, align 8, !tbaa !3
  store i8* %107, i8** %next, align 8, !tbaa !3
  %108 = bitcast %struct.mg_str* %component to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %108) #5
  %109 = load i32, i32* %exists, align 4, !tbaa !15
  %tobool103 = icmp ne i32 %109, 0
  br i1 %tobool103, label %if.then104, label %if.end125

if.then104:                                       ; preds = %while.body102
  %110 = bitcast %struct.stat* %st to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* %110) #5
  %111 = load i8*, i8** %lp, align 8, !tbaa !3
  %call105 = call i32 @mg_stat(i8* %111, %struct.stat* %st)
  %cmp106 = icmp eq i32 %call105, 0
  %conv107 = zext i1 %cmp106 to i32
  store i32 %conv107, i32* %exists, align 4, !tbaa !15
  %112 = load i32, i32* %exists, align 4, !tbaa !15
  %tobool108 = icmp ne i32 %112, 0
  br i1 %tobool108, label %land.lhs.true109, label %if.end121

land.lhs.true109:                                 ; preds = %if.then104
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 1
  %113 = load i16, i16* %st_mode, align 4, !tbaa !184
  %conv110 = zext i16 %113 to i32
  %and = and i32 %conv110, 61440
  %cmp111 = icmp eq i32 %and, 32768
  br i1 %cmp111, label %if.then113, label %if.end121

if.then113:                                       ; preds = %land.lhs.true109
  %114 = load i8*, i8** %u, align 8, !tbaa !3
  %add.ptr114 = getelementptr inbounds i8, i8* %114, i64 -1
  %115 = load i8, i8* %add.ptr114, align 1, !tbaa !14
  %conv115 = sext i8 %115 to i32
  %cmp116 = icmp eq i32 %conv115, 47
  br i1 %cmp116, label %if.then118, label %if.end120

if.then118:                                       ; preds = %if.then113
  %116 = load i8*, i8** %u, align 8, !tbaa !3
  %incdec.ptr119 = getelementptr inbounds i8, i8* %116, i32 -1
  store i8* %incdec.ptr119, i8** %u, align 8, !tbaa !3
  br label %if.end120

if.end120:                                        ; preds = %if.then118, %if.then113
  store i32 6, i32* %cleanup.dest.slot, align 4
  br label %cleanup122

if.end121:                                        ; preds = %land.lhs.true109, %if.then104
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup122

cleanup122:                                       ; preds = %if.end121, %if.end120
  %117 = bitcast %struct.stat* %st to i8*
  call void @llvm.lifetime.end.p0i8(i64 144, i8* %117) #5
  %cleanup.dest123 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest123, label %cleanup196 [
    i32 0, label %cleanup.cont124
  ]

cleanup.cont124:                                  ; preds = %cleanup122
  br label %if.end125

if.end125:                                        ; preds = %cleanup.cont124, %while.body102
  %118 = load i8*, i8** %u, align 8, !tbaa !3
  %119 = load i8*, i8** %cp_end, align 8, !tbaa !3
  %cmp126 = icmp uge i8* %118, %119
  br i1 %cmp126, label %if.then128, label %if.end129

if.then128:                                       ; preds = %if.end125
  store i32 6, i32* %cleanup.dest.slot, align 4
  br label %cleanup196

if.end129:                                        ; preds = %if.end125
  %120 = load i8*, i8** %cp_end, align 8, !tbaa !3
  call void @parse_uri_component(i8** %next, i8* %120, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i32 0, i32 0), %struct.mg_str* %component)
  %len130 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %component, i32 0, i32 1
  %121 = load i64, i64* %len130, align 8, !tbaa !18
  %cmp131 = icmp ugt i64 %121, 0
  br i1 %cmp131, label %if.then133, label %if.end195

if.then133:                                       ; preds = %if.end129
  %122 = bitcast i32* %len134 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %122) #5
  %123 = load i8*, i8** %p82, align 8, !tbaa !3
  %add.ptr135 = getelementptr inbounds i8, i8* %123, i64 1
  %p136 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %component, i32 0, i32 0
  %124 = load i8*, i8** %p136, align 8, !tbaa !16
  %len137 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %component, i32 0, i32 1
  %125 = load i64, i64* %len137, align 8, !tbaa !18
  %126 = load i8*, i8** %p82, align 8, !tbaa !3
  %add.ptr138 = getelementptr inbounds i8, i8* %126, i64 1
  %127 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr138, i1 false, i1 true)
  %call139 = call i8* @__memmove_chk(i8* %add.ptr135, i8* %124, i64 %125, i64 %127) #5
  %128 = load i8*, i8** %p82, align 8, !tbaa !3
  %add.ptr140 = getelementptr inbounds i8, i8* %128, i64 1
  %len141 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %component, i32 0, i32 1
  %129 = load i64, i64* %len141, align 8, !tbaa !18
  %conv142 = trunc i64 %129 to i32
  %130 = load i8*, i8** %p82, align 8, !tbaa !3
  %add.ptr143 = getelementptr inbounds i8, i8* %130, i64 1
  %131 = load i8*, i8** %lp_end, align 8, !tbaa !3
  %132 = load i8*, i8** %p82, align 8, !tbaa !3
  %sub.ptr.lhs.cast = ptrtoint i8* %131 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %132 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub144 = sub nsw i64 %sub.ptr.sub, 1
  %conv145 = trunc i64 %sub144 to i32
  %call146 = call i32 @mg_url_decode(i8* %add.ptr140, i32 %conv142, i8* %add.ptr143, i32 %conv145, i32 0)
  store i32 %call146, i32* %len134, align 4, !tbaa !15
  %133 = load i32, i32* %len134, align 4, !tbaa !15
  %cmp147 = icmp sle i32 %133, 0
  br i1 %cmp147, label %if.then149, label %if.end150

if.then149:                                       ; preds = %if.then133
  store i32 0, i32* %ok, align 4, !tbaa !15
  store i32 6, i32* %cleanup.dest.slot, align 4
  br label %cleanup192

if.end150:                                        ; preds = %if.then133
  %134 = load i8*, i8** %p82, align 8, !tbaa !3
  %add.ptr151 = getelementptr inbounds i8, i8* %134, i64 1
  %p152 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %component, i32 0, i32 0
  store i8* %add.ptr151, i8** %p152, align 8, !tbaa !16
  %135 = load i32, i32* %len134, align 4, !tbaa !15
  %conv153 = sext i32 %135 to i64
  %len154 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %component, i32 0, i32 1
  store i64 %conv153, i64* %len154, align 8, !tbaa !18
  %call155 = call i32 @mg_vcmp(%struct.mg_str* %component, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  %cmp156 = icmp eq i32 %call155, 0
  br i1 %cmp156, label %if.then158, label %if.else159

if.then158:                                       ; preds = %if.end150
  br label %if.end191

if.else159:                                       ; preds = %if.end150
  %call160 = call i32 @mg_vcmp(%struct.mg_str* %component, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0))
  %cmp161 = icmp eq i32 %call160, 0
  br i1 %cmp161, label %if.then163, label %if.else175

if.then163:                                       ; preds = %if.else159
  br label %while.cond164

while.cond164:                                    ; preds = %while.body172, %if.then163
  %136 = load i8*, i8** %p82, align 8, !tbaa !3
  %137 = load i8*, i8** %ps, align 8, !tbaa !3
  %cmp165 = icmp ugt i8* %136, %137
  br i1 %cmp165, label %land.rhs167, label %land.end171

land.rhs167:                                      ; preds = %while.cond164
  %138 = load i8*, i8** %p82, align 8, !tbaa !3
  %139 = load i8, i8* %138, align 1, !tbaa !14
  %conv168 = sext i8 %139 to i32
  %cmp169 = icmp ne i32 %conv168, 47
  br label %land.end171

land.end171:                                      ; preds = %land.rhs167, %while.cond164
  %140 = phi i1 [ false, %while.cond164 ], [ %cmp169, %land.rhs167 ]
  br i1 %140, label %while.body172, label %while.end174

while.body172:                                    ; preds = %land.end171
  %141 = load i8*, i8** %p82, align 8, !tbaa !3
  %incdec.ptr173 = getelementptr inbounds i8, i8* %141, i32 -1
  store i8* %incdec.ptr173, i8** %p82, align 8, !tbaa !3
  br label %while.cond164

while.end174:                                     ; preds = %land.end171
  %142 = load i8*, i8** %p82, align 8, !tbaa !3
  store i8 0, i8* %142, align 1, !tbaa !14
  br label %if.end190

if.else175:                                       ; preds = %if.else159
  %143 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %143) #5
  %144 = load i8*, i8** %p82, align 8, !tbaa !3
  %incdec.ptr176 = getelementptr inbounds i8, i8* %144, i32 1
  store i8* %incdec.ptr176, i8** %p82, align 8, !tbaa !3
  store i8 47, i8* %144, align 1, !tbaa !14
  store i64 0, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else175
  %145 = load i64, i64* %i, align 8, !tbaa !12
  %len177 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %component, i32 0, i32 1
  %146 = load i64, i64* %len177, align 8, !tbaa !18
  %cmp178 = icmp ult i64 %145, %146
  br i1 %cmp178, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %147 = load i8*, i8** %p82, align 8, !tbaa !3
  %148 = load i8, i8* %147, align 1, !tbaa !14
  %conv180 = sext i8 %148 to i32
  %cmp181 = icmp eq i32 %conv180, 0
  br i1 %cmp181, label %if.then187, label %lor.lhs.false183

lor.lhs.false183:                                 ; preds = %for.body
  %149 = load i8*, i8** %p82, align 8, !tbaa !3
  %150 = load i8, i8* %149, align 1, !tbaa !14
  %conv184 = sext i8 %150 to i32
  %cmp185 = icmp eq i32 %conv184, 47
  br i1 %cmp185, label %if.then187, label %if.end188

if.then187:                                       ; preds = %lor.lhs.false183, %for.body
  store i32 0, i32* %ok, align 4, !tbaa !15
  br label %for.end

if.end188:                                        ; preds = %lor.lhs.false183
  br label %for.inc

for.inc:                                          ; preds = %if.end188
  %151 = load i64, i64* %i, align 8, !tbaa !12
  %inc = add i64 %151, 1
  store i64 %inc, i64* %i, align 8, !tbaa !12
  %152 = load i8*, i8** %p82, align 8, !tbaa !3
  %incdec.ptr189 = getelementptr inbounds i8, i8* %152, i32 1
  store i8* %incdec.ptr189, i8** %p82, align 8, !tbaa !3
  br label %for.cond

for.end:                                          ; preds = %if.then187, %for.cond
  %153 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %153) #5
  br label %if.end190

if.end190:                                        ; preds = %for.end, %while.end174
  br label %if.end191

if.end191:                                        ; preds = %if.end190, %if.then158
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup192

cleanup192:                                       ; preds = %if.end191, %if.then149
  %154 = bitcast i32* %len134 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %154) #5
  %cleanup.dest193 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest193, label %cleanup196 [
    i32 0, label %cleanup.cont194
  ]

cleanup.cont194:                                  ; preds = %cleanup192
  br label %if.end195

if.end195:                                        ; preds = %cleanup.cont194, %if.end129
  %155 = load i8*, i8** %next, align 8, !tbaa !3
  store i8* %155, i8** %u, align 8, !tbaa !3
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup196

cleanup196:                                       ; preds = %if.end195, %cleanup192, %if.then128, %cleanup122
  %156 = bitcast %struct.mg_str* %component to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %156) #5
  %157 = bitcast i8** %next to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %157) #5
  %cleanup.dest198 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest198, label %unreachable [
    i32 0, label %cleanup.cont199
    i32 6, label %while.end200
  ]

cleanup.cont199:                                  ; preds = %cleanup196
  br label %while.cond99

while.end200:                                     ; preds = %cleanup196, %while.cond99
  %158 = load i32, i32* %ok, align 4, !tbaa !15
  %tobool201 = icmp ne i32 %158, 0
  br i1 %tobool201, label %if.then202, label %if.else212

if.then202:                                       ; preds = %while.end200
  %159 = load i8*, i8** %lp, align 8, !tbaa !3
  %160 = load i8**, i8*** %local_path.addr, align 8, !tbaa !3
  store i8* %159, i8** %160, align 8, !tbaa !3
  %161 = load i8*, i8** %u, align 8, !tbaa !3
  %162 = load i8*, i8** %cp_end, align 8, !tbaa !3
  %cmp203 = icmp ugt i8* %161, %162
  br i1 %cmp203, label %if.then205, label %if.end206

if.then205:                                       ; preds = %if.then202
  %163 = load i8*, i8** %cp_end, align 8, !tbaa !3
  store i8* %163, i8** %u, align 8, !tbaa !3
  br label %if.end206

if.end206:                                        ; preds = %if.then205, %if.then202
  %164 = load i8*, i8** %u, align 8, !tbaa !3
  %165 = load %struct.mg_str*, %struct.mg_str** %remainder.addr, align 8, !tbaa !3
  %p207 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %165, i32 0, i32 0
  store i8* %164, i8** %p207, align 8, !tbaa !16
  %166 = load i8*, i8** %cp_end, align 8, !tbaa !3
  %167 = load i8*, i8** %u, align 8, !tbaa !3
  %sub.ptr.lhs.cast208 = ptrtoint i8* %166 to i64
  %sub.ptr.rhs.cast209 = ptrtoint i8* %167 to i64
  %sub.ptr.sub210 = sub i64 %sub.ptr.lhs.cast208, %sub.ptr.rhs.cast209
  %168 = load %struct.mg_str*, %struct.mg_str** %remainder.addr, align 8, !tbaa !3
  %len211 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %168, i32 0, i32 1
  store i64 %sub.ptr.sub210, i64* %len211, align 8, !tbaa !18
  br label %if.end213

if.else212:                                       ; preds = %while.end200
  %169 = load i8*, i8** %lp, align 8, !tbaa !3
  call void @free(i8* %169)
  br label %if.end213

if.end213:                                        ; preds = %if.else212, %if.end206
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup214

cleanup214:                                       ; preds = %if.then85, %if.end213
  %170 = bitcast i32* %exists to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %170) #5
  %171 = bitcast i8** %ps to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %171) #5
  %172 = bitcast i8** %p82 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %172) #5
  %173 = bitcast i8** %lp_end to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %173) #5
  %174 = bitcast i8** %lp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %174) #5
  %175 = bitcast i8** %u to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %175) #5
  %cleanup.dest220 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest220, label %cleanup238 [
    i32 0, label %cleanup.cont221
    i32 4, label %out
  ]

cleanup.cont221:                                  ; preds = %cleanup214
  br label %out

out:                                              ; preds = %cleanup.cont221, %cleanup214
  br label %do.body

do.body:                                          ; preds = %out
  %call222 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 8209)
  %tobool223 = icmp ne i32 %call222, 0
  br i1 %tobool223, label %if.then224, label %if.end237

if.then224:                                       ; preds = %do.body
  %176 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri225 = getelementptr inbounds %struct.http_message, %struct.http_message* %176, i32 0, i32 3
  %len226 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri225, i32 0, i32 1
  %177 = load i64, i64* %len226, align 8, !tbaa !136
  %conv227 = trunc i64 %177 to i32
  %178 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri228 = getelementptr inbounds %struct.http_message, %struct.http_message* %178, i32 0, i32 3
  %p229 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri228, i32 0, i32 0
  %179 = load i8*, i8** %p229, align 8, !tbaa !133
  %180 = load i8**, i8*** %local_path.addr, align 8, !tbaa !3
  %181 = load i8*, i8** %180, align 8, !tbaa !3
  %tobool230 = icmp ne i8* %181, null
  br i1 %tobool230, label %cond.true231, label %cond.false232

cond.true231:                                     ; preds = %if.then224
  %182 = load i8**, i8*** %local_path.addr, align 8, !tbaa !3
  %183 = load i8*, i8** %182, align 8, !tbaa !3
  br label %cond.end233

cond.false232:                                    ; preds = %if.then224
  br label %cond.end233

cond.end233:                                      ; preds = %cond.false232, %cond.true231
  %cond = phi i8* [ %183, %cond.true231 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), %cond.false232 ]
  %184 = load %struct.mg_str*, %struct.mg_str** %remainder.addr, align 8, !tbaa !3
  %len234 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %184, i32 0, i32 1
  %185 = load i64, i64* %len234, align 8, !tbaa !18
  %conv235 = trunc i64 %185 to i32
  %186 = load %struct.mg_str*, %struct.mg_str** %remainder.addr, align 8, !tbaa !3
  %p236 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %186, i32 0, i32 0
  %187 = load i8*, i8** %p236, align 8, !tbaa !16
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.204, i32 0, i32 0), i32 %conv227, i8* %179, i8* %cond, i32 %conv235, i8* %187)
  br label %if.end237

if.end237:                                        ; preds = %cond.end233, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end237
  br label %do.end

do.end:                                           ; preds = %do.cond
  %188 = load i32, i32* %ok, align 4, !tbaa !15
  store i32 %188, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup238

cleanup238:                                       ; preds = %do.end, %cleanup214
  %189 = bitcast i8** %file_uri_start to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %189) #5
  %190 = bitcast %struct.mg_str* %root to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %190) #5
  %191 = bitcast i8** %cp_end to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %191) #5
  %192 = bitcast i8** %cp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %192) #5
  %193 = bitcast i32* %ok to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %193) #5
  %194 = load i32, i32* %retval, align 4
  ret i32 %194

unreachable:                                      ; preds = %cleanup196, %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_send_http_file(%struct.mg_connection* %nc, i8* %path, %struct.mg_str* %path_info, %struct.http_message* %hm, %struct.mg_serve_http_opts* %opts) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %path.addr = alloca i8*, align 8
  %path_info.addr = alloca %struct.mg_str*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %exists = alloca i32, align 4
  %is_directory = alloca i32, align 4
  %is_cgi = alloca i32, align 4
  %is_dav = alloca i32, align 4
  %index_file = alloca i8*, align 8
  %st = alloca %struct.stat, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %agg.tmp = alloca %struct.mg_str, align 8
  %agg.tmp58 = alloca %struct.mg_str, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %path, i8** %path.addr, align 8, !tbaa !3
  store %struct.mg_str* %path_info, %struct.mg_str** %path_info.addr, align 8, !tbaa !3
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %0 = bitcast i32* %exists to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = bitcast i32* %is_directory to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  %2 = bitcast i32* %is_cgi to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  %3 = bitcast i32* %is_dav to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  store i32 0, i32* %is_dav, align 4, !tbaa !15
  %4 = bitcast i8** %index_file to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #5
  store i8* null, i8** %index_file, align 8, !tbaa !3
  %5 = bitcast %struct.stat* %st to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* %5) #5
  %6 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %call = call i32 @mg_stat(i8* %6, %struct.stat* %st)
  %cmp = icmp eq i32 %call, 0
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %exists, align 4, !tbaa !15
  %7 = load i32, i32* %exists, align 4, !tbaa !15
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 1
  %8 = load i16, i16* %st_mode, align 4, !tbaa !184
  %conv1 = zext i16 %8 to i32
  %and = and i32 %conv1, 61440
  %cmp2 = icmp eq i32 %and, 16384
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %9 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ]
  %land.ext = zext i1 %9 to i32
  store i32 %land.ext, i32* %is_directory, align 4, !tbaa !15
  %10 = load i32, i32* %is_directory, align 4, !tbaa !15
  %tobool4 = icmp ne i32 %10, 0
  br i1 %tobool4, label %if.then, label %if.end

if.then:                                          ; preds = %land.end
  %11 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %12 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %index_files = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %12, i32 0, i32 1
  %13 = load i8*, i8** %index_files, align 8, !tbaa !182
  call void @mg_find_index_file(i8* %11, i8* %13, i8** %index_file, %struct.stat* %st)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.end
  %14 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %cgi_file_pattern = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %14, i32 0, i32 12
  %15 = load i8*, i8** %cgi_file_pattern, align 8, !tbaa !180
  %16 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %cgi_file_pattern5 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %16, i32 0, i32 12
  %17 = load i8*, i8** %cgi_file_pattern5, align 8, !tbaa !180
  %call6 = call i64 @strlen(i8* %17)
  %conv7 = trunc i64 %call6 to i32
  %18 = load i8*, i8** %index_file, align 8, !tbaa !3
  %tobool8 = icmp ne i8* %18, null
  br i1 %tobool8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %19 = load i8*, i8** %index_file, align 8, !tbaa !3
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %20 = load i8*, i8** %path.addr, align 8, !tbaa !3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %19, %cond.true ], [ %20, %cond.false ]
  %call9 = call i64 @mg_match_prefix(i8* %15, i32 %conv7, i8* %cond)
  %cmp10 = icmp ugt i64 %call9, 0
  %conv11 = zext i1 %cmp10 to i32
  store i32 %conv11, i32* %is_cgi, align 4, !tbaa !15
  br label %do.body

do.body:                                          ; preds = %cond.end
  %call12 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 8319)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then14, label %if.end22

if.then14:                                        ; preds = %do.body
  %21 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %22 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %method = getelementptr inbounds %struct.http_message, %struct.http_message* %22, i32 0, i32 2
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %method, i32 0, i32 1
  %23 = load i64, i64* %len, align 8, !tbaa !157
  %conv15 = trunc i64 %23 to i32
  %24 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %method16 = getelementptr inbounds %struct.http_message, %struct.http_message* %24, i32 0, i32 2
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %method16, i32 0, i32 0
  %25 = load i8*, i8** %p, align 8, !tbaa !134
  %26 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %27 = load i32, i32* %exists, align 4, !tbaa !15
  %28 = load i32, i32* %is_directory, align 4, !tbaa !15
  %29 = load i32, i32* %is_dav, align 4, !tbaa !15
  %30 = load i32, i32* %is_cgi, align 4, !tbaa !15
  %31 = load i8*, i8** %index_file, align 8, !tbaa !3
  %tobool17 = icmp ne i8* %31, null
  br i1 %tobool17, label %cond.true18, label %cond.false19

cond.true18:                                      ; preds = %if.then14
  %32 = load i8*, i8** %index_file, align 8, !tbaa !3
  br label %cond.end20

cond.false19:                                     ; preds = %if.then14
  br label %cond.end20

cond.end20:                                       ; preds = %cond.false19, %cond.true18
  %cond21 = phi i8* [ %32, %cond.true18 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), %cond.false19 ]
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.205, i32 0, i32 0), %struct.mg_connection* %21, i32 %conv15, i8* %25, i8* %26, i32 %27, i32 %28, i32 %29, i32 %30, i8* %cond21)
  br label %if.end22

if.end22:                                         ; preds = %cond.end20, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end22
  br label %do.end

do.end:                                           ; preds = %do.cond
  %33 = load i32, i32* %is_directory, align 4, !tbaa !15
  %tobool23 = icmp ne i32 %33, 0
  br i1 %tobool23, label %land.lhs.true, label %if.end39

land.lhs.true:                                    ; preds = %do.end
  %34 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri = getelementptr inbounds %struct.http_message, %struct.http_message* %34, i32 0, i32 3
  %p24 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 0
  %35 = load i8*, i8** %p24, align 8, !tbaa !133
  %36 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri25 = getelementptr inbounds %struct.http_message, %struct.http_message* %36, i32 0, i32 3
  %len26 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri25, i32 0, i32 1
  %37 = load i64, i64* %len26, align 8, !tbaa !136
  %sub = sub i64 %37, 1
  %arrayidx = getelementptr inbounds i8, i8* %35, i64 %sub
  %38 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv27 = sext i8 %38 to i32
  %cmp28 = icmp ne i32 %conv27, 47
  br i1 %cmp28, label %land.lhs.true30, label %if.end39

land.lhs.true30:                                  ; preds = %land.lhs.true
  %39 = load i32, i32* %is_dav, align 4, !tbaa !15
  %tobool31 = icmp ne i32 %39, 0
  br i1 %tobool31, label %if.end39, label %if.then32

if.then32:                                        ; preds = %land.lhs.true30
  %40 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %41 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri33 = getelementptr inbounds %struct.http_message, %struct.http_message* %41, i32 0, i32 3
  %len34 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri33, i32 0, i32 1
  %42 = load i64, i64* %len34, align 8, !tbaa !136
  %conv35 = trunc i64 %42 to i32
  %43 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri36 = getelementptr inbounds %struct.http_message, %struct.http_message* %43, i32 0, i32 3
  %p37 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri36, i32 0, i32 0
  %44 = load i8*, i8** %p37, align 8, !tbaa !133
  %call38 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %40, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.206, i32 0, i32 0), i32 %conv35, i8* %44)
  %45 = load i8*, i8** %index_file, align 8, !tbaa !3
  call void @free(i8* %45)
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end39:                                         ; preds = %land.lhs.true30, %land.lhs.true, %do.end
  %46 = load %struct.mg_str*, %struct.mg_str** %path_info.addr, align 8, !tbaa !3
  %len40 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %46, i32 0, i32 1
  %47 = load i64, i64* %len40, align 8, !tbaa !18
  %cmp41 = icmp ugt i64 %47, 0
  br i1 %cmp41, label %land.lhs.true43, label %if.end46

land.lhs.true43:                                  ; preds = %if.end39
  %48 = load i32, i32* %is_cgi, align 4, !tbaa !15
  %tobool44 = icmp ne i32 %48, 0
  br i1 %tobool44, label %if.end46, label %if.then45

if.then45:                                        ; preds = %land.lhs.true43
  %49 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_http_send_error(%struct.mg_connection* %49, i32 501, i8* null)
  %50 = load i8*, i8** %index_file, align 8, !tbaa !3
  call void @free(i8* %50)
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end46:                                         ; preds = %land.lhs.true43, %if.end39
  %51 = load i32, i32* %is_dav, align 4, !tbaa !15
  %tobool47 = icmp ne i32 %51, 0
  br i1 %tobool47, label %land.lhs.true48, label %if.else

land.lhs.true48:                                  ; preds = %if.end46
  %52 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %dav_document_root = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %52, i32 0, i32 9
  %53 = load i8*, i8** %dav_document_root, align 8, !tbaa !185
  %cmp49 = icmp eq i8* %53, null
  br i1 %cmp49, label %if.then51, label %if.else

if.then51:                                        ; preds = %land.lhs.true48
  %54 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_http_send_error(%struct.mg_connection* %54, i32 501, i8* null)
  br label %if.end118

if.else:                                          ; preds = %land.lhs.true48, %if.end46
  %55 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %56 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %call52 = call { i8*, i64 } @mg_mk_str(i8* %56)
  %57 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %58 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %57, i32 0, i32 0
  %59 = extractvalue { i8*, i64 } %call52, 0
  store i8* %59, i8** %58, align 8
  %60 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %57, i32 0, i32 1
  %61 = extractvalue { i8*, i64 } %call52, 1
  store i64 %61, i64* %60, align 8
  %62 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %auth_domain = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %62, i32 0, i32 3
  %63 = load i8*, i8** %auth_domain, align 8, !tbaa !186
  %64 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %global_auth_file = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %64, i32 0, i32 4
  %65 = load i8*, i8** %global_auth_file, align 8, !tbaa !187
  %66 = load i32, i32* %is_directory, align 4, !tbaa !15
  %tobool53 = icmp ne i32 %66, 0
  %67 = zext i1 %tobool53 to i64
  %cond54 = select i1 %tobool53, i32 1, i32 0
  %or = or i32 %cond54, 2
  %or55 = or i32 %or, 4
  %68 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %69 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %68, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8
  %71 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %68, i32 0, i32 1
  %72 = load i64, i64* %71, align 8
  %call56 = call i32 @mg_http_is_authorized(%struct.http_message* %55, i8* %70, i64 %72, i8* %63, i8* %65, i32 %or55)
  %tobool57 = icmp ne i32 %call56, 0
  br i1 %tobool57, label %lor.lhs.false, label %if.then66

lor.lhs.false:                                    ; preds = %if.else
  %73 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %74 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %call59 = call { i8*, i64 } @mg_mk_str(i8* %74)
  %75 = bitcast %struct.mg_str* %agg.tmp58 to { i8*, i64 }*
  %76 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %75, i32 0, i32 0
  %77 = extractvalue { i8*, i64 } %call59, 0
  store i8* %77, i8** %76, align 8
  %78 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %75, i32 0, i32 1
  %79 = extractvalue { i8*, i64 } %call59, 1
  store i64 %79, i64* %78, align 8
  %80 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %auth_domain60 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %80, i32 0, i32 3
  %81 = load i8*, i8** %auth_domain60, align 8, !tbaa !186
  %82 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %per_directory_auth_file = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %82, i32 0, i32 2
  %83 = load i8*, i8** %per_directory_auth_file, align 8, !tbaa !178
  %84 = load i32, i32* %is_directory, align 4, !tbaa !15
  %tobool61 = icmp ne i32 %84, 0
  %85 = zext i1 %tobool61 to i64
  %cond62 = select i1 %tobool61, i32 1, i32 0
  %or63 = or i32 %cond62, 4
  %86 = bitcast %struct.mg_str* %agg.tmp58 to { i8*, i64 }*
  %87 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %86, i32 0, i32 0
  %88 = load i8*, i8** %87, align 8
  %89 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %86, i32 0, i32 1
  %90 = load i64, i64* %89, align 8
  %call64 = call i32 @mg_http_is_authorized(%struct.http_message* %73, i8* %88, i64 %90, i8* %81, i8* %83, i32 %or63)
  %tobool65 = icmp ne i32 %call64, 0
  br i1 %tobool65, label %if.else68, label %if.then66

if.then66:                                        ; preds = %lor.lhs.false, %if.else
  %91 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %92 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %auth_domain67 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %92, i32 0, i32 3
  %93 = load i8*, i8** %auth_domain67, align 8, !tbaa !186
  call void @mg_http_send_digest_auth_request(%struct.mg_connection* %91, i8* %93)
  br label %if.end117

if.else68:                                        ; preds = %lor.lhs.false
  %94 = load i32, i32* %is_cgi, align 4, !tbaa !15
  %tobool69 = icmp ne i32 %94, 0
  br i1 %tobool69, label %if.then70, label %if.else76

if.then70:                                        ; preds = %if.else68
  %95 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %96 = load i8*, i8** %index_file, align 8, !tbaa !3
  %tobool71 = icmp ne i8* %96, null
  br i1 %tobool71, label %cond.true72, label %cond.false73

cond.true72:                                      ; preds = %if.then70
  %97 = load i8*, i8** %index_file, align 8, !tbaa !3
  br label %cond.end74

cond.false73:                                     ; preds = %if.then70
  %98 = load i8*, i8** %path.addr, align 8, !tbaa !3
  br label %cond.end74

cond.end74:                                       ; preds = %cond.false73, %cond.true72
  %cond75 = phi i8* [ %97, %cond.true72 ], [ %98, %cond.false73 ]
  %99 = load %struct.mg_str*, %struct.mg_str** %path_info.addr, align 8, !tbaa !3
  %100 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %101 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  call void @mg_handle_cgi(%struct.mg_connection* %95, i8* %cond75, %struct.mg_str* %99, %struct.http_message* %100, %struct.mg_serve_http_opts* %101)
  br label %if.end116

if.else76:                                        ; preds = %if.else68
  %102 = load i32, i32* %exists, align 4, !tbaa !15
  %tobool77 = icmp ne i32 %102, 0
  br i1 %tobool77, label %lor.lhs.false78, label %land.lhs.true81

lor.lhs.false78:                                  ; preds = %if.else76
  %103 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %104 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %call79 = call i32 @mg_is_file_hidden(i8* %103, %struct.mg_serve_http_opts* %104, i32 0)
  %tobool80 = icmp ne i32 %call79, 0
  br i1 %tobool80, label %land.lhs.true81, label %if.else85

land.lhs.true81:                                  ; preds = %lor.lhs.false78, %if.else76
  %105 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %call82 = call i32 @mg_is_creation_request(%struct.http_message* %105)
  %tobool83 = icmp ne i32 %call82, 0
  br i1 %tobool83, label %if.else85, label %if.then84

if.then84:                                        ; preds = %land.lhs.true81
  %106 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_http_send_error(%struct.mg_connection* %106, i32 404, i8* null)
  br label %if.end115

if.else85:                                        ; preds = %land.lhs.true81, %lor.lhs.false78
  %107 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %method86 = getelementptr inbounds %struct.http_message, %struct.http_message* %107, i32 0, i32 2
  %call87 = call i32 @mg_vcmp(%struct.mg_str* %method86, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.207, i32 0, i32 0))
  %tobool88 = icmp ne i32 %call87, 0
  br i1 %tobool88, label %if.else90, label %if.then89

if.then89:                                        ; preds = %if.else85
  %108 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %109 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  call void @mg_http_send_options(%struct.mg_connection* %108, %struct.mg_serve_http_opts* %109)
  br label %if.end114

if.else90:                                        ; preds = %if.else85
  %110 = load i32, i32* %is_directory, align 4, !tbaa !15
  %tobool91 = icmp ne i32 %110, 0
  br i1 %tobool91, label %land.lhs.true92, label %if.else102

land.lhs.true92:                                  ; preds = %if.else90
  %111 = load i8*, i8** %index_file, align 8, !tbaa !3
  %cmp93 = icmp eq i8* %111, null
  br i1 %cmp93, label %if.then95, label %if.else102

if.then95:                                        ; preds = %land.lhs.true92
  %112 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %enable_directory_listing = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %112, i32 0, i32 5
  %113 = load i8*, i8** %enable_directory_listing, align 8, !tbaa !179
  %call96 = call i32 @strcmp(i8* %113, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.123, i32 0, i32 0))
  %cmp97 = icmp eq i32 %call96, 0
  br i1 %cmp97, label %if.then99, label %if.else100

if.then99:                                        ; preds = %if.then95
  %114 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %115 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %116 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %117 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  call void @mg_send_directory_listing(%struct.mg_connection* %114, i8* %115, %struct.http_message* %116, %struct.mg_serve_http_opts* %117)
  br label %if.end101

if.else100:                                       ; preds = %if.then95
  %118 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_http_send_error(%struct.mg_connection* %118, i32 403, i8* null)
  br label %if.end101

if.end101:                                        ; preds = %if.else100, %if.then99
  br label %if.end113

if.else102:                                       ; preds = %land.lhs.true92, %if.else90
  %119 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %call103 = call i32 @mg_is_not_modified(%struct.http_message* %119, %struct.stat* %st)
  %tobool104 = icmp ne i32 %call103, 0
  br i1 %tobool104, label %if.then105, label %if.else106

if.then105:                                       ; preds = %if.else102
  %120 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %121 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %extra_headers = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %121, i32 0, i32 15
  %122 = load i8*, i8** %extra_headers, align 8, !tbaa !188
  call void @mg_send_head(%struct.mg_connection* %120, i32 304, i64 0, i8* %122)
  br label %if.end112

if.else106:                                       ; preds = %if.else102
  %123 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %124 = load i8*, i8** %index_file, align 8, !tbaa !3
  %tobool107 = icmp ne i8* %124, null
  br i1 %tobool107, label %cond.true108, label %cond.false109

cond.true108:                                     ; preds = %if.else106
  %125 = load i8*, i8** %index_file, align 8, !tbaa !3
  br label %cond.end110

cond.false109:                                    ; preds = %if.else106
  %126 = load i8*, i8** %path.addr, align 8, !tbaa !3
  br label %cond.end110

cond.end110:                                      ; preds = %cond.false109, %cond.true108
  %cond111 = phi i8* [ %125, %cond.true108 ], [ %126, %cond.false109 ]
  %127 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %128 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  call void @mg_http_serve_file2(%struct.mg_connection* %123, i8* %cond111, %struct.http_message* %127, %struct.mg_serve_http_opts* %128)
  br label %if.end112

if.end112:                                        ; preds = %cond.end110, %if.then105
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %if.end101
  br label %if.end114

if.end114:                                        ; preds = %if.end113, %if.then89
  br label %if.end115

if.end115:                                        ; preds = %if.end114, %if.then84
  br label %if.end116

if.end116:                                        ; preds = %if.end115, %cond.end74
  br label %if.end117

if.end117:                                        ; preds = %if.end116, %if.then66
  br label %if.end118

if.end118:                                        ; preds = %if.end117, %if.then51
  %129 = load i8*, i8** %index_file, align 8, !tbaa !3
  call void @free(i8* %129)
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end118, %if.then45, %if.then32
  %130 = bitcast %struct.stat* %st to i8*
  call void @llvm.lifetime.end.p0i8(i64 144, i8* %130) #5
  %131 = bitcast i8** %index_file to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %131) #5
  %132 = bitcast i32* %is_dav to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %132) #5
  %133 = bitcast i32* %is_cgi to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %133) #5
  %134 = bitcast i32* %is_directory to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %134) #5
  %135 = bitcast i32* %exists to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %135) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup, %cleanup
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define %struct.mg_connection* @mg_connect_http_opt(%struct.mg_mgr* %mgr, void (%struct.mg_connection*, i32, i8*)* %ev_handler, %struct.mg_connect_opts* byval align 8 %opts, i8* %url, i8* %extra_headers, i8* %post_data) #0 {
entry:
  %retval = alloca %struct.mg_connection*, align 8
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %ev_handler.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %url.addr = alloca i8*, align 8
  %extra_headers.addr = alloca i8*, align 8
  %post_data.addr = alloca i8*, align 8
  %user = alloca %struct.mg_str, align 8
  %null_str = alloca %struct.mg_str, align 8
  %host = alloca %struct.mg_str, align 8
  %path = alloca %struct.mg_str, align 8
  %auth = alloca %struct.mbuf, align 8
  %nc = alloca %struct.mg_connection*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %tmp = alloca %struct.mg_str, align 8
  %tmp18 = alloca %struct.mg_str, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  store void (%struct.mg_connection*, i32, i8*)* %ev_handler, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8, !tbaa !3
  store i8* %url, i8** %url.addr, align 8, !tbaa !3
  store i8* %extra_headers, i8** %extra_headers.addr, align 8, !tbaa !3
  store i8* %post_data, i8** %post_data.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_str* %user to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %0) #5
  %1 = bitcast %struct.mg_str* %user to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 16, i1 false)
  %2 = bitcast %struct.mg_str* %null_str to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %2) #5
  %3 = bitcast %struct.mg_str* %null_str to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 16, i1 false)
  %4 = bitcast %struct.mg_str* %host to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %4) #5
  %5 = bitcast %struct.mg_str* %host to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false)
  %6 = bitcast %struct.mg_str* %path to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %6) #5
  %7 = bitcast %struct.mg_str* %path to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 16, i1 false)
  %8 = bitcast %struct.mbuf* %auth to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %8) #5
  %9 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #5
  %10 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %11 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8, !tbaa !3
  %12 = load i8*, i8** %url.addr, align 8, !tbaa !3
  %call = call %struct.mg_connection* @mg_connect_http_base(%struct.mg_mgr* %10, void (%struct.mg_connection*, i32, i8*)* %11, %struct.mg_connect_opts* byval align 8 %opts, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.109, i32 0, i32 0), i8* null, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.110, i32 0, i32 0), i8* null, i8* %12, %struct.mg_str* %path, %struct.mg_str* %user, %struct.mg_str* %host)
  store %struct.mg_connection* %call, %struct.mg_connection** %nc, align 8, !tbaa !3
  %13 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %cmp = icmp eq %struct.mg_connection* %13, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.mg_connection* null, %struct.mg_connection** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  call void @mbuf_init(%struct.mbuf* %auth, i64 0)
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %user, i32 0, i32 1
  %14 = load i64, i64* %len, align 8, !tbaa !18
  %cmp1 = icmp ugt i64 %14, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %15 = bitcast %struct.mg_str* %user to { i8*, i64 }*
  %16 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %struct.mg_str* %null_str to { i8*, i64 }*
  %21 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %20, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %20, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  call void @mg_basic_auth_header(i8* %17, i64 %19, i8* %22, i64 %24, %struct.mbuf* %auth)
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %25 = load i8*, i8** %post_data.addr, align 8, !tbaa !3
  %cmp4 = icmp eq i8* %25, null
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end3
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), i8** %post_data.addr, align 8, !tbaa !3
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %if.end3
  %26 = load i8*, i8** %extra_headers.addr, align 8, !tbaa !3
  %cmp7 = icmp eq i8* %26, null
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end6
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), i8** %extra_headers.addr, align 8, !tbaa !3
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end6
  %len10 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 1
  %27 = load i64, i64* %len10, align 8, !tbaa !18
  %cmp11 = icmp eq i64 %27, 0
  br i1 %cmp11, label %if.then12, label %if.end14

if.then12:                                        ; preds = %if.end9
  %28 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %28) #5
  %call13 = call { i8*, i64 } @mg_mk_str(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i32 0, i32 0))
  %29 = bitcast %struct.mg_str* %tmp to { i8*, i64 }*
  %30 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %29, i32 0, i32 0
  %31 = extractvalue { i8*, i64 } %call13, 0
  store i8* %31, i8** %30, align 8
  %32 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %29, i32 0, i32 1
  %33 = extractvalue { i8*, i64 } %call13, 1
  store i64 %33, i64* %32, align 8
  %34 = bitcast %struct.mg_str* %path to i8*
  %35 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 %35, i64 16, i1 false), !tbaa.struct !19
  %36 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %36) #5
  br label %if.end14

if.end14:                                         ; preds = %if.then12, %if.end9
  %len15 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %host, i32 0, i32 1
  %37 = load i64, i64* %len15, align 8, !tbaa !18
  %cmp16 = icmp eq i64 %37, 0
  br i1 %cmp16, label %if.then17, label %if.end20

if.then17:                                        ; preds = %if.end14
  %38 = bitcast %struct.mg_str* %tmp18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %38) #5
  %call19 = call { i8*, i64 } @mg_mk_str(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0))
  %39 = bitcast %struct.mg_str* %tmp18 to { i8*, i64 }*
  %40 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %39, i32 0, i32 0
  %41 = extractvalue { i8*, i64 } %call19, 0
  store i8* %41, i8** %40, align 8
  %42 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %39, i32 0, i32 1
  %43 = extractvalue { i8*, i64 } %call19, 1
  store i64 %43, i64* %42, align 8
  %44 = bitcast %struct.mg_str* %host to i8*
  %45 = bitcast %struct.mg_str* %tmp18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %44, i8* align 8 %45, i64 16, i1 false), !tbaa.struct !19
  %46 = bitcast %struct.mg_str* %tmp18 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %46) #5
  br label %if.end20

if.end20:                                         ; preds = %if.then17, %if.end14
  %47 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %48 = load i8*, i8** %post_data.addr, align 8, !tbaa !3
  %arrayidx = getelementptr inbounds i8, i8* %48, i64 0
  %49 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = sext i8 %49 to i32
  %cmp21 = icmp eq i32 %conv, 0
  %50 = zext i1 %cmp21 to i64
  %cond = select i1 %cmp21, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.132, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.42, i32 0, i32 0)
  %len23 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 1
  %51 = load i64, i64* %len23, align 8, !tbaa !18
  %conv24 = trunc i64 %51 to i32
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %52 = load i8*, i8** %p, align 8, !tbaa !16
  %p25 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %53 = load i8*, i8** %p25, align 8, !tbaa !16
  %p26 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %host, i32 0, i32 0
  %54 = load i8*, i8** %p26, align 8, !tbaa !16
  %sub.ptr.lhs.cast = ptrtoint i8* %53 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %54 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv27 = trunc i64 %sub.ptr.sub to i32
  %p28 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %host, i32 0, i32 0
  %55 = load i8*, i8** %p28, align 8, !tbaa !16
  %56 = load i8*, i8** %post_data.addr, align 8, !tbaa !3
  %call29 = call i64 @strlen(i8* %56)
  %len30 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %auth, i32 0, i32 1
  %57 = load i64, i64* %len30, align 8, !tbaa !39
  %conv31 = trunc i64 %57 to i32
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %auth, i32 0, i32 0
  %58 = load i8*, i8** %buf, align 8, !tbaa !40
  %cmp32 = icmp eq i8* %58, null
  br i1 %cmp32, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end20
  br label %cond.end

cond.false:                                       ; preds = %if.end20
  %buf34 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %auth, i32 0, i32 0
  %59 = load i8*, i8** %buf34, align 8, !tbaa !40
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond35 = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), %cond.true ], [ %59, %cond.false ]
  %60 = load i8*, i8** %extra_headers.addr, align 8, !tbaa !3
  %61 = load i8*, i8** %post_data.addr, align 8, !tbaa !3
  %call36 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %47, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.131, i32 0, i32 0), i8* %cond, i32 %conv24, i8* %52, i32 %conv27, i8* %55, i64 %call29, i32 %conv31, i8* %cond35, i8* %60, i8* %61)
  call void @mbuf_free(%struct.mbuf* %auth)
  %62 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  store %struct.mg_connection* %62, %struct.mg_connection** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %cond.end, %if.then
  %63 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %63) #5
  %64 = bitcast %struct.mbuf* %auth to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %64) #5
  %65 = bitcast %struct.mg_str* %path to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %65) #5
  %66 = bitcast %struct.mg_str* %host to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %66) #5
  %67 = bitcast %struct.mg_str* %null_str to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %67) #5
  %68 = bitcast %struct.mg_str* %user to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %68) #5
  %69 = load %struct.mg_connection*, %struct.mg_connection** %retval, align 8
  ret %struct.mg_connection* %69
}

; Function Attrs: nounwind ssp uwtable
define void @mg_basic_auth_header(i8* %user.coerce0, i64 %user.coerce1, i8* %pass.coerce0, i64 %pass.coerce1, %struct.mbuf* %buf) #0 {
entry:
  %user = alloca %struct.mg_str, align 8
  %pass = alloca %struct.mg_str, align 8
  %buf.addr = alloca %struct.mbuf*, align 8
  %header_prefix = alloca i8*, align 8
  %header_suffix = alloca i8*, align 8
  %ctx = alloca %struct.cs_base64_ctx, align 8
  %0 = bitcast %struct.mg_str* %user to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %user.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %user.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %pass to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %pass.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %pass.coerce1, i64* %5, align 8
  store %struct.mbuf* %buf, %struct.mbuf** %buf.addr, align 8, !tbaa !3
  %6 = bitcast i8** %header_prefix to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #5
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.153, i32 0, i32 0), i8** %header_prefix, align 8, !tbaa !3
  %7 = bitcast i8** %header_suffix to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #5
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i8** %header_suffix, align 8, !tbaa !3
  %8 = bitcast %struct.cs_base64_ctx* %ctx to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %8) #5
  %9 = load %struct.mbuf*, %struct.mbuf** %buf.addr, align 8, !tbaa !3
  %10 = bitcast %struct.mbuf* %9 to i8*
  call void @cs_base64_init(%struct.cs_base64_ctx* %ctx, void (i8, i8*)* @mg_mbuf_append_base64_putc, i8* %10)
  %11 = load %struct.mbuf*, %struct.mbuf** %buf.addr, align 8, !tbaa !3
  %12 = load i8*, i8** %header_prefix, align 8, !tbaa !3
  %13 = load i8*, i8** %header_prefix, align 8, !tbaa !3
  %call = call i64 @strlen(i8* %13)
  %call1 = call i64 @mbuf_append(%struct.mbuf* %11, i8* %12, i64 %call)
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %user, i32 0, i32 0
  %14 = load i8*, i8** %p, align 8, !tbaa !16
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %user, i32 0, i32 1
  %15 = load i64, i64* %len, align 8, !tbaa !18
  call void @cs_base64_update(%struct.cs_base64_ctx* %ctx, i8* %14, i64 %15)
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pass, i32 0, i32 1
  %16 = load i64, i64* %len2, align 8, !tbaa !18
  %cmp = icmp ugt i64 %16, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @cs_base64_update(%struct.cs_base64_ctx* %ctx, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.154, i32 0, i32 0), i64 1)
  %p3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pass, i32 0, i32 0
  %17 = load i8*, i8** %p3, align 8, !tbaa !16
  %len4 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pass, i32 0, i32 1
  %18 = load i64, i64* %len4, align 8, !tbaa !18
  call void @cs_base64_update(%struct.cs_base64_ctx* %ctx, i8* %17, i64 %18)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @cs_base64_finish(%struct.cs_base64_ctx* %ctx)
  %19 = load %struct.mbuf*, %struct.mbuf** %buf.addr, align 8, !tbaa !3
  %20 = load i8*, i8** %header_suffix, align 8, !tbaa !3
  %21 = load i8*, i8** %header_suffix, align 8, !tbaa !3
  %call5 = call i64 @strlen(i8* %21)
  %call6 = call i64 @mbuf_append(%struct.mbuf* %19, i8* %20, i64 %call5)
  %22 = bitcast %struct.cs_base64_ctx* %ctx to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %22) #5
  %23 = bitcast i8** %header_suffix to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %23) #5
  %24 = bitcast i8** %header_prefix to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %24) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define %struct.mg_connection* @mg_connect_http(%struct.mg_mgr* %mgr, void (%struct.mg_connection*, i32, i8*)* %ev_handler, i8* %url, i8* %extra_headers, i8* %post_data) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %ev_handler.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %url.addr = alloca i8*, align 8
  %extra_headers.addr = alloca i8*, align 8
  %post_data.addr = alloca i8*, align 8
  %opts = alloca %struct.mg_connect_opts, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  store void (%struct.mg_connection*, i32, i8*)* %ev_handler, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8, !tbaa !3
  store i8* %url, i8** %url.addr, align 8, !tbaa !3
  store i8* %extra_headers, i8** %extra_headers.addr, align 8, !tbaa !3
  store i8* %post_data, i8** %post_data.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_connect_opts* %opts to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* %0) #5
  %1 = bitcast %struct.mg_connect_opts* %opts to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 40, i1 false)
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %3 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8, !tbaa !3
  %4 = load i8*, i8** %url.addr, align 8, !tbaa !3
  %5 = load i8*, i8** %extra_headers.addr, align 8, !tbaa !3
  %6 = load i8*, i8** %post_data.addr, align 8, !tbaa !3
  %call = call %struct.mg_connection* @mg_connect_http_opt(%struct.mg_mgr* %2, void (%struct.mg_connection*, i32, i8*)* %3, %struct.mg_connect_opts* byval align 8 %opts, i8* %4, i8* %5, i8* %6)
  %7 = bitcast %struct.mg_connect_opts* %opts to i8*
  call void @llvm.lifetime.end.p0i8(i64 40, i8* %7) #5
  ret %struct.mg_connection* %call
}

; Function Attrs: nounwind ssp uwtable
define i64 @mg_parse_multipart(i8* %buf, i64 %buf_len, i8* %var_name, i64 %var_name_len, i8* %file_name, i64 %file_name_len, i8** %data, i64* %data_len) #0 {
entry:
  %retval = alloca i64, align 8
  %buf.addr = alloca i8*, align 8
  %buf_len.addr = alloca i64, align 8
  %var_name.addr = alloca i8*, align 8
  %var_name_len.addr = alloca i64, align 8
  %file_name.addr = alloca i8*, align 8
  %file_name_len.addr = alloca i64, align 8
  %data.addr = alloca i8**, align 8
  %data_len.addr = alloca i64*, align 8
  %hl = alloca i64, align 8
  %bl = alloca i64, align 8
  %n = alloca i64, align 8
  %ll = alloca i64, align 8
  %pos = alloca i64, align 8
  %cdl = alloca i64, align 8
  %shl = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %header = alloca %struct.mg_str, align 8
  %var_name2 = alloca i8*, align 8
  %file_name2 = alloca i8*, align 8
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %buf_len, i64* %buf_len.addr, align 8, !tbaa !12
  store i8* %var_name, i8** %var_name.addr, align 8, !tbaa !3
  store i64 %var_name_len, i64* %var_name_len.addr, align 8, !tbaa !12
  store i8* %file_name, i8** %file_name.addr, align 8, !tbaa !3
  store i64 %file_name_len, i64* %file_name_len.addr, align 8, !tbaa !12
  store i8** %data, i8*** %data.addr, align 8, !tbaa !3
  store i64* %data_len, i64** %data_len.addr, align 8, !tbaa !3
  %0 = bitcast i64* %hl to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = bitcast i64* %bl to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %2 = bitcast i64* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  %3 = bitcast i64* %ll to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  %4 = bitcast i64* %pos to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #5
  %5 = bitcast i64* %cdl to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #5
  store i64 21, i64* %cdl, align 8, !tbaa !12
  %6 = bitcast i32* %shl to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #5
  %7 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %cmp = icmp eq i8* %7, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %8 = load i64, i64* %buf_len.addr, align 8, !tbaa !12
  %cmp1 = icmp ule i64 %8, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i64 0, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %9 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %10 = load i64, i64* %buf_len.addr, align 8, !tbaa !12
  %conv = trunc i64 %10 to i32
  %call = call i32 @mg_http_get_request_len(i8* %9, i32 %conv)
  store i32 %call, i32* %shl, align 4, !tbaa !15
  %cmp2 = icmp sle i32 %call, 0
  br i1 %cmp2, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  store i64 0, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end5:                                          ; preds = %if.end
  %11 = load i32, i32* %shl, align 4, !tbaa !15
  %conv6 = sext i32 %11 to i64
  store i64 %conv6, i64* %hl, align 8, !tbaa !12
  %12 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %arrayidx = getelementptr inbounds i8, i8* %12, i64 0
  %13 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv7 = sext i8 %13 to i32
  %cmp8 = icmp ne i32 %conv7, 45
  br i1 %cmp8, label %if.then20, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %if.end5
  %14 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %arrayidx11 = getelementptr inbounds i8, i8* %14, i64 1
  %15 = load i8, i8* %arrayidx11, align 1, !tbaa !14
  %conv12 = sext i8 %15 to i32
  %cmp13 = icmp ne i32 %conv12, 45
  br i1 %cmp13, label %if.then20, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %lor.lhs.false10
  %16 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %arrayidx16 = getelementptr inbounds i8, i8* %16, i64 2
  %17 = load i8, i8* %arrayidx16, align 1, !tbaa !14
  %conv17 = sext i8 %17 to i32
  %cmp18 = icmp eq i32 %conv17, 10
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %lor.lhs.false15, %lor.lhs.false10, %if.end5
  store i64 0, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end21:                                         ; preds = %lor.lhs.false15
  %18 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %19 = load i64, i64* %buf_len.addr, align 8, !tbaa !12
  %call22 = call i64 @mg_get_line_len(i8* %18, i64 %19)
  store i64 %call22, i64* %bl, align 8, !tbaa !12
  %20 = load i8*, i8** %file_name.addr, align 8, !tbaa !3
  %arrayidx23 = getelementptr inbounds i8, i8* %20, i64 0
  store i8 0, i8* %arrayidx23, align 1, !tbaa !14
  %21 = load i8*, i8** %var_name.addr, align 8, !tbaa !3
  %arrayidx24 = getelementptr inbounds i8, i8* %21, i64 0
  store i8 0, i8* %arrayidx24, align 1, !tbaa !14
  %22 = load i64, i64* %bl, align 8, !tbaa !12
  store i64 %22, i64* %n, align 8, !tbaa !12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end21
  %23 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %24 = load i64, i64* %n, align 8, !tbaa !12
  %add.ptr = getelementptr inbounds i8, i8* %23, i64 %24
  %25 = load i64, i64* %hl, align 8, !tbaa !12
  %26 = load i64, i64* %n, align 8, !tbaa !12
  %sub = sub i64 %25, %26
  %call25 = call i64 @mg_get_line_len(i8* %add.ptr, i64 %sub)
  store i64 %call25, i64* %ll, align 8, !tbaa !12
  %cmp26 = icmp ugt i64 %call25, 0
  br i1 %cmp26, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %27 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %28 = load i64, i64* %n, align 8, !tbaa !12
  %add.ptr28 = getelementptr inbounds i8, i8* %27, i64 %28
  %29 = load i64, i64* %cdl, align 8, !tbaa !12
  %call29 = call i32 @mg_ncasecmp(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @mg_parse_multipart.cd, i32 0, i32 0), i8* %add.ptr28, i64 %29)
  %cmp30 = icmp eq i32 %call29, 0
  br i1 %cmp30, label %if.then32, label %if.end48

if.then32:                                        ; preds = %for.body
  %30 = bitcast %struct.mg_str* %header to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %30) #5
  %31 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %32 = load i64, i64* %n, align 8, !tbaa !12
  %add.ptr33 = getelementptr inbounds i8, i8* %31, i64 %32
  %33 = load i64, i64* %cdl, align 8, !tbaa !12
  %add.ptr34 = getelementptr inbounds i8, i8* %add.ptr33, i64 %33
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %header, i32 0, i32 0
  store i8* %add.ptr34, i8** %p, align 8, !tbaa !16
  %34 = load i64, i64* %ll, align 8, !tbaa !12
  %35 = load i64, i64* %cdl, align 8, !tbaa !12
  %add = add i64 %35, 2
  %sub35 = sub i64 %34, %add
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %header, i32 0, i32 1
  store i64 %sub35, i64* %len, align 8, !tbaa !18
  %36 = bitcast i8** %var_name2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %36) #5
  %37 = load i8*, i8** %var_name.addr, align 8, !tbaa !3
  store i8* %37, i8** %var_name2, align 8, !tbaa !3
  %38 = load i64, i64* %var_name_len.addr, align 8, !tbaa !12
  %call36 = call i32 @mg_http_parse_header2(%struct.mg_str* %header, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.133, i32 0, i32 0), i8** %var_name2, i64 %38)
  %39 = load i8*, i8** %var_name2, align 8, !tbaa !3
  %40 = load i8*, i8** %var_name.addr, align 8, !tbaa !3
  %cmp37 = icmp ne i8* %39, %40
  br i1 %cmp37, label %if.then39, label %if.end41

if.then39:                                        ; preds = %if.then32
  %41 = load i8*, i8** %var_name2, align 8, !tbaa !3
  call void @free(i8* %41)
  %42 = load i8*, i8** %var_name.addr, align 8, !tbaa !3
  %arrayidx40 = getelementptr inbounds i8, i8* %42, i64 0
  store i8 0, i8* %arrayidx40, align 1, !tbaa !14
  br label %if.end41

if.end41:                                         ; preds = %if.then39, %if.then32
  %43 = bitcast i8** %var_name2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %43) #5
  %44 = bitcast i8** %file_name2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %44) #5
  %45 = load i8*, i8** %file_name.addr, align 8, !tbaa !3
  store i8* %45, i8** %file_name2, align 8, !tbaa !3
  %46 = load i64, i64* %file_name_len.addr, align 8, !tbaa !12
  %call42 = call i32 @mg_http_parse_header2(%struct.mg_str* %header, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.134, i32 0, i32 0), i8** %file_name2, i64 %46)
  %47 = load i8*, i8** %file_name2, align 8, !tbaa !3
  %48 = load i8*, i8** %file_name.addr, align 8, !tbaa !3
  %cmp43 = icmp ne i8* %47, %48
  br i1 %cmp43, label %if.then45, label %if.end47

if.then45:                                        ; preds = %if.end41
  %49 = load i8*, i8** %file_name2, align 8, !tbaa !3
  call void @free(i8* %49)
  %50 = load i8*, i8** %file_name.addr, align 8, !tbaa !3
  %arrayidx46 = getelementptr inbounds i8, i8* %50, i64 0
  store i8 0, i8* %arrayidx46, align 1, !tbaa !14
  br label %if.end47

if.end47:                                         ; preds = %if.then45, %if.end41
  %51 = bitcast i8** %file_name2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %51) #5
  %52 = bitcast %struct.mg_str* %header to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %52) #5
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end48
  %53 = load i64, i64* %ll, align 8, !tbaa !12
  %54 = load i64, i64* %n, align 8, !tbaa !12
  %add49 = add i64 %54, %53
  store i64 %add49, i64* %n, align 8, !tbaa !12
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %55 = load i64, i64* %hl, align 8, !tbaa !12
  store i64 %55, i64* %pos, align 8, !tbaa !12
  br label %for.cond50

for.cond50:                                       ; preds = %for.inc76, %for.end
  %56 = load i64, i64* %pos, align 8, !tbaa !12
  %57 = load i64, i64* %bl, align 8, !tbaa !12
  %sub51 = sub i64 %57, 2
  %add52 = add i64 %56, %sub51
  %58 = load i64, i64* %buf_len.addr, align 8, !tbaa !12
  %cmp53 = icmp ult i64 %add52, %58
  br i1 %cmp53, label %for.body55, label %for.end77

for.body55:                                       ; preds = %for.cond50
  %59 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %60 = load i64, i64* %pos, align 8, !tbaa !12
  %arrayidx56 = getelementptr inbounds i8, i8* %59, i64 %60
  %61 = load i8, i8* %arrayidx56, align 1, !tbaa !14
  %conv57 = sext i8 %61 to i32
  %cmp58 = icmp eq i32 %conv57, 45
  br i1 %cmp58, label %land.lhs.true, label %if.end75

land.lhs.true:                                    ; preds = %for.body55
  %62 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %63 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %64 = load i64, i64* %pos, align 8, !tbaa !12
  %arrayidx60 = getelementptr inbounds i8, i8* %63, i64 %64
  %65 = load i64, i64* %bl, align 8, !tbaa !12
  %sub61 = sub i64 %65, 2
  %call62 = call i32 @strncmp(i8* %62, i8* %arrayidx60, i64 %sub61)
  %tobool = icmp ne i32 %call62, 0
  br i1 %tobool, label %if.end75, label %if.then63

if.then63:                                        ; preds = %land.lhs.true
  %66 = load i64*, i64** %data_len.addr, align 8, !tbaa !3
  %cmp64 = icmp ne i64* %66, null
  br i1 %cmp64, label %if.then66, label %if.end69

if.then66:                                        ; preds = %if.then63
  %67 = load i64, i64* %pos, align 8, !tbaa !12
  %sub67 = sub i64 %67, 2
  %68 = load i64, i64* %hl, align 8, !tbaa !12
  %sub68 = sub i64 %sub67, %68
  %69 = load i64*, i64** %data_len.addr, align 8, !tbaa !3
  store i64 %sub68, i64* %69, align 8, !tbaa !12
  br label %if.end69

if.end69:                                         ; preds = %if.then66, %if.then63
  %70 = load i8**, i8*** %data.addr, align 8, !tbaa !3
  %cmp70 = icmp ne i8** %70, null
  br i1 %cmp70, label %if.then72, label %if.end74

if.then72:                                        ; preds = %if.end69
  %71 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %72 = load i64, i64* %hl, align 8, !tbaa !12
  %add.ptr73 = getelementptr inbounds i8, i8* %71, i64 %72
  %73 = load i8**, i8*** %data.addr, align 8, !tbaa !3
  store i8* %add.ptr73, i8** %73, align 8, !tbaa !3
  br label %if.end74

if.end74:                                         ; preds = %if.then72, %if.end69
  %74 = load i64, i64* %pos, align 8, !tbaa !12
  store i64 %74, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end75:                                         ; preds = %land.lhs.true, %for.body55
  br label %for.inc76

for.inc76:                                        ; preds = %if.end75
  %75 = load i64, i64* %pos, align 8, !tbaa !12
  %inc = add i64 %75, 1
  store i64 %inc, i64* %pos, align 8, !tbaa !12
  br label %for.cond50

for.end77:                                        ; preds = %for.cond50
  store i64 0, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end77, %if.end74, %if.then20, %if.then4, %if.then
  %76 = bitcast i32* %shl to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %76) #5
  %77 = bitcast i64* %cdl to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %77) #5
  %78 = bitcast i64* %pos to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %78) #5
  %79 = bitcast i64* %ll to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %79) #5
  %80 = bitcast i64* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %80) #5
  %81 = bitcast i64* %bl to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %81) #5
  %82 = bitcast i64* %hl to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %82) #5
  %83 = load i64, i64* %retval, align 8
  ret i64 %83
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @mg_get_line_len(i8* %buf, i64 %buf_len) #0 {
entry:
  %buf.addr = alloca i8*, align 8
  %buf_len.addr = alloca i64, align 8
  %len = alloca i64, align 8
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %buf_len, i64* %buf_len.addr, align 8, !tbaa !12
  %0 = bitcast i64* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  store i64 0, i64* %len, align 8, !tbaa !12
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i64, i64* %len, align 8, !tbaa !12
  %2 = load i64, i64* %buf_len.addr, align 8, !tbaa !12
  %cmp = icmp ult i64 %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %4 = load i64, i64* %len, align 8, !tbaa !12
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %4
  %5 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = sext i8 %5 to i32
  %cmp1 = icmp ne i32 %conv, 10
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %6 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %6, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %7 = load i64, i64* %len, align 8, !tbaa !12
  %inc = add i64 %7, 1
  store i64 %inc, i64* %len, align 8, !tbaa !12
  br label %while.cond

while.end:                                        ; preds = %land.end
  %8 = load i64, i64* %len, align 8, !tbaa !12
  %9 = load i64, i64* %buf_len.addr, align 8, !tbaa !12
  %cmp3 = icmp eq i64 %8, %9
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.end
  br label %cond.end

cond.false:                                       ; preds = %while.end
  %10 = load i64, i64* %len, align 8, !tbaa !12
  %add = add i64 %10, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %add, %cond.false ]
  %11 = bitcast i64* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %11) #5
  ret i64 %cond
}

; Function Attrs: nounwind ssp uwtable
define void @mg_register_http_endpoint_opt(%struct.mg_connection* %nc, i8* %uri_path, void (%struct.mg_connection*, i32, i8*)* %handler, %struct.mg_http_endpoint_opts* byval align 8 %opts) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %uri_path.addr = alloca i8*, align 8
  %handler.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %pd = alloca %struct.mg_http_proto_data*, align 8
  %new_ep = alloca %struct.mg_http_endpoint*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %tmp = alloca %struct.mg_str, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %uri_path, i8** %uri_path.addr, align 8, !tbaa !3
  store void (%struct.mg_connection*, i32, i8*)* %handler, void (%struct.mg_connection*, i32, i8*)** %handler.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_http_proto_data** %pd to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  store %struct.mg_http_proto_data* null, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %1 = bitcast %struct.mg_http_endpoint** %new_ep to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  store %struct.mg_http_endpoint* null, %struct.mg_http_endpoint** %new_ep, align 8, !tbaa !3
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %cmp = icmp eq %struct.mg_connection* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %call = call i8* @calloc(i64 1, i64 48) #20
  %3 = bitcast i8* %call to %struct.mg_http_endpoint*
  store %struct.mg_http_endpoint* %3, %struct.mg_http_endpoint** %new_ep, align 8, !tbaa !3
  %4 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %new_ep, align 8, !tbaa !3
  %cmp1 = icmp eq %struct.mg_http_endpoint* %4, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end3:                                          ; preds = %if.end
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %call4 = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %5)
  store %struct.mg_http_proto_data* %call4, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %6 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %cmp5 = icmp eq %struct.mg_http_proto_data* %6, null
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end3
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %call7 = call %struct.mg_http_proto_data* @mg_http_create_proto_data(%struct.mg_connection* %7)
  store %struct.mg_http_proto_data* %call7, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.end3
  %8 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %new_ep, align 8, !tbaa !3
  %uri_pattern = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %8, i32 0, i32 1
  %9 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %9) #5
  %10 = load i8*, i8** %uri_path.addr, align 8, !tbaa !3
  %call9 = call { i8*, i64 } @mg_mk_str(i8* %10)
  %11 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %12 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 0
  %13 = extractvalue { i8*, i64 } %call9, 0
  store i8* %13, i8** %12, align 8
  %14 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 1
  %15 = extractvalue { i8*, i64 } %call9, 1
  store i64 %15, i64* %14, align 8
  %16 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %16, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %16, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %call10 = call { i8*, i64 } @mg_strdup(i8* %18, i64 %20)
  %21 = bitcast %struct.mg_str* %tmp to { i8*, i64 }*
  %22 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %21, i32 0, i32 0
  %23 = extractvalue { i8*, i64 } %call10, 0
  store i8* %23, i8** %22, align 8
  %24 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %21, i32 0, i32 1
  %25 = extractvalue { i8*, i64 } %call10, 1
  store i64 %25, i64* %24, align 8
  %26 = bitcast %struct.mg_str* %uri_pattern to i8*
  %27 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 16, i1 false), !tbaa.struct !19
  %28 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %28) #5
  %auth_domain = getelementptr inbounds %struct.mg_http_endpoint_opts, %struct.mg_http_endpoint_opts* %opts, i32 0, i32 1
  %29 = load i8*, i8** %auth_domain, align 8, !tbaa !189
  %cmp11 = icmp ne i8* %29, null
  br i1 %cmp11, label %land.lhs.true, label %if.end20

land.lhs.true:                                    ; preds = %if.end8
  %auth_file = getelementptr inbounds %struct.mg_http_endpoint_opts, %struct.mg_http_endpoint_opts* %opts, i32 0, i32 2
  %30 = load i8*, i8** %auth_file, align 8, !tbaa !191
  %cmp12 = icmp ne i8* %30, null
  br i1 %cmp12, label %if.then13, label %if.end20

if.then13:                                        ; preds = %land.lhs.true
  %auth_domain14 = getelementptr inbounds %struct.mg_http_endpoint_opts, %struct.mg_http_endpoint_opts* %opts, i32 0, i32 1
  %31 = load i8*, i8** %auth_domain14, align 8, !tbaa !189
  %call15 = call i8* @strdup(i8* %31)
  %32 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %new_ep, align 8, !tbaa !3
  %auth_domain16 = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %32, i32 0, i32 2
  store i8* %call15, i8** %auth_domain16, align 8, !tbaa !159
  %auth_file17 = getelementptr inbounds %struct.mg_http_endpoint_opts, %struct.mg_http_endpoint_opts* %opts, i32 0, i32 2
  %33 = load i8*, i8** %auth_file17, align 8, !tbaa !191
  %call18 = call i8* @strdup(i8* %33)
  %34 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %new_ep, align 8, !tbaa !3
  %auth_file19 = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %34, i32 0, i32 3
  store i8* %call18, i8** %auth_file19, align 8, !tbaa !160
  br label %if.end20

if.end20:                                         ; preds = %if.then13, %land.lhs.true, %if.end8
  %35 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler.addr, align 8, !tbaa !3
  %36 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %new_ep, align 8, !tbaa !3
  %handler21 = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %36, i32 0, i32 4
  store void (%struct.mg_connection*, i32, i8*)* %35, void (%struct.mg_connection*, i32, i8*)** %handler21, align 8, !tbaa !155
  %37 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %endpoints = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %37, i32 0, i32 4
  %38 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %endpoints, align 8, !tbaa !141
  %39 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %new_ep, align 8, !tbaa !3
  %next = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %39, i32 0, i32 0
  store %struct.mg_http_endpoint* %38, %struct.mg_http_endpoint** %next, align 8, !tbaa !148
  %40 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %new_ep, align 8, !tbaa !3
  %41 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %endpoints22 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %41, i32 0, i32 4
  store %struct.mg_http_endpoint* %40, %struct.mg_http_endpoint** %endpoints22, align 8, !tbaa !141
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end20, %if.then2, %if.then
  %42 = bitcast %struct.mg_http_endpoint** %new_ep to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %42) #5
  %43 = bitcast %struct.mg_http_proto_data** %pd to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %43) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup, %cleanup
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define void @mg_register_http_endpoint(%struct.mg_connection* %nc, i8* %uri_path, void (%struct.mg_connection*, i32, i8*)* %handler) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %uri_path.addr = alloca i8*, align 8
  %handler.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %opts = alloca %struct.mg_http_endpoint_opts, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %uri_path, i8** %uri_path.addr, align 8, !tbaa !3
  store void (%struct.mg_connection*, i32, i8*)* %handler, void (%struct.mg_connection*, i32, i8*)** %handler.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_http_endpoint_opts* %opts to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %0) #5
  %1 = bitcast %struct.mg_http_endpoint_opts* %opts to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 24, i1 false)
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %3 = load i8*, i8** %uri_path.addr, align 8, !tbaa !3
  %4 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler.addr, align 8, !tbaa !3
  call void @mg_register_http_endpoint_opt(%struct.mg_connection* %2, i8* %3, void (%struct.mg_connection*, i32, i8*)* %4, %struct.mg_http_endpoint_opts* byval align 8 %opts)
  %5 = bitcast %struct.mg_http_endpoint_opts* %opts to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %5) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_send_websocket_frame(%struct.mg_connection* %nc, i32 %op, i8* %data, i64 %len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %op.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %ctx = alloca %struct.ws_mask_ctx, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i32 %op, i32* %op.addr, align 4, !tbaa !15
  store i8* %data, i8** %data.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  %0 = bitcast %struct.ws_mask_ctx* %ctx to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %0) #5
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 10113)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %2 = load i32, i32* %op.addr, align 4, !tbaa !15
  %3 = load i64, i64* %len.addr, align 8, !tbaa !12
  %conv = trunc i64 %3 to i32
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.135, i32 0, i32 0), %struct.mg_connection* %1, i32 %2, i32 %conv)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %do.cond
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %5 = load i32, i32* %op.addr, align 4, !tbaa !15
  %6 = load i64, i64* %len.addr, align 8, !tbaa !12
  call void @mg_send_ws_header(%struct.mg_connection* %4, i32 %5, i64 %6, %struct.ws_mask_ctx* %ctx)
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %8 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %9 = load i64, i64* %len.addr, align 8, !tbaa !12
  %conv1 = trunc i64 %9 to i32
  call void @mg_send(%struct.mg_connection* %7, i8* %8, i32 %conv1)
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 9
  call void @mg_ws_mask_frame(%struct.mbuf* %send_mbuf, %struct.ws_mask_ctx* %ctx)
  %11 = load i32, i32* %op.addr, align 4, !tbaa !15
  %cmp = icmp eq i32 %11, 8
  br i1 %cmp, label %if.then3, label %if.end4

if.then3:                                         ; preds = %do.end
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %12, i32 0, i32 21
  %13 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %13, 1024
  store i64 %or, i64* %flags, align 8, !tbaa !41
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %do.end
  %14 = bitcast %struct.ws_mask_ctx* %ctx to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %14) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_send_ws_header(%struct.mg_connection* %nc, i32 %op, i64 %len, %struct.ws_mask_ctx* %ctx) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %op.addr = alloca i32, align 4
  %len.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.ws_mask_ctx*, align 8
  %header_len = alloca i32, align 4
  %header = alloca [10 x i8], align 1
  %tmp = alloca i16, align 2
  %tmp14 = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i32 %op, i32* %op.addr, align 4, !tbaa !15
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  store %struct.ws_mask_ctx* %ctx, %struct.ws_mask_ctx** %ctx.addr, align 8, !tbaa !3
  %0 = bitcast i32* %header_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = bitcast [10 x i8]* %header to i8*
  call void @llvm.lifetime.start.p0i8(i64 10, i8* %1) #5
  %2 = load i32, i32* %op.addr, align 4, !tbaa !15
  %and = and i32 %2, 256
  %tobool = icmp ne i32 %and, 0
  %3 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 0, i32 128
  %4 = load i32, i32* %op.addr, align 4, !tbaa !15
  %and1 = and i32 %4, 15
  %or = or i32 %cond, %and1
  %conv = trunc i32 %or to i8
  %arrayidx = getelementptr inbounds [10 x i8], [10 x i8]* %header, i64 0, i64 0
  store i8 %conv, i8* %arrayidx, align 1, !tbaa !14
  %5 = load i64, i64* %len.addr, align 8, !tbaa !12
  %cmp = icmp ult i64 %5, 126
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load i64, i64* %len.addr, align 8, !tbaa !12
  %conv3 = trunc i64 %6 to i8
  %arrayidx4 = getelementptr inbounds [10 x i8], [10 x i8]* %header, i64 0, i64 1
  store i8 %conv3, i8* %arrayidx4, align 1, !tbaa !14
  store i32 2, i32* %header_len, align 4, !tbaa !15
  br label %if.end23

if.else:                                          ; preds = %entry
  %7 = load i64, i64* %len.addr, align 8, !tbaa !12
  %cmp5 = icmp ult i64 %7, 65535
  br i1 %cmp5, label %if.then7, label %if.else13

if.then7:                                         ; preds = %if.else
  %8 = bitcast i16* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %8) #5
  %9 = load i64, i64* %len.addr, align 8, !tbaa !12
  %conv8 = trunc i64 %9 to i16
  %call = call zeroext i16 @_OSSwapInt16(i16 zeroext %conv8)
  %conv9 = zext i16 %call to i32
  %conv10 = trunc i32 %conv9 to i16
  store i16 %conv10, i16* %tmp, align 2, !tbaa !86
  %arrayidx11 = getelementptr inbounds [10 x i8], [10 x i8]* %header, i64 0, i64 1
  store i8 126, i8* %arrayidx11, align 1, !tbaa !14
  %arrayidx12 = getelementptr inbounds [10 x i8], [10 x i8]* %header, i64 0, i64 2
  %10 = bitcast i16* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %arrayidx12, i8* align 2 %10, i64 2, i1 false)
  store i32 4, i32* %header_len, align 4, !tbaa !15
  %11 = bitcast i16* %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %11) #5
  br label %if.end

if.else13:                                        ; preds = %if.else
  %12 = bitcast i32* %tmp14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %12) #5
  %arrayidx15 = getelementptr inbounds [10 x i8], [10 x i8]* %header, i64 0, i64 1
  store i8 127, i8* %arrayidx15, align 1, !tbaa !14
  %13 = load i64, i64* %len.addr, align 8, !tbaa !12
  %shr = lshr i64 %13, 32
  %conv16 = trunc i64 %shr to i32
  %call17 = call i32 @_OSSwapInt32(i32 %conv16)
  store i32 %call17, i32* %tmp14, align 4, !tbaa !15
  %arrayidx18 = getelementptr inbounds [10 x i8], [10 x i8]* %header, i64 0, i64 2
  %14 = bitcast i32* %tmp14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %arrayidx18, i8* align 4 %14, i64 4, i1 false)
  %15 = load i64, i64* %len.addr, align 8, !tbaa !12
  %and19 = and i64 %15, 4294967295
  %conv20 = trunc i64 %and19 to i32
  %call21 = call i32 @_OSSwapInt32(i32 %conv20)
  store i32 %call21, i32* %tmp14, align 4, !tbaa !15
  %arrayidx22 = getelementptr inbounds [10 x i8], [10 x i8]* %header, i64 0, i64 6
  %16 = bitcast i32* %tmp14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %arrayidx22, i8* align 4 %16, i64 4, i1 false)
  store i32 10, i32* %header_len, align 4, !tbaa !15
  %17 = bitcast i32* %tmp14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %17) #5
  br label %if.end

if.end:                                           ; preds = %if.else13, %if.then7
  br label %if.end23

if.end23:                                         ; preds = %if.end, %if.then
  %18 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %listener = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %18, i32 0, i32 2
  %19 = load %struct.mg_connection*, %struct.mg_connection** %listener, align 8, !tbaa !78
  %cmp24 = icmp eq %struct.mg_connection* %19, null
  br i1 %cmp24, label %if.then26, label %if.else34

if.then26:                                        ; preds = %if.end23
  %arrayidx27 = getelementptr inbounds [10 x i8], [10 x i8]* %header, i64 0, i64 1
  %20 = load i8, i8* %arrayidx27, align 1, !tbaa !14
  %conv28 = zext i8 %20 to i32
  %or29 = or i32 %conv28, 128
  %conv30 = trunc i32 %or29 to i8
  store i8 %conv30, i8* %arrayidx27, align 1, !tbaa !14
  %21 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %header, i32 0, i32 0
  %22 = load i32, i32* %header_len, align 4, !tbaa !15
  call void @mg_send(%struct.mg_connection* %21, i8* %arraydecay, i32 %22)
  %call31 = call i32 @mg_ws_random_mask()
  %23 = load %struct.ws_mask_ctx*, %struct.ws_mask_ctx** %ctx.addr, align 8, !tbaa !3
  %mask = getelementptr inbounds %struct.ws_mask_ctx, %struct.ws_mask_ctx* %23, i32 0, i32 1
  store i32 %call31, i32* %mask, align 8, !tbaa !192
  %24 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %25 = load %struct.ws_mask_ctx*, %struct.ws_mask_ctx** %ctx.addr, align 8, !tbaa !3
  %mask32 = getelementptr inbounds %struct.ws_mask_ctx, %struct.ws_mask_ctx* %25, i32 0, i32 1
  %26 = bitcast i32* %mask32 to i8*
  call void @mg_send(%struct.mg_connection* %24, i8* %26, i32 4)
  %27 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %27, i32 0, i32 9
  %len33 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %send_mbuf, i32 0, i32 1
  %28 = load i64, i64* %len33, align 8, !tbaa !43
  %29 = load %struct.ws_mask_ctx*, %struct.ws_mask_ctx** %ctx.addr, align 8, !tbaa !3
  %pos = getelementptr inbounds %struct.ws_mask_ctx, %struct.ws_mask_ctx* %29, i32 0, i32 0
  store i64 %28, i64* %pos, align 8, !tbaa !194
  br label %if.end37

if.else34:                                        ; preds = %if.end23
  %30 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %arraydecay35 = getelementptr inbounds [10 x i8], [10 x i8]* %header, i32 0, i32 0
  %31 = load i32, i32* %header_len, align 4, !tbaa !15
  call void @mg_send(%struct.mg_connection* %30, i8* %arraydecay35, i32 %31)
  %32 = load %struct.ws_mask_ctx*, %struct.ws_mask_ctx** %ctx.addr, align 8, !tbaa !3
  %pos36 = getelementptr inbounds %struct.ws_mask_ctx, %struct.ws_mask_ctx* %32, i32 0, i32 0
  store i64 0, i64* %pos36, align 8, !tbaa !194
  br label %if.end37

if.end37:                                         ; preds = %if.else34, %if.then26
  %33 = bitcast [10 x i8]* %header to i8*
  call void @llvm.lifetime.end.p0i8(i64 10, i8* %33) #5
  %34 = bitcast i32* %header_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %34) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_ws_mask_frame(%struct.mbuf* %mbuf, %struct.ws_mask_ctx* %ctx) #0 {
entry:
  %mbuf.addr = alloca %struct.mbuf*, align 8
  %ctx.addr = alloca %struct.ws_mask_ctx*, align 8
  %i = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mbuf* %mbuf, %struct.mbuf** %mbuf.addr, align 8, !tbaa !3
  store %struct.ws_mask_ctx* %ctx, %struct.ws_mask_ctx** %ctx.addr, align 8, !tbaa !3
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.ws_mask_ctx*, %struct.ws_mask_ctx** %ctx.addr, align 8, !tbaa !3
  %pos = getelementptr inbounds %struct.ws_mask_ctx, %struct.ws_mask_ctx* %1, i32 0, i32 0
  %2 = load i64, i64* %pos, align 8, !tbaa !194
  %cmp = icmp eq i64 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  store i64 0, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load i64, i64* %i, align 8, !tbaa !12
  %4 = load %struct.mbuf*, %struct.mbuf** %mbuf.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %4, i32 0, i32 1
  %5 = load i64, i64* %len, align 8, !tbaa !39
  %6 = load %struct.ws_mask_ctx*, %struct.ws_mask_ctx** %ctx.addr, align 8, !tbaa !3
  %pos1 = getelementptr inbounds %struct.ws_mask_ctx, %struct.ws_mask_ctx* %6, i32 0, i32 0
  %7 = load i64, i64* %pos1, align 8, !tbaa !194
  %sub = sub i64 %5, %7
  %cmp2 = icmp ult i64 %3, %sub
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.ws_mask_ctx*, %struct.ws_mask_ctx** %ctx.addr, align 8, !tbaa !3
  %mask = getelementptr inbounds %struct.ws_mask_ctx, %struct.ws_mask_ctx* %8, i32 0, i32 1
  %9 = bitcast i32* %mask to i8*
  %10 = load i64, i64* %i, align 8, !tbaa !12
  %rem = urem i64 %10, 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i64 %rem
  %11 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = sext i8 %11 to i32
  %12 = load %struct.mbuf*, %struct.mbuf** %mbuf.addr, align 8, !tbaa !3
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %12, i32 0, i32 0
  %13 = load i8*, i8** %buf, align 8, !tbaa !40
  %14 = load %struct.ws_mask_ctx*, %struct.ws_mask_ctx** %ctx.addr, align 8, !tbaa !3
  %pos3 = getelementptr inbounds %struct.ws_mask_ctx, %struct.ws_mask_ctx* %14, i32 0, i32 0
  %15 = load i64, i64* %pos3, align 8, !tbaa !194
  %16 = load i64, i64* %i, align 8, !tbaa !12
  %add = add i64 %15, %16
  %arrayidx4 = getelementptr inbounds i8, i8* %13, i64 %add
  %17 = load i8, i8* %arrayidx4, align 1, !tbaa !14
  %conv5 = sext i8 %17 to i32
  %xor = xor i32 %conv5, %conv
  %conv6 = trunc i32 %xor to i8
  store i8 %conv6, i8* %arrayidx4, align 1, !tbaa !14
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load i64, i64* %i, align 8, !tbaa !12
  %inc = add i64 %18, 1
  store i64 %inc, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then
  %19 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %19) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup, %cleanup
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define void @mg_send_websocket_framev(%struct.mg_connection* %nc, i32 %op, %struct.mg_str* %strv, i32 %strvcnt) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %op.addr = alloca i32, align 4
  %strv.addr = alloca %struct.mg_str*, align 8
  %strvcnt.addr = alloca i32, align 4
  %ctx = alloca %struct.ws_mask_ctx, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i32 %op, i32* %op.addr, align 4, !tbaa !15
  store %struct.mg_str* %strv, %struct.mg_str** %strv.addr, align 8, !tbaa !3
  store i32 %strvcnt, i32* %strvcnt.addr, align 4, !tbaa !15
  %0 = bitcast %struct.ws_mask_ctx* %ctx to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %0) #5
  %1 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  %2 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  store i32 0, i32* %len, align 4, !tbaa !15
  store i32 0, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !tbaa !15
  %4 = load i32, i32* %strvcnt.addr, align 4, !tbaa !15
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.mg_str*, %struct.mg_str** %strv.addr, align 8, !tbaa !3
  %6 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds %struct.mg_str, %struct.mg_str* %5, i64 %idxprom
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %arrayidx, i32 0, i32 1
  %7 = load i64, i64* %len1, align 8, !tbaa !18
  %8 = load i32, i32* %len, align 4, !tbaa !15
  %conv = sext i32 %8 to i64
  %add = add i64 %conv, %7
  %conv2 = trunc i64 %add to i32
  store i32 %conv2, i32* %len, align 4, !tbaa !15
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !tbaa !15
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %11 = load i32, i32* %op.addr, align 4, !tbaa !15
  %12 = load i32, i32* %len, align 4, !tbaa !15
  %conv3 = sext i32 %12 to i64
  call void @mg_send_ws_header(%struct.mg_connection* %10, i32 %11, i64 %conv3, %struct.ws_mask_ctx* %ctx)
  store i32 0, i32* %i, align 4, !tbaa !15
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc14, %for.end
  %13 = load i32, i32* %i, align 4, !tbaa !15
  %14 = load i32, i32* %strvcnt.addr, align 4, !tbaa !15
  %cmp5 = icmp slt i32 %13, %14
  br i1 %cmp5, label %for.body7, label %for.end16

for.body7:                                        ; preds = %for.cond4
  %15 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %16 = load %struct.mg_str*, %struct.mg_str** %strv.addr, align 8, !tbaa !3
  %17 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom8 = sext i32 %17 to i64
  %arrayidx9 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %16, i64 %idxprom8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %arrayidx9, i32 0, i32 0
  %18 = load i8*, i8** %p, align 8, !tbaa !16
  %19 = load %struct.mg_str*, %struct.mg_str** %strv.addr, align 8, !tbaa !3
  %20 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom10 = sext i32 %20 to i64
  %arrayidx11 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %19, i64 %idxprom10
  %len12 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %arrayidx11, i32 0, i32 1
  %21 = load i64, i64* %len12, align 8, !tbaa !18
  %conv13 = trunc i64 %21 to i32
  call void @mg_send(%struct.mg_connection* %15, i8* %18, i32 %conv13)
  br label %for.inc14

for.inc14:                                        ; preds = %for.body7
  %22 = load i32, i32* %i, align 4, !tbaa !15
  %inc15 = add nsw i32 %22, 1
  store i32 %inc15, i32* %i, align 4, !tbaa !15
  br label %for.cond4

for.end16:                                        ; preds = %for.cond4
  %23 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %23, i32 0, i32 9
  call void @mg_ws_mask_frame(%struct.mbuf* %send_mbuf, %struct.ws_mask_ctx* %ctx)
  %24 = load i32, i32* %op.addr, align 4, !tbaa !15
  %cmp17 = icmp eq i32 %24, 8
  br i1 %cmp17, label %if.then, label %if.end

if.then:                                          ; preds = %for.end16
  %25 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %25, i32 0, i32 21
  %26 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %26, 1024
  store i64 %or, i64* %flags, align 8, !tbaa !41
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end16
  %27 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %27) #5
  %28 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %28) #5
  %29 = bitcast %struct.ws_mask_ctx* %ctx to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %29) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_printf_websocket_frame(%struct.mg_connection* %nc, i32 %op, i8* %fmt, ...) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %op.addr = alloca i32, align 4
  %fmt.addr = alloca i8*, align 8
  %mem = alloca [100 x i8], align 16
  %buf = alloca i8*, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %len = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i32 %op, i32* %op.addr, align 4, !tbaa !15
  store i8* %fmt, i8** %fmt.addr, align 8, !tbaa !3
  %0 = bitcast [100 x i8]* %mem to i8*
  call void @llvm.lifetime.start.p0i8(i64 100, i8* %0) #5
  %1 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %mem, i32 0, i32 0
  store i8* %arraydecay, i8** %buf, align 8, !tbaa !3
  %2 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %2) #5
  %3 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  %arraydecay1 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay12 = bitcast %struct.__va_list_tag* %arraydecay1 to i8*
  call void @llvm.va_start(i8* %arraydecay12)
  %4 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %call = call i32 @mg_avprintf(i8** %buf, i64 100, i8* %4, %struct.__va_list_tag* %arraydecay3)
  store i32 %call, i32* %len, align 4, !tbaa !15
  %cmp = icmp sgt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %6 = load i32, i32* %op.addr, align 4, !tbaa !15
  %7 = load i8*, i8** %buf, align 8, !tbaa !3
  %8 = load i32, i32* %len, align 4, !tbaa !15
  %conv = sext i32 %8 to i64
  call void @mg_send_websocket_frame(%struct.mg_connection* %5, i32 %6, i8* %7, i64 %conv)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arraydecay4 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay45 = bitcast %struct.__va_list_tag* %arraydecay4 to i8*
  call void @llvm.va_end(i8* %arraydecay45)
  %9 = load i8*, i8** %buf, align 8, !tbaa !3
  %arraydecay6 = getelementptr inbounds [100 x i8], [100 x i8]* %mem, i32 0, i32 0
  %cmp7 = icmp ne i8* %9, %arraydecay6
  br i1 %cmp7, label %land.lhs.true, label %if.end12

land.lhs.true:                                    ; preds = %if.end
  %10 = load i8*, i8** %buf, align 8, !tbaa !3
  %cmp9 = icmp ne i8* %10, null
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %land.lhs.true
  %11 = load i8*, i8** %buf, align 8, !tbaa !3
  call void @free(i8* %11)
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %land.lhs.true, %if.end
  %12 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %12) #5
  %13 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %13) #5
  %14 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %14) #5
  %15 = bitcast [100 x i8]* %mem to i8*
  call void @llvm.lifetime.end.p0i8(i64 100, i8* %15) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_hash_sha1_v(i64 %num_msgs, i8** %msgs, i64* %msg_lens, i8* %digest) #0 {
entry:
  %num_msgs.addr = alloca i64, align 8
  %msgs.addr = alloca i8**, align 8
  %msg_lens.addr = alloca i64*, align 8
  %digest.addr = alloca i8*, align 8
  %i = alloca i64, align 8
  %sha_ctx = alloca %struct.cs_sha1_ctx, align 4
  store i64 %num_msgs, i64* %num_msgs.addr, align 8, !tbaa !12
  store i8** %msgs, i8*** %msgs.addr, align 8, !tbaa !3
  store i64* %msg_lens, i64** %msg_lens.addr, align 8, !tbaa !3
  store i8* %digest, i8** %digest.addr, align 8, !tbaa !3
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = bitcast %struct.cs_sha1_ctx* %sha_ctx to i8*
  call void @llvm.lifetime.start.p0i8(i64 92, i8* %1) #5
  call void @cs_sha1_init(%struct.cs_sha1_ctx* %sha_ctx)
  store i64 0, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, i64* %i, align 8, !tbaa !12
  %3 = load i64, i64* %num_msgs.addr, align 8, !tbaa !12
  %cmp = icmp ult i64 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8**, i8*** %msgs.addr, align 8, !tbaa !3
  %5 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx = getelementptr inbounds i8*, i8** %4, i64 %5
  %6 = load i8*, i8** %arrayidx, align 8, !tbaa !3
  %7 = load i64*, i64** %msg_lens.addr, align 8, !tbaa !3
  %8 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx1 = getelementptr inbounds i64, i64* %7, i64 %8
  %9 = load i64, i64* %arrayidx1, align 8, !tbaa !12
  %conv = trunc i64 %9 to i32
  call void @cs_sha1_update(%struct.cs_sha1_ctx* %sha_ctx, i8* %6, i32 %conv)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i64, i64* %i, align 8, !tbaa !12
  %inc = add i64 %10, 1
  store i64 %inc, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i8*, i8** %digest.addr, align 8, !tbaa !3
  call void @cs_sha1_final(i8* %11, %struct.cs_sha1_ctx* %sha_ctx)
  %12 = bitcast %struct.cs_sha1_ctx* %sha_ctx to i8*
  call void @llvm.lifetime.end.p0i8(i64 92, i8* %12) #5
  %13 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %13) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_send_websocket_handshake2(%struct.mg_connection* %nc, i8* %path, i8* %host, i8* %protocol, i8* %extra_headers) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %path.addr = alloca i8*, align 8
  %host.addr = alloca i8*, align 8
  %protocol.addr = alloca i8*, align 8
  %extra_headers.addr = alloca i8*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %path, i8** %path.addr, align 8, !tbaa !3
  store i8* %host, i8** %host.addr, align 8, !tbaa !3
  store i8* %protocol, i8** %protocol.addr, align 8, !tbaa !3
  store i8* %extra_headers, i8** %extra_headers.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %1 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %2 = load i8*, i8** %host.addr, align 8, !tbaa !3
  %3 = load i8*, i8** %protocol.addr, align 8, !tbaa !3
  %4 = load i8*, i8** %extra_headers.addr, align 8, !tbaa !3
  call void @mg_send_websocket_handshake3(%struct.mg_connection* %0, i8* %1, i8* %2, i8* %3, i8* %4, i8* null, i8* null)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_send_websocket_handshake3(%struct.mg_connection* %nc, i8* %path, i8* %host, i8* %protocol, i8* %extra_headers, i8* %user, i8* %pass) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %path.addr = alloca i8*, align 8
  %host.addr = alloca i8*, align 8
  %protocol.addr = alloca i8*, align 8
  %extra_headers.addr = alloca i8*, align 8
  %user.addr = alloca i8*, align 8
  %pass.addr = alloca i8*, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  %agg.tmp1 = alloca %struct.mg_str, align 8
  %agg.tmp3 = alloca %struct.mg_str, align 8
  %agg.tmp5 = alloca %struct.mg_str, align 8
  %agg.tmp7 = alloca %struct.mg_str, align 8
  %agg.tmp9 = alloca %struct.mg_str, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %path, i8** %path.addr, align 8, !tbaa !3
  store i8* %host, i8** %host.addr, align 8, !tbaa !3
  store i8* %protocol, i8** %protocol.addr, align 8, !tbaa !3
  store i8* %extra_headers, i8** %extra_headers.addr, align 8, !tbaa !3
  store i8* %user, i8** %user.addr, align 8, !tbaa !3
  store i8* %pass, i8** %pass.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %1 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %call = call { i8*, i64 } @mg_mk_str(i8* %1)
  %2 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %3 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %2, i32 0, i32 0
  %4 = extractvalue { i8*, i64 } %call, 0
  store i8* %4, i8** %3, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %2, i32 0, i32 1
  %6 = extractvalue { i8*, i64 } %call, 1
  store i64 %6, i64* %5, align 8
  %7 = load i8*, i8** %host.addr, align 8, !tbaa !3
  %call2 = call { i8*, i64 } @mg_mk_str(i8* %7)
  %8 = bitcast %struct.mg_str* %agg.tmp1 to { i8*, i64 }*
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 0
  %10 = extractvalue { i8*, i64 } %call2, 0
  store i8* %10, i8** %9, align 8
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 1
  %12 = extractvalue { i8*, i64 } %call2, 1
  store i64 %12, i64* %11, align 8
  %13 = load i8*, i8** %protocol.addr, align 8, !tbaa !3
  %call4 = call { i8*, i64 } @mg_mk_str(i8* %13)
  %14 = bitcast %struct.mg_str* %agg.tmp3 to { i8*, i64 }*
  %15 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %16 = extractvalue { i8*, i64 } %call4, 0
  store i8* %16, i8** %15, align 8
  %17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %18 = extractvalue { i8*, i64 } %call4, 1
  store i64 %18, i64* %17, align 8
  %19 = load i8*, i8** %extra_headers.addr, align 8, !tbaa !3
  %call6 = call { i8*, i64 } @mg_mk_str(i8* %19)
  %20 = bitcast %struct.mg_str* %agg.tmp5 to { i8*, i64 }*
  %21 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %20, i32 0, i32 0
  %22 = extractvalue { i8*, i64 } %call6, 0
  store i8* %22, i8** %21, align 8
  %23 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %20, i32 0, i32 1
  %24 = extractvalue { i8*, i64 } %call6, 1
  store i64 %24, i64* %23, align 8
  %25 = load i8*, i8** %user.addr, align 8, !tbaa !3
  %call8 = call { i8*, i64 } @mg_mk_str(i8* %25)
  %26 = bitcast %struct.mg_str* %agg.tmp7 to { i8*, i64 }*
  %27 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 0
  %28 = extractvalue { i8*, i64 } %call8, 0
  store i8* %28, i8** %27, align 8
  %29 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 1
  %30 = extractvalue { i8*, i64 } %call8, 1
  store i64 %30, i64* %29, align 8
  %31 = load i8*, i8** %pass.addr, align 8, !tbaa !3
  %call10 = call { i8*, i64 } @mg_mk_str(i8* %31)
  %32 = bitcast %struct.mg_str* %agg.tmp9 to { i8*, i64 }*
  %33 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %32, i32 0, i32 0
  %34 = extractvalue { i8*, i64 } %call10, 0
  store i8* %34, i8** %33, align 8
  %35 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %32, i32 0, i32 1
  %36 = extractvalue { i8*, i64 } %call10, 1
  store i64 %36, i64* %35, align 8
  %37 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %38 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %37, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %37, i32 0, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = bitcast %struct.mg_str* %agg.tmp1 to { i8*, i64 }*
  %43 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %42, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %42, i32 0, i32 1
  %46 = load i64, i64* %45, align 8
  call void @mg_send_websocket_handshake3v(%struct.mg_connection* %0, i8* %39, i64 %41, i8* %44, i64 %46, %struct.mg_str* byval align 8 %agg.tmp3, %struct.mg_str* byval align 8 %agg.tmp5, %struct.mg_str* byval align 8 %agg.tmp7, %struct.mg_str* byval align 8 %agg.tmp9)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_send_websocket_handshake3v(%struct.mg_connection* %nc, i8* %path.coerce0, i64 %path.coerce1, i8* %host.coerce0, i64 %host.coerce1, %struct.mg_str* byval align 8 %protocol, %struct.mg_str* byval align 8 %extra_headers, %struct.mg_str* byval align 8 %user, %struct.mg_str* byval align 8 %pass) #0 {
entry:
  %path = alloca %struct.mg_str, align 8
  %host = alloca %struct.mg_str, align 8
  %nc.addr = alloca %struct.mg_connection*, align 8
  %auth = alloca %struct.mbuf, align 8
  %key = alloca [25 x i8], align 16
  %nonce = alloca [4 x i32], align 16
  %host_len = alloca i32, align 4
  %0 = bitcast %struct.mg_str* %path to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %path.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %path.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %host to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %host.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %host.coerce1, i64* %5, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %6 = bitcast %struct.mbuf* %auth to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %6) #5
  %7 = bitcast [25 x i8]* %key to i8*
  call void @llvm.lifetime.start.p0i8(i64 25, i8* %7) #5
  %8 = bitcast [4 x i32]* %nonce to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %8) #5
  %call = call i32 @mg_ws_random_mask()
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %nonce, i64 0, i64 0
  store i32 %call, i32* %arrayidx, align 16, !tbaa !15
  %call1 = call i32 @mg_ws_random_mask()
  %arrayidx2 = getelementptr inbounds [4 x i32], [4 x i32]* %nonce, i64 0, i64 1
  store i32 %call1, i32* %arrayidx2, align 4, !tbaa !15
  %call3 = call i32 @mg_ws_random_mask()
  %arrayidx4 = getelementptr inbounds [4 x i32], [4 x i32]* %nonce, i64 0, i64 2
  store i32 %call3, i32* %arrayidx4, align 8, !tbaa !15
  %call5 = call i32 @mg_ws_random_mask()
  %arrayidx6 = getelementptr inbounds [4 x i32], [4 x i32]* %nonce, i64 0, i64 3
  store i32 %call5, i32* %arrayidx6, align 4, !tbaa !15
  %9 = bitcast [4 x i32]* %nonce to i8*
  %arraydecay = getelementptr inbounds [25 x i8], [25 x i8]* %key, i32 0, i32 0
  call void @mg_base64_encode(i8* %9, i32 16, i8* %arraydecay)
  call void @mbuf_init(%struct.mbuf* %auth, i64 0)
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %user, i32 0, i32 1
  %10 = load i64, i64* %len, align 8, !tbaa !18
  %cmp = icmp ugt i64 %10, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %11 = bitcast %struct.mg_str* %user to { i8*, i64 }*
  %12 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %struct.mg_str* %pass to { i8*, i64 }*
  %17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %16, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %16, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  call void @mg_basic_auth_header(i8* %13, i64 %15, i8* %18, i64 %20, %struct.mbuf* %auth)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %21 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %len7 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 1
  %22 = load i64, i64* %len7, align 8, !tbaa !18
  %conv = trunc i64 %22 to i32
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %23 = load i8*, i8** %p, align 8, !tbaa !16
  %len8 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %auth, i32 0, i32 1
  %24 = load i64, i64* %len8, align 8, !tbaa !39
  %conv9 = trunc i64 %24 to i32
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %auth, i32 0, i32 0
  %25 = load i8*, i8** %buf, align 8, !tbaa !40
  %cmp10 = icmp eq i8* %25, null
  br i1 %cmp10, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %buf12 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %auth, i32 0, i32 0
  %26 = load i8*, i8** %buf12, align 8, !tbaa !40
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), %cond.true ], [ %26, %cond.false ]
  %arraydecay13 = getelementptr inbounds [25 x i8], [25 x i8]* %key, i32 0, i32 0
  %call14 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %21, i8* getelementptr inbounds ([115 x i8], [115 x i8]* @.str.136, i32 0, i32 0), i32 %conv, i8* %23, i32 %conv9, i8* %cond, i8* %arraydecay13)
  %len15 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %host, i32 0, i32 1
  %27 = load i64, i64* %len15, align 8, !tbaa !18
  %cmp16 = icmp ugt i64 %27, 0
  br i1 %cmp16, label %if.then18, label %if.end24

if.then18:                                        ; preds = %cond.end
  %28 = bitcast i32* %host_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %28) #5
  %p19 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %29 = load i8*, i8** %p19, align 8, !tbaa !16
  %p20 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %host, i32 0, i32 0
  %30 = load i8*, i8** %p20, align 8, !tbaa !16
  %sub.ptr.lhs.cast = ptrtoint i8* %29 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %30 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv21 = trunc i64 %sub.ptr.sub to i32
  store i32 %conv21, i32* %host_len, align 4, !tbaa !15
  %31 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %32 = load i32, i32* %host_len, align 4, !tbaa !15
  %p22 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %host, i32 0, i32 0
  %33 = load i8*, i8** %p22, align 8, !tbaa !16
  %call23 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %31, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.114, i32 0, i32 0), i32 %32, i8* %33)
  %34 = bitcast i32* %host_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %34) #5
  br label %if.end24

if.end24:                                         ; preds = %if.then18, %cond.end
  %len25 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %protocol, i32 0, i32 1
  %35 = load i64, i64* %len25, align 8, !tbaa !18
  %cmp26 = icmp ugt i64 %35, 0
  br i1 %cmp26, label %if.then28, label %if.end33

if.then28:                                        ; preds = %if.end24
  %36 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %len29 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %protocol, i32 0, i32 1
  %37 = load i64, i64* %len29, align 8, !tbaa !18
  %conv30 = trunc i64 %37 to i32
  %p31 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %protocol, i32 0, i32 0
  %38 = load i8*, i8** %p31, align 8, !tbaa !16
  %call32 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %36, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.137, i32 0, i32 0), i32 %conv30, i8* %38)
  br label %if.end33

if.end33:                                         ; preds = %if.then28, %if.end24
  %len34 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %extra_headers, i32 0, i32 1
  %39 = load i64, i64* %len34, align 8, !tbaa !18
  %cmp35 = icmp ugt i64 %39, 0
  br i1 %cmp35, label %if.then37, label %if.end42

if.then37:                                        ; preds = %if.end33
  %40 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %len38 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %extra_headers, i32 0, i32 1
  %41 = load i64, i64* %len38, align 8, !tbaa !18
  %conv39 = trunc i64 %41 to i32
  %p40 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %extra_headers, i32 0, i32 0
  %42 = load i8*, i8** %p40, align 8, !tbaa !16
  %call41 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %40, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.138, i32 0, i32 0), i32 %conv39, i8* %42)
  br label %if.end42

if.end42:                                         ; preds = %if.then37, %if.end33
  %43 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %call43 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %43, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0))
  %44 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %44, i32 0, i32 21
  %45 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %45, 256
  store i64 %or, i64* %flags, align 8, !tbaa !41
  call void @mbuf_free(%struct.mbuf* %auth)
  %46 = bitcast [4 x i32]* %nonce to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %46) #5
  %47 = bitcast [25 x i8]* %key to i8*
  call void @llvm.lifetime.end.p0i8(i64 25, i8* %47) #5
  %48 = bitcast %struct.mbuf* %auth to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %48) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_ws_random_mask() #0 {
entry:
  %mask = alloca i32, align 4
  %0 = bitcast i32* %mask to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %call = call i32 @rand()
  store i32 %call, i32* %mask, align 4, !tbaa !15
  %1 = load i32, i32* %mask, align 4, !tbaa !15
  %2 = bitcast i32* %mask to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %2) #5
  ret i32 %1
}

; Function Attrs: nounwind ssp uwtable
define void @mg_base64_encode(i8* %src, i32 %src_len, i8* %dst) #0 {
entry:
  %src.addr = alloca i8*, align 8
  %src_len.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 8
  store i8* %src, i8** %src.addr, align 8, !tbaa !3
  store i32 %src_len, i32* %src_len.addr, align 4, !tbaa !15
  store i8* %dst, i8** %dst.addr, align 8, !tbaa !3
  %0 = load i8*, i8** %src.addr, align 8, !tbaa !3
  %1 = load i32, i32* %src_len.addr, align 4, !tbaa !15
  %2 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  call void @cs_base64_encode(i8* %0, i32 %1, i8* %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_send_websocket_handshake(%struct.mg_connection* %nc, i8* %path, i8* %extra_headers) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %path.addr = alloca i8*, align 8
  %extra_headers.addr = alloca i8*, align 8
  %null_str = alloca %struct.mg_str, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  %agg.tmp1 = alloca %struct.mg_str, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %path, i8** %path.addr, align 8, !tbaa !3
  store i8* %extra_headers, i8** %extra_headers.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_str* %null_str to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %0) #5
  %1 = bitcast %struct.mg_str* %null_str to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 16, i1 false)
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %3 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %call = call { i8*, i64 } @mg_mk_str(i8* %3)
  %4 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %4, i32 0, i32 0
  %6 = extractvalue { i8*, i64 } %call, 0
  store i8* %6, i8** %5, align 8
  %7 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %4, i32 0, i32 1
  %8 = extractvalue { i8*, i64 } %call, 1
  store i64 %8, i64* %7, align 8
  %9 = load i8*, i8** %extra_headers.addr, align 8, !tbaa !3
  %call2 = call { i8*, i64 } @mg_mk_str(i8* %9)
  %10 = bitcast %struct.mg_str* %agg.tmp1 to { i8*, i64 }*
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %10, i32 0, i32 0
  %12 = extractvalue { i8*, i64 } %call2, 0
  store i8* %12, i8** %11, align 8
  %13 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %10, i32 0, i32 1
  %14 = extractvalue { i8*, i64 } %call2, 1
  store i64 %14, i64* %13, align 8
  %15 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %16 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %struct.mg_str* %null_str to { i8*, i64 }*
  %21 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %20, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %20, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  call void @mg_send_websocket_handshake3v(%struct.mg_connection* %2, i8* %17, i64 %19, i8* %22, i64 %24, %struct.mg_str* byval align 8 %null_str, %struct.mg_str* byval align 8 %agg.tmp1, %struct.mg_str* byval align 8 %null_str, %struct.mg_str* byval align 8 %null_str)
  %25 = bitcast %struct.mg_str* %null_str to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %25) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define %struct.mg_connection* @mg_connect_ws_opt(%struct.mg_mgr* %mgr, void (%struct.mg_connection*, i32, i8*)* %ev_handler, %struct.mg_connect_opts* byval align 8 %opts, i8* %url, i8* %protocol, i8* %extra_headers) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %ev_handler.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %url.addr = alloca i8*, align 8
  %protocol.addr = alloca i8*, align 8
  %extra_headers.addr = alloca i8*, align 8
  %null_str = alloca %struct.mg_str, align 8
  %host = alloca %struct.mg_str, align 8
  %path = alloca %struct.mg_str, align 8
  %user_info = alloca %struct.mg_str, align 8
  %nc = alloca %struct.mg_connection*, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  %agg.tmp2 = alloca %struct.mg_str, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  store void (%struct.mg_connection*, i32, i8*)* %ev_handler, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8, !tbaa !3
  store i8* %url, i8** %url.addr, align 8, !tbaa !3
  store i8* %protocol, i8** %protocol.addr, align 8, !tbaa !3
  store i8* %extra_headers, i8** %extra_headers.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_str* %null_str to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %0) #5
  %1 = bitcast %struct.mg_str* %null_str to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 16, i1 false)
  %2 = bitcast %struct.mg_str* %host to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %2) #5
  %3 = bitcast %struct.mg_str* %host to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 16, i1 false)
  %4 = bitcast %struct.mg_str* %path to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %4) #5
  %5 = bitcast %struct.mg_str* %path to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false)
  %6 = bitcast %struct.mg_str* %user_info to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %6) #5
  %7 = bitcast %struct.mg_str* %user_info to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 16, i1 false)
  %8 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #5
  %9 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %10 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8, !tbaa !3
  %11 = load i8*, i8** %url.addr, align 8, !tbaa !3
  %call = call %struct.mg_connection* @mg_connect_http_base(%struct.mg_mgr* %9, void (%struct.mg_connection*, i32, i8*)* %10, %struct.mg_connect_opts* byval align 8 %opts, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.109, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.139, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.110, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.140, i32 0, i32 0), i8* %11, %struct.mg_str* %path, %struct.mg_str* %user_info, %struct.mg_str* %host)
  store %struct.mg_connection* %call, %struct.mg_connection** %nc, align 8, !tbaa !3
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %cmp = icmp ne %struct.mg_connection* %12, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %13 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %14 = load i8*, i8** %protocol.addr, align 8, !tbaa !3
  %call1 = call { i8*, i64 } @mg_mk_str(i8* %14)
  %15 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %16 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 0
  %17 = extractvalue { i8*, i64 } %call1, 0
  store i8* %17, i8** %16, align 8
  %18 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 1
  %19 = extractvalue { i8*, i64 } %call1, 1
  store i64 %19, i64* %18, align 8
  %20 = load i8*, i8** %extra_headers.addr, align 8, !tbaa !3
  %call3 = call { i8*, i64 } @mg_mk_str(i8* %20)
  %21 = bitcast %struct.mg_str* %agg.tmp2 to { i8*, i64 }*
  %22 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %21, i32 0, i32 0
  %23 = extractvalue { i8*, i64 } %call3, 0
  store i8* %23, i8** %22, align 8
  %24 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %21, i32 0, i32 1
  %25 = extractvalue { i8*, i64 } %call3, 1
  store i64 %25, i64* %24, align 8
  %26 = bitcast %struct.mg_str* %path to { i8*, i64 }*
  %27 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = bitcast %struct.mg_str* %host to { i8*, i64 }*
  %32 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %31, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %31, i32 0, i32 1
  %35 = load i64, i64* %34, align 8
  call void @mg_send_websocket_handshake3v(%struct.mg_connection* %13, i8* %28, i64 %30, i8* %33, i64 %35, %struct.mg_str* byval align 8 %agg.tmp, %struct.mg_str* byval align 8 %agg.tmp2, %struct.mg_str* byval align 8 %user_info, %struct.mg_str* byval align 8 %null_str)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %36 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %37 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %37) #5
  %38 = bitcast %struct.mg_str* %user_info to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %38) #5
  %39 = bitcast %struct.mg_str* %path to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %39) #5
  %40 = bitcast %struct.mg_str* %host to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %40) #5
  %41 = bitcast %struct.mg_str* %null_str to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %41) #5
  ret %struct.mg_connection* %36
}

; Function Attrs: nounwind ssp uwtable
define %struct.mg_connection* @mg_connect_ws(%struct.mg_mgr* %mgr, void (%struct.mg_connection*, i32, i8*)* %ev_handler, i8* %url, i8* %protocol, i8* %extra_headers) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %ev_handler.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %url.addr = alloca i8*, align 8
  %protocol.addr = alloca i8*, align 8
  %extra_headers.addr = alloca i8*, align 8
  %opts = alloca %struct.mg_connect_opts, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  store void (%struct.mg_connection*, i32, i8*)* %ev_handler, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8, !tbaa !3
  store i8* %url, i8** %url.addr, align 8, !tbaa !3
  store i8* %protocol, i8** %protocol.addr, align 8, !tbaa !3
  store i8* %extra_headers, i8** %extra_headers.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_connect_opts* %opts to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* %0) #5
  %1 = bitcast %struct.mg_connect_opts* %opts to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 40, i1 false)
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %3 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8, !tbaa !3
  %4 = load i8*, i8** %url.addr, align 8, !tbaa !3
  %5 = load i8*, i8** %protocol.addr, align 8, !tbaa !3
  %6 = load i8*, i8** %extra_headers.addr, align 8, !tbaa !3
  %call = call %struct.mg_connection* @mg_connect_ws_opt(%struct.mg_mgr* %2, void (%struct.mg_connection*, i32, i8*)* %3, %struct.mg_connect_opts* byval align 8 %opts, i8* %4, i8* %5, i8* %6)
  %7 = bitcast %struct.mg_connect_opts* %opts to i8*
  call void @llvm.lifetime.end.p0i8(i64 40, i8* %7) #5
  ret %struct.mg_connection* %call
}

declare i8* @strchr(i8*, i32) #4

declare i32 @"\01_stat$INODE64"(i8*, %struct.stat*) #4

declare %struct.__sFILE* @"\01_fopen"(i8*, i8*) #4

; Function Attrs: nounwind ssp uwtable
define i32 @mg_open(i8* %path, i32 %flag, i32 %mode) #0 {
entry:
  %path.addr = alloca i8*, align 8
  %flag.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  store i8* %path, i8** %path.addr, align 8, !tbaa !3
  store i32 %flag, i32* %flag.addr, align 4, !tbaa !15
  store i32 %mode, i32* %mode.addr, align 4, !tbaa !15
  %0 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %1 = load i32, i32* %flag.addr, align 4, !tbaa !15
  %2 = load i32, i32* %mode.addr, align 4, !tbaa !15
  %call = call i32 (i8*, i32, ...) @"\01_open"(i8* %0, i32 %1, i32 %2)
  ret i32 %call
}

declare i32 @"\01_open"(i8*, i32, ...) #4

; Function Attrs: nounwind ssp uwtable
define i64 @mg_fread(i8* %ptr, i64 %size, i64 %count, %struct.__sFILE* %f) #0 {
entry:
  %ptr.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %count.addr = alloca i64, align 8
  %f.addr = alloca %struct.__sFILE*, align 8
  store i8* %ptr, i8** %ptr.addr, align 8, !tbaa !3
  store i64 %size, i64* %size.addr, align 8, !tbaa !12
  store i64 %count, i64* %count.addr, align 8, !tbaa !12
  store %struct.__sFILE* %f, %struct.__sFILE** %f.addr, align 8, !tbaa !3
  %0 = load i8*, i8** %ptr.addr, align 8, !tbaa !3
  %1 = load i64, i64* %size.addr, align 8, !tbaa !12
  %2 = load i64, i64* %count.addr, align 8, !tbaa !12
  %3 = load %struct.__sFILE*, %struct.__sFILE** %f.addr, align 8, !tbaa !3
  %call = call i64 @fread(i8* %0, i64 %1, i64 %2, %struct.__sFILE* %3)
  ret i64 %call
}

declare i64 @fread(i8*, i64, i64, %struct.__sFILE*) #4

; Function Attrs: nounwind ssp uwtable
define i64 @mg_fwrite(i8* %ptr, i64 %size, i64 %count, %struct.__sFILE* %f) #0 {
entry:
  %ptr.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %count.addr = alloca i64, align 8
  %f.addr = alloca %struct.__sFILE*, align 8
  store i8* %ptr, i8** %ptr.addr, align 8, !tbaa !3
  store i64 %size, i64* %size.addr, align 8, !tbaa !12
  store i64 %count, i64* %count.addr, align 8, !tbaa !12
  store %struct.__sFILE* %f, %struct.__sFILE** %f.addr, align 8, !tbaa !3
  %0 = load i8*, i8** %ptr.addr, align 8, !tbaa !3
  %1 = load i64, i64* %size.addr, align 8, !tbaa !12
  %2 = load i64, i64* %count.addr, align 8, !tbaa !12
  %3 = load %struct.__sFILE*, %struct.__sFILE** %f.addr, align 8, !tbaa !3
  %call = call i64 @"\01_fwrite"(i8* %0, i64 %1, i64 %2, %struct.__sFILE* %3)
  ret i64 %call
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_base64_decode(i8* %s, i32 %len, i8* %dst) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 8
  store i8* %s, i8** %s.addr, align 8, !tbaa !3
  store i32 %len, i32* %len.addr, align 4, !tbaa !15
  store i8* %dst, i8** %dst.addr, align 8, !tbaa !3
  %0 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %1 = load i32, i32* %len.addr, align 4, !tbaa !15
  %2 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %call = call i32 @cs_base64_decode(i8* %0, i32 %1, i8* %2, i32* null)
  ret i32 %call
}

declare i8* @inet_ntop(i32, i8*, i8*, i32) #4

; Function Attrs: nounwind ssp uwtable
define i32 @mg_conn_addr_to_str(%struct.mg_connection* %nc, i8* %buf, i64 %len, i32 %flags) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %sa = alloca %union.socket_address, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !15
  %0 = bitcast %union.socket_address* %sa to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %0) #5
  %1 = bitcast %union.socket_address* %sa to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %1, i8 0, i64 16, i1 false)
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %3 = load i32, i32* %flags.addr, align 4, !tbaa !15
  %and = and i32 %3, 4
  call void @mg_if_get_conn_addr(%struct.mg_connection* %2, i32 %and, %union.socket_address* %sa)
  %4 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %5 = load i64, i64* %len.addr, align 8, !tbaa !12
  %6 = load i32, i32* %flags.addr, align 4, !tbaa !15
  %call = call i32 @mg_sock_addr_to_str(%union.socket_address* %sa, i8* %4, i64 %5, i32 %6)
  %7 = bitcast %union.socket_address* %sa to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %7) #5
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_hexdump(i8* %buf, i32 %len, i8* %dst, i32 %dst_len) #0 {
entry:
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 8
  %dst_len.addr = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i32 %len, i32* %len.addr, align 4, !tbaa !15
  store i8* %dst, i8** %dst.addr, align 8, !tbaa !3
  store i32 %dst_len, i32* %dst_len.addr, align 4, !tbaa !15
  %0 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %1 = load i32, i32* %len.addr, align 4, !tbaa !15
  %2 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %3 = load i32, i32* %dst_len.addr, align 4, !tbaa !15
  %call = call i32 @mg_hexdump_n(i8* %0, i32 %1, i8* %2, i32 %3, i32 0)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_hexdump_n(i8* %buf, i32 %len, i8* %dst, i32 %dst_len, i32 %offset) #0 {
entry:
  %retval = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 8
  %dst_len.addr = alloca i32, align 4
  %offset.addr = alloca i32, align 4
  %p = alloca i8*, align 8
  %ascii = alloca [17 x i8], align 16
  %i = alloca i32, align 4
  %idx = alloca i32, align 4
  %n = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i32 %len, i32* %len.addr, align 4, !tbaa !15
  store i8* %dst, i8** %dst.addr, align 8, !tbaa !3
  store i32 %dst_len, i32* %dst_len.addr, align 4, !tbaa !15
  store i32 %offset, i32* %offset.addr, align 4, !tbaa !15
  %0 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  store i8* %1, i8** %p, align 8, !tbaa !3
  %2 = bitcast [17 x i8]* %ascii to i8*
  call void @llvm.lifetime.start.p0i8(i64 17, i8* %2) #5
  %3 = bitcast [17 x i8]* %ascii to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %3, i8 0, i64 17, i1 false)
  %4 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #5
  %5 = bitcast i32* %idx to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #5
  %6 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #5
  store i32 0, i32* %n, align 4, !tbaa !15
  store i32 0, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %i, align 4, !tbaa !15
  %8 = load i32, i32* %len.addr, align 4, !tbaa !15
  %cmp = icmp slt i32 %7, %8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %i, align 4, !tbaa !15
  %rem = srem i32 %9, 16
  store i32 %rem, i32* %idx, align 4, !tbaa !15
  %10 = load i32, i32* %idx, align 4, !tbaa !15
  %cmp1 = icmp eq i32 %10, 0
  br i1 %cmp1, label %if.then, label %if.end24

if.then:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4, !tbaa !15
  %cmp2 = icmp sgt i32 %11, 0
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  %12 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %13 = load i32, i32* %n, align 4, !tbaa !15
  %idx.ext = sext i32 %13 to i64
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 %idx.ext
  %14 = load i32, i32* %dst_len.addr, align 4, !tbaa !15
  %15 = load i32, i32* %n, align 4, !tbaa !15
  %sub = sub nsw i32 %14, %15
  %cmp4 = icmp sgt i32 %sub, 0
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then3
  %16 = load i32, i32* %dst_len.addr, align 4, !tbaa !15
  %17 = load i32, i32* %n, align 4, !tbaa !15
  %sub5 = sub nsw i32 %16, %17
  br label %cond.end

cond.false:                                       ; preds = %if.then3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub5, %cond.true ], [ 0, %cond.false ]
  %conv = sext i32 %cond to i64
  %18 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %19 = load i32, i32* %n, align 4, !tbaa !15
  %idx.ext6 = sext i32 %19 to i64
  %add.ptr7 = getelementptr inbounds i8, i8* %18, i64 %idx.ext6
  %20 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr7, i1 false, i1 true)
  %arraydecay = getelementptr inbounds [17 x i8], [17 x i8]* %ascii, i32 0, i32 0
  %call = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %add.ptr, i64 %conv, i32 0, i64 %20, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.399, i32 0, i32 0), i8* %arraydecay)
  %21 = load i32, i32* %n, align 4, !tbaa !15
  %add = add nsw i32 %21, %call
  store i32 %add, i32* %n, align 4, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  %22 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %23 = load i32, i32* %n, align 4, !tbaa !15
  %idx.ext8 = sext i32 %23 to i64
  %add.ptr9 = getelementptr inbounds i8, i8* %22, i64 %idx.ext8
  %24 = load i32, i32* %dst_len.addr, align 4, !tbaa !15
  %25 = load i32, i32* %n, align 4, !tbaa !15
  %sub10 = sub nsw i32 %24, %25
  %cmp11 = icmp sgt i32 %sub10, 0
  br i1 %cmp11, label %cond.true13, label %cond.false15

cond.true13:                                      ; preds = %if.end
  %26 = load i32, i32* %dst_len.addr, align 4, !tbaa !15
  %27 = load i32, i32* %n, align 4, !tbaa !15
  %sub14 = sub nsw i32 %26, %27
  br label %cond.end16

cond.false15:                                     ; preds = %if.end
  br label %cond.end16

cond.end16:                                       ; preds = %cond.false15, %cond.true13
  %cond17 = phi i32 [ %sub14, %cond.true13 ], [ 0, %cond.false15 ]
  %conv18 = sext i32 %cond17 to i64
  %28 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %29 = load i32, i32* %n, align 4, !tbaa !15
  %idx.ext19 = sext i32 %29 to i64
  %add.ptr20 = getelementptr inbounds i8, i8* %28, i64 %idx.ext19
  %30 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr20, i1 false, i1 true)
  %31 = load i32, i32* %i, align 4, !tbaa !15
  %32 = load i32, i32* %offset.addr, align 4, !tbaa !15
  %add21 = add nsw i32 %31, %32
  %call22 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %add.ptr9, i64 %conv18, i32 0, i64 %30, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.400, i32 0, i32 0), i32 %add21)
  %33 = load i32, i32* %n, align 4, !tbaa !15
  %add23 = add nsw i32 %33, %call22
  store i32 %add23, i32* %n, align 4, !tbaa !15
  br label %if.end24

if.end24:                                         ; preds = %cond.end16, %for.body
  %34 = load i32, i32* %dst_len.addr, align 4, !tbaa !15
  %35 = load i32, i32* %n, align 4, !tbaa !15
  %sub25 = sub nsw i32 %34, %35
  %cmp26 = icmp slt i32 %sub25, 0
  br i1 %cmp26, label %if.then28, label %if.end29

if.then28:                                        ; preds = %if.end24
  %36 = load i32, i32* %n, align 4, !tbaa !15
  store i32 %36, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end29:                                         ; preds = %if.end24
  %37 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %38 = load i32, i32* %n, align 4, !tbaa !15
  %idx.ext30 = sext i32 %38 to i64
  %add.ptr31 = getelementptr inbounds i8, i8* %37, i64 %idx.ext30
  %39 = load i32, i32* %dst_len.addr, align 4, !tbaa !15
  %40 = load i32, i32* %n, align 4, !tbaa !15
  %sub32 = sub nsw i32 %39, %40
  %cmp33 = icmp sgt i32 %sub32, 0
  br i1 %cmp33, label %cond.true35, label %cond.false37

cond.true35:                                      ; preds = %if.end29
  %41 = load i32, i32* %dst_len.addr, align 4, !tbaa !15
  %42 = load i32, i32* %n, align 4, !tbaa !15
  %sub36 = sub nsw i32 %41, %42
  br label %cond.end38

cond.false37:                                     ; preds = %if.end29
  br label %cond.end38

cond.end38:                                       ; preds = %cond.false37, %cond.true35
  %cond39 = phi i32 [ %sub36, %cond.true35 ], [ 0, %cond.false37 ]
  %conv40 = sext i32 %cond39 to i64
  %43 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %44 = load i32, i32* %n, align 4, !tbaa !15
  %idx.ext41 = sext i32 %44 to i64
  %add.ptr42 = getelementptr inbounds i8, i8* %43, i64 %idx.ext41
  %45 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr42, i1 false, i1 true)
  %46 = load i8*, i8** %p, align 8, !tbaa !3
  %47 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom = sext i32 %47 to i64
  %arrayidx = getelementptr inbounds i8, i8* %46, i64 %idxprom
  %48 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv43 = zext i8 %48 to i32
  %call44 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %add.ptr31, i64 %conv40, i32 0, i64 %45, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.401, i32 0, i32 0), i32 %conv43)
  %49 = load i32, i32* %n, align 4, !tbaa !15
  %add45 = add nsw i32 %49, %call44
  store i32 %add45, i32* %n, align 4, !tbaa !15
  %50 = load i8*, i8** %p, align 8, !tbaa !3
  %51 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom46 = sext i32 %51 to i64
  %arrayidx47 = getelementptr inbounds i8, i8* %50, i64 %idxprom46
  %52 = load i8, i8* %arrayidx47, align 1, !tbaa !14
  %conv48 = zext i8 %52 to i32
  %cmp49 = icmp slt i32 %conv48, 32
  br i1 %cmp49, label %cond.true56, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end38
  %53 = load i8*, i8** %p, align 8, !tbaa !3
  %54 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom51 = sext i32 %54 to i64
  %arrayidx52 = getelementptr inbounds i8, i8* %53, i64 %idxprom51
  %55 = load i8, i8* %arrayidx52, align 1, !tbaa !14
  %conv53 = zext i8 %55 to i32
  %cmp54 = icmp sgt i32 %conv53, 126
  br i1 %cmp54, label %cond.true56, label %cond.false57

cond.true56:                                      ; preds = %lor.lhs.false, %cond.end38
  br label %cond.end61

cond.false57:                                     ; preds = %lor.lhs.false
  %56 = load i8*, i8** %p, align 8, !tbaa !3
  %57 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom58 = sext i32 %57 to i64
  %arrayidx59 = getelementptr inbounds i8, i8* %56, i64 %idxprom58
  %58 = load i8, i8* %arrayidx59, align 1, !tbaa !14
  %conv60 = zext i8 %58 to i32
  br label %cond.end61

cond.end61:                                       ; preds = %cond.false57, %cond.true56
  %cond62 = phi i32 [ 46, %cond.true56 ], [ %conv60, %cond.false57 ]
  %conv63 = trunc i32 %cond62 to i8
  %59 = load i32, i32* %idx, align 4, !tbaa !15
  %idxprom64 = sext i32 %59 to i64
  %arrayidx65 = getelementptr inbounds [17 x i8], [17 x i8]* %ascii, i64 0, i64 %idxprom64
  store i8 %conv63, i8* %arrayidx65, align 1, !tbaa !14
  %60 = load i32, i32* %idx, align 4, !tbaa !15
  %add66 = add nsw i32 %60, 1
  %idxprom67 = sext i32 %add66 to i64
  %arrayidx68 = getelementptr inbounds [17 x i8], [17 x i8]* %ascii, i64 0, i64 %idxprom67
  store i8 0, i8* %arrayidx68, align 1, !tbaa !14
  br label %for.inc

for.inc:                                          ; preds = %cond.end61
  %61 = load i32, i32* %i, align 4, !tbaa !15
  %inc = add nsw i32 %61, 1
  store i32 %inc, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %cond.end79, %for.end
  %62 = load i32, i32* %i, align 4, !tbaa !15
  %inc69 = add nsw i32 %62, 1
  store i32 %inc69, i32* %i, align 4, !tbaa !15
  %rem70 = srem i32 %62, 16
  %tobool = icmp ne i32 %rem70, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %63 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %64 = load i32, i32* %n, align 4, !tbaa !15
  %idx.ext71 = sext i32 %64 to i64
  %add.ptr72 = getelementptr inbounds i8, i8* %63, i64 %idx.ext71
  %65 = load i32, i32* %dst_len.addr, align 4, !tbaa !15
  %66 = load i32, i32* %n, align 4, !tbaa !15
  %sub73 = sub nsw i32 %65, %66
  %cmp74 = icmp sgt i32 %sub73, 0
  br i1 %cmp74, label %cond.true76, label %cond.false78

cond.true76:                                      ; preds = %while.body
  %67 = load i32, i32* %dst_len.addr, align 4, !tbaa !15
  %68 = load i32, i32* %n, align 4, !tbaa !15
  %sub77 = sub nsw i32 %67, %68
  br label %cond.end79

cond.false78:                                     ; preds = %while.body
  br label %cond.end79

cond.end79:                                       ; preds = %cond.false78, %cond.true76
  %cond80 = phi i32 [ %sub77, %cond.true76 ], [ 0, %cond.false78 ]
  %conv81 = sext i32 %cond80 to i64
  %69 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %70 = load i32, i32* %n, align 4, !tbaa !15
  %idx.ext82 = sext i32 %70 to i64
  %add.ptr83 = getelementptr inbounds i8, i8* %69, i64 %idx.ext82
  %71 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr83, i1 false, i1 true)
  %call84 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %add.ptr72, i64 %conv81, i32 0, i64 %71, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.402, i32 0, i32 0))
  %72 = load i32, i32* %n, align 4, !tbaa !15
  %add85 = add nsw i32 %72, %call84
  store i32 %add85, i32* %n, align 4, !tbaa !15
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %73 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %74 = load i32, i32* %n, align 4, !tbaa !15
  %idx.ext86 = sext i32 %74 to i64
  %add.ptr87 = getelementptr inbounds i8, i8* %73, i64 %idx.ext86
  %75 = load i32, i32* %dst_len.addr, align 4, !tbaa !15
  %76 = load i32, i32* %n, align 4, !tbaa !15
  %sub88 = sub nsw i32 %75, %76
  %cmp89 = icmp sgt i32 %sub88, 0
  br i1 %cmp89, label %cond.true91, label %cond.false93

cond.true91:                                      ; preds = %while.end
  %77 = load i32, i32* %dst_len.addr, align 4, !tbaa !15
  %78 = load i32, i32* %n, align 4, !tbaa !15
  %sub92 = sub nsw i32 %77, %78
  br label %cond.end94

cond.false93:                                     ; preds = %while.end
  br label %cond.end94

cond.end94:                                       ; preds = %cond.false93, %cond.true91
  %cond95 = phi i32 [ %sub92, %cond.true91 ], [ 0, %cond.false93 ]
  %conv96 = sext i32 %cond95 to i64
  %79 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %80 = load i32, i32* %n, align 4, !tbaa !15
  %idx.ext97 = sext i32 %80 to i64
  %add.ptr98 = getelementptr inbounds i8, i8* %79, i64 %idx.ext97
  %81 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr98, i1 false, i1 true)
  %arraydecay99 = getelementptr inbounds [17 x i8], [17 x i8]* %ascii, i32 0, i32 0
  %call100 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %add.ptr87, i64 %conv96, i32 0, i64 %81, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.399, i32 0, i32 0), i8* %arraydecay99)
  %82 = load i32, i32* %n, align 4, !tbaa !15
  %add101 = add nsw i32 %82, %call100
  store i32 %add101, i32* %n, align 4, !tbaa !15
  %83 = load i32, i32* %n, align 4, !tbaa !15
  store i32 %83, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %cond.end94, %if.then28
  %84 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %84) #5
  %85 = bitcast i32* %idx to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %85) #5
  %86 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %86) #5
  %87 = bitcast [17 x i8]* %ascii to i8*
  call void @llvm.lifetime.end.p0i8(i64 17, i8* %87) #5
  %88 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %88) #5
  %89 = load i32, i32* %retval, align 4
  ret i32 %89
}

; Function Attrs: nounwind ssp uwtable
define void @mg_hexdumpf(%struct.__sFILE* %fp, i8* %buf, i32 %len) #0 {
entry:
  %fp.addr = alloca %struct.__sFILE*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %tmp = alloca [80 x i8], align 16
  %offset = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.__sFILE* %fp, %struct.__sFILE** %fp.addr, align 8, !tbaa !3
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i32 %len, i32* %len.addr, align 4, !tbaa !15
  %0 = bitcast [80 x i8]* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* %0) #5
  %1 = bitcast i32* %offset to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  store i32 0, i32* %offset, align 4, !tbaa !15
  %2 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %3 = load i32, i32* %len.addr, align 4, !tbaa !15
  %cmp = icmp sgt i32 %3, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %len.addr, align 4, !tbaa !15
  %cmp1 = icmp slt i32 %4, 16
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %5 = load i32, i32* %len.addr, align 4, !tbaa !15
  br label %cond.end

cond.false:                                       ; preds = %while.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %5, %cond.true ], [ 16, %cond.false ]
  store i32 %cond, i32* %n, align 4, !tbaa !15
  %6 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %7 = load i32, i32* %offset, align 4, !tbaa !15
  %idx.ext = sext i32 %7 to i64
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 %idx.ext
  %8 = load i32, i32* %n, align 4, !tbaa !15
  %arraydecay = getelementptr inbounds [80 x i8], [80 x i8]* %tmp, i32 0, i32 0
  %9 = load i32, i32* %offset, align 4, !tbaa !15
  %call = call i32 @mg_hexdump_n(i8* %add.ptr, i32 %8, i8* %arraydecay, i32 80, i32 %9)
  %arraydecay2 = getelementptr inbounds [80 x i8], [80 x i8]* %tmp, i32 0, i32 0
  %10 = load %struct.__sFILE*, %struct.__sFILE** %fp.addr, align 8, !tbaa !3
  %call3 = call i32 @"\01_fputs"(i8* %arraydecay2, %struct.__sFILE* %10)
  %11 = load i32, i32* %n, align 4, !tbaa !15
  %12 = load i32, i32* %offset, align 4, !tbaa !15
  %add = add nsw i32 %12, %11
  store i32 %add, i32* %offset, align 4, !tbaa !15
  %13 = load i32, i32* %n, align 4, !tbaa !15
  %14 = load i32, i32* %len.addr, align 4, !tbaa !15
  %sub = sub nsw i32 %14, %13
  store i32 %sub, i32* %len.addr, align 4, !tbaa !15
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %15 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %15) #5
  %16 = bitcast i32* %offset to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %16) #5
  %17 = bitcast [80 x i8]* %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %17) #5
  ret void
}

declare i32 @"\01_fputs"(i8*, %struct.__sFILE*) #4

declare i32 @strcmp(i8*, i8*) #4

; Function Attrs: nounwind ssp uwtable
define i32 @mg_is_big_endian() #0 {
entry:
  %0 = load i8, i8* bitcast (i32* @mg_is_big_endian.n to i8*), align 4, !tbaa !14
  %conv = sext i8 %0 to i32
  %cmp = icmp eq i32 %conv, 0
  %conv1 = zext i1 %cmp to i32
  ret i32 %conv1
}

; Function Attrs: nounwind ssp uwtable
define void @mg_mbuf_append_base64_putc(i8 signext %ch, i8* %user_data) #0 {
entry:
  %ch.addr = alloca i8, align 1
  %user_data.addr = alloca i8*, align 8
  %mbuf = alloca %struct.mbuf*, align 8
  store i8 %ch, i8* %ch.addr, align 1, !tbaa !14
  store i8* %user_data, i8** %user_data.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mbuf** %mbuf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load i8*, i8** %user_data.addr, align 8, !tbaa !3
  %2 = bitcast i8* %1 to %struct.mbuf*
  store %struct.mbuf* %2, %struct.mbuf** %mbuf, align 8, !tbaa !3
  %3 = load %struct.mbuf*, %struct.mbuf** %mbuf, align 8, !tbaa !3
  %call = call i64 @mbuf_append(%struct.mbuf* %3, i8* %ch.addr, i64 1)
  %4 = bitcast %struct.mbuf** %mbuf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %4) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_mbuf_append_base64(%struct.mbuf* %mbuf, i8* %data, i64 %len) #0 {
entry:
  %mbuf.addr = alloca %struct.mbuf*, align 8
  %data.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %ctx = alloca %struct.cs_base64_ctx, align 8
  store %struct.mbuf* %mbuf, %struct.mbuf** %mbuf.addr, align 8, !tbaa !3
  store i8* %data, i8** %data.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  %0 = bitcast %struct.cs_base64_ctx* %ctx to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %0) #5
  %1 = load %struct.mbuf*, %struct.mbuf** %mbuf.addr, align 8, !tbaa !3
  %2 = bitcast %struct.mbuf* %1 to i8*
  call void @cs_base64_init(%struct.cs_base64_ctx* %ctx, void (i8, i8*)* @mg_mbuf_append_base64_putc, i8* %2)
  %3 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %4 = load i64, i64* %len.addr, align 8, !tbaa !12
  call void @cs_base64_update(%struct.cs_base64_ctx* %ctx, i8* %3, i64 %4)
  call void @cs_base64_finish(%struct.cs_base64_ctx* %ctx)
  %5 = bitcast %struct.cs_base64_ctx* %ctx to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %5) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define { i8*, i64 } @mg_url_encode_opt(i8* %src.coerce0, i64 %src.coerce1, i8* %safe.coerce0, i64 %safe.coerce1, i32 %flags) #0 {
entry:
  %retval = alloca %struct.mg_str, align 8
  %src = alloca %struct.mg_str, align 8
  %safe = alloca %struct.mg_str, align 8
  %flags.addr = alloca i32, align 4
  %hex = alloca i8*, align 8
  %i = alloca i64, align 8
  %mb = alloca %struct.mbuf, align 8
  %c = alloca i8, align 1
  %0 = bitcast %struct.mg_str* %src to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %src.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %src.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %safe to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %safe.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %safe.coerce1, i64* %5, align 8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !15
  %6 = bitcast i8** %hex to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #5
  %7 = load i32, i32* %flags.addr, align 4, !tbaa !15
  %and = and i32 %7, 2
  %tobool = icmp ne i32 %and, 0
  %8 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.155, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i32 0, i32 0)
  store i8* %cond, i8** %hex, align 8, !tbaa !3
  %9 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #5
  store i64 0, i64* %i, align 8, !tbaa !12
  %10 = bitcast %struct.mbuf* %mb to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %10) #5
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %src, i32 0, i32 1
  %11 = load i64, i64* %len, align 8, !tbaa !18
  call void @mbuf_init(%struct.mbuf* %mb, i64 %11)
  store i64 0, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %12 = load i64, i64* %i, align 8, !tbaa !12
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %src, i32 0, i32 1
  %13 = load i64, i64* %len1, align 8, !tbaa !18
  %cmp = icmp ult i64 %12, %13
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %c) #5
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %src, i32 0, i32 0
  %14 = load i8*, i8** %p, align 8, !tbaa !16
  %15 = load i64, i64* %i, align 8, !tbaa !12
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 %15
  %16 = load i8, i8* %add.ptr, align 1, !tbaa !14
  store i8 %16, i8* %c, align 1, !tbaa !14
  %17 = load i8, i8* %c, align 1, !tbaa !14
  %conv = zext i8 %17 to i32
  %call = call i32 @isalnum(i32 %conv) #19
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %18 = load i8, i8* %c, align 1, !tbaa !14
  %conv3 = zext i8 %18 to i32
  %19 = bitcast %struct.mg_str* %safe to { i8*, i64 }*
  %20 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %19, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %19, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %call4 = call i8* @mg_strchr(i8* %21, i64 %23, i32 %conv3)
  %cmp5 = icmp ne i8* %call4, null
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %for.body
  %call7 = call i64 @mbuf_append(%struct.mbuf* %mb, i8* %c, i64 1)
  br label %if.end24

if.else:                                          ; preds = %lor.lhs.false
  %24 = load i8, i8* %c, align 1, !tbaa !14
  %conv8 = zext i8 %24 to i32
  %cmp9 = icmp eq i32 %conv8, 32
  br i1 %cmp9, label %land.lhs.true, label %if.else15

land.lhs.true:                                    ; preds = %if.else
  %25 = load i32, i32* %flags.addr, align 4, !tbaa !15
  %and11 = and i32 %25, 1
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %if.then13, label %if.else15

if.then13:                                        ; preds = %land.lhs.true
  %call14 = call i64 @mbuf_append(%struct.mbuf* %mb, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.156, i32 0, i32 0), i64 1)
  br label %if.end

if.else15:                                        ; preds = %land.lhs.true, %if.else
  %call16 = call i64 @mbuf_append(%struct.mbuf* %mb, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.157, i32 0, i32 0), i64 1)
  %26 = load i8*, i8** %hex, align 8, !tbaa !3
  %27 = load i8, i8* %c, align 1, !tbaa !14
  %conv17 = zext i8 %27 to i32
  %shr = ashr i32 %conv17, 4
  %idxprom = sext i32 %shr to i64
  %arrayidx = getelementptr inbounds i8, i8* %26, i64 %idxprom
  %call18 = call i64 @mbuf_append(%struct.mbuf* %mb, i8* %arrayidx, i64 1)
  %28 = load i8*, i8** %hex, align 8, !tbaa !3
  %29 = load i8, i8* %c, align 1, !tbaa !14
  %conv19 = zext i8 %29 to i32
  %and20 = and i32 %conv19, 15
  %idxprom21 = sext i32 %and20 to i64
  %arrayidx22 = getelementptr inbounds i8, i8* %28, i64 %idxprom21
  %call23 = call i64 @mbuf_append(%struct.mbuf* %mb, i8* %arrayidx22, i64 1)
  br label %if.end

if.end:                                           ; preds = %if.else15, %if.then13
  br label %if.end24

if.end24:                                         ; preds = %if.end, %if.then
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %c) #5
  br label %for.inc

for.inc:                                          ; preds = %if.end24
  %30 = load i64, i64* %i, align 8, !tbaa !12
  %inc = add i64 %30, 1
  store i64 %inc, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call25 = call i64 @mbuf_append(%struct.mbuf* %mb, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), i64 1)
  call void @mbuf_trim(%struct.mbuf* %mb)
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %mb, i32 0, i32 0
  %31 = load i8*, i8** %buf, align 8, !tbaa !40
  %len26 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %mb, i32 0, i32 1
  %32 = load i64, i64* %len26, align 8, !tbaa !39
  %sub = sub i64 %32, 1
  %call27 = call { i8*, i64 } @mg_mk_str_n(i8* %31, i64 %sub)
  %33 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %34 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %33, i32 0, i32 0
  %35 = extractvalue { i8*, i64 } %call27, 0
  store i8* %35, i8** %34, align 8
  %36 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %33, i32 0, i32 1
  %37 = extractvalue { i8*, i64 } %call27, 1
  store i64 %37, i64* %36, align 8
  %38 = bitcast %struct.mbuf* %mb to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %38) #5
  %39 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %39) #5
  %40 = bitcast i8** %hex to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %40) #5
  %41 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %42 = load { i8*, i64 }, { i8*, i64 }* %41, align 8
  ret { i8*, i64 } %42
}

; Function Attrs: inlinehint nounwind readonly ssp uwtable
define available_externally i32 @isalnum(i32 %_c) #9 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4, !tbaa !15
  %0 = load i32, i32* %_c.addr, align 4, !tbaa !15
  %call = call i32 @__istype(i32 %0, i64 1280)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define { i8*, i64 } @mg_url_encode(i8* %src.coerce0, i64 %src.coerce1) #0 {
entry:
  %retval = alloca %struct.mg_str, align 8
  %src = alloca %struct.mg_str, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  %0 = bitcast %struct.mg_str* %src to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %src.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %src.coerce1, i64* %2, align 8
  %call = call { i8*, i64 } @mg_mk_str(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.158, i32 0, i32 0))
  %3 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  %5 = extractvalue { i8*, i64 } %call, 0
  store i8* %5, i8** %4, align 8
  %6 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  %7 = extractvalue { i8*, i64 } %call, 1
  store i64 %7, i64* %6, align 8
  %8 = bitcast %struct.mg_str* %src to { i8*, i64 }*
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %14 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %13, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %13, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %call1 = call { i8*, i64 } @mg_url_encode_opt(i8* %10, i64 %12, i8* %15, i64 %17, i32 0)
  %18 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %18, i32 0, i32 0
  %20 = extractvalue { i8*, i64 } %call1, 0
  store i8* %20, i8** %19, align 8
  %21 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %18, i32 0, i32 1
  %22 = extractvalue { i8*, i64 } %call1, 1
  store i64 %22, i64* %21, align 8
  %23 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %24 = load { i8*, i64 }, { i8*, i64 }* %23, align 8
  ret { i8*, i64 } %24
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_mqtt_match_topic_expression(i8* %exp.coerce0, i64 %exp.coerce1, i8* %topic.coerce0, i64 %topic.coerce1) #0 {
entry:
  %retval = alloca i32, align 4
  %exp = alloca %struct.mg_str, align 8
  %topic = alloca %struct.mg_str, align 8
  %ec = alloca %struct.mg_str, align 8
  %tc = alloca %struct.mg_str, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %tmp = alloca %struct.mg_str, align 8
  %tmp1 = alloca %struct.mg_str, align 8
  %0 = bitcast %struct.mg_str* %exp to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %exp.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %exp.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %topic to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %topic.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %topic.coerce1, i64* %5, align 8
  %6 = bitcast %struct.mg_str* %ec to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %6) #5
  %7 = bitcast %struct.mg_str* %tc to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %7) #5
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %exp, i32 0, i32 1
  %8 = load i64, i64* %len, align 8, !tbaa !18
  %cmp = icmp eq i64 %8, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end35, %if.end23, %if.end13, %if.end
  br label %while.body

while.body:                                       ; preds = %while.cond
  %9 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %9) #5
  %call = call { i8*, i64 } @mg_mqtt_next_topic_component(%struct.mg_str* %exp)
  %10 = bitcast %struct.mg_str* %tmp to { i8*, i64 }*
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %10, i32 0, i32 0
  %12 = extractvalue { i8*, i64 } %call, 0
  store i8* %12, i8** %11, align 8
  %13 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %10, i32 0, i32 1
  %14 = extractvalue { i8*, i64 } %call, 1
  store i64 %14, i64* %13, align 8
  %15 = bitcast %struct.mg_str* %ec to i8*
  %16 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 16, i1 false), !tbaa.struct !19
  %17 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %17) #5
  %18 = bitcast %struct.mg_str* %tmp1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %18) #5
  %call2 = call { i8*, i64 } @mg_mqtt_next_topic_component(%struct.mg_str* %topic)
  %19 = bitcast %struct.mg_str* %tmp1 to { i8*, i64 }*
  %20 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %19, i32 0, i32 0
  %21 = extractvalue { i8*, i64 } %call2, 0
  store i8* %21, i8** %20, align 8
  %22 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %19, i32 0, i32 1
  %23 = extractvalue { i8*, i64 } %call2, 1
  store i64 %23, i64* %22, align 8
  %24 = bitcast %struct.mg_str* %tc to i8*
  %25 = bitcast %struct.mg_str* %tmp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 16, i1 false), !tbaa.struct !19
  %26 = bitcast %struct.mg_str* %tmp1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %26) #5
  %len3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ec, i32 0, i32 1
  %27 = load i64, i64* %len3, align 8, !tbaa !18
  %cmp4 = icmp eq i64 %27, 0
  br i1 %cmp4, label %if.then5, label %if.end14

if.then5:                                         ; preds = %while.body
  %len6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %tc, i32 0, i32 1
  %28 = load i64, i64* %len6, align 8, !tbaa !18
  %cmp7 = icmp ne i64 %28, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.then5
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end9:                                          ; preds = %if.then5
  %len10 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %exp, i32 0, i32 1
  %29 = load i64, i64* %len10, align 8, !tbaa !18
  %cmp11 = icmp eq i64 %29, 0
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.end9
  br label %while.end

if.end13:                                         ; preds = %if.end9
  br label %while.cond

if.end14:                                         ; preds = %while.body
  %call15 = call i32 @mg_vcmp(%struct.mg_str* %ec, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.156, i32 0, i32 0))
  %cmp16 = icmp eq i32 %call15, 0
  br i1 %cmp16, label %if.then17, label %if.end24

if.then17:                                        ; preds = %if.end14
  %len18 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %tc, i32 0, i32 1
  %30 = load i64, i64* %len18, align 8, !tbaa !18
  %cmp19 = icmp eq i64 %30, 0
  br i1 %cmp19, label %land.lhs.true, label %if.end23

land.lhs.true:                                    ; preds = %if.then17
  %len20 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %topic, i32 0, i32 1
  %31 = load i64, i64* %len20, align 8, !tbaa !18
  %cmp21 = icmp eq i64 %31, 0
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end23:                                         ; preds = %land.lhs.true, %if.then17
  br label %while.cond

if.end24:                                         ; preds = %if.end14
  %call25 = call i32 @mg_vcmp(%struct.mg_str* %ec, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31, i32 0, i32 0))
  %cmp26 = icmp eq i32 %call25, 0
  br i1 %cmp26, label %if.then27, label %if.end30

if.then27:                                        ; preds = %if.end24
  %len28 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %exp, i32 0, i32 1
  %32 = load i64, i64* %len28, align 8, !tbaa !18
  %cmp29 = icmp eq i64 %32, 0
  %conv = zext i1 %cmp29 to i32
  store i32 %conv, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end30:                                         ; preds = %if.end24
  %33 = bitcast %struct.mg_str* %ec to { i8*, i64 }*
  %34 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %33, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %33, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = bitcast %struct.mg_str* %tc to { i8*, i64 }*
  %39 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %38, i32 0, i32 0
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %38, i32 0, i32 1
  %42 = load i64, i64* %41, align 8
  %call31 = call i32 @mg_strcmp(i8* %35, i64 %37, i8* %40, i64 %42)
  %cmp32 = icmp ne i32 %call31, 0
  br i1 %cmp32, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.end30
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end35:                                         ; preds = %if.end30
  br label %while.cond

while.end:                                        ; preds = %if.then12
  %len36 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %tc, i32 0, i32 1
  %43 = load i64, i64* %len36, align 8, !tbaa !18
  %cmp37 = icmp eq i64 %43, 0
  br i1 %cmp37, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.end
  %len39 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %topic, i32 0, i32 1
  %44 = load i64, i64* %len39, align 8, !tbaa !18
  %cmp40 = icmp eq i64 %44, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.end
  %45 = phi i1 [ false, %while.end ], [ %cmp40, %land.rhs ]
  %land.ext = zext i1 %45 to i32
  store i32 %land.ext, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %land.end, %if.then34, %if.then27, %if.then22, %if.then8, %if.then
  %46 = bitcast %struct.mg_str* %tc to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %46) #5
  %47 = bitcast %struct.mg_str* %ec to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %47) #5
  %48 = load i32, i32* %retval, align 4
  ret i32 %48
}

; Function Attrs: nounwind ssp uwtable
define internal { i8*, i64 } @mg_mqtt_next_topic_component(%struct.mg_str* %topic) #0 {
entry:
  %retval = alloca %struct.mg_str, align 8
  %topic.addr = alloca %struct.mg_str*, align 8
  %c = alloca i8*, align 8
  store %struct.mg_str* %topic, %struct.mg_str** %topic.addr, align 8, !tbaa !3
  %0 = load %struct.mg_str*, %struct.mg_str** %topic.addr, align 8, !tbaa !3
  %1 = bitcast %struct.mg_str* %retval to i8*
  %2 = bitcast %struct.mg_str* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 16, i1 false), !tbaa.struct !19
  %3 = bitcast i8** %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  %4 = load %struct.mg_str*, %struct.mg_str** %topic.addr, align 8, !tbaa !3
  %5 = bitcast %struct.mg_str* %4 to { i8*, i64 }*
  %6 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  %call = call i8* @mg_strchr(i8* %7, i64 %9, i32 47)
  store i8* %call, i8** %c, align 8, !tbaa !3
  %10 = load i8*, i8** %c, align 8, !tbaa !3
  %cmp = icmp ne i8* %10, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %11 = load i8*, i8** %c, align 8, !tbaa !3
  %12 = load %struct.mg_str*, %struct.mg_str** %topic.addr, align 8, !tbaa !3
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %12, i32 0, i32 0
  %13 = load i8*, i8** %p, align 8, !tbaa !16
  %sub.ptr.lhs.cast = ptrtoint i8* %11 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %13 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %retval, i32 0, i32 1
  store i64 %sub.ptr.sub, i64* %len, align 8, !tbaa !18
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %retval, i32 0, i32 1
  %14 = load i64, i64* %len1, align 8, !tbaa !18
  %add = add i64 %14, 1
  %15 = load %struct.mg_str*, %struct.mg_str** %topic.addr, align 8, !tbaa !3
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %15, i32 0, i32 1
  %16 = load i64, i64* %len2, align 8, !tbaa !18
  %sub = sub i64 %16, %add
  store i64 %sub, i64* %len2, align 8, !tbaa !18
  %len3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %retval, i32 0, i32 1
  %17 = load i64, i64* %len3, align 8, !tbaa !18
  %add4 = add i64 %17, 1
  %18 = load %struct.mg_str*, %struct.mg_str** %topic.addr, align 8, !tbaa !3
  %p5 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %18, i32 0, i32 0
  %19 = load i8*, i8** %p5, align 8, !tbaa !16
  %add.ptr = getelementptr inbounds i8, i8* %19, i64 %add4
  store i8* %add.ptr, i8** %p5, align 8, !tbaa !16
  br label %if.end

if.else:                                          ; preds = %entry
  %20 = load %struct.mg_str*, %struct.mg_str** %topic.addr, align 8, !tbaa !3
  %len6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %20, i32 0, i32 1
  store i64 0, i64* %len6, align 8, !tbaa !18
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %21 = bitcast i8** %c to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %21) #5
  %22 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %23 = load { i8*, i64 }, { i8*, i64 }* %22, align 8
  ret { i8*, i64 } %23
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_mqtt_vmatch_topic_expression(i8* %exp, i8* %topic.coerce0, i64 %topic.coerce1) #0 {
entry:
  %topic = alloca %struct.mg_str, align 8
  %exp.addr = alloca i8*, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  %0 = bitcast %struct.mg_str* %topic to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %topic.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %topic.coerce1, i64* %2, align 8
  store i8* %exp, i8** %exp.addr, align 8, !tbaa !3
  %3 = load i8*, i8** %exp.addr, align 8, !tbaa !3
  %call = call { i8*, i64 } @mg_mk_str(i8* %3)
  %4 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %4, i32 0, i32 0
  %6 = extractvalue { i8*, i64 } %call, 0
  store i8* %6, i8** %5, align 8
  %7 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %4, i32 0, i32 1
  %8 = extractvalue { i8*, i64 } %call, 1
  store i64 %8, i64* %7, align 8
  %9 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %10 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %9, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %9, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %struct.mg_str* %topic to { i8*, i64 }*
  %15 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  %call1 = call i32 @mg_mqtt_match_topic_expression(i8* %11, i64 %13, i8* %16, i64 %18)
  ret i32 %call1
}

; Function Attrs: nounwind ssp uwtable
define void @mg_set_protocol_mqtt(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %proto_handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 12
  store void (%struct.mg_connection*, i32, i8*)* @mqtt_handler, void (%struct.mg_connection*, i32, i8*)** %proto_handler, align 8, !tbaa !52
  %call = call i8* @calloc(i64 1, i64 16) #20
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %proto_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 13
  store i8* %call, i8** %proto_data, align 8, !tbaa !59
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %proto_data_destructor = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %2, i32 0, i32 14
  store void (i8*)* @mg_mqtt_proto_data_destructor, void (i8*)** %proto_data_destructor, align 8, !tbaa !60
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @mqtt_handler(%struct.mg_connection* %nc, i32 %ev, i8* %ev_data) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %ev.addr = alloca i32, align 4
  %ev_data.addr = alloca i8*, align 8
  %io = alloca %struct.mbuf*, align 8
  %mm = alloca %struct.mg_mqtt_message, align 8
  %len = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %pd = alloca %struct.mg_mqtt_proto_data*, align 8
  %now = alloca double, align 8
  %diff = alloca double, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i32 %ev, i32* %ev.addr, align 4, !tbaa !15
  store i8* %ev_data, i8** %ev_data.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mbuf** %io to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 8
  store %struct.mbuf* %recv_mbuf, %struct.mbuf** %io, align 8, !tbaa !3
  %2 = bitcast %struct.mg_mqtt_message* %mm to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* %2) #5
  %3 = bitcast %struct.mg_mqtt_message* %mm to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 152, i1 false)
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 15
  %5 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler, align 8, !tbaa !53
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %7 = load i32, i32* %ev.addr, align 4, !tbaa !15
  %8 = load i8*, i8** %ev_data.addr, align 8, !tbaa !3
  call void %5(%struct.mg_connection* %6, i32 %7, i8* %8)
  %9 = load i32, i32* %ev.addr, align 4, !tbaa !15
  switch i32 %9, label %sw.epilog [
    i32 1, label %sw.bb
    i32 3, label %sw.bb1
    i32 0, label %sw.bb49
  ]

sw.bb:                                            ; preds = %entry
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %proto_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 13
  %11 = load i8*, i8** %proto_data, align 8, !tbaa !59
  %cmp = icmp eq i8* %11, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_set_protocol_mqtt(%struct.mg_connection* %12)
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont, %sw.bb1
  br label %while.body

while.body:                                       ; preds = %while.cond
  %13 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %13) #5
  %14 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %call = call i32 @parse_mqtt(%struct.mbuf* %14, %struct.mg_mqtt_message* %mm)
  store i32 %call, i32* %len, align 4, !tbaa !15
  %15 = load i32, i32* %len, align 4, !tbaa !15
  %cmp2 = icmp slt i32 %15, 0
  br i1 %cmp2, label %if.then3, label %if.end35

if.then3:                                         ; preds = %while.body
  %16 = load i32, i32* %len, align 4, !tbaa !15
  %cmp4 = icmp eq i32 %16, -2
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then3
  %17 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %17, i32 0, i32 21
  %18 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %18, 2048
  store i64 %or, i64* %flags, align 8, !tbaa !41
  br label %if.end34

if.else:                                          ; preds = %if.then3
  %19 = load i32, i32* %len, align 4, !tbaa !15
  %cmp6 = icmp eq i32 %19, -1
  br i1 %cmp6, label %if.then7, label %if.else23

if.then7:                                         ; preds = %if.else
  %20 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf_limit = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %20, i32 0, i32 7
  %21 = load i64, i64* %recv_mbuf_limit, align 8, !tbaa !79
  %cmp8 = icmp ugt i64 %21, 0
  br i1 %cmp8, label %land.lhs.true, label %if.end22

land.lhs.true:                                    ; preds = %if.then7
  %22 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf9 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %22, i32 0, i32 8
  %len10 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf9, i32 0, i32 1
  %23 = load i64, i64* %len10, align 8, !tbaa !54
  %24 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf_limit11 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %24, i32 0, i32 7
  %25 = load i64, i64* %recv_mbuf_limit11, align 8, !tbaa !79
  %cmp12 = icmp uge i64 %23, %25
  br i1 %cmp12, label %if.then13, label %if.end22

if.then13:                                        ; preds = %land.lhs.true
  br label %do.body

do.body:                                          ; preds = %if.then13
  %call14 = call i32 @cs_log_print_prefix(i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 10846)
  %tobool = icmp ne i32 %call14, 0
  br i1 %tobool, label %if.then15, label %if.end19

if.then15:                                        ; preds = %do.body
  %26 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %27 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf16 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %27, i32 0, i32 8
  %len17 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf16, i32 0, i32 1
  %28 = load i64, i64* %len17, align 8, !tbaa !54
  %29 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf_limit18 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %29, i32 0, i32 7
  %30 = load i64, i64* %recv_mbuf_limit18, align 8, !tbaa !79
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i32 0, i32 0), %struct.mg_connection* %26, i64 %28, i64 %30)
  br label %if.end19

if.end19:                                         ; preds = %if.then15, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end19
  br label %do.end

do.end:                                           ; preds = %do.cond
  %31 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags20 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %31, i32 0, i32 21
  %32 = load i64, i64* %flags20, align 8, !tbaa !41
  %or21 = or i64 %32, 2048
  store i64 %or21, i64* %flags20, align 8, !tbaa !41
  br label %if.end22

if.end22:                                         ; preds = %do.end, %land.lhs.true, %if.then7
  br label %if.end33

if.else23:                                        ; preds = %if.else
  br label %do.body24

do.body24:                                        ; preds = %if.else23
  %call25 = call i32 @cs_log_print_prefix(i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 10851)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %do.body24
  %33 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %34 = load i32, i32* %len, align 4, !tbaa !15
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.403, i32 0, i32 0), %struct.mg_connection* %33, i32 %34)
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %do.body24
  br label %do.cond29

do.cond29:                                        ; preds = %if.end28
  br label %do.end30

do.end30:                                         ; preds = %do.cond29
  %35 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags31 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %35, i32 0, i32 21
  %36 = load i64, i64* %flags31, align 8, !tbaa !41
  %or32 = or i64 %36, 2048
  store i64 %or32, i64* %flags31, align 8, !tbaa !41
  br label %if.end33

if.end33:                                         ; preds = %do.end30, %if.end22
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.then5
  store i32 4, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end35:                                         ; preds = %while.body
  %cmd = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %mm, i32 0, i32 0
  %37 = load i32, i32* %cmd, align 8, !tbaa !195
  %cmp36 = icmp eq i32 %37, 13
  br i1 %cmp36, label %if.then37, label %if.end46

if.then37:                                        ; preds = %if.end35
  br label %do.body38

do.body38:                                        ; preds = %if.then37
  %call39 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 10857)
  %tobool40 = icmp ne i32 %call39, 0
  br i1 %tobool40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %do.body38
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.404, i32 0, i32 0))
  br label %if.end42

if.end42:                                         ; preds = %if.then41, %do.body38
  br label %do.cond43

do.cond43:                                        ; preds = %if.end42
  br label %do.end44

do.end44:                                         ; preds = %do.cond43
  %38 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags45 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %38, i32 0, i32 21
  %39 = load i64, i64* %flags45, align 8, !tbaa !41
  %and = and i64 %39, -4097
  store i64 %and, i64* %flags45, align 8, !tbaa !41
  br label %if.end46

if.end46:                                         ; preds = %do.end44, %if.end35
  %40 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %handler47 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %40, i32 0, i32 15
  %41 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler47, align 8, !tbaa !53
  %42 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %cmd48 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %mm, i32 0, i32 0
  %43 = load i32, i32* %cmd48, align 8, !tbaa !195
  %add = add nsw i32 200, %43
  %44 = bitcast %struct.mg_mqtt_message* %mm to i8*
  call void %41(%struct.mg_connection* %42, i32 %add, i8* %44)
  %45 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %46 = load i32, i32* %len, align 4, !tbaa !15
  %conv = sext i32 %46 to i64
  call void @mbuf_remove(%struct.mbuf* %45, i64 %conv)
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end46, %if.end34
  %47 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %47) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 4, label %while.end
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %while.cond

while.end:                                        ; preds = %cleanup
  br label %sw.epilog

sw.bb49:                                          ; preds = %entry
  %48 = bitcast %struct.mg_mqtt_proto_data** %pd to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %48) #5
  %49 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %proto_data50 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %49, i32 0, i32 13
  %50 = load i8*, i8** %proto_data50, align 8, !tbaa !59
  %51 = bitcast i8* %50 to %struct.mg_mqtt_proto_data*
  store %struct.mg_mqtt_proto_data* %51, %struct.mg_mqtt_proto_data** %pd, align 8, !tbaa !3
  %52 = bitcast double* %now to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %52) #5
  %call51 = call double @mg_time()
  store double %call51, double* %now, align 8, !tbaa !26
  %53 = load %struct.mg_mqtt_proto_data*, %struct.mg_mqtt_proto_data** %pd, align 8, !tbaa !3
  %keep_alive = getelementptr inbounds %struct.mg_mqtt_proto_data, %struct.mg_mqtt_proto_data* %53, i32 0, i32 0
  %54 = load i16, i16* %keep_alive, align 8, !tbaa !197
  %conv52 = zext i16 %54 to i32
  %cmp53 = icmp sgt i32 %conv52, 0
  br i1 %cmp53, label %land.lhs.true55, label %if.end101

land.lhs.true55:                                  ; preds = %sw.bb49
  %55 = load %struct.mg_mqtt_proto_data*, %struct.mg_mqtt_proto_data** %pd, align 8, !tbaa !3
  %last_control_time = getelementptr inbounds %struct.mg_mqtt_proto_data, %struct.mg_mqtt_proto_data* %55, i32 0, i32 1
  %56 = load double, double* %last_control_time, align 8, !tbaa !199
  %cmp56 = fcmp ogt double %56, 0.000000e+00
  br i1 %cmp56, label %if.then58, label %if.end101

if.then58:                                        ; preds = %land.lhs.true55
  %57 = bitcast double* %diff to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %57) #5
  %58 = load double, double* %now, align 8, !tbaa !26
  %59 = load %struct.mg_mqtt_proto_data*, %struct.mg_mqtt_proto_data** %pd, align 8, !tbaa !3
  %last_control_time59 = getelementptr inbounds %struct.mg_mqtt_proto_data, %struct.mg_mqtt_proto_data* %59, i32 0, i32 1
  %60 = load double, double* %last_control_time59, align 8, !tbaa !199
  %sub = fsub double %58, %60
  store double %sub, double* %diff, align 8, !tbaa !26
  %61 = load double, double* %diff, align 8, !tbaa !26
  %62 = load %struct.mg_mqtt_proto_data*, %struct.mg_mqtt_proto_data** %pd, align 8, !tbaa !3
  %keep_alive60 = getelementptr inbounds %struct.mg_mqtt_proto_data, %struct.mg_mqtt_proto_data* %62, i32 0, i32 0
  %63 = load i16, i16* %keep_alive60, align 8, !tbaa !197
  %conv61 = zext i16 %63 to i32
  %conv62 = sitofp i32 %conv61 to double
  %cmp63 = fcmp ogt double %61, %conv62
  br i1 %cmp63, label %if.then65, label %if.end100

if.then65:                                        ; preds = %if.then58
  %64 = load double, double* %diff, align 8, !tbaa !26
  %cmp66 = fcmp olt double %64, 1.500000e+09
  br i1 %cmp66, label %if.then68, label %if.else93

if.then68:                                        ; preds = %if.then65
  %65 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags69 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %65, i32 0, i32 21
  %66 = load i64, i64* %flags69, align 8, !tbaa !41
  %and70 = and i64 %66, 4096
  %tobool71 = icmp ne i64 %and70, 0
  br i1 %tobool71, label %if.else82, label %if.then72

if.then72:                                        ; preds = %if.then68
  br label %do.body73

do.body73:                                        ; preds = %if.then72
  %call74 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 10875)
  %tobool75 = icmp ne i32 %call74, 0
  br i1 %tobool75, label %if.then76, label %if.end77

if.then76:                                        ; preds = %do.body73
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.405, i32 0, i32 0))
  br label %if.end77

if.end77:                                         ; preds = %if.then76, %do.body73
  br label %do.cond78

do.cond78:                                        ; preds = %if.end77
  br label %do.end79

do.end79:                                         ; preds = %do.cond78
  %67 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags80 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %67, i32 0, i32 21
  %68 = load i64, i64* %flags80, align 8, !tbaa !41
  %or81 = or i64 %68, 4096
  store i64 %or81, i64* %flags80, align 8, !tbaa !41
  %69 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_mqtt_ping(%struct.mg_connection* %69)
  br label %if.end92

if.else82:                                        ; preds = %if.then68
  br label %do.body83

do.body83:                                        ; preds = %if.else82
  %call84 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 10879)
  %tobool85 = icmp ne i32 %call84, 0
  br i1 %tobool85, label %if.then86, label %if.end87

if.then86:                                        ; preds = %do.body83
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.406, i32 0, i32 0))
  br label %if.end87

if.end87:                                         ; preds = %if.then86, %do.body83
  br label %do.cond88

do.cond88:                                        ; preds = %if.end87
  br label %do.end89

do.end89:                                         ; preds = %do.cond88
  %70 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags90 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %70, i32 0, i32 21
  %71 = load i64, i64* %flags90, align 8, !tbaa !41
  %or91 = or i64 %71, 2048
  store i64 %or91, i64* %flags90, align 8, !tbaa !41
  br label %if.end92

if.end92:                                         ; preds = %do.end89, %do.end79
  br label %if.end99

if.else93:                                        ; preds = %if.then65
  %72 = load double, double* %now, align 8, !tbaa !26
  %73 = load %struct.mg_mqtt_proto_data*, %struct.mg_mqtt_proto_data** %pd, align 8, !tbaa !3
  %keep_alive94 = getelementptr inbounds %struct.mg_mqtt_proto_data, %struct.mg_mqtt_proto_data* %73, i32 0, i32 0
  %74 = load i16, i16* %keep_alive94, align 8, !tbaa !197
  %conv95 = zext i16 %74 to i32
  %conv96 = sitofp i32 %conv95 to double
  %mul = fmul double %conv96, 6.000000e-01
  %sub97 = fsub double %72, %mul
  %75 = load %struct.mg_mqtt_proto_data*, %struct.mg_mqtt_proto_data** %pd, align 8, !tbaa !3
  %last_control_time98 = getelementptr inbounds %struct.mg_mqtt_proto_data, %struct.mg_mqtt_proto_data* %75, i32 0, i32 1
  store double %sub97, double* %last_control_time98, align 8, !tbaa !199
  br label %if.end99

if.end99:                                         ; preds = %if.else93, %if.end92
  br label %if.end100

if.end100:                                        ; preds = %if.end99, %if.then58
  %76 = bitcast double* %diff to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %76) #5
  br label %if.end101

if.end101:                                        ; preds = %if.end100, %land.lhs.true55, %sw.bb49
  store i32 2, i32* %cleanup.dest.slot, align 4
  %77 = bitcast double* %now to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %77) #5
  %78 = bitcast %struct.mg_mqtt_proto_data** %pd to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %78) #5
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %if.end101, %while.end, %if.end
  %79 = bitcast %struct.mg_mqtt_message* %mm to i8*
  call void @llvm.lifetime.end.p0i8(i64 152, i8* %79) #5
  %80 = bitcast %struct.mbuf** %io to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %80) #5
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_mqtt_proto_data_destructor(i8* %proto_data) #0 {
entry:
  %proto_data.addr = alloca i8*, align 8
  store i8* %proto_data, i8** %proto_data.addr, align 8, !tbaa !3
  %0 = load i8*, i8** %proto_data.addr, align 8, !tbaa !3
  call void @free(i8* %0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_send_mqtt_handshake(%struct.mg_connection* %nc, i8* %client_id) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %client_id.addr = alloca i8*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %client_id, i8** %client_id.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %1 = load i8*, i8** %client_id.addr, align 8, !tbaa !3
  call void @mg_send_mqtt_handshake_opt(%struct.mg_connection* %0, i8* %1, %struct.mg_send_mqtt_handshake_opts* byval align 8 @mg_send_mqtt_handshake.opts)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_send_mqtt_handshake_opt(%struct.mg_connection* %nc, i8* %client_id, %struct.mg_send_mqtt_handshake_opts* byval align 8 %opts) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %client_id.addr = alloca i8*, align 8
  %pd = alloca %struct.mg_mqtt_proto_data*, align 8
  %id_len = alloca i16, align 2
  %wt_len = alloca i16, align 2
  %wm_len = alloca i16, align 2
  %user_len = alloca i16, align 2
  %pw_len = alloca i16, align 2
  %netbytes = alloca i16, align 2
  %total_len = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %client_id, i8** %client_id.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_mqtt_proto_data** %pd to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %proto_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 13
  %2 = load i8*, i8** %proto_data, align 8, !tbaa !59
  %3 = bitcast i8* %2 to %struct.mg_mqtt_proto_data*
  store %struct.mg_mqtt_proto_data* %3, %struct.mg_mqtt_proto_data** %pd, align 8, !tbaa !3
  %4 = bitcast i16* %id_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %4) #5
  store i16 0, i16* %id_len, align 2, !tbaa !86
  %5 = bitcast i16* %wt_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %5) #5
  store i16 0, i16* %wt_len, align 2, !tbaa !86
  %6 = bitcast i16* %wm_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %6) #5
  store i16 0, i16* %wm_len, align 2, !tbaa !86
  %7 = bitcast i16* %user_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %7) #5
  store i16 0, i16* %user_len, align 2, !tbaa !86
  %8 = bitcast i16* %pw_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %8) #5
  store i16 0, i16* %pw_len, align 2, !tbaa !86
  %9 = bitcast i16* %netbytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %9) #5
  %10 = bitcast i64* %total_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #5
  %11 = load i8*, i8** %client_id.addr, align 8, !tbaa !3
  %cmp = icmp ne i8* %11, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %12 = load i8*, i8** %client_id.addr, align 8, !tbaa !3
  %call = call i64 @strlen(i8* %12)
  %conv = trunc i64 %call to i16
  store i16 %conv, i16* %id_len, align 2, !tbaa !86
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load i16, i16* %id_len, align 2, !tbaa !86
  %conv1 = zext i16 %13 to i32
  %add = add nsw i32 12, %conv1
  %conv2 = sext i32 %add to i64
  store i64 %conv2, i64* %total_len, align 8, !tbaa !12
  %user_name = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 4
  %14 = load i8*, i8** %user_name, align 8, !tbaa !200
  %cmp3 = icmp ne i8* %14, null
  br i1 %cmp3, label %if.then5, label %if.end8

if.then5:                                         ; preds = %if.end
  %flags = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 0
  %15 = load i8, i8* %flags, align 8, !tbaa !202
  %conv6 = zext i8 %15 to i32
  %or = or i32 %conv6, 128
  %conv7 = trunc i32 %or to i8
  store i8 %conv7, i8* %flags, align 8, !tbaa !202
  br label %if.end8

if.end8:                                          ; preds = %if.then5, %if.end
  %password = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 5
  %16 = load i8*, i8** %password, align 8, !tbaa !203
  %cmp9 = icmp ne i8* %16, null
  br i1 %cmp9, label %if.then11, label %if.end16

if.then11:                                        ; preds = %if.end8
  %flags12 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 0
  %17 = load i8, i8* %flags12, align 8, !tbaa !202
  %conv13 = zext i8 %17 to i32
  %or14 = or i32 %conv13, 64
  %conv15 = trunc i32 %or14 to i8
  store i8 %conv15, i8* %flags12, align 8, !tbaa !202
  br label %if.end16

if.end16:                                         ; preds = %if.then11, %if.end8
  %will_topic = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 2
  %18 = load i8*, i8** %will_topic, align 8, !tbaa !204
  %cmp17 = icmp ne i8* %18, null
  br i1 %cmp17, label %land.lhs.true, label %if.end32

land.lhs.true:                                    ; preds = %if.end16
  %will_message = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 3
  %19 = load i8*, i8** %will_message, align 8, !tbaa !205
  %cmp19 = icmp ne i8* %19, null
  br i1 %cmp19, label %if.then21, label %if.end32

if.then21:                                        ; preds = %land.lhs.true
  %will_topic22 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 2
  %20 = load i8*, i8** %will_topic22, align 8, !tbaa !204
  %call23 = call i64 @strlen(i8* %20)
  %conv24 = trunc i64 %call23 to i16
  store i16 %conv24, i16* %wt_len, align 2, !tbaa !86
  %will_message25 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 3
  %21 = load i8*, i8** %will_message25, align 8, !tbaa !205
  %call26 = call i64 @strlen(i8* %21)
  %conv27 = trunc i64 %call26 to i16
  store i16 %conv27, i16* %wm_len, align 2, !tbaa !86
  %flags28 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 0
  %22 = load i8, i8* %flags28, align 8, !tbaa !202
  %conv29 = zext i8 %22 to i32
  %or30 = or i32 %conv29, 4
  %conv31 = trunc i32 %or30 to i8
  store i8 %conv31, i8* %flags28, align 8, !tbaa !202
  br label %if.end32

if.end32:                                         ; preds = %if.then21, %land.lhs.true, %if.end16
  %keep_alive = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 1
  %23 = load i16, i16* %keep_alive, align 2, !tbaa !206
  %conv33 = zext i16 %23 to i32
  %cmp34 = icmp eq i32 %conv33, 0
  br i1 %cmp34, label %if.then36, label %if.end38

if.then36:                                        ; preds = %if.end32
  %keep_alive37 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 1
  store i16 60, i16* %keep_alive37, align 2, !tbaa !206
  br label %if.end38

if.end38:                                         ; preds = %if.then36, %if.end32
  %flags39 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 0
  %24 = load i8, i8* %flags39, align 8, !tbaa !202
  %conv40 = zext i8 %24 to i32
  %and = and i32 %conv40, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then41, label %if.end49

if.then41:                                        ; preds = %if.end38
  %25 = load i16, i16* %wt_len, align 2, !tbaa !86
  %conv42 = zext i16 %25 to i32
  %add43 = add nsw i32 2, %conv42
  %add44 = add nsw i32 %add43, 2
  %26 = load i16, i16* %wm_len, align 2, !tbaa !86
  %conv45 = zext i16 %26 to i32
  %add46 = add nsw i32 %add44, %conv45
  %conv47 = sext i32 %add46 to i64
  %27 = load i64, i64* %total_len, align 8, !tbaa !12
  %add48 = add i64 %27, %conv47
  store i64 %add48, i64* %total_len, align 8, !tbaa !12
  br label %if.end49

if.end49:                                         ; preds = %if.then41, %if.end38
  %flags50 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 0
  %28 = load i8, i8* %flags50, align 8, !tbaa !202
  %conv51 = zext i8 %28 to i32
  %and52 = and i32 %conv51, 128
  %tobool53 = icmp ne i32 %and52, 0
  br i1 %tobool53, label %if.then54, label %if.end62

if.then54:                                        ; preds = %if.end49
  %user_name55 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 4
  %29 = load i8*, i8** %user_name55, align 8, !tbaa !200
  %call56 = call i64 @strlen(i8* %29)
  %conv57 = trunc i64 %call56 to i16
  store i16 %conv57, i16* %user_len, align 2, !tbaa !86
  %30 = load i16, i16* %user_len, align 2, !tbaa !86
  %conv58 = zext i16 %30 to i32
  %add59 = add nsw i32 2, %conv58
  %conv60 = sext i32 %add59 to i64
  %31 = load i64, i64* %total_len, align 8, !tbaa !12
  %add61 = add i64 %31, %conv60
  store i64 %add61, i64* %total_len, align 8, !tbaa !12
  br label %if.end62

if.end62:                                         ; preds = %if.then54, %if.end49
  %flags63 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 0
  %32 = load i8, i8* %flags63, align 8, !tbaa !202
  %conv64 = zext i8 %32 to i32
  %and65 = and i32 %conv64, 64
  %tobool66 = icmp ne i32 %and65, 0
  br i1 %tobool66, label %if.then67, label %if.end75

if.then67:                                        ; preds = %if.end62
  %password68 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 5
  %33 = load i8*, i8** %password68, align 8, !tbaa !203
  %call69 = call i64 @strlen(i8* %33)
  %conv70 = trunc i64 %call69 to i16
  store i16 %conv70, i16* %pw_len, align 2, !tbaa !86
  %34 = load i16, i16* %pw_len, align 2, !tbaa !86
  %conv71 = zext i16 %34 to i32
  %add72 = add nsw i32 2, %conv71
  %conv73 = sext i32 %add72 to i64
  %35 = load i64, i64* %total_len, align 8, !tbaa !12
  %add74 = add i64 %35, %conv73
  store i64 %add74, i64* %total_len, align 8, !tbaa !12
  br label %if.end75

if.end75:                                         ; preds = %if.then67, %if.end62
  %36 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %37 = load i64, i64* %total_len, align 8, !tbaa !12
  call void @mg_send_mqtt_header(%struct.mg_connection* %36, i8 zeroext 1, i8 zeroext 0, i64 %37)
  %38 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_send(%struct.mg_connection* %38, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.159, i32 0, i32 0), i32 7)
  %39 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags76 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 0
  call void @mg_send(%struct.mg_connection* %39, i8* %flags76, i32 1)
  %keep_alive77 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 1
  %40 = load i16, i16* %keep_alive77, align 2, !tbaa !206
  %call78 = call zeroext i16 @_OSSwapInt16(i16 zeroext %40)
  %conv79 = zext i16 %call78 to i32
  %conv80 = trunc i32 %conv79 to i16
  store i16 %conv80, i16* %netbytes, align 2, !tbaa !86
  %41 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %42 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %41, i8* %42, i32 2)
  %43 = load i16, i16* %id_len, align 2, !tbaa !86
  %call81 = call zeroext i16 @_OSSwapInt16(i16 zeroext %43)
  %conv82 = zext i16 %call81 to i32
  %conv83 = trunc i32 %conv82 to i16
  store i16 %conv83, i16* %netbytes, align 2, !tbaa !86
  %44 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %45 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %44, i8* %45, i32 2)
  %46 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %47 = load i8*, i8** %client_id.addr, align 8, !tbaa !3
  %48 = load i16, i16* %id_len, align 2, !tbaa !86
  %conv84 = zext i16 %48 to i32
  call void @mg_send(%struct.mg_connection* %46, i8* %47, i32 %conv84)
  %flags85 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 0
  %49 = load i8, i8* %flags85, align 8, !tbaa !202
  %conv86 = zext i8 %49 to i32
  %and87 = and i32 %conv86, 4
  %tobool88 = icmp ne i32 %and87, 0
  br i1 %tobool88, label %if.then89, label %if.end100

if.then89:                                        ; preds = %if.end75
  %50 = load i16, i16* %wt_len, align 2, !tbaa !86
  %call90 = call zeroext i16 @_OSSwapInt16(i16 zeroext %50)
  %conv91 = zext i16 %call90 to i32
  %conv92 = trunc i32 %conv91 to i16
  store i16 %conv92, i16* %netbytes, align 2, !tbaa !86
  %51 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %52 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %51, i8* %52, i32 2)
  %53 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %will_topic93 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 2
  %54 = load i8*, i8** %will_topic93, align 8, !tbaa !204
  %55 = load i16, i16* %wt_len, align 2, !tbaa !86
  %conv94 = zext i16 %55 to i32
  call void @mg_send(%struct.mg_connection* %53, i8* %54, i32 %conv94)
  %56 = load i16, i16* %wm_len, align 2, !tbaa !86
  %call95 = call zeroext i16 @_OSSwapInt16(i16 zeroext %56)
  %conv96 = zext i16 %call95 to i32
  %conv97 = trunc i32 %conv96 to i16
  store i16 %conv97, i16* %netbytes, align 2, !tbaa !86
  %57 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %58 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %57, i8* %58, i32 2)
  %59 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %will_message98 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 3
  %60 = load i8*, i8** %will_message98, align 8, !tbaa !205
  %61 = load i16, i16* %wm_len, align 2, !tbaa !86
  %conv99 = zext i16 %61 to i32
  call void @mg_send(%struct.mg_connection* %59, i8* %60, i32 %conv99)
  br label %if.end100

if.end100:                                        ; preds = %if.then89, %if.end75
  %flags101 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 0
  %62 = load i8, i8* %flags101, align 8, !tbaa !202
  %conv102 = zext i8 %62 to i32
  %and103 = and i32 %conv102, 128
  %tobool104 = icmp ne i32 %and103, 0
  br i1 %tobool104, label %if.then105, label %if.end111

if.then105:                                       ; preds = %if.end100
  %63 = load i16, i16* %user_len, align 2, !tbaa !86
  %call106 = call zeroext i16 @_OSSwapInt16(i16 zeroext %63)
  %conv107 = zext i16 %call106 to i32
  %conv108 = trunc i32 %conv107 to i16
  store i16 %conv108, i16* %netbytes, align 2, !tbaa !86
  %64 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %65 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %64, i8* %65, i32 2)
  %66 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %user_name109 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 4
  %67 = load i8*, i8** %user_name109, align 8, !tbaa !200
  %68 = load i16, i16* %user_len, align 2, !tbaa !86
  %conv110 = zext i16 %68 to i32
  call void @mg_send(%struct.mg_connection* %66, i8* %67, i32 %conv110)
  br label %if.end111

if.end111:                                        ; preds = %if.then105, %if.end100
  %flags112 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 0
  %69 = load i8, i8* %flags112, align 8, !tbaa !202
  %conv113 = zext i8 %69 to i32
  %and114 = and i32 %conv113, 64
  %tobool115 = icmp ne i32 %and114, 0
  br i1 %tobool115, label %if.then116, label %if.end122

if.then116:                                       ; preds = %if.end111
  %70 = load i16, i16* %pw_len, align 2, !tbaa !86
  %call117 = call zeroext i16 @_OSSwapInt16(i16 zeroext %70)
  %conv118 = zext i16 %call117 to i32
  %conv119 = trunc i32 %conv118 to i16
  store i16 %conv119, i16* %netbytes, align 2, !tbaa !86
  %71 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %72 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %71, i8* %72, i32 2)
  %73 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %password120 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 5
  %74 = load i8*, i8** %password120, align 8, !tbaa !203
  %75 = load i16, i16* %pw_len, align 2, !tbaa !86
  %conv121 = zext i16 %75 to i32
  call void @mg_send(%struct.mg_connection* %73, i8* %74, i32 %conv121)
  br label %if.end122

if.end122:                                        ; preds = %if.then116, %if.end111
  %76 = load %struct.mg_mqtt_proto_data*, %struct.mg_mqtt_proto_data** %pd, align 8, !tbaa !3
  %cmp123 = icmp ne %struct.mg_mqtt_proto_data* %76, null
  br i1 %cmp123, label %if.then125, label %if.end128

if.then125:                                       ; preds = %if.end122
  %keep_alive126 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 1
  %77 = load i16, i16* %keep_alive126, align 2, !tbaa !206
  %78 = load %struct.mg_mqtt_proto_data*, %struct.mg_mqtt_proto_data** %pd, align 8, !tbaa !3
  %keep_alive127 = getelementptr inbounds %struct.mg_mqtt_proto_data, %struct.mg_mqtt_proto_data* %78, i32 0, i32 0
  store i16 %77, i16* %keep_alive127, align 8, !tbaa !197
  br label %if.end128

if.end128:                                        ; preds = %if.then125, %if.end122
  %79 = bitcast i64* %total_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %79) #5
  %80 = bitcast i16* %netbytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %80) #5
  %81 = bitcast i16* %pw_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %81) #5
  %82 = bitcast i16* %user_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %82) #5
  %83 = bitcast i16* %wm_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %83) #5
  %84 = bitcast i16* %wt_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %84) #5
  %85 = bitcast i16* %id_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %85) #5
  %86 = bitcast %struct.mg_mqtt_proto_data** %pd to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %86) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_send_mqtt_header(%struct.mg_connection* %nc, i8 zeroext %cmd, i8 zeroext %flags, i64 %len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %cmd.addr = alloca i8, align 1
  %flags.addr = alloca i8, align 1
  %len.addr = alloca i64, align 8
  %pd = alloca %struct.mg_mqtt_proto_data*, align 8
  %buf = alloca [9 x i8], align 1
  %vlen = alloca i8*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8 %cmd, i8* %cmd.addr, align 1, !tbaa !14
  store i8 %flags, i8* %flags.addr, align 1, !tbaa !14
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  %0 = bitcast %struct.mg_mqtt_proto_data** %pd to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %proto_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 13
  %2 = load i8*, i8** %proto_data, align 8, !tbaa !59
  %3 = bitcast i8* %2 to %struct.mg_mqtt_proto_data*
  store %struct.mg_mqtt_proto_data* %3, %struct.mg_mqtt_proto_data** %pd, align 8, !tbaa !3
  %4 = bitcast [9 x i8]* %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 9, i8* %4) #5
  %5 = bitcast i8** %vlen to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #5
  %arrayidx = getelementptr inbounds [9 x i8], [9 x i8]* %buf, i64 0, i64 1
  store i8* %arrayidx, i8** %vlen, align 8, !tbaa !3
  %6 = load i8, i8* %cmd.addr, align 1, !tbaa !14
  %conv = zext i8 %6 to i32
  %shl = shl i32 %conv, 4
  %7 = load i8, i8* %flags.addr, align 1, !tbaa !14
  %conv1 = zext i8 %7 to i32
  %or = or i32 %shl, %conv1
  %conv2 = trunc i32 %or to i8
  %arrayidx3 = getelementptr inbounds [9 x i8], [9 x i8]* %buf, i64 0, i64 0
  store i8 %conv2, i8* %arrayidx3, align 1, !tbaa !14
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %8 = load i64, i64* %len.addr, align 8, !tbaa !12
  %rem = urem i64 %8, 128
  %conv4 = trunc i64 %rem to i8
  %9 = load i8*, i8** %vlen, align 8, !tbaa !3
  store i8 %conv4, i8* %9, align 1, !tbaa !14
  %10 = load i64, i64* %len.addr, align 8, !tbaa !12
  %div = udiv i64 %10, 128
  store i64 %div, i64* %len.addr, align 8, !tbaa !12
  %11 = load i64, i64* %len.addr, align 8, !tbaa !12
  %cmp = icmp ugt i64 %11, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %12 = load i8*, i8** %vlen, align 8, !tbaa !3
  %13 = load i8, i8* %12, align 1, !tbaa !14
  %conv6 = zext i8 %13 to i32
  %or7 = or i32 %conv6, 128
  %conv8 = trunc i32 %or7 to i8
  store i8 %conv8, i8* %12, align 1, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  %14 = load i8*, i8** %vlen, align 8, !tbaa !3
  %incdec.ptr = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %incdec.ptr, i8** %vlen, align 8, !tbaa !3
  br label %do.cond

do.cond:                                          ; preds = %if.end
  %15 = load i64, i64* %len.addr, align 8, !tbaa !12
  %cmp9 = icmp ugt i64 %15, 0
  br i1 %cmp9, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %16 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %arraydecay = getelementptr inbounds [9 x i8], [9 x i8]* %buf, i32 0, i32 0
  %17 = load i8*, i8** %vlen, align 8, !tbaa !3
  %arraydecay11 = getelementptr inbounds [9 x i8], [9 x i8]* %buf, i32 0, i32 0
  %sub.ptr.lhs.cast = ptrtoint i8* %17 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay11 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv12 = trunc i64 %sub.ptr.sub to i32
  call void @mg_send(%struct.mg_connection* %16, i8* %arraydecay, i32 %conv12)
  %call = call double @mg_time()
  %18 = load %struct.mg_mqtt_proto_data*, %struct.mg_mqtt_proto_data** %pd, align 8, !tbaa !3
  %last_control_time = getelementptr inbounds %struct.mg_mqtt_proto_data, %struct.mg_mqtt_proto_data* %18, i32 0, i32 1
  store double %call, double* %last_control_time, align 8, !tbaa !199
  %19 = bitcast i8** %vlen to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %19) #5
  %20 = bitcast [9 x i8]* %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 9, i8* %20) #5
  %21 = bitcast %struct.mg_mqtt_proto_data** %pd to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %21) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_mqtt_publish(%struct.mg_connection* %nc, i8* %topic, i16 zeroext %message_id, i32 %flags, i8* %data, i64 %len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %topic.addr = alloca i8*, align 8
  %message_id.addr = alloca i16, align 2
  %flags.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %netbytes = alloca i16, align 2
  %topic_len = alloca i16, align 2
  %total_len = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %topic, i8** %topic.addr, align 8, !tbaa !3
  store i16 %message_id, i16* %message_id.addr, align 2, !tbaa !86
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !15
  store i8* %data, i8** %data.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  %0 = bitcast i16* %netbytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %0) #5
  %1 = bitcast i16* %topic_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %1) #5
  %2 = load i8*, i8** %topic.addr, align 8, !tbaa !3
  %call = call i64 @strlen(i8* %2)
  %conv = trunc i64 %call to i16
  store i16 %conv, i16* %topic_len, align 2, !tbaa !86
  %3 = bitcast i64* %total_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  %4 = load i16, i16* %topic_len, align 2, !tbaa !86
  %conv1 = zext i16 %4 to i32
  %add = add nsw i32 2, %conv1
  %conv2 = sext i32 %add to i64
  %5 = load i64, i64* %len.addr, align 8, !tbaa !12
  %add3 = add i64 %conv2, %5
  store i64 %add3, i64* %total_len, align 8, !tbaa !12
  %6 = load i32, i32* %flags.addr, align 4, !tbaa !15
  %and = and i32 %6, 6
  %shr = ashr i32 %and, 1
  %cmp = icmp sgt i32 %shr, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load i64, i64* %total_len, align 8, !tbaa !12
  %add5 = add i64 %7, 2
  store i64 %add5, i64* %total_len, align 8, !tbaa !12
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %9 = load i32, i32* %flags.addr, align 4, !tbaa !15
  %conv6 = trunc i32 %9 to i8
  %10 = load i64, i64* %total_len, align 8, !tbaa !12
  call void @mg_send_mqtt_header(%struct.mg_connection* %8, i8 zeroext 3, i8 zeroext %conv6, i64 %10)
  %11 = load i16, i16* %topic_len, align 2, !tbaa !86
  %call7 = call zeroext i16 @_OSSwapInt16(i16 zeroext %11)
  %conv8 = zext i16 %call7 to i32
  %conv9 = trunc i32 %conv8 to i16
  store i16 %conv9, i16* %netbytes, align 2, !tbaa !86
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %13 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %12, i8* %13, i32 2)
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %15 = load i8*, i8** %topic.addr, align 8, !tbaa !3
  %16 = load i16, i16* %topic_len, align 2, !tbaa !86
  %conv10 = zext i16 %16 to i32
  call void @mg_send(%struct.mg_connection* %14, i8* %15, i32 %conv10)
  %17 = load i32, i32* %flags.addr, align 4, !tbaa !15
  %and11 = and i32 %17, 6
  %shr12 = ashr i32 %and11, 1
  %cmp13 = icmp sgt i32 %shr12, 0
  br i1 %cmp13, label %if.then15, label %if.end19

if.then15:                                        ; preds = %if.end
  %18 = load i16, i16* %message_id.addr, align 2, !tbaa !86
  %call16 = call zeroext i16 @_OSSwapInt16(i16 zeroext %18)
  %conv17 = zext i16 %call16 to i32
  %conv18 = trunc i32 %conv17 to i16
  store i16 %conv18, i16* %netbytes, align 2, !tbaa !86
  %19 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %20 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %19, i8* %20, i32 2)
  br label %if.end19

if.end19:                                         ; preds = %if.then15, %if.end
  %21 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %22 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %23 = load i64, i64* %len.addr, align 8, !tbaa !12
  %conv20 = trunc i64 %23 to i32
  call void @mg_send(%struct.mg_connection* %21, i8* %22, i32 %conv20)
  %24 = bitcast i64* %total_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %24) #5
  %25 = bitcast i16* %topic_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %25) #5
  %26 = bitcast i16* %netbytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %26) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_mqtt_subscribe(%struct.mg_connection* %nc, %struct.mg_mqtt_topic_expression* %topics, i64 %topics_len, i16 zeroext %message_id) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %topics.addr = alloca %struct.mg_mqtt_topic_expression*, align 8
  %topics_len.addr = alloca i64, align 8
  %message_id.addr = alloca i16, align 2
  %netbytes = alloca i16, align 2
  %i = alloca i64, align 8
  %topic_len = alloca i16, align 2
  %total_len = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store %struct.mg_mqtt_topic_expression* %topics, %struct.mg_mqtt_topic_expression** %topics.addr, align 8, !tbaa !3
  store i64 %topics_len, i64* %topics_len.addr, align 8, !tbaa !12
  store i16 %message_id, i16* %message_id.addr, align 2, !tbaa !86
  %0 = bitcast i16* %netbytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %0) #5
  %1 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %2 = bitcast i16* %topic_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %2) #5
  %3 = bitcast i64* %total_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  store i64 2, i64* %total_len, align 8, !tbaa !12
  store i64 0, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i64, i64* %i, align 8, !tbaa !12
  %5 = load i64, i64* %topics_len.addr, align 8, !tbaa !12
  %cmp = icmp ult i64 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.mg_mqtt_topic_expression*, %struct.mg_mqtt_topic_expression** %topics.addr, align 8, !tbaa !3
  %7 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx = getelementptr inbounds %struct.mg_mqtt_topic_expression, %struct.mg_mqtt_topic_expression* %6, i64 %7
  %topic = getelementptr inbounds %struct.mg_mqtt_topic_expression, %struct.mg_mqtt_topic_expression* %arrayidx, i32 0, i32 0
  %8 = load i8*, i8** %topic, align 8, !tbaa !207
  %call = call i64 @strlen(i8* %8)
  %add = add i64 2, %call
  %add1 = add i64 %add, 1
  %9 = load i64, i64* %total_len, align 8, !tbaa !12
  %add2 = add i64 %9, %add1
  store i64 %add2, i64* %total_len, align 8, !tbaa !12
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i64, i64* %i, align 8, !tbaa !12
  %inc = add i64 %10, 1
  store i64 %inc, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %12 = load i64, i64* %total_len, align 8, !tbaa !12
  call void @mg_send_mqtt_header(%struct.mg_connection* %11, i8 zeroext 8, i8 zeroext 2, i64 %12)
  %13 = load i16, i16* %message_id.addr, align 2, !tbaa !86
  %call3 = call zeroext i16 @_OSSwapInt16(i16 zeroext %13)
  %conv = zext i16 %call3 to i32
  %conv4 = trunc i32 %conv to i16
  store i16 %conv4, i16* %netbytes, align 2, !tbaa !86
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %15 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %14, i8* %15, i32 2)
  store i64 0, i64* %i, align 8, !tbaa !12
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc20, %for.end
  %16 = load i64, i64* %i, align 8, !tbaa !12
  %17 = load i64, i64* %topics_len.addr, align 8, !tbaa !12
  %cmp6 = icmp ult i64 %16, %17
  br i1 %cmp6, label %for.body8, label %for.end22

for.body8:                                        ; preds = %for.cond5
  %18 = load %struct.mg_mqtt_topic_expression*, %struct.mg_mqtt_topic_expression** %topics.addr, align 8, !tbaa !3
  %19 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx9 = getelementptr inbounds %struct.mg_mqtt_topic_expression, %struct.mg_mqtt_topic_expression* %18, i64 %19
  %topic10 = getelementptr inbounds %struct.mg_mqtt_topic_expression, %struct.mg_mqtt_topic_expression* %arrayidx9, i32 0, i32 0
  %20 = load i8*, i8** %topic10, align 8, !tbaa !207
  %call11 = call i64 @strlen(i8* %20)
  %conv12 = trunc i64 %call11 to i16
  store i16 %conv12, i16* %topic_len, align 2, !tbaa !86
  %21 = load i16, i16* %topic_len, align 2, !tbaa !86
  %call13 = call zeroext i16 @_OSSwapInt16(i16 zeroext %21)
  %conv14 = zext i16 %call13 to i32
  %conv15 = trunc i32 %conv14 to i16
  store i16 %conv15, i16* %netbytes, align 2, !tbaa !86
  %22 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %23 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %22, i8* %23, i32 2)
  %24 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %25 = load %struct.mg_mqtt_topic_expression*, %struct.mg_mqtt_topic_expression** %topics.addr, align 8, !tbaa !3
  %26 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx16 = getelementptr inbounds %struct.mg_mqtt_topic_expression, %struct.mg_mqtt_topic_expression* %25, i64 %26
  %topic17 = getelementptr inbounds %struct.mg_mqtt_topic_expression, %struct.mg_mqtt_topic_expression* %arrayidx16, i32 0, i32 0
  %27 = load i8*, i8** %topic17, align 8, !tbaa !207
  %28 = load i16, i16* %topic_len, align 2, !tbaa !86
  %conv18 = zext i16 %28 to i32
  call void @mg_send(%struct.mg_connection* %24, i8* %27, i32 %conv18)
  %29 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %30 = load %struct.mg_mqtt_topic_expression*, %struct.mg_mqtt_topic_expression** %topics.addr, align 8, !tbaa !3
  %31 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx19 = getelementptr inbounds %struct.mg_mqtt_topic_expression, %struct.mg_mqtt_topic_expression* %30, i64 %31
  %qos = getelementptr inbounds %struct.mg_mqtt_topic_expression, %struct.mg_mqtt_topic_expression* %arrayidx19, i32 0, i32 1
  call void @mg_send(%struct.mg_connection* %29, i8* %qos, i32 1)
  br label %for.inc20

for.inc20:                                        ; preds = %for.body8
  %32 = load i64, i64* %i, align 8, !tbaa !12
  %inc21 = add i64 %32, 1
  store i64 %inc21, i64* %i, align 8, !tbaa !12
  br label %for.cond5

for.end22:                                        ; preds = %for.cond5
  %33 = bitcast i64* %total_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %33) #5
  %34 = bitcast i16* %topic_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %34) #5
  %35 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %35) #5
  %36 = bitcast i16* %netbytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %36) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_mqtt_next_subscribe_topic(%struct.mg_mqtt_message* %msg, %struct.mg_str* %topic, i8* %qos, i32 %pos) #0 {
entry:
  %retval = alloca i32, align 4
  %msg.addr = alloca %struct.mg_mqtt_message*, align 8
  %topic.addr = alloca %struct.mg_str*, align 8
  %qos.addr = alloca i8*, align 8
  %pos.addr = alloca i32, align 4
  %buf = alloca i8*, align 8
  %new_pos = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_mqtt_message* %msg, %struct.mg_mqtt_message** %msg.addr, align 8, !tbaa !3
  store %struct.mg_str* %topic, %struct.mg_str** %topic.addr, align 8, !tbaa !3
  store i8* %qos, i8** %qos.addr, align 8, !tbaa !3
  store i32 %pos, i32* %pos.addr, align 4, !tbaa !15
  %0 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %msg.addr, align 8, !tbaa !3
  %payload = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %1, i32 0, i32 4
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %payload, i32 0, i32 0
  %2 = load i8*, i8** %p, align 8, !tbaa !209
  %3 = load i32, i32* %pos.addr, align 4, !tbaa !15
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %idx.ext
  store i8* %add.ptr, i8** %buf, align 8, !tbaa !3
  %4 = bitcast i32* %new_pos to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #5
  %5 = load i32, i32* %pos.addr, align 4, !tbaa !15
  %conv = sext i32 %5 to i64
  %6 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %msg.addr, align 8, !tbaa !3
  %payload1 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %6, i32 0, i32 4
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %payload1, i32 0, i32 1
  %7 = load i64, i64* %len, align 8, !tbaa !210
  %cmp = icmp uge i64 %conv, %7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %8 = load i8*, i8** %buf, align 8, !tbaa !3
  %arrayidx = getelementptr inbounds i8, i8* %8, i64 0
  %9 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv3 = zext i8 %9 to i32
  %shl = shl i32 %conv3, 8
  %10 = load i8*, i8** %buf, align 8, !tbaa !3
  %arrayidx4 = getelementptr inbounds i8, i8* %10, i64 1
  %11 = load i8, i8* %arrayidx4, align 1, !tbaa !14
  %conv5 = zext i8 %11 to i32
  %or = or i32 %shl, %conv5
  %conv6 = sext i32 %or to i64
  %12 = load %struct.mg_str*, %struct.mg_str** %topic.addr, align 8, !tbaa !3
  %len7 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %12, i32 0, i32 1
  store i64 %conv6, i64* %len7, align 8, !tbaa !18
  %13 = load i8*, i8** %buf, align 8, !tbaa !3
  %add.ptr8 = getelementptr inbounds i8, i8* %13, i64 2
  %14 = load %struct.mg_str*, %struct.mg_str** %topic.addr, align 8, !tbaa !3
  %p9 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %14, i32 0, i32 0
  store i8* %add.ptr8, i8** %p9, align 8, !tbaa !16
  %15 = load i32, i32* %pos.addr, align 4, !tbaa !15
  %add = add nsw i32 %15, 2
  %conv10 = sext i32 %add to i64
  %16 = load %struct.mg_str*, %struct.mg_str** %topic.addr, align 8, !tbaa !3
  %len11 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %16, i32 0, i32 1
  %17 = load i64, i64* %len11, align 8, !tbaa !18
  %add12 = add i64 %conv10, %17
  %add13 = add i64 %add12, 1
  %conv14 = trunc i64 %add13 to i32
  store i32 %conv14, i32* %new_pos, align 4, !tbaa !15
  %18 = load i32, i32* %new_pos, align 4, !tbaa !15
  %conv15 = sext i32 %18 to i64
  %19 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %msg.addr, align 8, !tbaa !3
  %payload16 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %19, i32 0, i32 4
  %len17 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %payload16, i32 0, i32 1
  %20 = load i64, i64* %len17, align 8, !tbaa !210
  %cmp18 = icmp ugt i64 %conv15, %20
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end21:                                         ; preds = %if.end
  %21 = load i8*, i8** %buf, align 8, !tbaa !3
  %22 = load %struct.mg_str*, %struct.mg_str** %topic.addr, align 8, !tbaa !3
  %len22 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %22, i32 0, i32 1
  %23 = load i64, i64* %len22, align 8, !tbaa !18
  %add23 = add i64 2, %23
  %arrayidx24 = getelementptr inbounds i8, i8* %21, i64 %add23
  %24 = load i8, i8* %arrayidx24, align 1, !tbaa !14
  %25 = load i8*, i8** %qos.addr, align 8, !tbaa !3
  store i8 %24, i8* %25, align 1, !tbaa !14
  %26 = load i32, i32* %new_pos, align 4, !tbaa !15
  store i32 %26, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end21, %if.then20, %if.then
  %27 = bitcast i32* %new_pos to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %27) #5
  %28 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %28) #5
  %29 = load i32, i32* %retval, align 4
  ret i32 %29
}

; Function Attrs: nounwind ssp uwtable
define void @mg_mqtt_unsubscribe(%struct.mg_connection* %nc, i8** %topics, i64 %topics_len, i16 zeroext %message_id) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %topics.addr = alloca i8**, align 8
  %topics_len.addr = alloca i64, align 8
  %message_id.addr = alloca i16, align 2
  %netbytes = alloca i16, align 2
  %i = alloca i64, align 8
  %topic_len = alloca i16, align 2
  %total_len = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8** %topics, i8*** %topics.addr, align 8, !tbaa !3
  store i64 %topics_len, i64* %topics_len.addr, align 8, !tbaa !12
  store i16 %message_id, i16* %message_id.addr, align 2, !tbaa !86
  %0 = bitcast i16* %netbytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %0) #5
  %1 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %2 = bitcast i16* %topic_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %2) #5
  %3 = bitcast i64* %total_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  store i64 2, i64* %total_len, align 8, !tbaa !12
  store i64 0, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i64, i64* %i, align 8, !tbaa !12
  %5 = load i64, i64* %topics_len.addr, align 8, !tbaa !12
  %cmp = icmp ult i64 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i8**, i8*** %topics.addr, align 8, !tbaa !3
  %7 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx = getelementptr inbounds i8*, i8** %6, i64 %7
  %8 = load i8*, i8** %arrayidx, align 8, !tbaa !3
  %call = call i64 @strlen(i8* %8)
  %add = add i64 2, %call
  %9 = load i64, i64* %total_len, align 8, !tbaa !12
  %add1 = add i64 %9, %add
  store i64 %add1, i64* %total_len, align 8, !tbaa !12
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i64, i64* %i, align 8, !tbaa !12
  %inc = add i64 %10, 1
  store i64 %inc, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %12 = load i64, i64* %total_len, align 8, !tbaa !12
  call void @mg_send_mqtt_header(%struct.mg_connection* %11, i8 zeroext 10, i8 zeroext 2, i64 %12)
  %13 = load i16, i16* %message_id.addr, align 2, !tbaa !86
  %call2 = call zeroext i16 @_OSSwapInt16(i16 zeroext %13)
  %conv = zext i16 %call2 to i32
  %conv3 = trunc i32 %conv to i16
  store i16 %conv3, i16* %netbytes, align 2, !tbaa !86
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %15 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %14, i8* %15, i32 2)
  store i64 0, i64* %i, align 8, !tbaa !12
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc16, %for.end
  %16 = load i64, i64* %i, align 8, !tbaa !12
  %17 = load i64, i64* %topics_len.addr, align 8, !tbaa !12
  %cmp5 = icmp ult i64 %16, %17
  br i1 %cmp5, label %for.body7, label %for.end18

for.body7:                                        ; preds = %for.cond4
  %18 = load i8**, i8*** %topics.addr, align 8, !tbaa !3
  %19 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx8 = getelementptr inbounds i8*, i8** %18, i64 %19
  %20 = load i8*, i8** %arrayidx8, align 8, !tbaa !3
  %call9 = call i64 @strlen(i8* %20)
  %conv10 = trunc i64 %call9 to i16
  store i16 %conv10, i16* %topic_len, align 2, !tbaa !86
  %21 = load i16, i16* %topic_len, align 2, !tbaa !86
  %call11 = call zeroext i16 @_OSSwapInt16(i16 zeroext %21)
  %conv12 = zext i16 %call11 to i32
  %conv13 = trunc i32 %conv12 to i16
  store i16 %conv13, i16* %netbytes, align 2, !tbaa !86
  %22 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %23 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %22, i8* %23, i32 2)
  %24 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %25 = load i8**, i8*** %topics.addr, align 8, !tbaa !3
  %26 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx14 = getelementptr inbounds i8*, i8** %25, i64 %26
  %27 = load i8*, i8** %arrayidx14, align 8, !tbaa !3
  %28 = load i16, i16* %topic_len, align 2, !tbaa !86
  %conv15 = zext i16 %28 to i32
  call void @mg_send(%struct.mg_connection* %24, i8* %27, i32 %conv15)
  br label %for.inc16

for.inc16:                                        ; preds = %for.body7
  %29 = load i64, i64* %i, align 8, !tbaa !12
  %inc17 = add i64 %29, 1
  store i64 %inc17, i64* %i, align 8, !tbaa !12
  br label %for.cond4

for.end18:                                        ; preds = %for.cond4
  %30 = bitcast i64* %total_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %30) #5
  %31 = bitcast i16* %topic_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %31) #5
  %32 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %32) #5
  %33 = bitcast i16* %netbytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %33) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_mqtt_connack(%struct.mg_connection* %nc, i8 zeroext %return_code) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %return_code.addr = alloca i8, align 1
  %unused = alloca i8, align 1
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8 %return_code, i8* %return_code.addr, align 1, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %unused) #5
  store i8 0, i8* %unused, align 1, !tbaa !14
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_send_mqtt_header(%struct.mg_connection* %0, i8 zeroext 2, i8 zeroext 0, i64 2)
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_send(%struct.mg_connection* %1, i8* %unused, i32 1)
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_send(%struct.mg_connection* %2, i8* %return_code.addr, i32 1)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %unused) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_mqtt_puback(%struct.mg_connection* %nc, i16 zeroext %message_id) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %message_id.addr = alloca i16, align 2
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i16 %message_id, i16* %message_id.addr, align 2, !tbaa !86
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %1 = load i16, i16* %message_id.addr, align 2, !tbaa !86
  call void @mg_send_mqtt_short_command(%struct.mg_connection* %0, i8 zeroext 4, i16 zeroext %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_send_mqtt_short_command(%struct.mg_connection* %nc, i8 zeroext %cmd, i16 zeroext %message_id) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %cmd.addr = alloca i8, align 1
  %message_id.addr = alloca i16, align 2
  %netbytes = alloca i16, align 2
  %flags = alloca i8, align 1
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8 %cmd, i8* %cmd.addr, align 1, !tbaa !14
  store i16 %message_id, i16* %message_id.addr, align 2, !tbaa !86
  %0 = bitcast i16* %netbytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %0) #5
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %flags) #5
  %1 = load i8, i8* %cmd.addr, align 1, !tbaa !14
  %conv = zext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 6
  %2 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 2, i32 0
  %conv2 = trunc i32 %cond to i8
  store i8 %conv2, i8* %flags, align 1, !tbaa !14
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %4 = load i8, i8* %cmd.addr, align 1, !tbaa !14
  %5 = load i8, i8* %flags, align 1, !tbaa !14
  call void @mg_send_mqtt_header(%struct.mg_connection* %3, i8 zeroext %4, i8 zeroext %5, i64 2)
  %6 = load i16, i16* %message_id.addr, align 2, !tbaa !86
  %call = call zeroext i16 @_OSSwapInt16(i16 zeroext %6)
  %conv3 = zext i16 %call to i32
  %conv4 = trunc i32 %conv3 to i16
  store i16 %conv4, i16* %netbytes, align 2, !tbaa !86
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %8 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %7, i8* %8, i32 2)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %flags) #5
  %9 = bitcast i16* %netbytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %9) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_mqtt_pubrec(%struct.mg_connection* %nc, i16 zeroext %message_id) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %message_id.addr = alloca i16, align 2
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i16 %message_id, i16* %message_id.addr, align 2, !tbaa !86
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %1 = load i16, i16* %message_id.addr, align 2, !tbaa !86
  call void @mg_send_mqtt_short_command(%struct.mg_connection* %0, i8 zeroext 5, i16 zeroext %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_mqtt_pubrel(%struct.mg_connection* %nc, i16 zeroext %message_id) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %message_id.addr = alloca i16, align 2
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i16 %message_id, i16* %message_id.addr, align 2, !tbaa !86
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %1 = load i16, i16* %message_id.addr, align 2, !tbaa !86
  call void @mg_send_mqtt_short_command(%struct.mg_connection* %0, i8 zeroext 6, i16 zeroext %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_mqtt_pubcomp(%struct.mg_connection* %nc, i16 zeroext %message_id) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %message_id.addr = alloca i16, align 2
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i16 %message_id, i16* %message_id.addr, align 2, !tbaa !86
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %1 = load i16, i16* %message_id.addr, align 2, !tbaa !86
  call void @mg_send_mqtt_short_command(%struct.mg_connection* %0, i8 zeroext 7, i16 zeroext %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_mqtt_suback(%struct.mg_connection* %nc, i8* %qoss, i64 %qoss_len, i16 zeroext %message_id) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %qoss.addr = alloca i8*, align 8
  %qoss_len.addr = alloca i64, align 8
  %message_id.addr = alloca i16, align 2
  %i = alloca i64, align 8
  %netbytes = alloca i16, align 2
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %qoss, i8** %qoss.addr, align 8, !tbaa !3
  store i64 %qoss_len, i64* %qoss_len.addr, align 8, !tbaa !12
  store i16 %message_id, i16* %message_id.addr, align 2, !tbaa !86
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = bitcast i16* %netbytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %1) #5
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %3 = load i64, i64* %qoss_len.addr, align 8, !tbaa !12
  %add = add i64 2, %3
  call void @mg_send_mqtt_header(%struct.mg_connection* %2, i8 zeroext 9, i8 zeroext 2, i64 %add)
  %4 = load i16, i16* %message_id.addr, align 2, !tbaa !86
  %call = call zeroext i16 @_OSSwapInt16(i16 zeroext %4)
  %conv = zext i16 %call to i32
  %conv1 = trunc i32 %conv to i16
  store i16 %conv1, i16* %netbytes, align 2, !tbaa !86
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %6 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %5, i8* %6, i32 2)
  store i64 0, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i64, i64* %i, align 8, !tbaa !12
  %8 = load i64, i64* %qoss_len.addr, align 8, !tbaa !12
  %cmp = icmp ult i64 %7, %8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %10 = load i8*, i8** %qoss.addr, align 8, !tbaa !3
  %11 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx = getelementptr inbounds i8, i8* %10, i64 %11
  call void @mg_send(%struct.mg_connection* %9, i8* %arrayidx, i32 1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i64, i64* %i, align 8, !tbaa !12
  %inc = add i64 %12, 1
  store i64 %inc, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = bitcast i16* %netbytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %13) #5
  %14 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %14) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_mqtt_unsuback(%struct.mg_connection* %nc, i16 zeroext %message_id) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %message_id.addr = alloca i16, align 2
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i16 %message_id, i16* %message_id.addr, align 2, !tbaa !86
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %1 = load i16, i16* %message_id.addr, align 2, !tbaa !86
  call void @mg_send_mqtt_short_command(%struct.mg_connection* %0, i8 zeroext 11, i16 zeroext %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_mqtt_ping(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_send_mqtt_header(%struct.mg_connection* %0, i8 zeroext 12, i8 zeroext 0, i64 0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_mqtt_pong(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_send_mqtt_header(%struct.mg_connection* %0, i8 zeroext 13, i8 zeroext 0, i64 0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mg_mqtt_disconnect(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_send_mqtt_header(%struct.mg_connection* %0, i8 zeroext 14, i8 zeroext 0, i64 0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define %struct.mg_dns_resource_record* @mg_dns_next_record(%struct.mg_dns_message* %msg, i32 %query, %struct.mg_dns_resource_record* %prev) #0 {
entry:
  %retval = alloca %struct.mg_dns_resource_record*, align 8
  %msg.addr = alloca %struct.mg_dns_message*, align 8
  %query.addr = alloca i32, align 4
  %prev.addr = alloca %struct.mg_dns_resource_record*, align 8
  %rr = alloca %struct.mg_dns_resource_record*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_dns_message* %msg, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  store i32 %query, i32* %query.addr, align 4, !tbaa !15
  store %struct.mg_dns_resource_record* %prev, %struct.mg_dns_resource_record** %prev.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_dns_resource_record** %rr to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %prev.addr, align 8, !tbaa !3
  %cmp = icmp eq %struct.mg_dns_resource_record* %1, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %answers = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %2, i32 0, i32 6
  %arraydecay = getelementptr inbounds [32 x %struct.mg_dns_resource_record], [32 x %struct.mg_dns_resource_record]* %answers, i32 0, i32 0
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %prev.addr, align 8, !tbaa !3
  %add.ptr = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %3, i64 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.mg_dns_resource_record* [ %arraydecay, %cond.true ], [ %add.ptr, %cond.false ]
  store %struct.mg_dns_resource_record* %cond, %struct.mg_dns_resource_record** %rr, align 8, !tbaa !3
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %4 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr, align 8, !tbaa !3
  %5 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %answers1 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %5, i32 0, i32 6
  %arraydecay2 = getelementptr inbounds [32 x %struct.mg_dns_resource_record], [32 x %struct.mg_dns_resource_record]* %answers1, i32 0, i32 0
  %sub.ptr.lhs.cast = ptrtoint %struct.mg_dns_resource_record* %4 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.mg_dns_resource_record* %arraydecay2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 48
  %6 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %num_answers = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %6, i32 0, i32 4
  %7 = load i32, i32* %num_answers, align 8, !tbaa !110
  %conv = sext i32 %7 to i64
  %cmp3 = icmp slt i64 %sub.ptr.div, %conv
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr, align 8, !tbaa !3
  %rtype = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %8, i32 0, i32 1
  %9 = load i32, i32* %rtype, align 8, !tbaa !112
  %10 = load i32, i32* %query.addr, align 4, !tbaa !15
  %cmp5 = icmp eq i32 %9, %10
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %11 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr, align 8, !tbaa !3
  store %struct.mg_dns_resource_record* %11, %struct.mg_dns_resource_record** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %12 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr, align 8, !tbaa !3
  %incdec.ptr = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %12, i32 1
  store %struct.mg_dns_resource_record* %incdec.ptr, %struct.mg_dns_resource_record** %rr, align 8, !tbaa !3
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store %struct.mg_dns_resource_record* null, %struct.mg_dns_resource_record** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then
  %13 = bitcast %struct.mg_dns_resource_record** %rr to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %13) #5
  %14 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %retval, align 8
  ret %struct.mg_dns_resource_record* %14
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_dns_parse_record_data(%struct.mg_dns_message* %msg, %struct.mg_dns_resource_record* %rr, i8* %data, i64 %data_len) #0 {
entry:
  %retval = alloca i32, align 4
  %msg.addr = alloca %struct.mg_dns_message*, align 8
  %rr.addr = alloca %struct.mg_dns_resource_record*, align 8
  %data.addr = alloca i8*, align 8
  %data_len.addr = alloca i64, align 8
  store %struct.mg_dns_message* %msg, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  store %struct.mg_dns_resource_record* %rr, %struct.mg_dns_resource_record** %rr.addr, align 8, !tbaa !3
  store i8* %data, i8** %data.addr, align 8, !tbaa !3
  store i64 %data_len, i64* %data_len.addr, align 8, !tbaa !12
  %0 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8, !tbaa !3
  %rtype = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %0, i32 0, i32 1
  %1 = load i32, i32* %rtype, align 8, !tbaa !112
  switch i32 %1, label %sw.epilog [
    i32 1, label %sw.bb
    i32 5, label %sw.bb9
  ]

sw.bb:                                            ; preds = %entry
  %2 = load i64, i64* %data_len.addr, align 8, !tbaa !12
  %cmp = icmp ult i64 %2, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %sw.bb
  %3 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8, !tbaa !3
  %rdata = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %3, i32 0, i32 5
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rdata, i32 0, i32 0
  %4 = load i8*, i8** %p, align 8, !tbaa !211
  %5 = load i64, i64* %data_len.addr, align 8, !tbaa !12
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5
  %6 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %pkt = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %6, i32 0, i32 0
  %p1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pkt, i32 0, i32 0
  %7 = load i8*, i8** %p1, align 8, !tbaa !212
  %8 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %pkt2 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %8, i32 0, i32 0
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pkt2, i32 0, i32 1
  %9 = load i64, i64* %len, align 8, !tbaa !213
  %add.ptr3 = getelementptr inbounds i8, i8* %7, i64 %9
  %cmp4 = icmp ugt i8* %add.ptr, %add.ptr3
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store i32 -1, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %10 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %11 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8, !tbaa !3
  %rdata7 = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %11, i32 0, i32 5
  %p8 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rdata7, i32 0, i32 0
  %12 = load i8*, i8** %p8, align 8, !tbaa !211
  %13 = load i64, i64* %data_len.addr, align 8, !tbaa !12
  %14 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %15 = call i64 @llvm.objectsize.i64.p0i8(i8* %14, i1 false, i1 true)
  %call = call i8* @__memcpy_chk(i8* %10, i8* %12, i64 %13, i64 %15) #5
  store i32 0, i32* %retval, align 4
  br label %return

sw.bb9:                                           ; preds = %entry
  %16 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %17 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8, !tbaa !3
  %rdata10 = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %17, i32 0, i32 5
  %18 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %19 = load i64, i64* %data_len.addr, align 8, !tbaa !12
  %conv = trunc i64 %19 to i32
  %call11 = call i64 @mg_dns_uncompress_name(%struct.mg_dns_message* %16, %struct.mg_str* %rdata10, i8* %18, i32 %conv)
  store i32 0, i32* %retval, align 4
  br label %return

sw.epilog:                                        ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %sw.epilog, %sw.bb9, %if.end6, %if.then5, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: nounwind ssp uwtable
define i64 @mg_dns_uncompress_name(%struct.mg_dns_message* %msg, %struct.mg_str* %name, i8* %dst, i32 %dst_len) #0 {
entry:
  %retval = alloca i64, align 8
  %msg.addr = alloca %struct.mg_dns_message*, align 8
  %name.addr = alloca %struct.mg_str*, align 8
  %dst.addr = alloca i8*, align 8
  %dst_len.addr = alloca i32, align 4
  %chunk_len = alloca i32, align 4
  %num_ptrs = alloca i32, align 4
  %old_dst = alloca i8*, align 8
  %data = alloca i8*, align 8
  %end = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %leeway = alloca i32, align 4
  %off = alloca i16, align 2
  store %struct.mg_dns_message* %msg, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  store %struct.mg_str* %name, %struct.mg_str** %name.addr, align 8, !tbaa !3
  store i8* %dst, i8** %dst.addr, align 8, !tbaa !3
  store i32 %dst_len, i32* %dst_len.addr, align 4, !tbaa !15
  %0 = bitcast i32* %chunk_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = bitcast i32* %num_ptrs to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  store i32 0, i32* %num_ptrs, align 4, !tbaa !15
  %2 = bitcast i8** %old_dst to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  %3 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  store i8* %3, i8** %old_dst, align 8, !tbaa !3
  %4 = bitcast i8** %data to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #5
  %5 = load %struct.mg_str*, %struct.mg_str** %name.addr, align 8, !tbaa !3
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %5, i32 0, i32 0
  %6 = load i8*, i8** %p, align 8, !tbaa !16
  store i8* %6, i8** %data, align 8, !tbaa !3
  %7 = bitcast i8** %end to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #5
  %8 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %pkt = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %8, i32 0, i32 0
  %p1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pkt, i32 0, i32 0
  %9 = load i8*, i8** %p1, align 8, !tbaa !212
  %10 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %pkt2 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %10, i32 0, i32 0
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pkt2, i32 0, i32 1
  %11 = load i64, i64* %len, align 8, !tbaa !213
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 %11
  store i8* %add.ptr, i8** %end, align 8, !tbaa !3
  %12 = load i8*, i8** %data, align 8, !tbaa !3
  %13 = load i8*, i8** %end, align 8, !tbaa !3
  %cmp = icmp uge i8* %12, %13
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup70

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont, %cleanup61, %if.end
  %14 = load i8*, i8** %data, align 8, !tbaa !3
  %incdec.ptr = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %incdec.ptr, i8** %data, align 8, !tbaa !3
  %15 = load i8, i8* %14, align 1, !tbaa !14
  %conv = zext i8 %15 to i32
  store i32 %conv, i32* %chunk_len, align 4, !tbaa !15
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %16 = bitcast i32* %leeway to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %16) #5
  %17 = load i32, i32* %dst_len.addr, align 4, !tbaa !15
  %conv3 = sext i32 %17 to i64
  %18 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %19 = load i8*, i8** %old_dst, align 8, !tbaa !3
  %sub.ptr.lhs.cast = ptrtoint i8* %18 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %19 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub = sub nsw i64 %conv3, %sub.ptr.sub
  %conv4 = trunc i64 %sub to i32
  store i32 %conv4, i32* %leeway, align 4, !tbaa !15
  %20 = load i8*, i8** %data, align 8, !tbaa !3
  %21 = load i8*, i8** %end, align 8, !tbaa !3
  %cmp5 = icmp uge i8* %20, %21
  br i1 %cmp5, label %if.then7, label %if.end8

if.then7:                                         ; preds = %while.body
  store i64 0, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup61

if.end8:                                          ; preds = %while.body
  %22 = load i32, i32* %chunk_len, align 4, !tbaa !15
  %and = and i32 %22, 192
  %cmp9 = icmp eq i32 %and, 192
  br i1 %cmp9, label %if.then11, label %if.end32

if.then11:                                        ; preds = %if.end8
  %23 = bitcast i16* %off to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %23) #5
  %24 = load i8*, i8** %data, align 8, !tbaa !3
  %arrayidx = getelementptr inbounds i8, i8* %24, i64 -1
  %25 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv12 = zext i8 %25 to i32
  %and13 = and i32 %conv12, -193
  %shl = shl i32 %and13, 8
  %26 = load i8*, i8** %data, align 8, !tbaa !3
  %arrayidx14 = getelementptr inbounds i8, i8* %26, i64 0
  %27 = load i8, i8* %arrayidx14, align 1, !tbaa !14
  %conv15 = zext i8 %27 to i32
  %or = or i32 %shl, %conv15
  %conv16 = trunc i32 %or to i16
  store i16 %conv16, i16* %off, align 2, !tbaa !86
  %28 = load i16, i16* %off, align 2, !tbaa !86
  %conv17 = zext i16 %28 to i64
  %29 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %pkt18 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %29, i32 0, i32 0
  %len19 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pkt18, i32 0, i32 1
  %30 = load i64, i64* %len19, align 8, !tbaa !213
  %cmp20 = icmp uge i64 %conv17, %30
  br i1 %cmp20, label %if.then22, label %if.end23

if.then22:                                        ; preds = %if.then11
  store i64 0, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end23:                                         ; preds = %if.then11
  %31 = load i32, i32* %num_ptrs, align 4, !tbaa !15
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %num_ptrs, align 4, !tbaa !15
  %cmp24 = icmp sgt i32 %inc, 15
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.end23
  store i64 0, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end27:                                         ; preds = %if.end23
  %32 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %pkt28 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %32, i32 0, i32 0
  %p29 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pkt28, i32 0, i32 0
  %33 = load i8*, i8** %p29, align 8, !tbaa !212
  %34 = load i16, i16* %off, align 2, !tbaa !86
  %conv30 = zext i16 %34 to i32
  %idx.ext = sext i32 %conv30 to i64
  %add.ptr31 = getelementptr inbounds i8, i8* %33, i64 %idx.ext
  store i8* %add.ptr31, i8** %data, align 8, !tbaa !3
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end27, %if.then26, %if.then22
  %35 = bitcast i16* %off to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %35) #5
  br label %cleanup61

if.end32:                                         ; preds = %if.end8
  %36 = load i32, i32* %chunk_len, align 4, !tbaa !15
  %cmp33 = icmp sgt i32 %36, 63
  br i1 %cmp33, label %if.then35, label %if.end36

if.then35:                                        ; preds = %if.end32
  store i64 0, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup61

if.end36:                                         ; preds = %if.end32
  %37 = load i32, i32* %chunk_len, align 4, !tbaa !15
  %38 = load i32, i32* %leeway, align 4, !tbaa !15
  %cmp37 = icmp sgt i32 %37, %38
  br i1 %cmp37, label %if.then39, label %if.end40

if.then39:                                        ; preds = %if.end36
  %39 = load i32, i32* %leeway, align 4, !tbaa !15
  store i32 %39, i32* %chunk_len, align 4, !tbaa !15
  br label %if.end40

if.end40:                                         ; preds = %if.then39, %if.end36
  %40 = load i8*, i8** %data, align 8, !tbaa !3
  %41 = load i32, i32* %chunk_len, align 4, !tbaa !15
  %idx.ext41 = sext i32 %41 to i64
  %add.ptr42 = getelementptr inbounds i8, i8* %40, i64 %idx.ext41
  %42 = load i8*, i8** %end, align 8, !tbaa !3
  %cmp43 = icmp uge i8* %add.ptr42, %42
  br i1 %cmp43, label %if.then45, label %if.end46

if.then45:                                        ; preds = %if.end40
  store i64 0, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup61

if.end46:                                         ; preds = %if.end40
  %43 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %44 = load i8*, i8** %data, align 8, !tbaa !3
  %45 = load i32, i32* %chunk_len, align 4, !tbaa !15
  %conv47 = sext i32 %45 to i64
  %46 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %47 = call i64 @llvm.objectsize.i64.p0i8(i8* %46, i1 false, i1 true)
  %call = call i8* @__memcpy_chk(i8* %43, i8* %44, i64 %conv47, i64 %47) #5
  %48 = load i32, i32* %chunk_len, align 4, !tbaa !15
  %49 = load i8*, i8** %data, align 8, !tbaa !3
  %idx.ext48 = sext i32 %48 to i64
  %add.ptr49 = getelementptr inbounds i8, i8* %49, i64 %idx.ext48
  store i8* %add.ptr49, i8** %data, align 8, !tbaa !3
  %50 = load i32, i32* %chunk_len, align 4, !tbaa !15
  %51 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %idx.ext50 = sext i32 %50 to i64
  %add.ptr51 = getelementptr inbounds i8, i8* %51, i64 %idx.ext50
  store i8* %add.ptr51, i8** %dst.addr, align 8, !tbaa !3
  %52 = load i32, i32* %chunk_len, align 4, !tbaa !15
  %53 = load i32, i32* %leeway, align 4, !tbaa !15
  %sub52 = sub nsw i32 %53, %52
  store i32 %sub52, i32* %leeway, align 4, !tbaa !15
  %54 = load i32, i32* %leeway, align 4, !tbaa !15
  %cmp53 = icmp eq i32 %54, 0
  br i1 %cmp53, label %if.then55, label %if.end59

if.then55:                                        ; preds = %if.end46
  %55 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %56 = load i8*, i8** %old_dst, align 8, !tbaa !3
  %sub.ptr.lhs.cast56 = ptrtoint i8* %55 to i64
  %sub.ptr.rhs.cast57 = ptrtoint i8* %56 to i64
  %sub.ptr.sub58 = sub i64 %sub.ptr.lhs.cast56, %sub.ptr.rhs.cast57
  store i64 %sub.ptr.sub58, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup61

if.end59:                                         ; preds = %if.end46
  %57 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %incdec.ptr60 = getelementptr inbounds i8, i8* %57, i32 1
  store i8* %incdec.ptr60, i8** %dst.addr, align 8, !tbaa !3
  store i8 46, i8* %57, align 1, !tbaa !14
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup61

cleanup61:                                        ; preds = %if.end59, %if.then55, %if.then45, %if.then35, %cleanup, %if.then7
  %58 = bitcast i32* %leeway to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %58) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup70 [
    i32 0, label %cleanup.cont
    i32 2, label %while.cond
  ]

cleanup.cont:                                     ; preds = %cleanup61
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %59 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %60 = load i8*, i8** %old_dst, align 8, !tbaa !3
  %cmp62 = icmp ne i8* %59, %60
  br i1 %cmp62, label %if.then64, label %if.end66

if.then64:                                        ; preds = %while.end
  %61 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %incdec.ptr65 = getelementptr inbounds i8, i8* %61, i32 -1
  store i8* %incdec.ptr65, i8** %dst.addr, align 8, !tbaa !3
  store i8 0, i8* %incdec.ptr65, align 1, !tbaa !14
  br label %if.end66

if.end66:                                         ; preds = %if.then64, %while.end
  %62 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %63 = load i8*, i8** %old_dst, align 8, !tbaa !3
  %sub.ptr.lhs.cast67 = ptrtoint i8* %62 to i64
  %sub.ptr.rhs.cast68 = ptrtoint i8* %63 to i64
  %sub.ptr.sub69 = sub i64 %sub.ptr.lhs.cast67, %sub.ptr.rhs.cast68
  store i64 %sub.ptr.sub69, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup70

cleanup70:                                        ; preds = %if.end66, %cleanup61, %if.then
  %64 = bitcast i8** %end to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %64) #5
  %65 = bitcast i8** %data to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %65) #5
  %66 = bitcast i8** %old_dst to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %66) #5
  %67 = bitcast i32* %num_ptrs to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %67) #5
  %68 = bitcast i32* %chunk_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %68) #5
  %69 = load i64, i64* %retval, align 8
  ret i64 %69
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_dns_insert_header(%struct.mbuf* %io, i64 %pos, %struct.mg_dns_message* %msg) #0 {
entry:
  %io.addr = alloca %struct.mbuf*, align 8
  %pos.addr = alloca i64, align 8
  %msg.addr = alloca %struct.mg_dns_message*, align 8
  %header = alloca %struct.mg_dns_header, align 2
  store %struct.mbuf* %io, %struct.mbuf** %io.addr, align 8, !tbaa !3
  store i64 %pos, i64* %pos.addr, align 8, !tbaa !12
  store %struct.mg_dns_message* %msg, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_dns_header* %header to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* %0) #5
  %1 = bitcast %struct.mg_dns_header* %header to i8*
  call void @llvm.memset.p0i8.i64(i8* align 2 %1, i8 0, i64 12, i1 false)
  %2 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %transaction_id = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %2, i32 0, i32 2
  %3 = load i16, i16* %transaction_id, align 2, !tbaa !214
  %transaction_id1 = getelementptr inbounds %struct.mg_dns_header, %struct.mg_dns_header* %header, i32 0, i32 0
  store i16 %3, i16* %transaction_id1, align 2, !tbaa !215
  %4 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %4, i32 0, i32 1
  %5 = load i16, i16* %flags, align 8, !tbaa !217
  %call = call zeroext i16 @_OSSwapInt16(i16 zeroext %5)
  %conv = zext i16 %call to i32
  %conv2 = trunc i32 %conv to i16
  %flags3 = getelementptr inbounds %struct.mg_dns_header, %struct.mg_dns_header* %header, i32 0, i32 1
  store i16 %conv2, i16* %flags3, align 2, !tbaa !218
  %6 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %num_questions = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %6, i32 0, i32 3
  %7 = load i32, i32* %num_questions, align 4, !tbaa !219
  %conv4 = trunc i32 %7 to i16
  %call5 = call zeroext i16 @_OSSwapInt16(i16 zeroext %conv4)
  %conv6 = zext i16 %call5 to i32
  %conv7 = trunc i32 %conv6 to i16
  %num_questions8 = getelementptr inbounds %struct.mg_dns_header, %struct.mg_dns_header* %header, i32 0, i32 2
  store i16 %conv7, i16* %num_questions8, align 2, !tbaa !220
  %8 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %num_answers = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %8, i32 0, i32 4
  %9 = load i32, i32* %num_answers, align 8, !tbaa !110
  %conv9 = trunc i32 %9 to i16
  %call10 = call zeroext i16 @_OSSwapInt16(i16 zeroext %conv9)
  %conv11 = zext i16 %call10 to i32
  %conv12 = trunc i32 %conv11 to i16
  %num_answers13 = getelementptr inbounds %struct.mg_dns_header, %struct.mg_dns_header* %header, i32 0, i32 3
  store i16 %conv12, i16* %num_answers13, align 2, !tbaa !221
  %10 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %11 = load i64, i64* %pos.addr, align 8, !tbaa !12
  %12 = bitcast %struct.mg_dns_header* %header to i8*
  %call14 = call i64 @mbuf_insert(%struct.mbuf* %10, i64 %11, i8* %12, i64 12)
  %conv15 = trunc i64 %call14 to i32
  %13 = bitcast %struct.mg_dns_header* %header to i8*
  call void @llvm.lifetime.end.p0i8(i64 12, i8* %13) #5
  ret i32 %conv15
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_dns_copy_questions(%struct.mbuf* %io, %struct.mg_dns_message* %msg) #0 {
entry:
  %retval = alloca i32, align 4
  %io.addr = alloca %struct.mbuf*, align 8
  %msg.addr = alloca %struct.mg_dns_message*, align 8
  %begin = alloca i8*, align 8
  %end = alloca i8*, align 8
  %last_q = alloca %struct.mg_dns_resource_record*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mbuf* %io, %struct.mbuf** %io.addr, align 8, !tbaa !3
  store %struct.mg_dns_message* %msg, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %0 = bitcast i8** %begin to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = bitcast i8** %end to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %2 = bitcast %struct.mg_dns_resource_record** %last_q to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  %3 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %num_questions = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %3, i32 0, i32 3
  %4 = load i32, i32* %num_questions, align 4, !tbaa !219
  %cmp = icmp sle i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %5 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %pkt = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %5, i32 0, i32 0
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pkt, i32 0, i32 0
  %6 = load i8*, i8** %p, align 8, !tbaa !212
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 12
  store i8* %add.ptr, i8** %begin, align 8, !tbaa !3
  %7 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %questions = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %7, i32 0, i32 5
  %8 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %num_questions1 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %8, i32 0, i32 3
  %9 = load i32, i32* %num_questions1, align 4, !tbaa !219
  %sub = sub nsw i32 %9, 1
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr inbounds [32 x %struct.mg_dns_resource_record], [32 x %struct.mg_dns_resource_record]* %questions, i64 0, i64 %idxprom
  store %struct.mg_dns_resource_record* %arrayidx, %struct.mg_dns_resource_record** %last_q, align 8, !tbaa !3
  %10 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %last_q, align 8, !tbaa !3
  %name = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %10, i32 0, i32 0
  %p2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name, i32 0, i32 0
  %11 = load i8*, i8** %p2, align 8, !tbaa !222
  %12 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %last_q, align 8, !tbaa !3
  %name3 = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %12, i32 0, i32 0
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name3, i32 0, i32 1
  %13 = load i64, i64* %len, align 8, !tbaa !223
  %add.ptr4 = getelementptr inbounds i8, i8* %11, i64 %13
  %add.ptr5 = getelementptr inbounds i8, i8* %add.ptr4, i64 4
  store i8* %add.ptr5, i8** %end, align 8, !tbaa !3
  %14 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %15 = load i8*, i8** %begin, align 8, !tbaa !3
  %16 = load i8*, i8** %end, align 8, !tbaa !3
  %17 = load i8*, i8** %begin, align 8, !tbaa !3
  %sub.ptr.lhs.cast = ptrtoint i8* %16 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %17 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call = call i64 @mbuf_append(%struct.mbuf* %14, i8* %15, i64 %sub.ptr.sub)
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %18 = bitcast %struct.mg_dns_resource_record** %last_q to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %18) #5
  %19 = bitcast i8** %end to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %19) #5
  %20 = bitcast i8** %begin to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %20) #5
  %21 = load i32, i32* %retval, align 4
  ret i32 %21
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_dns_encode_name_s(%struct.mbuf* %io, i8* %name.coerce0, i64 %name.coerce1) #0 {
entry:
  %retval = alloca i32, align 4
  %name = alloca %struct.mg_str, align 8
  %io.addr = alloca %struct.mbuf*, align 8
  %s = alloca i8*, align 8
  %n = alloca i8, align 1
  %pos = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %0 = bitcast %struct.mg_str* %name to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %name.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %name.coerce1, i64* %2, align 8
  store %struct.mbuf* %io, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %3 = bitcast i8** %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %n) #5
  %4 = bitcast i64* %pos to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #5
  %5 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %5, i32 0, i32 1
  %6 = load i64, i64* %len, align 8, !tbaa !39
  store i64 %6, i64* %pos, align 8, !tbaa !12
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %7 = bitcast %struct.mg_str* %name to { i8*, i64 }*
  %8 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %call = call i8* @mg_strchr(i8* %9, i64 %11, i32 46)
  store i8* %call, i8** %s, align 8, !tbaa !3
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name, i32 0, i32 0
  %12 = load i8*, i8** %p, align 8, !tbaa !16
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name, i32 0, i32 1
  %13 = load i64, i64* %len1, align 8, !tbaa !18
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 %13
  store i8* %add.ptr, i8** %s, align 8, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  %14 = load i8*, i8** %s, align 8, !tbaa !3
  %p2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name, i32 0, i32 0
  %15 = load i8*, i8** %p2, align 8, !tbaa !16
  %sub.ptr.lhs.cast = ptrtoint i8* %14 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %15 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp3 = icmp sgt i64 %sub.ptr.sub, 127
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end5:                                          ; preds = %if.end
  %16 = load i8*, i8** %s, align 8, !tbaa !3
  %p6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name, i32 0, i32 0
  %17 = load i8*, i8** %p6, align 8, !tbaa !16
  %sub.ptr.lhs.cast7 = ptrtoint i8* %16 to i64
  %sub.ptr.rhs.cast8 = ptrtoint i8* %17 to i64
  %sub.ptr.sub9 = sub i64 %sub.ptr.lhs.cast7, %sub.ptr.rhs.cast8
  %conv = trunc i64 %sub.ptr.sub9 to i8
  store i8 %conv, i8* %n, align 1, !tbaa !14
  %18 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %call10 = call i64 @mbuf_append(%struct.mbuf* %18, i8* %n, i64 1)
  %19 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %p11 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name, i32 0, i32 0
  %20 = load i8*, i8** %p11, align 8, !tbaa !16
  %21 = load i8, i8* %n, align 1, !tbaa !14
  %conv12 = zext i8 %21 to i64
  %call13 = call i64 @mbuf_append(%struct.mbuf* %19, i8* %20, i64 %conv12)
  %22 = load i8, i8* %n, align 1, !tbaa !14
  %conv14 = zext i8 %22 to i64
  %len15 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name, i32 0, i32 1
  %23 = load i64, i64* %len15, align 8, !tbaa !18
  %cmp16 = icmp ult i64 %conv14, %23
  br i1 %cmp16, label %land.lhs.true, label %if.end22

land.lhs.true:                                    ; preds = %if.end5
  %24 = load i8*, i8** %s, align 8, !tbaa !3
  %25 = load i8, i8* %24, align 1, !tbaa !14
  %conv18 = sext i8 %25 to i32
  %cmp19 = icmp eq i32 %conv18, 46
  br i1 %cmp19, label %if.then21, label %if.end22

if.then21:                                        ; preds = %land.lhs.true
  %26 = load i8, i8* %n, align 1, !tbaa !14
  %inc = add i8 %26, 1
  store i8 %inc, i8* %n, align 1, !tbaa !14
  br label %if.end22

if.end22:                                         ; preds = %if.then21, %land.lhs.true, %if.end5
  %27 = load i8, i8* %n, align 1, !tbaa !14
  %conv23 = zext i8 %27 to i32
  %p24 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name, i32 0, i32 0
  %28 = load i8*, i8** %p24, align 8, !tbaa !16
  %idx.ext = sext i32 %conv23 to i64
  %add.ptr25 = getelementptr inbounds i8, i8* %28, i64 %idx.ext
  store i8* %add.ptr25, i8** %p24, align 8, !tbaa !16
  %29 = load i8, i8* %n, align 1, !tbaa !14
  %conv26 = zext i8 %29 to i64
  %len27 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name, i32 0, i32 1
  %30 = load i64, i64* %len27, align 8, !tbaa !18
  %sub = sub i64 %30, %conv26
  store i64 %sub, i64* %len27, align 8, !tbaa !18
  br label %do.cond

do.cond:                                          ; preds = %if.end22
  %len28 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name, i32 0, i32 1
  %31 = load i64, i64* %len28, align 8, !tbaa !18
  %cmp29 = icmp ugt i64 %31, 0
  br i1 %cmp29, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %32 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %call31 = call i64 @mbuf_append(%struct.mbuf* %32, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.160, i32 0, i32 0), i64 1)
  %33 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %len32 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %33, i32 0, i32 1
  %34 = load i64, i64* %len32, align 8, !tbaa !39
  %35 = load i64, i64* %pos, align 8, !tbaa !12
  %sub33 = sub i64 %34, %35
  %conv34 = trunc i64 %sub33 to i32
  store i32 %conv34, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %do.end, %if.then4
  %36 = bitcast i64* %pos to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %36) #5
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %n) #5
  %37 = bitcast i8** %s to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %37) #5
  %38 = load i32, i32* %retval, align 4
  ret i32 %38
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_dns_encode_name(%struct.mbuf* %io, i8* %name, i64 %len) #0 {
entry:
  %io.addr = alloca %struct.mbuf*, align 8
  %name.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  store %struct.mbuf* %io, %struct.mbuf** %io.addr, align 8, !tbaa !3
  store i8* %name, i8** %name.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  %0 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %1 = load i8*, i8** %name.addr, align 8, !tbaa !3
  %2 = load i64, i64* %len.addr, align 8, !tbaa !12
  %call = call { i8*, i64 } @mg_mk_str_n(i8* %1, i64 %2)
  %3 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  %5 = extractvalue { i8*, i64 } %call, 0
  store i8* %5, i8** %4, align 8
  %6 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  %7 = extractvalue { i8*, i64 } %call, 1
  store i64 %7, i64* %6, align 8
  %8 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %call1 = call i32 @mg_dns_encode_name_s(%struct.mbuf* %0, i8* %10, i64 %12)
  ret i32 %call1
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_dns_encode_record(%struct.mbuf* %io, %struct.mg_dns_resource_record* %rr, i8* %name, i64 %nlen, i8* %rdata, i64 %rlen) #0 {
entry:
  %retval = alloca i32, align 4
  %io.addr = alloca %struct.mbuf*, align 8
  %rr.addr = alloca %struct.mg_dns_resource_record*, align 8
  %name.addr = alloca i8*, align 8
  %nlen.addr = alloca i64, align 8
  %rdata.addr = alloca i8*, align 8
  %rlen.addr = alloca i64, align 8
  %pos = alloca i64, align 8
  %u16 = alloca i16, align 2
  %u32 = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %clen = alloca i32, align 4
  %off = alloca i64, align 8
  store %struct.mbuf* %io, %struct.mbuf** %io.addr, align 8, !tbaa !3
  store %struct.mg_dns_resource_record* %rr, %struct.mg_dns_resource_record** %rr.addr, align 8, !tbaa !3
  store i8* %name, i8** %name.addr, align 8, !tbaa !3
  store i64 %nlen, i64* %nlen.addr, align 8, !tbaa !12
  store i8* %rdata, i8** %rdata.addr, align 8, !tbaa !3
  store i64 %rlen, i64* %rlen.addr, align 8, !tbaa !12
  %0 = bitcast i64* %pos to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %1, i32 0, i32 1
  %2 = load i64, i64* %len, align 8, !tbaa !39
  store i64 %2, i64* %pos, align 8, !tbaa !12
  %3 = bitcast i16* %u16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %3) #5
  %4 = bitcast i32* %u32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #5
  %5 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8, !tbaa !3
  %kind = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %5, i32 0, i32 4
  %6 = load i32, i32* %kind, align 4, !tbaa !224
  %cmp = icmp eq i32 %6, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup48

if.end:                                           ; preds = %entry
  %7 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %8 = load i8*, i8** %name.addr, align 8, !tbaa !3
  %9 = load i64, i64* %nlen.addr, align 8, !tbaa !12
  %call = call i32 @mg_dns_encode_name(%struct.mbuf* %7, i8* %8, i64 %9)
  %cmp1 = icmp eq i32 %call, -1
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup48

if.end3:                                          ; preds = %if.end
  %10 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8, !tbaa !3
  %rtype = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %10, i32 0, i32 1
  %11 = load i32, i32* %rtype, align 8, !tbaa !112
  %conv = trunc i32 %11 to i16
  %call4 = call zeroext i16 @_OSSwapInt16(i16 zeroext %conv)
  %conv5 = zext i16 %call4 to i32
  %conv6 = trunc i32 %conv5 to i16
  store i16 %conv6, i16* %u16, align 2, !tbaa !86
  %12 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %13 = bitcast i16* %u16 to i8*
  %call7 = call i64 @mbuf_append(%struct.mbuf* %12, i8* %13, i64 2)
  %14 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8, !tbaa !3
  %rclass = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %14, i32 0, i32 2
  %15 = load i32, i32* %rclass, align 4, !tbaa !225
  %conv8 = trunc i32 %15 to i16
  %call9 = call zeroext i16 @_OSSwapInt16(i16 zeroext %conv8)
  %conv10 = zext i16 %call9 to i32
  %conv11 = trunc i32 %conv10 to i16
  store i16 %conv11, i16* %u16, align 2, !tbaa !86
  %16 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %17 = bitcast i16* %u16 to i8*
  %call12 = call i64 @mbuf_append(%struct.mbuf* %16, i8* %17, i64 2)
  %18 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8, !tbaa !3
  %kind13 = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %18, i32 0, i32 4
  %19 = load i32, i32* %kind13, align 4, !tbaa !224
  %cmp14 = icmp eq i32 %19, 2
  br i1 %cmp14, label %if.then16, label %if.end45

if.then16:                                        ; preds = %if.end3
  %20 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8, !tbaa !3
  %ttl = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %20, i32 0, i32 3
  %21 = load i32, i32* %ttl, align 8, !tbaa !226
  %call17 = call i32 @_OSSwapInt32(i32 %21)
  store i32 %call17, i32* %u32, align 4, !tbaa !15
  %22 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %23 = bitcast i32* %u32 to i8*
  %call18 = call i64 @mbuf_append(%struct.mbuf* %22, i8* %23, i64 4)
  %24 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8, !tbaa !3
  %rtype19 = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %24, i32 0, i32 1
  %25 = load i32, i32* %rtype19, align 8, !tbaa !112
  %cmp20 = icmp eq i32 %25, 5
  br i1 %cmp20, label %if.then22, label %if.else

if.then22:                                        ; preds = %if.then16
  %26 = bitcast i32* %clen to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %26) #5
  %27 = bitcast i64* %off to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %27) #5
  %28 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %len23 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %28, i32 0, i32 1
  %29 = load i64, i64* %len23, align 8, !tbaa !39
  store i64 %29, i64* %off, align 8, !tbaa !12
  %30 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %31 = bitcast i16* %u16 to i8*
  %call24 = call i64 @mbuf_append(%struct.mbuf* %30, i8* %31, i64 2)
  %32 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %33 = load i8*, i8** %rdata.addr, align 8, !tbaa !3
  %34 = load i64, i64* %rlen.addr, align 8, !tbaa !12
  %call25 = call i32 @mg_dns_encode_name(%struct.mbuf* %32, i8* %33, i64 %34)
  store i32 %call25, i32* %clen, align 4, !tbaa !15
  %cmp26 = icmp eq i32 %call25, -1
  br i1 %cmp26, label %if.then28, label %if.end29

if.then28:                                        ; preds = %if.then22
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end29:                                         ; preds = %if.then22
  %35 = load i32, i32* %clen, align 4, !tbaa !15
  %conv30 = trunc i32 %35 to i16
  store i16 %conv30, i16* %u16, align 2, !tbaa !86
  %36 = load i16, i16* %u16, align 2, !tbaa !86
  %conv31 = zext i16 %36 to i32
  %shr = ashr i32 %conv31, 8
  %conv32 = trunc i32 %shr to i8
  %37 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %37, i32 0, i32 0
  %38 = load i8*, i8** %buf, align 8, !tbaa !40
  %39 = load i64, i64* %off, align 8, !tbaa !12
  %arrayidx = getelementptr inbounds i8, i8* %38, i64 %39
  store i8 %conv32, i8* %arrayidx, align 1, !tbaa !14
  %40 = load i16, i16* %u16, align 2, !tbaa !86
  %conv33 = zext i16 %40 to i32
  %and = and i32 %conv33, 255
  %conv34 = trunc i32 %and to i8
  %41 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %buf35 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %41, i32 0, i32 0
  %42 = load i8*, i8** %buf35, align 8, !tbaa !40
  %43 = load i64, i64* %off, align 8, !tbaa !12
  %add = add i64 %43, 1
  %arrayidx36 = getelementptr inbounds i8, i8* %42, i64 %add
  store i8 %conv34, i8* %arrayidx36, align 1, !tbaa !14
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end29, %if.then28
  %44 = bitcast i64* %off to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %44) #5
  %45 = bitcast i32* %clen to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %45) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup48 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end44

if.else:                                          ; preds = %if.then16
  %46 = load i64, i64* %rlen.addr, align 8, !tbaa !12
  %conv38 = trunc i64 %46 to i16
  %call39 = call zeroext i16 @_OSSwapInt16(i16 zeroext %conv38)
  %conv40 = zext i16 %call39 to i32
  %conv41 = trunc i32 %conv40 to i16
  store i16 %conv41, i16* %u16, align 2, !tbaa !86
  %47 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %48 = bitcast i16* %u16 to i8*
  %call42 = call i64 @mbuf_append(%struct.mbuf* %47, i8* %48, i64 2)
  %49 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %50 = load i8*, i8** %rdata.addr, align 8, !tbaa !3
  %51 = load i64, i64* %rlen.addr, align 8, !tbaa !12
  %call43 = call i64 @mbuf_append(%struct.mbuf* %49, i8* %50, i64 %51)
  br label %if.end44

if.end44:                                         ; preds = %if.else, %cleanup.cont
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.end3
  %52 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %len46 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %52, i32 0, i32 1
  %53 = load i64, i64* %len46, align 8, !tbaa !39
  %54 = load i64, i64* %pos, align 8, !tbaa !12
  %sub = sub i64 %53, %54
  %conv47 = trunc i64 %sub to i32
  store i32 %conv47, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup48

cleanup48:                                        ; preds = %if.end45, %cleanup, %if.then2, %if.then
  %55 = bitcast i32* %u32 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %55) #5
  %56 = bitcast i16* %u16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %56) #5
  %57 = bitcast i64* %pos to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %57) #5
  %58 = load i32, i32* %retval, align 4
  ret i32 %58
}

; Function Attrs: nounwind ssp uwtable
define void @mg_send_dns_query(%struct.mg_connection* %nc, i8* %name, i32 %query_type) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %name.addr = alloca i8*, align 8
  %query_type.addr = alloca i32, align 4
  %msg = alloca %struct.mg_dns_message*, align 8
  %pkt = alloca %struct.mbuf, align 8
  %rr = alloca %struct.mg_dns_resource_record*, align 8
  %len = alloca i16, align 2
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %name, i8** %name.addr, align 8, !tbaa !3
  store i32 %query_type, i32* %query_type.addr, align 4, !tbaa !15
  %0 = bitcast %struct.mg_dns_message** %msg to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %call = call i8* @calloc(i64 1, i64 3104) #20
  %1 = bitcast i8* %call to %struct.mg_dns_message*
  store %struct.mg_dns_message* %1, %struct.mg_dns_message** %msg, align 8, !tbaa !3
  %2 = bitcast %struct.mbuf* %pkt to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %2) #5
  %3 = bitcast %struct.mg_dns_resource_record** %rr to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  %4 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg, align 8, !tbaa !3
  %questions = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %4, i32 0, i32 5
  %arrayidx = getelementptr inbounds [32 x %struct.mg_dns_resource_record], [32 x %struct.mg_dns_resource_record]* %questions, i64 0, i64 0
  store %struct.mg_dns_resource_record* %arrayidx, %struct.mg_dns_resource_record** %rr, align 8, !tbaa !3
  br label %do.body

do.body:                                          ; preds = %entry
  %call1 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 11577)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %5 = load i8*, i8** %name.addr, align 8, !tbaa !3
  %6 = load i32, i32* %query_type.addr, align 4, !tbaa !15
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.161, i32 0, i32 0), i8* %5, i32 %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %do.cond
  call void @mbuf_init(%struct.mbuf* %pkt, i64 64)
  %7 = load i32, i32* @mg_dns_tid, align 4, !tbaa !15
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* @mg_dns_tid, align 4, !tbaa !15
  %conv = trunc i32 %inc to i16
  %8 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg, align 8, !tbaa !3
  %transaction_id = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %8, i32 0, i32 2
  store i16 %conv, i16* %transaction_id, align 2, !tbaa !214
  %9 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %9, i32 0, i32 1
  store i16 256, i16* %flags, align 8, !tbaa !217
  %10 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg, align 8, !tbaa !3
  %num_questions = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %10, i32 0, i32 3
  store i32 1, i32* %num_questions, align 4, !tbaa !219
  %11 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg, align 8, !tbaa !3
  %call2 = call i32 @mg_dns_insert_header(%struct.mbuf* %pkt, i64 0, %struct.mg_dns_message* %11)
  %12 = load i32, i32* %query_type.addr, align 4, !tbaa !15
  %13 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr, align 8, !tbaa !3
  %rtype = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %13, i32 0, i32 1
  store i32 %12, i32* %rtype, align 8, !tbaa !112
  %14 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr, align 8, !tbaa !3
  %rclass = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %14, i32 0, i32 2
  store i32 1, i32* %rclass, align 4, !tbaa !225
  %15 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr, align 8, !tbaa !3
  %kind = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %15, i32 0, i32 4
  store i32 1, i32* %kind, align 4, !tbaa !224
  %16 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr, align 8, !tbaa !3
  %17 = load i8*, i8** %name.addr, align 8, !tbaa !3
  %18 = load i8*, i8** %name.addr, align 8, !tbaa !3
  %call3 = call i64 @strlen(i8* %18)
  %call4 = call i32 @mg_dns_encode_record(%struct.mbuf* %pkt, %struct.mg_dns_resource_record* %16, i8* %17, i64 %call3, i8* null, i64 0)
  %cmp = icmp eq i32 %call4, -1
  br i1 %cmp, label %if.then6, label %if.end7

if.then6:                                         ; preds = %do.end
  br label %cleanup

if.end7:                                          ; preds = %do.end
  %19 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags8 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %19, i32 0, i32 21
  %20 = load i64, i64* %flags8, align 8, !tbaa !41
  %and = and i64 %20, 2
  %tobool9 = icmp ne i64 %and, 0
  br i1 %tobool9, label %if.end17, label %if.then10

if.then10:                                        ; preds = %if.end7
  %21 = bitcast i16* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %21) #5
  %len11 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %pkt, i32 0, i32 1
  %22 = load i64, i64* %len11, align 8, !tbaa !39
  %conv12 = trunc i64 %22 to i16
  %call13 = call zeroext i16 @_OSSwapInt16(i16 zeroext %conv12)
  %conv14 = zext i16 %call13 to i32
  %conv15 = trunc i32 %conv14 to i16
  store i16 %conv15, i16* %len, align 2, !tbaa !86
  %23 = bitcast i16* %len to i8*
  %call16 = call i64 @mbuf_insert(%struct.mbuf* %pkt, i64 0, i8* %23, i64 2)
  %24 = bitcast i16* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %24) #5
  br label %if.end17

if.end17:                                         ; preds = %if.then10, %if.end7
  %25 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %pkt, i32 0, i32 0
  %26 = load i8*, i8** %buf, align 8, !tbaa !40
  %len18 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %pkt, i32 0, i32 1
  %27 = load i64, i64* %len18, align 8, !tbaa !39
  %conv19 = trunc i64 %27 to i32
  call void @mg_send(%struct.mg_connection* %25, i8* %26, i32 %conv19)
  call void @mbuf_free(%struct.mbuf* %pkt)
  br label %cleanup

cleanup:                                          ; preds = %if.end17, %if.then6
  %28 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg, align 8, !tbaa !3
  %29 = bitcast %struct.mg_dns_message* %28 to i8*
  call void @free(i8* %29)
  %30 = bitcast %struct.mg_dns_resource_record** %rr to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %30) #5
  %31 = bitcast %struct.mbuf* %pkt to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %31) #5
  %32 = bitcast %struct.mg_dns_message** %msg to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %32) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_parse_dns(i8* %buf, i32 %len, %struct.mg_dns_message* %msg) #0 {
entry:
  %retval = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %msg.addr = alloca %struct.mg_dns_message*, align 8
  %header = alloca %struct.mg_dns_header*, align 8
  %data = alloca i8*, align 8
  %end = alloca i8*, align 8
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i32 %len, i32* %len.addr, align 4, !tbaa !15
  store %struct.mg_dns_message* %msg, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_dns_header** %header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %2 = bitcast i8* %1 to %struct.mg_dns_header*
  store %struct.mg_dns_header* %2, %struct.mg_dns_header** %header, align 8, !tbaa !3
  %3 = bitcast i8** %data to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  %4 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 12
  store i8* %add.ptr, i8** %data, align 8, !tbaa !3
  %5 = bitcast i8** %end to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #5
  %6 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %7 = load i32, i32* %len.addr, align 4, !tbaa !15
  %idx.ext = sext i32 %7 to i64
  %add.ptr1 = getelementptr inbounds i8, i8* %6, i64 %idx.ext
  store i8* %add.ptr1, i8** %end, align 8, !tbaa !3
  %8 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %8) #5
  %9 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %10 = bitcast %struct.mg_dns_message* %9 to i8*
  %11 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %12 = bitcast %struct.mg_dns_message* %11 to i8*
  %13 = call i64 @llvm.objectsize.i64.p0i8(i8* %12, i1 false, i1 true)
  %call = call i8* @__memset_chk(i8* %10, i32 0, i64 3104, i64 %13) #5
  %14 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %15 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %pkt = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %15, i32 0, i32 0
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pkt, i32 0, i32 0
  store i8* %14, i8** %p, align 8, !tbaa !212
  %16 = load i32, i32* %len.addr, align 4, !tbaa !15
  %conv = sext i32 %16 to i64
  %17 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %pkt2 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %17, i32 0, i32 0
  %len3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pkt2, i32 0, i32 1
  store i64 %conv, i64* %len3, align 8, !tbaa !213
  %18 = load i32, i32* %len.addr, align 4, !tbaa !15
  %cmp = icmp slt i32 %18, 12
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %19 = load %struct.mg_dns_header*, %struct.mg_dns_header** %header, align 8, !tbaa !3
  %transaction_id = getelementptr inbounds %struct.mg_dns_header, %struct.mg_dns_header* %19, i32 0, i32 0
  %20 = load i16, i16* %transaction_id, align 2, !tbaa !215
  %21 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %transaction_id5 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %21, i32 0, i32 2
  store i16 %20, i16* %transaction_id5, align 2, !tbaa !214
  %22 = load %struct.mg_dns_header*, %struct.mg_dns_header** %header, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_dns_header, %struct.mg_dns_header* %22, i32 0, i32 1
  %23 = load i16, i16* %flags, align 2, !tbaa !218
  %call6 = call zeroext i16 @_OSSwapInt16(i16 zeroext %23)
  %conv7 = zext i16 %call6 to i32
  %conv8 = trunc i32 %conv7 to i16
  %24 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %flags9 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %24, i32 0, i32 1
  store i16 %conv8, i16* %flags9, align 8, !tbaa !217
  %25 = load %struct.mg_dns_header*, %struct.mg_dns_header** %header, align 8, !tbaa !3
  %num_questions = getelementptr inbounds %struct.mg_dns_header, %struct.mg_dns_header* %25, i32 0, i32 2
  %26 = load i16, i16* %num_questions, align 2, !tbaa !220
  %call10 = call zeroext i16 @_OSSwapInt16(i16 zeroext %26)
  %conv11 = zext i16 %call10 to i32
  %conv12 = trunc i32 %conv11 to i16
  %conv13 = zext i16 %conv12 to i32
  %27 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %num_questions14 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %27, i32 0, i32 3
  store i32 %conv13, i32* %num_questions14, align 4, !tbaa !219
  %28 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %num_questions15 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %28, i32 0, i32 3
  %29 = load i32, i32* %num_questions15, align 4, !tbaa !219
  %cmp16 = icmp sgt i32 %29, 32
  br i1 %cmp16, label %if.then18, label %if.end20

if.then18:                                        ; preds = %if.end
  %30 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %num_questions19 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %30, i32 0, i32 3
  store i32 32, i32* %num_questions19, align 4, !tbaa !219
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end
  %31 = load %struct.mg_dns_header*, %struct.mg_dns_header** %header, align 8, !tbaa !3
  %num_answers = getelementptr inbounds %struct.mg_dns_header, %struct.mg_dns_header* %31, i32 0, i32 3
  %32 = load i16, i16* %num_answers, align 2, !tbaa !221
  %call21 = call zeroext i16 @_OSSwapInt16(i16 zeroext %32)
  %conv22 = zext i16 %call21 to i32
  %conv23 = trunc i32 %conv22 to i16
  %conv24 = zext i16 %conv23 to i32
  %33 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %num_answers25 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %33, i32 0, i32 4
  store i32 %conv24, i32* %num_answers25, align 8, !tbaa !110
  %34 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %num_answers26 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %34, i32 0, i32 4
  %35 = load i32, i32* %num_answers26, align 8, !tbaa !110
  %cmp27 = icmp sgt i32 %35, 32
  br i1 %cmp27, label %if.then29, label %if.end31

if.then29:                                        ; preds = %if.end20
  %36 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %num_answers30 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %36, i32 0, i32 4
  store i32 32, i32* %num_answers30, align 8, !tbaa !110
  br label %if.end31

if.end31:                                         ; preds = %if.then29, %if.end20
  store i32 0, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end31
  %37 = load i32, i32* %i, align 4, !tbaa !15
  %38 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %num_questions32 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %38, i32 0, i32 3
  %39 = load i32, i32* %num_questions32, align 4, !tbaa !219
  %cmp33 = icmp slt i32 %37, %39
  br i1 %cmp33, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %40 = load i8*, i8** %data, align 8, !tbaa !3
  %41 = load i8*, i8** %end, align 8, !tbaa !3
  %42 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %questions = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %42, i32 0, i32 5
  %43 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom = sext i32 %43 to i64
  %arrayidx = getelementptr inbounds [32 x %struct.mg_dns_resource_record], [32 x %struct.mg_dns_resource_record]* %questions, i64 0, i64 %idxprom
  %call35 = call i8* @mg_parse_dns_resource_record(i8* %40, i8* %41, %struct.mg_dns_resource_record* %arrayidx, i32 0)
  store i8* %call35, i8** %data, align 8, !tbaa !3
  %44 = load i8*, i8** %data, align 8, !tbaa !3
  %cmp36 = icmp eq i8* %44, null
  br i1 %cmp36, label %if.then38, label %if.end39

if.then38:                                        ; preds = %for.body
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end39:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end39
  %45 = load i32, i32* %i, align 4, !tbaa !15
  %inc = add nsw i32 %45, 1
  store i32 %inc, i32* %i, align 4, !tbaa !15
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !tbaa !15
  br label %for.cond40

for.cond40:                                       ; preds = %for.inc52, %for.end
  %46 = load i32, i32* %i, align 4, !tbaa !15
  %47 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %num_answers41 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %47, i32 0, i32 4
  %48 = load i32, i32* %num_answers41, align 8, !tbaa !110
  %cmp42 = icmp slt i32 %46, %48
  br i1 %cmp42, label %for.body44, label %for.end54

for.body44:                                       ; preds = %for.cond40
  %49 = load i8*, i8** %data, align 8, !tbaa !3
  %50 = load i8*, i8** %end, align 8, !tbaa !3
  %51 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8, !tbaa !3
  %answers = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %51, i32 0, i32 6
  %52 = load i32, i32* %i, align 4, !tbaa !15
  %idxprom45 = sext i32 %52 to i64
  %arrayidx46 = getelementptr inbounds [32 x %struct.mg_dns_resource_record], [32 x %struct.mg_dns_resource_record]* %answers, i64 0, i64 %idxprom45
  %call47 = call i8* @mg_parse_dns_resource_record(i8* %49, i8* %50, %struct.mg_dns_resource_record* %arrayidx46, i32 1)
  store i8* %call47, i8** %data, align 8, !tbaa !3
  %53 = load i8*, i8** %data, align 8, !tbaa !3
  %cmp48 = icmp eq i8* %53, null
  br i1 %cmp48, label %if.then50, label %if.end51

if.then50:                                        ; preds = %for.body44
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end51:                                         ; preds = %for.body44
  br label %for.inc52

for.inc52:                                        ; preds = %if.end51
  %54 = load i32, i32* %i, align 4, !tbaa !15
  %inc53 = add nsw i32 %54, 1
  store i32 %inc53, i32* %i, align 4, !tbaa !15
  br label %for.cond40

for.end54:                                        ; preds = %for.cond40
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end54, %if.then50, %if.then38, %if.then
  %55 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %55) #5
  %56 = bitcast i8** %end to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %56) #5
  %57 = bitcast i8** %data to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %57) #5
  %58 = bitcast %struct.mg_dns_header** %header to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %58) #5
  %59 = load i32, i32* %retval, align 4
  ret i32 %59
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @mg_parse_dns_resource_record(i8* %data, i8* %end, %struct.mg_dns_resource_record* %rr, i32 %reply) #0 {
entry:
  %retval = alloca i8*, align 8
  %data.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %rr.addr = alloca %struct.mg_dns_resource_record*, align 8
  %reply.addr = alloca i32, align 4
  %name = alloca i8*, align 8
  %chunk_len = alloca i32, align 4
  %data_len = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %data, i8** %data.addr, align 8, !tbaa !3
  store i8* %end, i8** %end.addr, align 8, !tbaa !3
  store %struct.mg_dns_resource_record* %rr, %struct.mg_dns_resource_record** %rr.addr, align 8, !tbaa !3
  store i32 %reply, i32* %reply.addr, align 4, !tbaa !15
  %0 = bitcast i8** %name to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load i8*, i8** %data.addr, align 8, !tbaa !3
  store i8* %1, i8** %name, align 8, !tbaa !3
  %2 = bitcast i32* %chunk_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  %3 = bitcast i32* %data_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %4 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %5 = load i8*, i8** %end.addr, align 8, !tbaa !3
  %cmp = icmp ult i8* %4, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %6 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %7 = load i8, i8* %6, align 1, !tbaa !14
  %conv = zext i8 %7 to i32
  store i32 %conv, i32* %chunk_len, align 4, !tbaa !15
  %tobool = icmp ne i32 %conv, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %8 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %8, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %9 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %arrayidx = getelementptr inbounds i8, i8* %9, i64 0
  %10 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv1 = zext i8 %10 to i32
  %and = and i32 %conv1, 192
  %tobool2 = icmp ne i32 %and, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %11 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %add.ptr, i8** %data.addr, align 8, !tbaa !3
  br label %while.end

if.end:                                           ; preds = %while.body
  %12 = load i32, i32* %chunk_len, align 4, !tbaa !15
  %add = add nsw i32 %12, 1
  %13 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %idx.ext = sext i32 %add to i64
  %add.ptr3 = getelementptr inbounds i8, i8* %13, i64 %idx.ext
  store i8* %add.ptr3, i8** %data.addr, align 8, !tbaa !3
  br label %while.cond

while.end:                                        ; preds = %if.then, %land.end
  %14 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %15 = load i8*, i8** %end.addr, align 8, !tbaa !3
  %add.ptr4 = getelementptr inbounds i8, i8* %15, i64 -5
  %cmp5 = icmp ugt i8* %14, %add.ptr4
  br i1 %cmp5, label %if.then7, label %if.end8

if.then7:                                         ; preds = %while.end
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end8:                                          ; preds = %while.end
  %16 = load i8*, i8** %name, align 8, !tbaa !3
  %17 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8, !tbaa !3
  %name9 = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %17, i32 0, i32 0
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name9, i32 0, i32 0
  store i8* %16, i8** %p, align 8, !tbaa !222
  %18 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %19 = load i8*, i8** %name, align 8, !tbaa !3
  %sub.ptr.lhs.cast = ptrtoint i8* %18 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %19 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %add10 = add nsw i64 %sub.ptr.sub, 1
  %20 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8, !tbaa !3
  %name11 = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %20, i32 0, i32 0
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name11, i32 0, i32 1
  store i64 %add10, i64* %len, align 8, !tbaa !223
  %21 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %incdec.ptr = getelementptr inbounds i8, i8* %21, i32 1
  store i8* %incdec.ptr, i8** %data.addr, align 8, !tbaa !3
  %22 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %arrayidx12 = getelementptr inbounds i8, i8* %22, i64 0
  %23 = load i8, i8* %arrayidx12, align 1, !tbaa !14
  %conv13 = zext i8 %23 to i32
  %shl = shl i32 %conv13, 8
  %24 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %arrayidx14 = getelementptr inbounds i8, i8* %24, i64 1
  %25 = load i8, i8* %arrayidx14, align 1, !tbaa !14
  %conv15 = zext i8 %25 to i32
  %or = or i32 %shl, %conv15
  %26 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8, !tbaa !3
  %rtype = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %26, i32 0, i32 1
  store i32 %or, i32* %rtype, align 8, !tbaa !112
  %27 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %add.ptr16 = getelementptr inbounds i8, i8* %27, i64 2
  store i8* %add.ptr16, i8** %data.addr, align 8, !tbaa !3
  %28 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %arrayidx17 = getelementptr inbounds i8, i8* %28, i64 0
  %29 = load i8, i8* %arrayidx17, align 1, !tbaa !14
  %conv18 = zext i8 %29 to i32
  %shl19 = shl i32 %conv18, 8
  %30 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %arrayidx20 = getelementptr inbounds i8, i8* %30, i64 1
  %31 = load i8, i8* %arrayidx20, align 1, !tbaa !14
  %conv21 = zext i8 %31 to i32
  %or22 = or i32 %shl19, %conv21
  %32 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8, !tbaa !3
  %rclass = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %32, i32 0, i32 2
  store i32 %or22, i32* %rclass, align 4, !tbaa !225
  %33 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %add.ptr23 = getelementptr inbounds i8, i8* %33, i64 2
  store i8* %add.ptr23, i8** %data.addr, align 8, !tbaa !3
  %34 = load i32, i32* %reply.addr, align 4, !tbaa !15
  %tobool24 = icmp ne i32 %34, 0
  %35 = zext i1 %tobool24 to i64
  %cond = select i1 %tobool24, i32 2, i32 1
  %36 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8, !tbaa !3
  %kind = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %36, i32 0, i32 4
  store i32 %cond, i32* %kind, align 4, !tbaa !224
  %37 = load i32, i32* %reply.addr, align 4, !tbaa !15
  %tobool25 = icmp ne i32 %37, 0
  br i1 %tobool25, label %if.then26, label %if.end59

if.then26:                                        ; preds = %if.end8
  %38 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %39 = load i8*, i8** %end.addr, align 8, !tbaa !3
  %add.ptr27 = getelementptr inbounds i8, i8* %39, i64 -6
  %cmp28 = icmp uge i8* %38, %add.ptr27
  br i1 %cmp28, label %if.then30, label %if.end31

if.then30:                                        ; preds = %if.then26
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end31:                                         ; preds = %if.then26
  %40 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %arrayidx32 = getelementptr inbounds i8, i8* %40, i64 0
  %41 = load i8, i8* %arrayidx32, align 1, !tbaa !14
  %conv33 = zext i8 %41 to i32
  %shl34 = shl i32 %conv33, 24
  %42 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %arrayidx35 = getelementptr inbounds i8, i8* %42, i64 1
  %43 = load i8, i8* %arrayidx35, align 1, !tbaa !14
  %conv36 = zext i8 %43 to i32
  %shl37 = shl i32 %conv36, 16
  %or38 = or i32 %shl34, %shl37
  %44 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %arrayidx39 = getelementptr inbounds i8, i8* %44, i64 2
  %45 = load i8, i8* %arrayidx39, align 1, !tbaa !14
  %conv40 = zext i8 %45 to i32
  %shl41 = shl i32 %conv40, 8
  %or42 = or i32 %or38, %shl41
  %46 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %arrayidx43 = getelementptr inbounds i8, i8* %46, i64 3
  %47 = load i8, i8* %arrayidx43, align 1, !tbaa !14
  %conv44 = zext i8 %47 to i32
  %or45 = or i32 %or42, %conv44
  %48 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8, !tbaa !3
  %ttl = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %48, i32 0, i32 3
  store i32 %or45, i32* %ttl, align 8, !tbaa !226
  %49 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %add.ptr46 = getelementptr inbounds i8, i8* %49, i64 4
  store i8* %add.ptr46, i8** %data.addr, align 8, !tbaa !3
  %50 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %51 = load i8, i8* %50, align 1, !tbaa !14
  %conv47 = zext i8 %51 to i32
  %shl48 = shl i32 %conv47, 8
  %52 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %add.ptr49 = getelementptr inbounds i8, i8* %52, i64 1
  %53 = load i8, i8* %add.ptr49, align 1, !tbaa !14
  %conv50 = zext i8 %53 to i32
  %or51 = or i32 %shl48, %conv50
  store i32 %or51, i32* %data_len, align 4, !tbaa !15
  %54 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %add.ptr52 = getelementptr inbounds i8, i8* %54, i64 2
  store i8* %add.ptr52, i8** %data.addr, align 8, !tbaa !3
  %55 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %56 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8, !tbaa !3
  %rdata = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %56, i32 0, i32 5
  %p53 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rdata, i32 0, i32 0
  store i8* %55, i8** %p53, align 8, !tbaa !211
  %57 = load i32, i32* %data_len, align 4, !tbaa !15
  %conv54 = sext i32 %57 to i64
  %58 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8, !tbaa !3
  %rdata55 = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %58, i32 0, i32 5
  %len56 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rdata55, i32 0, i32 1
  store i64 %conv54, i64* %len56, align 8, !tbaa !227
  %59 = load i32, i32* %data_len, align 4, !tbaa !15
  %60 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %idx.ext57 = sext i32 %59 to i64
  %add.ptr58 = getelementptr inbounds i8, i8* %60, i64 %idx.ext57
  store i8* %add.ptr58, i8** %data.addr, align 8, !tbaa !3
  br label %if.end59

if.end59:                                         ; preds = %if.end31, %if.end8
  %61 = load i8*, i8** %data.addr, align 8, !tbaa !3
  store i8* %61, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end59, %if.then30, %if.then7
  %62 = bitcast i32* %data_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %62) #5
  %63 = bitcast i32* %chunk_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %63) #5
  %64 = bitcast i8** %name to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %64) #5
  %65 = load i8*, i8** %retval, align 8
  ret i8* %65
}

; Function Attrs: nounwind ssp uwtable
define void @mg_set_protocol_dns(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %proto_handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 12
  store void (%struct.mg_connection*, i32, i8*)* @dns_handler, void (%struct.mg_connection*, i32, i8*)** %proto_handler, align 8, !tbaa !52
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @dns_handler(%struct.mg_connection* %nc, i32 %ev, i8* %ev_data) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %ev.addr = alloca i32, align 4
  %ev_data.addr = alloca i8*, align 8
  %io = alloca %struct.mbuf*, align 8
  %msg = alloca %struct.mg_dns_message, align 8
  %len12 = alloca i16, align 2
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i32 %ev, i32* %ev.addr, align 4, !tbaa !15
  store i8* %ev_data, i8** %ev_data.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mbuf** %io to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 8
  store %struct.mbuf* %recv_mbuf, %struct.mbuf** %io, align 8, !tbaa !3
  %2 = bitcast %struct.mg_dns_message* %msg to i8*
  call void @llvm.lifetime.start.p0i8(i64 3104, i8* %2) #5
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 15
  %4 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler, align 8, !tbaa !53
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %6 = load i32, i32* %ev.addr, align 4, !tbaa !15
  %7 = load i8*, i8** %ev_data.addr, align 8, !tbaa !3
  call void %4(%struct.mg_connection* %5, i32 %6, i8* %7)
  %8 = load i32, i32* %ev.addr, align 4, !tbaa !15
  switch i32 %8, label %sw.epilog [
    i32 3, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %9, i32 0, i32 21
  %10 = load i64, i64* %flags, align 8, !tbaa !41
  %and = and i64 %10, 2
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %sw.bb
  %11 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %11, i32 0, i32 8
  call void @mbuf_remove(%struct.mbuf* %recv_mbuf1, i64 2)
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %12, i32 0, i32 8
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf2, i32 0, i32 0
  %13 = load i8*, i8** %buf, align 8, !tbaa !89
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf3 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf3, i32 0, i32 1
  %15 = load i64, i64* %len, align 8, !tbaa !54
  %conv = trunc i64 %15 to i32
  %call = call i32 @mg_parse_dns(i8* %13, i32 %conv, %struct.mg_dns_message* %msg)
  %cmp = icmp eq i32 %call, -1
  br i1 %cmp, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  %16 = bitcast %struct.mg_dns_message* %msg to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 3104, i1 false)
  %flags6 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %msg, i32 0, i32 1
  store i16 -32639, i16* %flags6, align 8, !tbaa !217
  %17 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %call7 = call i32 @mg_dns_insert_header(%struct.mbuf* %17, i64 0, %struct.mg_dns_message* %msg)
  %18 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags8 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %18, i32 0, i32 21
  %19 = load i64, i64* %flags8, align 8, !tbaa !41
  %and9 = and i64 %19, 2
  %tobool10 = icmp ne i64 %and9, 0
  br i1 %tobool10, label %if.end19, label %if.then11

if.then11:                                        ; preds = %if.then5
  %20 = bitcast i16* %len12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %20) #5
  %21 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %len13 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %21, i32 0, i32 1
  %22 = load i64, i64* %len13, align 8, !tbaa !39
  %conv14 = trunc i64 %22 to i16
  %call15 = call zeroext i16 @_OSSwapInt16(i16 zeroext %conv14)
  %conv16 = zext i16 %call15 to i32
  %conv17 = trunc i32 %conv16 to i16
  store i16 %conv17, i16* %len12, align 2, !tbaa !86
  %23 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %24 = bitcast i16* %len12 to i8*
  %call18 = call i64 @mbuf_insert(%struct.mbuf* %23, i64 0, i8* %24, i64 2)
  %25 = bitcast i16* %len12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %25) #5
  br label %if.end19

if.end19:                                         ; preds = %if.then11, %if.then5
  %26 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %27 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %buf20 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %27, i32 0, i32 0
  %28 = load i8*, i8** %buf20, align 8, !tbaa !40
  %29 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %len21 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %29, i32 0, i32 1
  %30 = load i64, i64* %len21, align 8, !tbaa !39
  %conv22 = trunc i64 %30 to i32
  call void @mg_send(%struct.mg_connection* %26, i8* %28, i32 %conv22)
  br label %if.end24

if.else:                                          ; preds = %if.end
  %31 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %handler23 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %31, i32 0, i32 15
  %32 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler23, align 8, !tbaa !53
  %33 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %34 = bitcast %struct.mg_dns_message* %msg to i8*
  call void %32(%struct.mg_connection* %33, i32 100, i8* %34)
  br label %if.end24

if.end24:                                         ; preds = %if.else, %if.end19
  %35 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %36 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %len25 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %36, i32 0, i32 1
  %37 = load i64, i64* %len25, align 8, !tbaa !39
  call void @mbuf_remove(%struct.mbuf* %35, i64 %37)
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %if.end24
  %38 = bitcast %struct.mg_dns_message* %msg to i8*
  call void @llvm.lifetime.end.p0i8(i64 3104, i8* %38) #5
  %39 = bitcast %struct.mbuf** %io to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %39) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_resolve_from_hosts_file(i8* %name, %union.socket_address* %usa) #0 {
entry:
  %retval = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %usa.addr = alloca %union.socket_address*, align 8
  %fp = alloca %struct.__sFILE*, align 8
  %line = alloca [1024 x i8], align 16
  %p = alloca i8*, align 8
  %alias = alloca [256 x i8], align 16
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %len = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %name, i8** %name.addr, align 8, !tbaa !3
  store %union.socket_address* %usa, %union.socket_address** %usa.addr, align 8, !tbaa !3
  %0 = bitcast %struct.__sFILE** %fp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = bitcast [1024 x i8]* %line to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* %1) #5
  %2 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  %3 = bitcast [256 x i8]* %alias to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* %3) #5
  %4 = bitcast i32* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #5
  %5 = bitcast i32* %b to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #5
  %6 = bitcast i32* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #5
  %7 = bitcast i32* %d to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %7) #5
  %8 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %8) #5
  store i32 0, i32* %len, align 4, !tbaa !15
  %call = call %struct.__sFILE* @mg_fopen(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.162, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.105, i32 0, i32 0))
  store %struct.__sFILE* %call, %struct.__sFILE** %fp, align 8, !tbaa !3
  %cmp = icmp eq %struct.__sFILE* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  br label %for.cond

for.cond:                                         ; preds = %for.end, %if.then11, %if.then5, %if.end
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %line, i32 0, i32 0
  %9 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !tbaa !3
  %call1 = call i8* @fgets(i8* %arraydecay, i32 1024, %struct.__sFILE* %9)
  %cmp2 = icmp ne i8* %call1, null
  br i1 %cmp2, label %for.body, label %for.end34

for.body:                                         ; preds = %for.cond
  %arrayidx = getelementptr inbounds [1024 x i8], [1024 x i8]* %line, i64 0, i64 0
  %10 = load i8, i8* %arrayidx, align 16, !tbaa !14
  %conv = sext i8 %10 to i32
  %cmp3 = icmp eq i32 %conv, 35
  br i1 %cmp3, label %if.then5, label %if.end6

if.then5:                                         ; preds = %for.body
  br label %for.cond

if.end6:                                          ; preds = %for.body
  %arraydecay7 = getelementptr inbounds [1024 x i8], [1024 x i8]* %line, i32 0, i32 0
  %call8 = call i32 (i8*, i8*, ...) @sscanf(i8* %arraydecay7, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.163, i32 0, i32 0), i32* %a, i32* %b, i32* %c, i32* %d, i32* %len)
  %cmp9 = icmp eq i32 %call8, 0
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end6
  br label %for.cond

if.end12:                                         ; preds = %if.end6
  %arraydecay13 = getelementptr inbounds [1024 x i8], [1024 x i8]* %line, i32 0, i32 0
  %11 = load i32, i32* %len, align 4, !tbaa !15
  %idx.ext = sext i32 %11 to i64
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay13, i64 %idx.ext
  store i8* %add.ptr, i8** %p, align 8, !tbaa !3
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %if.end12
  %12 = load i8*, i8** %p, align 8, !tbaa !3
  %arraydecay15 = getelementptr inbounds [256 x i8], [256 x i8]* %alias, i32 0, i32 0
  %call16 = call i32 (i8*, i8*, ...) @sscanf(i8* %12, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.164, i32 0, i32 0), i8* %arraydecay15, i32* %len)
  %cmp17 = icmp eq i32 %call16, 1
  br i1 %cmp17, label %for.body19, label %for.end

for.body19:                                       ; preds = %for.cond14
  %arraydecay20 = getelementptr inbounds [256 x i8], [256 x i8]* %alias, i32 0, i32 0
  %13 = load i8*, i8** %name.addr, align 8, !tbaa !3
  %call21 = call i32 @strcmp(i8* %arraydecay20, i8* %13)
  %cmp22 = icmp eq i32 %call21, 0
  br i1 %cmp22, label %if.then24, label %if.end31

if.then24:                                        ; preds = %for.body19
  %14 = load i32, i32* %a, align 4, !tbaa !15
  %shl = shl i32 %14, 24
  %15 = load i32, i32* %b, align 4, !tbaa !15
  %shl25 = shl i32 %15, 16
  %or = or i32 %shl, %shl25
  %16 = load i32, i32* %c, align 4, !tbaa !15
  %shl26 = shl i32 %16, 8
  %or27 = or i32 %or, %shl26
  %17 = load i32, i32* %d, align 4, !tbaa !15
  %or28 = or i32 %or27, %17
  %call29 = call i32 @_OSSwapInt32(i32 %or28)
  %18 = load %union.socket_address*, %union.socket_address** %usa.addr, align 8, !tbaa !3
  %sin = bitcast %union.socket_address* %18 to %struct.sockaddr_in*
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin, i32 0, i32 3
  %s_addr = getelementptr inbounds %struct.in_addr, %struct.in_addr* %sin_addr, i32 0, i32 0
  store i32 %call29, i32* %s_addr, align 4, !tbaa !14
  %19 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !tbaa !3
  %call30 = call i32 @fclose(%struct.__sFILE* %19)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end31:                                         ; preds = %for.body19
  br label %for.inc

for.inc:                                          ; preds = %if.end31
  %20 = load i32, i32* %len, align 4, !tbaa !15
  %21 = load i8*, i8** %p, align 8, !tbaa !3
  %idx.ext32 = sext i32 %20 to i64
  %add.ptr33 = getelementptr inbounds i8, i8* %21, i64 %idx.ext32
  store i8* %add.ptr33, i8** %p, align 8, !tbaa !3
  br label %for.cond14

for.end:                                          ; preds = %for.cond14
  br label %for.cond

for.end34:                                        ; preds = %for.cond
  %22 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !tbaa !3
  %call35 = call i32 @fclose(%struct.__sFILE* %22)
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end34, %if.then24, %if.then
  %23 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %23) #5
  %24 = bitcast i32* %d to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %24) #5
  %25 = bitcast i32* %c to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %25) #5
  %26 = bitcast i32* %b to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %26) #5
  %27 = bitcast i32* %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %27) #5
  %28 = bitcast [256 x i8]* %alias to i8*
  call void @llvm.lifetime.end.p0i8(i64 256, i8* %28) #5
  %29 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %29) #5
  %30 = bitcast [1024 x i8]* %line to i8*
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* %30) #5
  %31 = bitcast %struct.__sFILE** %fp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %31) #5
  %32 = load i32, i32* %retval, align 4
  ret i32 %32
}

; Function Attrs: nounwind ssp uwtable
define i32 @mg_resolve_async(%struct.mg_mgr* %mgr, i8* %name, i32 %query, void (%struct.mg_dns_message*, i8*, i32)* %cb, i8* %data) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %name.addr = alloca i8*, align 8
  %query.addr = alloca i32, align 4
  %cb.addr = alloca void (%struct.mg_dns_message*, i8*, i32)*, align 8
  %data.addr = alloca i8*, align 8
  %opts = alloca %struct.mg_resolve_async_opts, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  store i8* %name, i8** %name.addr, align 8, !tbaa !3
  store i32 %query, i32* %query.addr, align 4, !tbaa !15
  store void (%struct.mg_dns_message*, i8*, i32)* %cb, void (%struct.mg_dns_message*, i8*, i32)** %cb.addr, align 8, !tbaa !3
  store i8* %data, i8** %data.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_resolve_async_opts* %opts to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %0) #5
  %1 = bitcast %struct.mg_resolve_async_opts* %opts to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 32, i1 false)
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %3 = load i8*, i8** %name.addr, align 8, !tbaa !3
  %4 = load i32, i32* %query.addr, align 4, !tbaa !15
  %5 = load void (%struct.mg_dns_message*, i8*, i32)*, void (%struct.mg_dns_message*, i8*, i32)** %cb.addr, align 8, !tbaa !3
  %6 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %call = call i32 @mg_resolve_async_opt(%struct.mg_mgr* %2, i8* %3, i32 %4, void (%struct.mg_dns_message*, i8*, i32)* %5, i8* %6, %struct.mg_resolve_async_opts* byval align 8 %opts)
  %7 = bitcast %struct.mg_resolve_async_opts* %opts to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %7) #5
  ret i32 %call
}

; Function Attrs: nounwind
declare i8* @__strncpy_chk(i8*, i8*, i64, i64) #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_get_ip_address_of_nameserver(i8* %name, i64 %name_len) #0 {
entry:
  %name.addr = alloca i8*, align 8
  %name_len.addr = alloca i64, align 8
  %ret = alloca i32, align 4
  %fp = alloca %struct.__sFILE*, align 8
  %line = alloca [512 x i8], align 16
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %name, i8** %name.addr, align 8, !tbaa !3
  store i64 %name_len, i64* %name_len.addr, align 8, !tbaa !12
  %0 = bitcast i32* %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  store i32 -1, i32* %ret, align 4, !tbaa !15
  %1 = bitcast %struct.__sFILE** %fp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %2 = bitcast [512 x i8]* %line to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* %2) #5
  %call = call %struct.__sFILE* @mg_fopen(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.408, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.105, i32 0, i32 0))
  store %struct.__sFILE* %call, %struct.__sFILE** %fp, align 8, !tbaa !3
  %cmp = icmp eq %struct.__sFILE* %call, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 -1, i32* %ret, align 4, !tbaa !15
  br label %if.end12

if.else:                                          ; preds = %entry
  store i32 -1, i32* %ret, align 4, !tbaa !15
  br label %for.cond

for.cond:                                         ; preds = %cleanup.cont, %if.else
  %arraydecay = getelementptr inbounds [512 x i8], [512 x i8]* %line, i32 0, i32 0
  %3 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !tbaa !3
  %call1 = call i8* @fgets(i8* %arraydecay, i32 512, %struct.__sFILE* %3)
  %cmp2 = icmp ne i8* %call1, null
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = bitcast i32* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #5
  %5 = bitcast i32* %b to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #5
  %6 = bitcast i32* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #5
  %7 = bitcast i32* %d to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %7) #5
  %arraydecay3 = getelementptr inbounds [512 x i8], [512 x i8]* %line, i32 0, i32 0
  %call4 = call i32 (i8*, i8*, ...) @sscanf(i8* %arraydecay3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.409, i32 0, i32 0), i32* %a, i32* %b, i32* %c, i32* %d)
  %cmp5 = icmp eq i32 %call4, 4
  br i1 %cmp5, label %if.then6, label %if.end

if.then6:                                         ; preds = %for.body
  %8 = load i8*, i8** %name.addr, align 8, !tbaa !3
  %9 = load i64, i64* %name_len.addr, align 8, !tbaa !12
  %10 = load i8*, i8** %name.addr, align 8, !tbaa !3
  %11 = call i64 @llvm.objectsize.i64.p0i8(i8* %10, i1 false, i1 true)
  %12 = load i32, i32* %a, align 4, !tbaa !15
  %13 = load i32, i32* %b, align 4, !tbaa !15
  %14 = load i32, i32* %c, align 4, !tbaa !15
  %15 = load i32, i32* %d, align 4, !tbaa !15
  %call7 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %8, i64 %9, i32 0, i64 %11, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.410, i32 0, i32 0), i32 %12, i32 %13, i32 %14, i32 %15)
  store i32 0, i32* %ret, align 4, !tbaa !15
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %for.body
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then6
  %16 = bitcast i32* %d to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %16) #5
  %17 = bitcast i32* %c to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %17) #5
  %18 = bitcast i32* %b to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %18) #5
  %19 = bitcast i32* %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %19) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 2, label %for.end
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.cond

for.end:                                          ; preds = %cleanup, %for.cond
  %20 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !tbaa !3
  %call11 = call i32 @fclose(%struct.__sFILE* %20)
  br label %if.end12

if.end12:                                         ; preds = %for.end, %if.then
  %21 = load i32, i32* %ret, align 4, !tbaa !15
  store i32 1, i32* %cleanup.dest.slot, align 4
  %22 = bitcast [512 x i8]* %line to i8*
  call void @llvm.lifetime.end.p0i8(i64 512, i8* %22) #5
  %23 = bitcast %struct.__sFILE** %fp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %23) #5
  %24 = bitcast i32* %ret to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %24) #5
  ret i32 %21

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_resolve_async_eh(%struct.mg_connection* %nc, i32 %ev, i8* %data) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %ev.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %now = alloca i64, align 8
  %req = alloca %struct.mg_resolve_async_request*, align 8
  %msg = alloca %struct.mg_dns_message*, align 8
  %user_data = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %addr = alloca [32 x i8], align 16
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i32 %ev, i32* %ev.addr, align 4, !tbaa !15
  store i8* %data, i8** %data.addr, align 8, !tbaa !3
  %0 = bitcast i64* %now to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %call = call double @mg_time()
  %conv = fptosi double %call to i64
  store i64 %conv, i64* %now, align 8, !tbaa !12
  %1 = bitcast %struct.mg_resolve_async_request** %req to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %2 = bitcast %struct.mg_dns_message** %msg to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  %3 = bitcast i8** %user_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %user_data1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 16
  %5 = load i8*, i8** %user_data1, align 8, !tbaa !44
  store i8* %5, i8** %user_data, align 8, !tbaa !3
  %6 = load i32, i32* %ev.addr, align 4, !tbaa !15
  %cmp = icmp ne i32 %6, 0
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %call3 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 12010)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.then4, label %if.end

if.then4:                                         ; preds = %do.body
  %7 = load i32, i32* %ev.addr, align 4, !tbaa !15
  %8 = load i8*, i8** %user_data, align 8, !tbaa !3
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.411, i32 0, i32 0), i32 %7, i8* %8)
  br label %if.end

if.end:                                           ; preds = %if.then4, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end5

if.end5:                                          ; preds = %do.end, %entry
  %9 = load i8*, i8** %user_data, align 8, !tbaa !3
  %10 = bitcast i8* %9 to %struct.mg_resolve_async_request*
  store %struct.mg_resolve_async_request* %10, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %11 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %cmp6 = icmp eq %struct.mg_resolve_async_request* %11, null
  br i1 %cmp6, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end5
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end9:                                          ; preds = %if.end5
  %12 = load i32, i32* %ev.addr, align 4, !tbaa !15
  switch i32 %12, label %sw.epilog [
    i32 0, label %sw.bb
    i32 2, label %sw.bb18
    i32 3, label %sw.bb28
    i32 4, label %sw.bb42
    i32 6, label %sw.bb46
    i32 5, label %sw.bb50
  ]

sw.bb:                                            ; preds = %if.end9
  %13 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %retries = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %13, i32 0, i32 8
  %14 = load i32, i32* %retries, align 8, !tbaa !228
  %15 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %max_retries = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %15, i32 0, i32 5
  %16 = load i32, i32* %max_retries, align 8, !tbaa !107
  %cmp10 = icmp sgt i32 %14, %16
  br i1 %cmp10, label %if.then12, label %if.end13

if.then12:                                        ; preds = %sw.bb
  %17 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %err = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %17, i32 0, i32 6
  store i32 2, i32* %err, align 4, !tbaa !229
  %18 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %18, i32 0, i32 21
  %19 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %19, 2048
  store i64 %or, i64* %flags, align 8, !tbaa !41
  br label %sw.epilog

if.end13:                                         ; preds = %sw.bb
  %20 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags14 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %20, i32 0, i32 21
  %21 = load i64, i64* %flags14, align 8, !tbaa !41
  %and = and i64 %21, 8
  %tobool15 = icmp ne i64 %and, 0
  br i1 %tobool15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.end13
  br label %sw.epilog

if.end17:                                         ; preds = %if.end13
  br label %sw.bb18

sw.bb18:                                          ; preds = %if.end9, %if.end17
  %22 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %retries19 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %22, i32 0, i32 8
  %23 = load i32, i32* %retries19, align 8, !tbaa !228
  %cmp20 = icmp eq i32 %23, 0
  br i1 %cmp20, label %if.then24, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb18
  %24 = load i64, i64* %now, align 8, !tbaa !12
  %25 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %last_time = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %25, i32 0, i32 7
  %26 = load i64, i64* %last_time, align 8, !tbaa !230
  %sub = sub nsw i64 %24, %26
  %27 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %timeout = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %27, i32 0, i32 4
  %28 = load i64, i64* %timeout, align 8, !tbaa !109
  %cmp22 = icmp sge i64 %sub, %28
  br i1 %cmp22, label %if.then24, label %if.end27

if.then24:                                        ; preds = %lor.lhs.false, %sw.bb18
  %29 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %30 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %name = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %30, i32 0, i32 0
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %name, i32 0, i32 0
  %31 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %query = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %31, i32 0, i32 1
  %32 = load i32, i32* %query, align 8, !tbaa !102
  call void @mg_send_dns_query(%struct.mg_connection* %29, i8* %arraydecay, i32 %32)
  %33 = load i64, i64* %now, align 8, !tbaa !12
  %34 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %last_time25 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %34, i32 0, i32 7
  store i64 %33, i64* %last_time25, align 8, !tbaa !230
  %35 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %retries26 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %35, i32 0, i32 8
  %36 = load i32, i32* %retries26, align 8, !tbaa !228
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %retries26, align 8, !tbaa !228
  br label %if.end27

if.end27:                                         ; preds = %if.then24, %lor.lhs.false
  br label %sw.epilog

sw.bb28:                                          ; preds = %if.end9
  %call29 = call i8* @malloc(i64 3104) #18
  %37 = bitcast i8* %call29 to %struct.mg_dns_message*
  store %struct.mg_dns_message* %37, %struct.mg_dns_message** %msg, align 8, !tbaa !3
  %38 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %38, i32 0, i32 8
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf, i32 0, i32 0
  %39 = load i8*, i8** %buf, align 8, !tbaa !89
  %40 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %41 = bitcast i8* %40 to i32*
  %42 = load i32, i32* %41, align 4, !tbaa !15
  %43 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg, align 8, !tbaa !3
  %call30 = call i32 @mg_parse_dns(i8* %39, i32 %42, %struct.mg_dns_message* %43)
  %cmp31 = icmp eq i32 %call30, 0
  br i1 %cmp31, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %sw.bb28
  %44 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg, align 8, !tbaa !3
  %num_answers = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %44, i32 0, i32 4
  %45 = load i32, i32* %num_answers, align 8, !tbaa !110
  %cmp33 = icmp sgt i32 %45, 0
  br i1 %cmp33, label %if.then35, label %if.else

if.then35:                                        ; preds = %land.lhs.true
  %46 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %callback = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %46, i32 0, i32 2
  %47 = load void (%struct.mg_dns_message*, i8*, i32)*, void (%struct.mg_dns_message*, i8*, i32)** %callback, align 8, !tbaa !104
  %48 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg, align 8, !tbaa !3
  %49 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %data36 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %49, i32 0, i32 3
  %50 = load i8*, i8** %data36, align 8, !tbaa !105
  call void %47(%struct.mg_dns_message* %48, i8* %50, i32 0)
  %51 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %user_data37 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %51, i32 0, i32 16
  store i8* null, i8** %user_data37, align 8, !tbaa !44
  %52 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %53 = bitcast %struct.mg_resolve_async_request* %52 to i8*
  call void @free(i8* %53)
  br label %if.end39

if.else:                                          ; preds = %land.lhs.true, %sw.bb28
  %54 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %err38 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %54, i32 0, i32 6
  store i32 1, i32* %err38, align 4, !tbaa !229
  br label %if.end39

if.end39:                                         ; preds = %if.else, %if.then35
  %55 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg, align 8, !tbaa !3
  %56 = bitcast %struct.mg_dns_message* %55 to i8*
  call void @free(i8* %56)
  %57 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags40 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %57, i32 0, i32 21
  %58 = load i64, i64* %flags40, align 8, !tbaa !41
  %or41 = or i64 %58, 2048
  store i64 %or41, i64* %flags40, align 8, !tbaa !41
  br label %sw.epilog

sw.bb42:                                          ; preds = %if.end9
  %59 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags43 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %59, i32 0, i32 21
  %60 = load i64, i64* %flags43, align 8, !tbaa !41
  %and44 = and i64 %60, -2049
  store i64 %and44, i64* %flags43, align 8, !tbaa !41
  %61 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %61, i32 0, i32 9
  %62 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %send_mbuf45 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %62, i32 0, i32 9
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %send_mbuf45, i32 0, i32 1
  %63 = load i64, i64* %len, align 8, !tbaa !43
  call void @mbuf_remove(%struct.mbuf* %send_mbuf, i64 %63)
  br label %sw.epilog

sw.bb46:                                          ; preds = %if.end9
  %64 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %err47 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %64, i32 0, i32 6
  store i32 3, i32* %err47, align 4, !tbaa !229
  %65 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags48 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %65, i32 0, i32 21
  %66 = load i64, i64* %flags48, align 8, !tbaa !41
  %or49 = or i64 %66, 2048
  store i64 %or49, i64* %flags48, align 8, !tbaa !41
  br label %sw.epilog

sw.bb50:                                          ; preds = %if.end9
  %67 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %cmp51 = icmp ne %struct.mg_resolve_async_request* %67, null
  br i1 %cmp51, label %if.then53, label %if.end60

if.then53:                                        ; preds = %sw.bb50
  %68 = bitcast [32 x i8]* %addr to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %68) #5
  %69 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sa = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %69, i32 0, i32 6
  %arraydecay54 = getelementptr inbounds [32 x i8], [32 x i8]* %addr, i32 0, i32 0
  %call55 = call i32 @mg_sock_addr_to_str(%union.socket_address* %sa, i8* %arraydecay54, i64 32, i32 1)
  %70 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %callback56 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %70, i32 0, i32 2
  %71 = load void (%struct.mg_dns_message*, i8*, i32)*, void (%struct.mg_dns_message*, i8*, i32)** %callback56, align 8, !tbaa !104
  %72 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %data57 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %72, i32 0, i32 3
  %73 = load i8*, i8** %data57, align 8, !tbaa !105
  %74 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %err58 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %74, i32 0, i32 6
  %75 = load i32, i32* %err58, align 4, !tbaa !229
  call void %71(%struct.mg_dns_message* null, i8* %73, i32 %75)
  %76 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %user_data59 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %76, i32 0, i32 16
  store i8* null, i8** %user_data59, align 8, !tbaa !44
  %77 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8, !tbaa !3
  %78 = bitcast %struct.mg_resolve_async_request* %77 to i8*
  call void @free(i8* %78)
  %79 = bitcast [32 x i8]* %addr to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %79) #5
  br label %if.end60

if.end60:                                         ; preds = %if.then53, %sw.bb50
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end9, %if.end60, %sw.bb46, %sw.bb42, %if.end39, %if.end27, %if.then16, %if.then12
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %sw.epilog, %if.then8
  %80 = bitcast i8** %user_data to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %80) #5
  %81 = bitcast %struct.mg_dns_message** %msg to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %81) #5
  %82 = bitcast %struct.mg_resolve_async_request** %req to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %82) #5
  %83 = bitcast i64* %now to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %83) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup, %cleanup
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define void @mg_set_nameserver(%struct.mg_mgr* %mgr, i8* %nameserver) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %nameserver.addr = alloca i8*, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  store i8* %nameserver, i8** %nameserver.addr, align 8, !tbaa !3
  %0 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %nameserver1 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %0, i32 0, i32 7
  %1 = load i8*, i8** %nameserver1, align 8, !tbaa !70
  call void @free(i8* %1)
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %nameserver2 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %2, i32 0, i32 7
  store i8* null, i8** %nameserver2, align 8, !tbaa !70
  %3 = load i8*, i8** %nameserver.addr, align 8, !tbaa !3
  %cmp = icmp ne i8* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %nameserver.addr, align 8, !tbaa !3
  %call = call i8* @strdup(i8* %4)
  %5 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8, !tbaa !3
  %nameserver3 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %5, i32 0, i32 7
  store i8* %call, i8** %nameserver3, align 8, !tbaa !70
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @cs_base64_emit_code(%struct.cs_base64_ctx* %ctx, i32 %v) #0 {
entry:
  %ctx.addr = alloca %struct.cs_base64_ctx*, align 8
  %v.addr = alloca i32, align 4
  store %struct.cs_base64_ctx* %ctx, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  store i32 %v, i32* %v.addr, align 4, !tbaa !15
  %0 = load i32, i32* %v.addr, align 4, !tbaa !15
  %cmp = icmp slt i32 %0, 26
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %b64_putc = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %1, i32 0, i32 0
  %2 = load void (i8, i8*)*, void (i8, i8*)** %b64_putc, align 8, !tbaa !10
  %3 = load i32, i32* %v.addr, align 4, !tbaa !15
  %add = add nsw i32 %3, 65
  %conv = trunc i32 %add to i8
  %4 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %user_data = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %4, i32 0, i32 3
  %5 = load i8*, i8** %user_data, align 8, !tbaa !11
  call void %2(i8 signext %conv, i8* %5)
  br label %if.end26

if.else:                                          ; preds = %entry
  %6 = load i32, i32* %v.addr, align 4, !tbaa !15
  %cmp1 = icmp slt i32 %6, 52
  br i1 %cmp1, label %if.then3, label %if.else8

if.then3:                                         ; preds = %if.else
  %7 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %b64_putc4 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %7, i32 0, i32 0
  %8 = load void (i8, i8*)*, void (i8, i8*)** %b64_putc4, align 8, !tbaa !10
  %9 = load i32, i32* %v.addr, align 4, !tbaa !15
  %sub = sub nsw i32 %9, 26
  %add5 = add nsw i32 %sub, 97
  %conv6 = trunc i32 %add5 to i8
  %10 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %user_data7 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %10, i32 0, i32 3
  %11 = load i8*, i8** %user_data7, align 8, !tbaa !11
  call void %8(i8 signext %conv6, i8* %11)
  br label %if.end25

if.else8:                                         ; preds = %if.else
  %12 = load i32, i32* %v.addr, align 4, !tbaa !15
  %cmp9 = icmp slt i32 %12, 62
  br i1 %cmp9, label %if.then11, label %if.else17

if.then11:                                        ; preds = %if.else8
  %13 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %b64_putc12 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %13, i32 0, i32 0
  %14 = load void (i8, i8*)*, void (i8, i8*)** %b64_putc12, align 8, !tbaa !10
  %15 = load i32, i32* %v.addr, align 4, !tbaa !15
  %sub13 = sub nsw i32 %15, 52
  %add14 = add nsw i32 %sub13, 48
  %conv15 = trunc i32 %add14 to i8
  %16 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %user_data16 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %16, i32 0, i32 3
  %17 = load i8*, i8** %user_data16, align 8, !tbaa !11
  call void %14(i8 signext %conv15, i8* %17)
  br label %if.end

if.else17:                                        ; preds = %if.else8
  %18 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %b64_putc18 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %18, i32 0, i32 0
  %19 = load void (i8, i8*)*, void (i8, i8*)** %b64_putc18, align 8, !tbaa !10
  %20 = load i32, i32* %v.addr, align 4, !tbaa !15
  %sub19 = sub nsw i32 %20, 52
  %sub20 = sub nsw i32 %sub19, 10
  %cmp21 = icmp eq i32 %sub20, 0
  %21 = zext i1 %cmp21 to i64
  %cond = select i1 %cmp21, i32 43, i32 47
  %conv23 = trunc i32 %cond to i8
  %22 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8, !tbaa !3
  %user_data24 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %22, i32 0, i32 3
  %23 = load i8*, i8** %user_data24, align 8, !tbaa !11
  call void %19(i8 signext %conv23, i8* %23)
  br label %if.end

if.end:                                           ; preds = %if.else17, %if.then11
  br label %if.end25

if.end25:                                         ; preds = %if.end, %if.then3
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %if.then
  ret void
}

declare i32 @__tolower(i32) #4

; Function Attrs: inlinehint nounwind ssp uwtable
define available_externally i32 @__istype(i32 %_c, i64 %_f) #12 {
entry:
  %_c.addr = alloca i32, align 4
  %_f.addr = alloca i64, align 8
  store i32 %_c, i32* %_c.addr, align 4, !tbaa !15
  store i64 %_f, i64* %_f.addr, align 8, !tbaa !12
  %0 = load i32, i32* %_c.addr, align 4, !tbaa !15
  %call = call i32 @isascii(i32 %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4, !tbaa !15
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds (%struct._RuneLocale, %struct._RuneLocale* @_DefaultRuneLocale, i32 0, i32 5), i64 0, i64 %idxprom
  %2 = load i32, i32* %arrayidx, align 4, !tbaa !15
  %conv = zext i32 %2 to i64
  %3 = load i64, i64* %_f.addr, align 8, !tbaa !12
  %and = and i64 %conv, %3
  %tobool1 = icmp ne i64 %and, 0
  %lnot = xor i1 %tobool1, true
  %lnot2 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot2 to i32
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load i32, i32* %_c.addr, align 4, !tbaa !15
  %5 = load i64, i64* %_f.addr, align 8, !tbaa !12
  %call3 = call i32 @__maskrune(i32 %4, i64 %5)
  %tobool4 = icmp ne i32 %call3, 0
  %lnot5 = xor i1 %tobool4, true
  %lnot7 = xor i1 %lnot5, true
  %lnot.ext8 = zext i1 %lnot7 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %lnot.ext, %cond.true ], [ %lnot.ext8, %cond.false ]
  ret i32 %cond
}

; Function Attrs: inlinehint nounwind ssp uwtable
define available_externally i32 @isascii(i32 %_c) #12 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4, !tbaa !15
  %0 = load i32, i32* %_c.addr, align 4, !tbaa !15
  %and = and i32 %0, -128
  %cmp = icmp eq i32 %and, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

declare i32 @__maskrune(i32, i64) #4

; Function Attrs: nounwind ssp uwtable
define internal void @mg_remove_conn(%struct.mg_connection* %conn) #0 {
entry:
  %conn.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %conn, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %prev = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 1
  %1 = load %struct.mg_connection*, %struct.mg_connection** %prev, align 8, !tbaa !83
  %cmp = icmp eq %struct.mg_connection* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %next = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %2, i32 0, i32 0
  %3 = load %struct.mg_connection*, %struct.mg_connection** %next, align 8, !tbaa !74
  %4 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %mgr = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 3
  %5 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8, !tbaa !55
  %active_connections = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %5, i32 0, i32 0
  store %struct.mg_connection* %3, %struct.mg_connection** %active_connections, align 8, !tbaa !73
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %prev1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 1
  %7 = load %struct.mg_connection*, %struct.mg_connection** %prev1, align 8, !tbaa !83
  %tobool = icmp ne %struct.mg_connection* %7, null
  br i1 %tobool, label %if.then2, label %if.end6

if.then2:                                         ; preds = %if.end
  %8 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %next3 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %8, i32 0, i32 0
  %9 = load %struct.mg_connection*, %struct.mg_connection** %next3, align 8, !tbaa !74
  %10 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %prev4 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 1
  %11 = load %struct.mg_connection*, %struct.mg_connection** %prev4, align 8, !tbaa !83
  %next5 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %11, i32 0, i32 0
  store %struct.mg_connection* %9, %struct.mg_connection** %next5, align 8, !tbaa !74
  br label %if.end6

if.end6:                                          ; preds = %if.then2, %if.end
  %12 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %next7 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %12, i32 0, i32 0
  %13 = load %struct.mg_connection*, %struct.mg_connection** %next7, align 8, !tbaa !74
  %tobool8 = icmp ne %struct.mg_connection* %13, null
  br i1 %tobool8, label %if.then9, label %if.end13

if.then9:                                         ; preds = %if.end6
  %14 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %prev10 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 1
  %15 = load %struct.mg_connection*, %struct.mg_connection** %prev10, align 8, !tbaa !83
  %16 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %next11 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %16, i32 0, i32 0
  %17 = load %struct.mg_connection*, %struct.mg_connection** %next11, align 8, !tbaa !74
  %prev12 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %17, i32 0, i32 1
  store %struct.mg_connection* %15, %struct.mg_connection** %prev12, align 8, !tbaa !83
  br label %if.end13

if.end13:                                         ; preds = %if.then9, %if.end6
  %18 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %next14 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %18, i32 0, i32 0
  store %struct.mg_connection* null, %struct.mg_connection** %next14, align 8, !tbaa !74
  %19 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %prev15 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %19, i32 0, i32 1
  store %struct.mg_connection* null, %struct.mg_connection** %prev15, align 8, !tbaa !83
  %20 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %20, i32 0, i32 20
  %21 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8, !tbaa !46
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %21, i32 0, i32 2
  %22 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8, !tbaa !47
  %remove_conn = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %22, i32 0, i32 3
  %23 = load void (%struct.mg_connection*)*, void (%struct.mg_connection*)** %remove_conn, align 8, !tbaa !231
  %24 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  call void %23(%struct.mg_connection* %24)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @recv_avail_size(%struct.mg_connection* %conn, i64 %max) #0 {
entry:
  %retval = alloca i64, align 8
  %conn.addr = alloca %struct.mg_connection*, align 8
  %max.addr = alloca i64, align 8
  %avail = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_connection* %conn, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  store i64 %max, i64* %max.addr, align 8, !tbaa !12
  %0 = bitcast i64* %avail to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %recv_mbuf_limit = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 7
  %2 = load i64, i64* %recv_mbuf_limit, align 8, !tbaa !79
  %3 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf, i32 0, i32 1
  %4 = load i64, i64* %len, align 8, !tbaa !54
  %cmp = icmp ult i64 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %5 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %recv_mbuf_limit1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 7
  %6 = load i64, i64* %recv_mbuf_limit1, align 8, !tbaa !79
  %7 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8, !tbaa !3
  %recv_mbuf2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %7, i32 0, i32 8
  %len3 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf2, i32 0, i32 1
  %8 = load i64, i64* %len3, align 8, !tbaa !54
  %sub = sub i64 %6, %8
  store i64 %sub, i64* %avail, align 8, !tbaa !12
  %9 = load i64, i64* %avail, align 8, !tbaa !12
  %10 = load i64, i64* %max.addr, align 8, !tbaa !12
  %cmp4 = icmp ugt i64 %9, %10
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %11 = load i64, i64* %max.addr, align 8, !tbaa !12
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %12 = load i64, i64* %avail, align 8, !tbaa !12
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %11, %cond.true ], [ %12, %cond.false ]
  store i64 %cond, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %cond.end, %if.then
  %13 = bitcast i64* %avail to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %13) #5
  %14 = load i64, i64* %retval, align 8
  ret i64 %14
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_recv_udp(%struct.mg_connection* %nc, i8* %buf, i64 %len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %n = alloca i32, align 4
  %lc = alloca %struct.mg_connection*, align 8
  %sa = alloca %union.socket_address, align 4
  %sa_len = alloca i64, align 8
  %opts = alloca %struct.mg_add_sock_opts, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  %0 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  store i32 0, i32* %n, align 4, !tbaa !15
  %1 = bitcast %struct.mg_connection** %lc to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store %struct.mg_connection* %2, %struct.mg_connection** %lc, align 8, !tbaa !3
  %3 = bitcast %union.socket_address* %sa to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %3) #5
  %4 = bitcast i64* %sa_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #5
  store i64 16, i64* %sa_len, align 8, !tbaa !12
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 20
  %6 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8, !tbaa !46
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %6, i32 0, i32 2
  %7 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8, !tbaa !47
  %udp_recv = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %7, i32 0, i32 12
  %8 = load i32 (%struct.mg_connection*, i8*, i64, %union.socket_address*, i64*)*, i32 (%struct.mg_connection*, i8*, i64, %union.socket_address*, i64*)** %udp_recv, align 8, !tbaa !232
  %9 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8, !tbaa !3
  %10 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %11 = load i64, i64* %len.addr, align 8, !tbaa !12
  %call = call i32 %8(%struct.mg_connection* %9, i8* %10, i64 %11, %union.socket_address* %sa, i64* %sa_len)
  store i32 %call, i32* %n, align 4, !tbaa !15
  %12 = load i32, i32* %n, align 4, !tbaa !15
  %cmp = icmp slt i32 %12, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %13 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %13, i32 0, i32 21
  %14 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %14, 2048
  store i64 %or, i64* %flags, align 8, !tbaa !41
  br label %out

if.end:                                           ; preds = %entry
  %15 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %15, i32 0, i32 21
  %16 = load i64, i64* %flags1, align 8, !tbaa !41
  %and = and i64 %16, 1
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then2, label %if.end35

if.then2:                                         ; preds = %if.end
  %17 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store %struct.mg_connection* %17, %struct.mg_connection** %lc, align 8, !tbaa !3
  %18 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8, !tbaa !3
  %mgr = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %18, i32 0, i32 3
  %19 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8, !tbaa !55
  %call3 = call %struct.mg_connection* @mg_next(%struct.mg_mgr* %19, %struct.mg_connection* null)
  store %struct.mg_connection* %call3, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then2
  %20 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %cmp4 = icmp ne %struct.mg_connection* %20, null
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sa5 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %21, i32 0, i32 6
  %sa6 = bitcast %union.socket_address* %sa5 to %struct.sockaddr*
  %22 = bitcast %struct.sockaddr* %sa6 to i8*
  %sa7 = bitcast %union.socket_address* %sa to %struct.sockaddr*
  %23 = bitcast %struct.sockaddr* %sa7 to i8*
  %24 = load i64, i64* %sa_len, align 8, !tbaa !12
  %call8 = call i32 @memcmp(i8* %22, i8* %23, i64 %24)
  %cmp9 = icmp eq i32 %call8, 0
  br i1 %cmp9, label %land.lhs.true, label %if.end12

land.lhs.true:                                    ; preds = %for.body
  %25 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %listener = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %25, i32 0, i32 2
  %26 = load %struct.mg_connection*, %struct.mg_connection** %listener, align 8, !tbaa !78
  %27 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8, !tbaa !3
  %cmp10 = icmp eq %struct.mg_connection* %26, %27
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %land.lhs.true
  br label %for.end

if.end12:                                         ; preds = %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end12
  %28 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8, !tbaa !3
  %mgr13 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %28, i32 0, i32 3
  %29 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr13, align 8, !tbaa !55
  %30 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %call14 = call %struct.mg_connection* @mg_next(%struct.mg_mgr* %29, %struct.mg_connection* %30)
  store %struct.mg_connection* %call14, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  br label %for.cond

for.end:                                          ; preds = %if.then11, %for.cond
  %31 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %cmp15 = icmp eq %struct.mg_connection* %31, null
  br i1 %cmp15, label %if.then16, label %if.end34

if.then16:                                        ; preds = %for.end
  %32 = bitcast %struct.mg_add_sock_opts* %opts to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %32) #5
  %33 = bitcast %struct.mg_add_sock_opts* %opts to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 32, i1 false)
  %34 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8, !tbaa !3
  %mgr17 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %34, i32 0, i32 3
  %35 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr17, align 8, !tbaa !55
  %36 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8, !tbaa !3
  %handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %36, i32 0, i32 15
  %37 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler, align 8, !tbaa !53
  %call18 = call %struct.mg_connection* @mg_create_connection_base(%struct.mg_mgr* %35, void (%struct.mg_connection*, i32, i8*)* %37, %struct.mg_add_sock_opts* byval align 8 %opts)
  store %struct.mg_connection* %call18, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %38 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %cmp19 = icmp ne %struct.mg_connection* %38, null
  br i1 %cmp19, label %if.then20, label %if.end33

if.then20:                                        ; preds = %if.then16
  %39 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8, !tbaa !3
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %39, i32 0, i32 4
  %40 = load i32, i32* %sock, align 8, !tbaa !45
  %41 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sock21 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %41, i32 0, i32 4
  store i32 %40, i32* %sock21, align 8, !tbaa !45
  %42 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8, !tbaa !3
  %43 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %listener22 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %43, i32 0, i32 2
  store %struct.mg_connection* %42, %struct.mg_connection** %listener22, align 8, !tbaa !78
  %44 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sa23 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %44, i32 0, i32 6
  %45 = bitcast %union.socket_address* %sa23 to i8*
  %46 = bitcast %union.socket_address* %sa to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %45, i8* align 4 %46, i64 16, i1 false), !tbaa.struct !85
  %47 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8, !tbaa !3
  %proto_handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %47, i32 0, i32 12
  %48 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %proto_handler, align 8, !tbaa !52
  %49 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %proto_handler24 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %49, i32 0, i32 12
  store void (%struct.mg_connection*, i32, i8*)* %48, void (%struct.mg_connection*, i32, i8*)** %proto_handler24, align 8, !tbaa !52
  %50 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8, !tbaa !3
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %50, i32 0, i32 16
  %51 = load i8*, i8** %user_data, align 8, !tbaa !44
  %52 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %user_data25 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %52, i32 0, i32 16
  store i8* %51, i8** %user_data25, align 8, !tbaa !44
  %53 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8, !tbaa !3
  %recv_mbuf_limit = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %53, i32 0, i32 7
  %54 = load i64, i64* %recv_mbuf_limit, align 8, !tbaa !79
  %55 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf_limit26 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %55, i32 0, i32 7
  store i64 %54, i64* %recv_mbuf_limit26, align 8, !tbaa !79
  %56 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags27 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %56, i32 0, i32 21
  store i64 2, i64* %flags27, align 8, !tbaa !41
  %57 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags28 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %57, i32 0, i32 21
  %58 = load i64, i64* %flags28, align 8, !tbaa !41
  %or29 = or i64 %58, 1024
  store i64 %or29, i64* %flags28, align 8, !tbaa !41
  %59 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8, !tbaa !3
  %mgr30 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %59, i32 0, i32 3
  %60 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr30, align 8, !tbaa !55
  %61 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_add_conn(%struct.mg_mgr* %60, %struct.mg_connection* %61)
  %62 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %63 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %user_data31 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %63, i32 0, i32 16
  %64 = load i8*, i8** %user_data31, align 8, !tbaa !44
  %65 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sa32 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %65, i32 0, i32 6
  %66 = bitcast %union.socket_address* %sa32 to i8*
  call void @mg_call(%struct.mg_connection* %62, void (%struct.mg_connection*, i32, i8*)* null, i8* %64, i32 1, i8* %66)
  br label %if.end33

if.end33:                                         ; preds = %if.then20, %if.then16
  %67 = bitcast %struct.mg_add_sock_opts* %opts to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %67) #5
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %for.end
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %if.end
  %68 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %cmp36 = icmp ne %struct.mg_connection* %68, null
  br i1 %cmp36, label %if.then37, label %if.end77

if.then37:                                        ; preds = %if.end35
  br label %do.body

do.body:                                          ; preds = %if.then37
  %call38 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 2910)
  %tobool39 = icmp ne i32 %call38, 0
  br i1 %tobool39, label %if.then40, label %if.end48

if.then40:                                        ; preds = %do.body
  %69 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %70 = load i32, i32* %n, align 4, !tbaa !15
  %71 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sa41 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %71, i32 0, i32 6
  %sin = bitcast %union.socket_address* %sa41 to %struct.sockaddr_in*
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin, i32 0, i32 3
  %coerce.dive = getelementptr inbounds %struct.in_addr, %struct.in_addr* %sin_addr, i32 0, i32 0
  %72 = load i32, i32* %coerce.dive, align 4
  %call42 = call i8* @inet_ntoa(i32 %72)
  %73 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sa43 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %73, i32 0, i32 6
  %sin44 = bitcast %union.socket_address* %sa43 to %struct.sockaddr_in*
  %sin_port = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin44, i32 0, i32 2
  %74 = load i16, i16* %sin_port, align 2, !tbaa !14
  %call45 = call zeroext i16 @_OSSwapInt16(i16 zeroext %74)
  %conv = zext i16 %call45 to i32
  %conv46 = trunc i32 %conv to i16
  %conv47 = zext i16 %conv46 to i32
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.174, i32 0, i32 0), %struct.mg_connection* %69, i32 %70, i8* %call42, i32 %conv47)
  br label %if.end48

if.end48:                                         ; preds = %if.then40, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end48
  br label %do.end

do.end:                                           ; preds = %do.cond
  %75 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %76 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8, !tbaa !3
  %cmp49 = icmp eq %struct.mg_connection* %75, %76
  br i1 %cmp49, label %if.then51, label %if.else

if.then51:                                        ; preds = %do.end
  %77 = load i32, i32* %n, align 4, !tbaa !15
  %conv52 = sext i32 %77 to i64
  %78 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %78, i32 0, i32 8
  %len53 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf, i32 0, i32 1
  %79 = load i64, i64* %len53, align 8, !tbaa !54
  %add = add i64 %79, %conv52
  store i64 %add, i64* %len53, align 8, !tbaa !54
  br label %if.end57

if.else:                                          ; preds = %do.end
  %80 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf54 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %80, i32 0, i32 8
  %81 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %82 = load i32, i32* %n, align 4, !tbaa !15
  %conv55 = sext i32 %82 to i64
  %call56 = call i64 @mbuf_append(%struct.mbuf* %recv_mbuf54, i8* %81, i64 %conv55)
  br label %if.end57

if.end57:                                         ; preds = %if.else, %if.then51
  %call58 = call double @mg_time()
  %conv59 = fptosi double %call58 to i64
  %83 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %last_io_time = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %83, i32 0, i32 10
  store i64 %conv59, i64* %last_io_time, align 8, !tbaa !77
  %84 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8, !tbaa !3
  %last_io_time60 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %84, i32 0, i32 10
  store i64 %conv59, i64* %last_io_time60, align 8, !tbaa !77
  %85 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %mgr61 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %85, i32 0, i32 3
  %86 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr61, align 8, !tbaa !55
  %tobool62 = icmp ne %struct.mg_mgr* %86, null
  br i1 %tobool62, label %land.lhs.true63, label %if.end70

land.lhs.true63:                                  ; preds = %if.end57
  %87 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %mgr64 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %87, i32 0, i32 3
  %88 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr64, align 8, !tbaa !55
  %hexdump_file = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %88, i32 0, i32 1
  %89 = load i8*, i8** %hexdump_file, align 8, !tbaa !56
  %cmp65 = icmp ne i8* %89, null
  br i1 %cmp65, label %if.then67, label %if.end70

if.then67:                                        ; preds = %land.lhs.true63
  %90 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %91 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %mgr68 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %91, i32 0, i32 3
  %92 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr68, align 8, !tbaa !55
  %hexdump_file69 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %92, i32 0, i32 1
  %93 = load i8*, i8** %hexdump_file69, align 8, !tbaa !56
  %94 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %95 = load i32, i32* %n, align 4, !tbaa !15
  call void @mg_hexdump_connection(%struct.mg_connection* %90, i8* %93, i8* %94, i32 %95, i32 3)
  br label %if.end70

if.end70:                                         ; preds = %if.then67, %land.lhs.true63, %if.end57
  %96 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8, !tbaa !3
  %recv_mbuf71 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %96, i32 0, i32 8
  call void @mbuf_trim(%struct.mbuf* %recv_mbuf71)
  %97 = load i32, i32* %n, align 4, !tbaa !15
  %cmp72 = icmp ne i32 %97, 0
  br i1 %cmp72, label %if.then74, label %if.end76

if.then74:                                        ; preds = %if.end70
  %98 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %99 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %user_data75 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %99, i32 0, i32 16
  %100 = load i8*, i8** %user_data75, align 8, !tbaa !44
  %101 = bitcast i32* %n to i8*
  call void @mg_call(%struct.mg_connection* %98, void (%struct.mg_connection*, i32, i8*)* null, i8* %100, i32 3, i8* %101)
  br label %if.end76

if.end76:                                         ; preds = %if.then74, %if.end70
  br label %if.end77

if.end77:                                         ; preds = %if.end76, %if.end35
  br label %out

out:                                              ; preds = %if.end77, %if.then
  %102 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8, !tbaa !3
  %recv_mbuf78 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %102, i32 0, i32 8
  call void @mbuf_free(%struct.mbuf* %recv_mbuf78)
  %103 = load i32, i32* %n, align 4, !tbaa !15
  %104 = bitcast i64* %sa_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %104) #5
  %105 = bitcast %union.socket_address* %sa to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %105) #5
  %106 = bitcast %struct.mg_connection** %lc to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %106) #5
  %107 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %107) #5
  ret i32 %103
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_recv_tcp(%struct.mg_connection* %nc, i8* %buf, i64 %len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %n = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  %0 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  store i32 0, i32* %n, align 4, !tbaa !15
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 20
  %2 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8, !tbaa !46
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %2, i32 0, i32 2
  %3 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8, !tbaa !47
  %tcp_recv = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %3, i32 0, i32 11
  %4 = load i32 (%struct.mg_connection*, i8*, i64)*, i32 (%struct.mg_connection*, i8*, i64)** %tcp_recv, align 8, !tbaa !233
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %6 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %7 = load i64, i64* %len.addr, align 8, !tbaa !12
  %call = call i32 %4(%struct.mg_connection* %5, i8* %6, i64 %7)
  store i32 %call, i32* %n, align 4, !tbaa !15
  br label %do.body

do.body:                                          ; preds = %entry
  %call1 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 2838)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %9 = load i32, i32* %n, align 4, !tbaa !15
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.175, i32 0, i32 0), %struct.mg_connection* %8, i32 %9)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %do.cond
  %10 = load i32, i32* %n, align 4, !tbaa !15
  %cmp = icmp sgt i32 %10, 0
  br i1 %cmp, label %if.then2, label %if.else

if.then2:                                         ; preds = %do.end
  %11 = load i32, i32* %n, align 4, !tbaa !15
  %conv = sext i32 %11 to i64
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %12, i32 0, i32 8
  %len3 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf, i32 0, i32 1
  %13 = load i64, i64* %len3, align 8, !tbaa !54
  %add = add i64 %13, %conv
  store i64 %add, i64* %len3, align 8, !tbaa !54
  %call4 = call double @mg_time()
  %conv5 = fptosi double %call4 to i64
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %last_io_time = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 10
  store i64 %conv5, i64* %last_io_time, align 8, !tbaa !77
  %15 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %mgr = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %15, i32 0, i32 3
  %16 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8, !tbaa !55
  %tobool6 = icmp ne %struct.mg_mgr* %16, null
  br i1 %tobool6, label %land.lhs.true, label %if.end13

land.lhs.true:                                    ; preds = %if.then2
  %17 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %mgr7 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %17, i32 0, i32 3
  %18 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr7, align 8, !tbaa !55
  %hexdump_file = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %18, i32 0, i32 1
  %19 = load i8*, i8** %hexdump_file, align 8, !tbaa !56
  %cmp8 = icmp ne i8* %19, null
  br i1 %cmp8, label %if.then10, label %if.end13

if.then10:                                        ; preds = %land.lhs.true
  %20 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %21 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %mgr11 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %21, i32 0, i32 3
  %22 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr11, align 8, !tbaa !55
  %hexdump_file12 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %22, i32 0, i32 1
  %23 = load i8*, i8** %hexdump_file12, align 8, !tbaa !56
  %24 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  %25 = load i32, i32* %n, align 4, !tbaa !15
  call void @mg_hexdump_connection(%struct.mg_connection* %20, i8* %23, i8* %24, i32 %25, i32 3)
  br label %if.end13

if.end13:                                         ; preds = %if.then10, %land.lhs.true, %if.then2
  %26 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf14 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %26, i32 0, i32 8
  call void @mbuf_trim(%struct.mbuf* %recv_mbuf14)
  %27 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %28 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %28, i32 0, i32 16
  %29 = load i8*, i8** %user_data, align 8, !tbaa !44
  %30 = bitcast i32* %n to i8*
  call void @mg_call(%struct.mg_connection* %27, void (%struct.mg_connection*, i32, i8*)* null, i8* %29, i32 3, i8* %30)
  br label %if.end19

if.else:                                          ; preds = %do.end
  %31 = load i32, i32* %n, align 4, !tbaa !15
  %cmp15 = icmp slt i32 %31, 0
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.else
  %32 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %32, i32 0, i32 21
  %33 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %33, 2048
  store i64 %or, i64* %flags, align 8, !tbaa !41
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %if.else
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.end13
  %34 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf20 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %34, i32 0, i32 8
  call void @mbuf_trim(%struct.mbuf* %recv_mbuf20)
  %35 = load i32, i32* %n, align 4, !tbaa !15
  %36 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %36) #5
  ret i32 %35
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @isbyte(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4, !tbaa !15
  %0 = load i32, i32* %n.addr, align 4, !tbaa !15
  %cmp = icmp sge i32 %0, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4, !tbaa !15
  %cmp1 = icmp sle i32 %1, 255
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  %land.ext = zext i1 %2 to i32
  ret i32 %land.ext
}

declare i32 @"\01_accept"(i32, %struct.sockaddr*, i32*) #4

; Function Attrs: alwaysinline nounwind ssp uwtable
define available_externally i32 @__darwin_check_fd_set(i32 %_a, i8* %_b) #14 {
entry:
  %retval = alloca i32, align 4
  %_a.addr = alloca i32, align 4
  %_b.addr = alloca i8*, align 8
  store i32 %_a, i32* %_a.addr, align 4, !tbaa !15
  store i8* %_b, i8** %_b.addr, align 8, !tbaa !3
  br i1 icmp ne (i64 ptrtoint (i32 (i32, i8*, i32)* @__darwin_check_fd_set_overflow to i64), i64 0), label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %0 = load i32, i32* %_a.addr, align 4, !tbaa !15
  %1 = load i8*, i8** %_b.addr, align 8, !tbaa !3
  %call = call i32 @__darwin_check_fd_set_overflow(i32 %0, i8* %1, i32 0)
  store i32 %call, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %2 = load i32, i32* %retval, align 4
  ret i32 %2
}

declare extern_weak i32 @__darwin_check_fd_set_overflow(i32, i8*, i32) #4

declare i32* @__error() #4

declare i32 @"\01_getpeername"(i32, %struct.sockaddr*, i32*) #4

declare i64 @"\01_sendto"(i32, i8*, i64, i32, %struct.sockaddr*, i32) #4

declare i64 @"\01_recvfrom"(i32, i8*, i64, i32, %struct.sockaddr*, i32*) #4

; Function Attrs: inlinehint nounwind readonly ssp uwtable
define available_externally i32 @isprint(i32 %_c) #9 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4, !tbaa !15
  %0 = load i32, i32* %_c.addr, align 4, !tbaa !15
  %call = call i32 @__istype(i32 %0, i64 262144)
  ret i32 %call
}

declare i64 @strtoll(i8*, i8**, i32) #4

; Function Attrs: nounwind ssp uwtable
define internal void @mg_http_free_proto_data_file(%struct.mg_http_proto_data_file* %d) #0 {
entry:
  %d.addr = alloca %struct.mg_http_proto_data_file*, align 8
  store %struct.mg_http_proto_data_file* %d, %struct.mg_http_proto_data_file** %d.addr, align 8, !tbaa !3
  %0 = load %struct.mg_http_proto_data_file*, %struct.mg_http_proto_data_file** %d.addr, align 8, !tbaa !3
  %cmp = icmp ne %struct.mg_http_proto_data_file* %0, null
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %entry
  %1 = load %struct.mg_http_proto_data_file*, %struct.mg_http_proto_data_file** %d.addr, align 8, !tbaa !3
  %fp = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %1, i32 0, i32 0
  %2 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !tbaa !234
  %cmp1 = icmp ne %struct.__sFILE* %2, null
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %3 = load %struct.mg_http_proto_data_file*, %struct.mg_http_proto_data_file** %d.addr, align 8, !tbaa !3
  %fp3 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %3, i32 0, i32 0
  %4 = load %struct.__sFILE*, %struct.__sFILE** %fp3, align 8, !tbaa !234
  %call = call i32 @fclose(%struct.__sFILE* %4)
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %5 = load %struct.mg_http_proto_data_file*, %struct.mg_http_proto_data_file** %d.addr, align 8, !tbaa !3
  %6 = bitcast %struct.mg_http_proto_data_file* %5 to i8*
  %7 = load %struct.mg_http_proto_data_file*, %struct.mg_http_proto_data_file** %d.addr, align 8, !tbaa !3
  %8 = bitcast %struct.mg_http_proto_data_file* %7 to i8*
  %9 = call i64 @llvm.objectsize.i64.p0i8(i8* %8, i1 false, i1 true)
  %call4 = call i8* @__memset_chk(i8* %6, i32 0, i64 32, i64 %9) #5
  br label %if.end5

if.end5:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_http_proto_data_destructor(i8* %proto_data) #0 {
entry:
  %proto_data.addr = alloca i8*, align 8
  %pd = alloca %struct.mg_http_proto_data*, align 8
  store i8* %proto_data, i8** %proto_data.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_http_proto_data** %pd to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load i8*, i8** %proto_data.addr, align 8, !tbaa !3
  %2 = bitcast i8* %1 to %struct.mg_http_proto_data*
  store %struct.mg_http_proto_data* %2, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %3 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %file = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %3, i32 0, i32 0
  call void @mg_http_free_proto_data_file(%struct.mg_http_proto_data_file* %file)
  %4 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %cgi = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %4, i32 0, i32 1
  call void @mg_http_free_proto_data_cgi(%struct.mg_http_proto_data_cgi* %cgi)
  %5 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %endpoints = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %5, i32 0, i32 4
  call void @mg_http_free_proto_data_endpoints(%struct.mg_http_endpoint** %endpoints)
  %6 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %reverse_proxy_data = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %6, i32 0, i32 6
  call void @mg_http_free_reverse_proxy_data(%struct.mg_reverse_proxy_data* %reverse_proxy_data)
  %7 = load i8*, i8** %proto_data.addr, align 8, !tbaa !3
  call void @free(i8* %7)
  %8 = bitcast %struct.mg_http_proto_data** %pd to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %8) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_http_free_proto_data_cgi(%struct.mg_http_proto_data_cgi* %d) #0 {
entry:
  %d.addr = alloca %struct.mg_http_proto_data_cgi*, align 8
  store %struct.mg_http_proto_data_cgi* %d, %struct.mg_http_proto_data_cgi** %d.addr, align 8, !tbaa !3
  %0 = load %struct.mg_http_proto_data_cgi*, %struct.mg_http_proto_data_cgi** %d.addr, align 8, !tbaa !3
  %cmp = icmp eq %struct.mg_http_proto_data_cgi* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.mg_http_proto_data_cgi*, %struct.mg_http_proto_data_cgi** %d.addr, align 8, !tbaa !3
  %cgi_nc = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %1, i32 0, i32 0
  %2 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc, align 8, !tbaa !235
  %cmp1 = icmp ne %struct.mg_connection* %2, null
  br i1 %cmp1, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %3 = load %struct.mg_http_proto_data_cgi*, %struct.mg_http_proto_data_cgi** %d.addr, align 8, !tbaa !3
  %cgi_nc3 = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %3, i32 0, i32 0
  %4 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc3, align 8, !tbaa !235
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 21
  %5 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %5, 2048
  store i64 %or, i64* %flags, align 8, !tbaa !41
  %6 = load %struct.mg_http_proto_data_cgi*, %struct.mg_http_proto_data_cgi** %d.addr, align 8, !tbaa !3
  %cgi_nc4 = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %6, i32 0, i32 0
  %7 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc4, align 8, !tbaa !235
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %7, i32 0, i32 16
  store i8* null, i8** %user_data, align 8, !tbaa !44
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %8 = load %struct.mg_http_proto_data_cgi*, %struct.mg_http_proto_data_cgi** %d.addr, align 8, !tbaa !3
  %9 = bitcast %struct.mg_http_proto_data_cgi* %8 to i8*
  %10 = load %struct.mg_http_proto_data_cgi*, %struct.mg_http_proto_data_cgi** %d.addr, align 8, !tbaa !3
  %11 = bitcast %struct.mg_http_proto_data_cgi* %10 to i8*
  %12 = call i64 @llvm.objectsize.i64.p0i8(i8* %11, i1 false, i1 true)
  %call = call i8* @__memset_chk(i8* %9, i32 0, i64 8, i64 %12) #5
  br label %return

return:                                           ; preds = %if.end5, %if.then
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_http_free_proto_data_endpoints(%struct.mg_http_endpoint** %ep) #0 {
entry:
  %ep.addr = alloca %struct.mg_http_endpoint**, align 8
  %current = alloca %struct.mg_http_endpoint*, align 8
  %tmp = alloca %struct.mg_http_endpoint*, align 8
  store %struct.mg_http_endpoint** %ep, %struct.mg_http_endpoint*** %ep.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_http_endpoint** %current to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.mg_http_endpoint**, %struct.mg_http_endpoint*** %ep.addr, align 8, !tbaa !3
  %2 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %1, align 8, !tbaa !3
  store %struct.mg_http_endpoint* %2, %struct.mg_http_endpoint** %current, align 8, !tbaa !3
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %current, align 8, !tbaa !3
  %cmp = icmp ne %struct.mg_http_endpoint* %3, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = bitcast %struct.mg_http_endpoint** %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #5
  %5 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %current, align 8, !tbaa !3
  %next = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %5, i32 0, i32 0
  %6 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %next, align 8, !tbaa !148
  store %struct.mg_http_endpoint* %6, %struct.mg_http_endpoint** %tmp, align 8, !tbaa !3
  %7 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %current, align 8, !tbaa !3
  %uri_pattern = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %7, i32 0, i32 1
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri_pattern, i32 0, i32 0
  %8 = load i8*, i8** %p, align 8, !tbaa !236
  call void @free(i8* %8)
  %9 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %current, align 8, !tbaa !3
  %auth_domain = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %9, i32 0, i32 2
  %10 = load i8*, i8** %auth_domain, align 8, !tbaa !159
  call void @free(i8* %10)
  %11 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %current, align 8, !tbaa !3
  %auth_file = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %11, i32 0, i32 3
  %12 = load i8*, i8** %auth_file, align 8, !tbaa !160
  call void @free(i8* %12)
  %13 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %current, align 8, !tbaa !3
  %14 = bitcast %struct.mg_http_endpoint* %13 to i8*
  call void @free(i8* %14)
  %15 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %tmp, align 8, !tbaa !3
  store %struct.mg_http_endpoint* %15, %struct.mg_http_endpoint** %current, align 8, !tbaa !3
  %16 = bitcast %struct.mg_http_endpoint** %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %16) #5
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load %struct.mg_http_endpoint**, %struct.mg_http_endpoint*** %ep.addr, align 8, !tbaa !3
  store %struct.mg_http_endpoint* null, %struct.mg_http_endpoint** %17, align 8, !tbaa !3
  %18 = bitcast %struct.mg_http_endpoint** %current to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %18) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_http_free_reverse_proxy_data(%struct.mg_reverse_proxy_data* %rpd) #0 {
entry:
  %rpd.addr = alloca %struct.mg_reverse_proxy_data*, align 8
  %pd = alloca %struct.mg_http_proto_data*, align 8
  store %struct.mg_reverse_proxy_data* %rpd, %struct.mg_reverse_proxy_data** %rpd.addr, align 8, !tbaa !3
  %0 = load %struct.mg_reverse_proxy_data*, %struct.mg_reverse_proxy_data** %rpd.addr, align 8, !tbaa !3
  %linked_conn = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %0, i32 0, i32 0
  %1 = load %struct.mg_connection*, %struct.mg_connection** %linked_conn, align 8, !tbaa !237
  %cmp = icmp ne %struct.mg_connection* %1, null
  br i1 %cmp, label %if.then, label %if.end10

if.then:                                          ; preds = %entry
  %2 = bitcast %struct.mg_http_proto_data** %pd to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  %3 = load %struct.mg_reverse_proxy_data*, %struct.mg_reverse_proxy_data** %rpd.addr, align 8, !tbaa !3
  %linked_conn1 = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %3, i32 0, i32 0
  %4 = load %struct.mg_connection*, %struct.mg_connection** %linked_conn1, align 8, !tbaa !237
  %call = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %4)
  store %struct.mg_http_proto_data* %call, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %5 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %reverse_proxy_data = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %5, i32 0, i32 6
  %linked_conn2 = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %reverse_proxy_data, i32 0, i32 0
  %6 = load %struct.mg_connection*, %struct.mg_connection** %linked_conn2, align 8, !tbaa !174
  %cmp3 = icmp ne %struct.mg_connection* %6, null
  br i1 %cmp3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.then
  %7 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %reverse_proxy_data5 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %7, i32 0, i32 6
  %linked_conn6 = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %reverse_proxy_data5, i32 0, i32 0
  %8 = load %struct.mg_connection*, %struct.mg_connection** %linked_conn6, align 8, !tbaa !174
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %8, i32 0, i32 21
  %9 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %9, 1024
  store i64 %or, i64* %flags, align 8, !tbaa !41
  %10 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8, !tbaa !3
  %reverse_proxy_data7 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %10, i32 0, i32 6
  %linked_conn8 = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %reverse_proxy_data7, i32 0, i32 0
  store %struct.mg_connection* null, %struct.mg_connection** %linked_conn8, align 8, !tbaa !174
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %11 = load %struct.mg_reverse_proxy_data*, %struct.mg_reverse_proxy_data** %rpd.addr, align 8, !tbaa !3
  %linked_conn9 = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %11, i32 0, i32 0
  store %struct.mg_connection* null, %struct.mg_connection** %linked_conn9, align 8, !tbaa !237
  %12 = bitcast %struct.mg_http_proto_data** %pd to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %12) #5
  br label %if.end10

if.end10:                                         ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @mg_http_parse_chunk(i8* %buf, i64 %len, i8** %chunk_data, i64* %chunk_len) #0 {
entry:
  %retval = alloca i64, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %chunk_data.addr = alloca i8**, align 8
  %chunk_len.addr = alloca i64*, align 8
  %s = alloca i8*, align 8
  %n = alloca i64, align 8
  %i = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  store i8** %chunk_data, i8*** %chunk_data.addr, align 8, !tbaa !3
  store i64* %chunk_len, i64** %chunk_len.addr, align 8, !tbaa !3
  %0 = bitcast i8** %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load i8*, i8** %buf.addr, align 8, !tbaa !3
  store i8* %1, i8** %s, align 8, !tbaa !3
  %2 = bitcast i64* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  store i64 0, i64* %n, align 8, !tbaa !12
  %3 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  store i64 0, i64* %i, align 8, !tbaa !12
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %4 = load i64, i64* %i, align 8, !tbaa !12
  %5 = load i64, i64* %len.addr, align 8, !tbaa !12
  %cmp = icmp ult i64 %4, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %6 = load i8*, i8** %s, align 8, !tbaa !3
  %7 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %7
  %8 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = zext i8 %8 to i32
  %call = call i32 @isxdigit(i32 %conv) #19
  %tobool = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %9 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %9, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %10 = load i64, i64* %n, align 8, !tbaa !12
  %mul = mul i64 %10, 16
  store i64 %mul, i64* %n, align 8, !tbaa !12
  %11 = load i8*, i8** %s, align 8, !tbaa !3
  %12 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx1 = getelementptr inbounds i8, i8* %11, i64 %12
  %13 = load i8, i8* %arrayidx1, align 1, !tbaa !14
  %conv2 = zext i8 %13 to i32
  %cmp3 = icmp sge i32 %conv2, 48
  br i1 %cmp3, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %while.body
  %14 = load i8*, i8** %s, align 8, !tbaa !3
  %15 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx5 = getelementptr inbounds i8, i8* %14, i64 %15
  %16 = load i8, i8* %arrayidx5, align 1, !tbaa !14
  %conv6 = zext i8 %16 to i32
  %cmp7 = icmp sle i32 %conv6, 57
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %17 = load i8*, i8** %s, align 8, !tbaa !3
  %18 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx9 = getelementptr inbounds i8, i8* %17, i64 %18
  %19 = load i8, i8* %arrayidx9, align 1, !tbaa !14
  %conv10 = zext i8 %19 to i32
  %sub = sub nsw i32 %conv10, 48
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %while.body
  %20 = load i8*, i8** %s, align 8, !tbaa !3
  %21 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx11 = getelementptr inbounds i8, i8* %20, i64 %21
  %22 = load i8, i8* %arrayidx11, align 1, !tbaa !14
  %conv12 = zext i8 %22 to i32
  %call13 = call i32 @tolower(i32 %conv12) #19
  %sub14 = sub nsw i32 %call13, 97
  %add = add nsw i32 %sub14, 10
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %add, %cond.false ]
  %conv15 = sext i32 %cond to i64
  %23 = load i64, i64* %n, align 8, !tbaa !12
  %add16 = add i64 %23, %conv15
  store i64 %add16, i64* %n, align 8, !tbaa !12
  %24 = load i64, i64* %i, align 8, !tbaa !12
  %inc = add i64 %24, 1
  store i64 %inc, i64* %i, align 8, !tbaa !12
  %25 = load i64, i64* %i, align 8, !tbaa !12
  %cmp17 = icmp ugt i64 %25, 6
  br i1 %cmp17, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  store i64 0, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %cond.end
  br label %while.cond

while.end:                                        ; preds = %land.end
  %26 = load i64, i64* %i, align 8, !tbaa !12
  %cmp19 = icmp eq i64 %26, 0
  br i1 %cmp19, label %if.then35, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.end
  %27 = load i64, i64* %i, align 8, !tbaa !12
  %add21 = add i64 %27, 2
  %28 = load i64, i64* %len.addr, align 8, !tbaa !12
  %cmp22 = icmp ugt i64 %add21, %28
  br i1 %cmp22, label %if.then35, label %lor.lhs.false24

lor.lhs.false24:                                  ; preds = %lor.lhs.false
  %29 = load i8*, i8** %s, align 8, !tbaa !3
  %30 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx25 = getelementptr inbounds i8, i8* %29, i64 %30
  %31 = load i8, i8* %arrayidx25, align 1, !tbaa !14
  %conv26 = zext i8 %31 to i32
  %cmp27 = icmp ne i32 %conv26, 13
  br i1 %cmp27, label %if.then35, label %lor.lhs.false29

lor.lhs.false29:                                  ; preds = %lor.lhs.false24
  %32 = load i8*, i8** %s, align 8, !tbaa !3
  %33 = load i64, i64* %i, align 8, !tbaa !12
  %add30 = add i64 %33, 1
  %arrayidx31 = getelementptr inbounds i8, i8* %32, i64 %add30
  %34 = load i8, i8* %arrayidx31, align 1, !tbaa !14
  %conv32 = zext i8 %34 to i32
  %cmp33 = icmp ne i32 %conv32, 10
  br i1 %cmp33, label %if.then35, label %if.end36

if.then35:                                        ; preds = %lor.lhs.false29, %lor.lhs.false24, %lor.lhs.false, %while.end
  store i64 0, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end36:                                         ; preds = %lor.lhs.false29
  %35 = load i64, i64* %i, align 8, !tbaa !12
  %add37 = add i64 %35, 2
  store i64 %add37, i64* %i, align 8, !tbaa !12
  %36 = load i8*, i8** %s, align 8, !tbaa !3
  %37 = load i64, i64* %i, align 8, !tbaa !12
  %add.ptr = getelementptr inbounds i8, i8* %36, i64 %37
  %38 = load i8**, i8*** %chunk_data.addr, align 8, !tbaa !3
  store i8* %add.ptr, i8** %38, align 8, !tbaa !3
  %39 = load i64, i64* %n, align 8, !tbaa !12
  %40 = load i64*, i64** %chunk_len.addr, align 8, !tbaa !3
  store i64 %39, i64* %40, align 8, !tbaa !12
  %41 = load i64, i64* %n, align 8, !tbaa !12
  %42 = load i64, i64* %i, align 8, !tbaa !12
  %add38 = add i64 %42, %41
  store i64 %add38, i64* %i, align 8, !tbaa !12
  %43 = load i64, i64* %i, align 8, !tbaa !12
  %cmp39 = icmp eq i64 %43, 0
  br i1 %cmp39, label %if.then56, label %lor.lhs.false41

lor.lhs.false41:                                  ; preds = %if.end36
  %44 = load i64, i64* %i, align 8, !tbaa !12
  %add42 = add i64 %44, 2
  %45 = load i64, i64* %len.addr, align 8, !tbaa !12
  %cmp43 = icmp ugt i64 %add42, %45
  br i1 %cmp43, label %if.then56, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %lor.lhs.false41
  %46 = load i8*, i8** %s, align 8, !tbaa !3
  %47 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx46 = getelementptr inbounds i8, i8* %46, i64 %47
  %48 = load i8, i8* %arrayidx46, align 1, !tbaa !14
  %conv47 = zext i8 %48 to i32
  %cmp48 = icmp ne i32 %conv47, 13
  br i1 %cmp48, label %if.then56, label %lor.lhs.false50

lor.lhs.false50:                                  ; preds = %lor.lhs.false45
  %49 = load i8*, i8** %s, align 8, !tbaa !3
  %50 = load i64, i64* %i, align 8, !tbaa !12
  %add51 = add i64 %50, 1
  %arrayidx52 = getelementptr inbounds i8, i8* %49, i64 %add51
  %51 = load i8, i8* %arrayidx52, align 1, !tbaa !14
  %conv53 = zext i8 %51 to i32
  %cmp54 = icmp ne i32 %conv53, 10
  br i1 %cmp54, label %if.then56, label %if.end57

if.then56:                                        ; preds = %lor.lhs.false50, %lor.lhs.false45, %lor.lhs.false41, %if.end36
  store i64 0, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end57:                                         ; preds = %lor.lhs.false50
  %52 = load i64, i64* %i, align 8, !tbaa !12
  %add58 = add i64 %52, 2
  store i64 %add58, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end57, %if.then56, %if.then35, %if.then
  %53 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %53) #5
  %54 = bitcast i64* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %54) #5
  %55 = bitcast i8** %s to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %55) #5
  %56 = load i64, i64* %retval, align 8
  ret i64 %56
}

declare i64 @"\01_strftime"(i8*, i64, i8*, %struct.tm*) #4

declare %struct.tm* @gmtime(i64*) #4

; Function Attrs: inlinehint nounwind ssp uwtable
define available_externally i32 @__isctype(i32 %_c, i64 %_f) #12 {
entry:
  %_c.addr = alloca i32, align 4
  %_f.addr = alloca i64, align 8
  store i32 %_c, i32* %_c.addr, align 4, !tbaa !15
  store i64 %_f, i64* %_f.addr, align 8, !tbaa !12
  %0 = load i32, i32* %_c.addr, align 4, !tbaa !15
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4, !tbaa !15
  %cmp1 = icmp sge i32 %1, 256
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  %2 = load i32, i32* %_c.addr, align 4, !tbaa !15
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds (%struct._RuneLocale, %struct._RuneLocale* @_DefaultRuneLocale, i32 0, i32 5), i64 0, i64 %idxprom
  %3 = load i32, i32* %arrayidx, align 4, !tbaa !15
  %conv = zext i32 %3 to i64
  %4 = load i64, i64* %_f.addr, align 8, !tbaa !12
  %and = and i64 %conv, %4
  %tobool = icmp ne i64 %and, 0
  %lnot = xor i1 %tobool, true
  %lnot2 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot2 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %lnot.ext, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind ssp uwtable
define internal void @altbuf_append(%struct.altbuf* %ab, i8 signext %c) #0 {
entry:
  %ab.addr = alloca %struct.altbuf*, align 8
  %c.addr = alloca i8, align 1
  store %struct.altbuf* %ab, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  store i8 %c, i8* %c.addr, align 1, !tbaa !14
  %0 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.altbuf, %struct.altbuf* %0, i32 0, i32 2
  %1 = load i64, i64* %len, align 8, !tbaa !169
  %2 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %user_buf_size = getelementptr inbounds %struct.altbuf, %struct.altbuf* %2, i32 0, i32 3
  %3 = load i64, i64* %user_buf_size, align 8, !tbaa !172
  %cmp = icmp ult i64 %1, %3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load i8, i8* %c.addr, align 1, !tbaa !14
  %5 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %user_buf = getelementptr inbounds %struct.altbuf, %struct.altbuf* %5, i32 0, i32 1
  %6 = load i8*, i8** %user_buf, align 8, !tbaa !171
  %7 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %len1 = getelementptr inbounds %struct.altbuf, %struct.altbuf* %7, i32 0, i32 2
  %8 = load i64, i64* %len1, align 8, !tbaa !169
  %inc = add i64 %8, 1
  store i64 %inc, i64* %len1, align 8, !tbaa !169
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %8
  store i8 %4, i8* %arrayidx, align 1, !tbaa !14
  br label %if.end15

if.else:                                          ; preds = %entry
  %9 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %len2 = getelementptr inbounds %struct.altbuf, %struct.altbuf* %9, i32 0, i32 2
  %10 = load i64, i64* %len2, align 8, !tbaa !169
  %cmp3 = icmp ugt i64 %10, 0
  br i1 %cmp3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.else
  %11 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %m = getelementptr inbounds %struct.altbuf, %struct.altbuf* %11, i32 0, i32 0
  %len4 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %m, i32 0, i32 1
  %12 = load i64, i64* %len4, align 8, !tbaa !238
  %cmp5 = icmp eq i64 %12, 0
  br i1 %cmp5, label %if.then6, label %if.end

if.then6:                                         ; preds = %land.lhs.true
  %13 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %m7 = getelementptr inbounds %struct.altbuf, %struct.altbuf* %13, i32 0, i32 0
  %14 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %user_buf8 = getelementptr inbounds %struct.altbuf, %struct.altbuf* %14, i32 0, i32 1
  %15 = load i8*, i8** %user_buf8, align 8, !tbaa !171
  %16 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %len9 = getelementptr inbounds %struct.altbuf, %struct.altbuf* %16, i32 0, i32 2
  %17 = load i64, i64* %len9, align 8, !tbaa !169
  %call = call i64 @mbuf_append(%struct.mbuf* %m7, i8* %15, i64 %17)
  br label %if.end

if.end:                                           ; preds = %if.then6, %land.lhs.true, %if.else
  %18 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %m10 = getelementptr inbounds %struct.altbuf, %struct.altbuf* %18, i32 0, i32 0
  %call11 = call i64 @mbuf_append(%struct.mbuf* %m10, i8* %c.addr, i64 1)
  %19 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %m12 = getelementptr inbounds %struct.altbuf, %struct.altbuf* %19, i32 0, i32 0
  %len13 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %m12, i32 0, i32 1
  %20 = load i64, i64* %len13, align 8, !tbaa !238
  %21 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %len14 = getelementptr inbounds %struct.altbuf, %struct.altbuf* %21, i32 0, i32 2
  store i64 %20, i64* %len14, align 8, !tbaa !169
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @altbuf_reset(%struct.altbuf* %ab) #0 {
entry:
  %ab.addr = alloca %struct.altbuf*, align 8
  store %struct.altbuf* %ab, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %0 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %m = getelementptr inbounds %struct.altbuf, %struct.altbuf* %0, i32 0, i32 0
  call void @mbuf_free(%struct.mbuf* %m)
  %1 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.altbuf, %struct.altbuf* %1, i32 0, i32 2
  store i64 0, i64* %len, align 8, !tbaa !169
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @altbuf_reallocated(%struct.altbuf* %ab) #0 {
entry:
  %ab.addr = alloca %struct.altbuf*, align 8
  store %struct.altbuf* %ab, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %0 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.altbuf, %struct.altbuf* %0, i32 0, i32 2
  %1 = load i64, i64* %len, align 8, !tbaa !169
  %2 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8, !tbaa !3
  %user_buf_size = getelementptr inbounds %struct.altbuf, %struct.altbuf* %2, i32 0, i32 3
  %3 = load i64, i64* %user_buf_size, align 8, !tbaa !172
  %cmp = icmp ugt i64 %1, %3
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

declare i64 @strtoul(i8*, i8**, i32) #4

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind ssp uwtable
define internal void @mg_find_index_file(i8* %path, i8* %list, i8** %index_file, %struct.stat* %stp) #0 {
entry:
  %path.addr = alloca i8*, align 8
  %list.addr = alloca i8*, align 8
  %index_file.addr = alloca i8**, align 8
  %stp.addr = alloca %struct.stat*, align 8
  %vec = alloca %struct.mg_str, align 8
  %path_len = alloca i64, align 8
  %found = alloca i32, align 4
  %st = alloca %struct.stat, align 8
  %len = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %path, i8** %path.addr, align 8, !tbaa !3
  store i8* %list, i8** %list.addr, align 8, !tbaa !3
  store i8** %index_file, i8*** %index_file.addr, align 8, !tbaa !3
  store %struct.stat* %stp, %struct.stat** %stp.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_str* %vec to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %0) #5
  %1 = bitcast i64* %path_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %2 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %call = call i64 @strlen(i8* %2)
  store i64 %call, i64* %path_len, align 8, !tbaa !12
  %3 = bitcast i32* %found to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  store i32 0, i32* %found, align 4, !tbaa !15
  %4 = load i8**, i8*** %index_file.addr, align 8, !tbaa !3
  store i8* null, i8** %4, align 8, !tbaa !3
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont, %entry
  %5 = load i8*, i8** %list.addr, align 8, !tbaa !3
  %call1 = call i8* @mg_next_comma_list_entry(i8* %5, %struct.mg_str* %vec, %struct.mg_str* null)
  store i8* %call1, i8** %list.addr, align 8, !tbaa !3
  %cmp = icmp ne i8* %call1, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = bitcast %struct.stat* %st to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* %6) #5
  %7 = bitcast i64* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #5
  %8 = load i64, i64* %path_len, align 8, !tbaa !12
  %add = add i64 %8, 1
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %vec, i32 0, i32 1
  %9 = load i64, i64* %len2, align 8, !tbaa !18
  %add3 = add i64 %add, %9
  %add4 = add i64 %add3, 1
  store i64 %add4, i64* %len, align 8, !tbaa !12
  %10 = load i8**, i8*** %index_file.addr, align 8, !tbaa !3
  %11 = load i8*, i8** %10, align 8, !tbaa !3
  %12 = load i64, i64* %len, align 8, !tbaa !12
  %call5 = call i8* @realloc(i8* %11, i64 %12) #16
  %13 = load i8**, i8*** %index_file.addr, align 8, !tbaa !3
  store i8* %call5, i8** %13, align 8, !tbaa !3
  %14 = load i8**, i8*** %index_file.addr, align 8, !tbaa !3
  %15 = load i8*, i8** %14, align 8, !tbaa !3
  %cmp6 = icmp eq i8* %15, null
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %while.body
  %16 = load i8**, i8*** %index_file.addr, align 8, !tbaa !3
  %17 = load i8*, i8** %16, align 8, !tbaa !3
  %18 = load i64, i64* %len, align 8, !tbaa !12
  %19 = load i8**, i8*** %index_file.addr, align 8, !tbaa !3
  %20 = load i8*, i8** %19, align 8, !tbaa !3
  %21 = call i64 @llvm.objectsize.i64.p0i8(i8* %20, i1 false, i1 true)
  %22 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %len7 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %vec, i32 0, i32 1
  %23 = load i64, i64* %len7, align 8, !tbaa !18
  %conv = trunc i64 %23 to i32
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %vec, i32 0, i32 0
  %24 = load i8*, i8** %p, align 8, !tbaa !16
  %call8 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %17, i64 %18, i32 0, i64 %21, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.208, i32 0, i32 0), i8* %22, i32 47, i32 %conv, i8* %24)
  %25 = load i8**, i8*** %index_file.addr, align 8, !tbaa !3
  %26 = load i8*, i8** %25, align 8, !tbaa !3
  %call9 = call i32 @mg_stat(i8* %26, %struct.stat* %st)
  %cmp10 = icmp eq i32 %call9, 0
  br i1 %cmp10, label %land.lhs.true, label %if.end16

land.lhs.true:                                    ; preds = %if.end
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 1
  %27 = load i16, i16* %st_mode, align 4, !tbaa !184
  %conv12 = zext i16 %27 to i32
  %and = and i32 %conv12, 61440
  %cmp13 = icmp eq i32 %and, 32768
  br i1 %cmp13, label %if.then15, label %if.end16

if.then15:                                        ; preds = %land.lhs.true
  %28 = load %struct.stat*, %struct.stat** %stp.addr, align 8, !tbaa !3
  %29 = bitcast %struct.stat* %28 to i8*
  %30 = bitcast %struct.stat* %st to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 144, i1 false), !tbaa.struct !239
  store i32 1, i32* %found, align 4, !tbaa !15
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end16:                                         ; preds = %land.lhs.true, %if.end
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end16, %if.then15, %if.then
  %31 = bitcast i64* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %31) #5
  %32 = bitcast %struct.stat* %st to i8*
  call void @llvm.lifetime.end.p0i8(i64 144, i8* %32) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 3, label %while.end
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %while.cond

while.end:                                        ; preds = %cleanup, %while.cond
  %33 = load i32, i32* %found, align 4, !tbaa !15
  %tobool = icmp ne i32 %33, 0
  br i1 %tobool, label %if.end19, label %if.then18

if.then18:                                        ; preds = %while.end
  %34 = load i8**, i8*** %index_file.addr, align 8, !tbaa !3
  %35 = load i8*, i8** %34, align 8, !tbaa !3
  call void @free(i8* %35)
  %36 = load i8**, i8*** %index_file.addr, align 8, !tbaa !3
  store i8* null, i8** %36, align 8, !tbaa !3
  br label %if.end19

if.end19:                                         ; preds = %if.then18, %while.end
  br label %do.body

do.body:                                          ; preds = %if.end19
  %call20 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 7908)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %do.body
  %37 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %38 = load i8**, i8*** %index_file.addr, align 8, !tbaa !3
  %39 = load i8*, i8** %38, align 8, !tbaa !3
  %tobool23 = icmp ne i8* %39, null
  br i1 %tobool23, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then22
  %40 = load i8**, i8*** %index_file.addr, align 8, !tbaa !3
  %41 = load i8*, i8** %40, align 8, !tbaa !3
  br label %cond.end

cond.false:                                       ; preds = %if.then22
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %41, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), %cond.false ]
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.209, i32 0, i32 0), i8* %37, i8* %cond)
  br label %if.end24

if.end24:                                         ; preds = %cond.end, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end24
  br label %do.end

do.end:                                           ; preds = %do.cond
  %42 = bitcast i32* %found to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %42) #5
  %43 = bitcast i64* %path_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %43) #5
  %44 = bitcast %struct.mg_str* %vec to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %44) #5
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_handle_cgi(%struct.mg_connection* %nc, i8* %prog, %struct.mg_str* %path_info, %struct.http_message* %hm, %struct.mg_serve_http_opts* %opts) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %prog.addr = alloca i8*, align 8
  %path_info.addr = alloca %struct.mg_str*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %blk = alloca %struct.mg_cgi_env_block, align 8
  %dir = alloca [1024 x i8], align 16
  %p = alloca i8*, align 8
  %fds = alloca [2 x i32], align 4
  %cleanup.dest.slot = alloca i32, align 4
  %sa = alloca %struct.sigaction, align 8
  %cgi_nc = alloca %struct.mg_connection*, align 8
  %cgi_pd = alloca %struct.mg_http_proto_data*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %prog, i8** %prog.addr, align 8, !tbaa !3
  store %struct.mg_str* %path_info, %struct.mg_str** %path_info.addr, align 8, !tbaa !3
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_cgi_env_block* %blk to i8*
  call void @llvm.lifetime.start.p0i8(i64 8720, i8* %0) #5
  %1 = bitcast [1024 x i8]* %dir to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* %1) #5
  %2 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  %3 = bitcast [2 x i32]* %fds to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 9287)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %5 = load i8*, i8** %prog.addr, align 8, !tbaa !3
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.210, i32 0, i32 0), %struct.mg_connection* %4, i8* %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %do.cond
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %7 = load i8*, i8** %prog.addr, align 8, !tbaa !3
  %8 = load %struct.mg_str*, %struct.mg_str** %path_info.addr, align 8, !tbaa !3
  %9 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %10 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  call void @mg_prepare_cgi_environment(%struct.mg_connection* %6, i8* %7, %struct.mg_str* %8, %struct.http_message* %9, %struct.mg_serve_http_opts* %10, %struct.mg_cgi_env_block* %blk)
  %11 = load i8*, i8** %prog.addr, align 8, !tbaa !3
  %call1 = call i8* @strrchr(i8* %11, i32 47)
  store i8* %call1, i8** %p, align 8, !tbaa !3
  %cmp = icmp eq i8* %call1, null
  br i1 %cmp, label %if.then2, label %if.else

if.then2:                                         ; preds = %do.end
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %dir, i32 0, i32 0
  %call3 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay, i64 1024, i32 0, i64 1024, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  br label %if.end6

if.else:                                          ; preds = %do.end
  %arraydecay4 = getelementptr inbounds [1024 x i8], [1024 x i8]* %dir, i32 0, i32 0
  %12 = load i8*, i8** %p, align 8, !tbaa !3
  %13 = load i8*, i8** %prog.addr, align 8, !tbaa !3
  %sub.ptr.lhs.cast = ptrtoint i8* %12 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %13 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv = trunc i64 %sub.ptr.sub to i32
  %14 = load i8*, i8** %prog.addr, align 8, !tbaa !3
  %call5 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay4, i64 1024, i32 0, i64 1024, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.138, i32 0, i32 0), i32 %conv, i8* %14)
  %15 = load i8*, i8** %p, align 8, !tbaa !3
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %add.ptr, i8** %prog.addr, align 8, !tbaa !3
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.then2
  %arraydecay7 = getelementptr inbounds [2 x i32], [2 x i32]* %fds, i32 0, i32 0
  %call8 = call i32 @mg_socketpair(i32* %arraydecay7, i32 1)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end11, label %if.then10

if.then10:                                        ; preds = %if.end6
  %16 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %16, i32 0, i32 21
  %17 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %17, 2048
  store i64 %or, i64* %flags, align 8, !tbaa !41
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end11:                                         ; preds = %if.end6
  %18 = bitcast %struct.sigaction* %sa to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %18) #5
  %sa_mask = getelementptr inbounds %struct.sigaction, %struct.sigaction* %sa, i32 0, i32 1
  store i32 0, i32* %sa_mask, align 8, !tbaa !240
  %__sigaction_u = getelementptr inbounds %struct.sigaction, %struct.sigaction* %sa, i32 0, i32 0
  %__sa_handler = bitcast %union.__sigaction_u* %__sigaction_u to void (i32)**
  store void (i32)* inttoptr (i64 1 to void (i32)*), void (i32)** %__sa_handler, align 8, !tbaa !14
  %sa_flags = getelementptr inbounds %struct.sigaction, %struct.sigaction* %sa, i32 0, i32 2
  store i32 0, i32* %sa_flags, align 4, !tbaa !242
  %call12 = call i32 @sigaction(i32 20, %struct.sigaction* %sa, %struct.sigaction* null)
  %19 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %cgi_interpreter = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %19, i32 0, i32 13
  %20 = load i8*, i8** %cgi_interpreter, align 8, !tbaa !243
  %21 = load i8*, i8** %prog.addr, align 8, !tbaa !3
  %buf = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %blk, i32 0, i32 1
  %arraydecay13 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0
  %vars = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %blk, i32 0, i32 2
  %arraydecay14 = getelementptr inbounds [64 x i8*], [64 x i8*]* %vars, i32 0, i32 0
  %arraydecay15 = getelementptr inbounds [1024 x i8], [1024 x i8]* %dir, i32 0, i32 0
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %fds, i64 0, i64 1
  %22 = load i32, i32* %arrayidx, align 4, !tbaa !15
  %call16 = call i32 @mg_start_process(i8* %20, i8* %21, i8* %arraydecay13, i8** %arraydecay14, i8* %arraydecay15, i32 %22)
  %cmp17 = icmp ne i32 %call16, 0
  br i1 %cmp17, label %if.then19, label %if.else41

if.then19:                                        ; preds = %if.end11
  %23 = bitcast %struct.mg_connection** %cgi_nc to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %23) #5
  %24 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %mgr = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %24, i32 0, i32 3
  %25 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8, !tbaa !55
  %arrayidx20 = getelementptr inbounds [2 x i32], [2 x i32]* %fds, i64 0, i64 0
  %26 = load i32, i32* %arrayidx20, align 4, !tbaa !15
  %call21 = call %struct.mg_connection* @mg_add_sock(%struct.mg_mgr* %25, i32 %26, void (%struct.mg_connection*, i32, i8*)* @mg_cgi_ev_handler)
  store %struct.mg_connection* %call21, %struct.mg_connection** %cgi_nc, align 8, !tbaa !3
  %27 = bitcast %struct.mg_http_proto_data** %cgi_pd to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %27) #5
  %28 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %call22 = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %28)
  store %struct.mg_http_proto_data* %call22, %struct.mg_http_proto_data** %cgi_pd, align 8, !tbaa !3
  %29 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc, align 8, !tbaa !3
  %30 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %cgi_pd, align 8, !tbaa !3
  %cgi = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %30, i32 0, i32 1
  %cgi_nc23 = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %cgi, i32 0, i32 0
  store %struct.mg_connection* %29, %struct.mg_connection** %cgi_nc23, align 8, !tbaa !150
  %31 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %32 = bitcast %struct.mg_connection* %31 to i8*
  %33 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %cgi_pd, align 8, !tbaa !3
  %cgi24 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %33, i32 0, i32 1
  %cgi_nc25 = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %cgi24, i32 0, i32 0
  %34 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc25, align 8, !tbaa !150
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %34, i32 0, i32 16
  store i8* %32, i8** %user_data, align 8, !tbaa !44
  %35 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags26 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %35, i32 0, i32 21
  %36 = load i64, i64* %flags26, align 8, !tbaa !41
  %or27 = or i64 %36, 1048576
  store i64 %or27, i64* %flags26, align 8, !tbaa !41
  %37 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %body = getelementptr inbounds %struct.http_message, %struct.http_message* %37, i32 0, i32 1
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body, i32 0, i32 1
  %38 = load i64, i64* %len, align 8, !tbaa !131
  %cmp28 = icmp ugt i64 %38, 0
  br i1 %cmp28, label %if.then30, label %if.end38

if.then30:                                        ; preds = %if.then19
  %39 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %cgi_pd, align 8, !tbaa !3
  %cgi31 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %39, i32 0, i32 1
  %cgi_nc32 = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %cgi31, i32 0, i32 0
  %40 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc32, align 8, !tbaa !150
  %41 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %body33 = getelementptr inbounds %struct.http_message, %struct.http_message* %41, i32 0, i32 1
  %p34 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body33, i32 0, i32 0
  %42 = load i8*, i8** %p34, align 8, !tbaa !130
  %43 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %body35 = getelementptr inbounds %struct.http_message, %struct.http_message* %43, i32 0, i32 1
  %len36 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body35, i32 0, i32 1
  %44 = load i64, i64* %len36, align 8, !tbaa !131
  %conv37 = trunc i64 %44 to i32
  call void @mg_send(%struct.mg_connection* %40, i8* %42, i32 %conv37)
  br label %if.end38

if.end38:                                         ; preds = %if.then30, %if.then19
  %45 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %45, i32 0, i32 8
  %46 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf39 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %46, i32 0, i32 8
  %len40 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf39, i32 0, i32 1
  %47 = load i64, i64* %len40, align 8, !tbaa !54
  call void @mbuf_remove(%struct.mbuf* %recv_mbuf, i64 %47)
  %48 = bitcast %struct.mg_http_proto_data** %cgi_pd to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %48) #5
  %49 = bitcast %struct.mg_connection** %cgi_nc to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %49) #5
  br label %if.end44

if.else41:                                        ; preds = %if.end11
  %arrayidx42 = getelementptr inbounds [2 x i32], [2 x i32]* %fds, i64 0, i64 0
  %50 = load i32, i32* %arrayidx42, align 4, !tbaa !15
  %call43 = call i32 @"\01_close"(i32 %50)
  %51 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_http_send_error(%struct.mg_connection* %51, i32 500, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.211, i32 0, i32 0))
  br label %if.end44

if.end44:                                         ; preds = %if.else41, %if.end38
  %arrayidx45 = getelementptr inbounds [2 x i32], [2 x i32]* %fds, i64 0, i64 1
  %52 = load i32, i32* %arrayidx45, align 4, !tbaa !15
  %call46 = call i32 @"\01_close"(i32 %52)
  %53 = bitcast %struct.sigaction* %sa to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %53) #5
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end44, %if.then10
  %54 = bitcast [2 x i32]* %fds to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %54) #5
  %55 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %55) #5
  %56 = bitcast [1024 x i8]* %dir to i8*
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* %56) #5
  %57 = bitcast %struct.mg_cgi_env_block* %blk to i8*
  call void @llvm.lifetime.end.p0i8(i64 8720, i8* %57) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup, %cleanup
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_is_file_hidden(i8* %path, %struct.mg_serve_http_opts* %opts, i32 %exclude_specials) #0 {
entry:
  %path.addr = alloca i8*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %exclude_specials.addr = alloca i32, align 4
  %p1 = alloca i8*, align 8
  %p2 = alloca i8*, align 8
  %pdir = alloca i8*, align 8
  store i8* %path, i8** %path.addr, align 8, !tbaa !3
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  store i32 %exclude_specials, i32* %exclude_specials.addr, align 4, !tbaa !15
  %0 = bitcast i8** %p1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %per_directory_auth_file = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %1, i32 0, i32 2
  %2 = load i8*, i8** %per_directory_auth_file, align 8, !tbaa !178
  store i8* %2, i8** %p1, align 8, !tbaa !3
  %3 = bitcast i8** %p2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  %4 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %hidden_file_pattern = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %4, i32 0, i32 11
  %5 = load i8*, i8** %hidden_file_pattern, align 8, !tbaa !244
  store i8* %5, i8** %p2, align 8, !tbaa !3
  %6 = bitcast i8** %pdir to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #5
  %7 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %call = call i8* @strrchr(i8* %7, i32 47)
  store i8* %call, i8** %pdir, align 8, !tbaa !3
  %8 = load i8*, i8** %pdir, align 8, !tbaa !3
  %cmp = icmp ne i8* %8, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load i8*, i8** %pdir, align 8, !tbaa !3
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 1
  store i8* %add.ptr, i8** %path.addr, align 8, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load i32, i32* %exclude_specials.addr, align 4, !tbaa !15
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false5

land.lhs.true:                                    ; preds = %if.end
  %11 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %call1 = call i32 @strcmp(i8* %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %lor.lhs.false, label %lor.end

lor.lhs.false:                                    ; preds = %land.lhs.true
  %12 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %call3 = call i32 @strcmp(i8* %12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0))
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %lor.lhs.false5, label %lor.end

lor.lhs.false5:                                   ; preds = %lor.lhs.false, %if.end
  %13 = load i8*, i8** %p1, align 8, !tbaa !3
  %cmp6 = icmp ne i8* %13, null
  br i1 %cmp6, label %land.lhs.true7, label %lor.rhs

land.lhs.true7:                                   ; preds = %lor.lhs.false5
  %14 = load i8*, i8** %p1, align 8, !tbaa !3
  %15 = load i8*, i8** %p1, align 8, !tbaa !3
  %call8 = call i64 @strlen(i8* %15)
  %conv = trunc i64 %call8 to i32
  %16 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %call9 = call i64 @mg_match_prefix(i8* %14, i32 %conv, i8* %16)
  %17 = load i8*, i8** %p1, align 8, !tbaa !3
  %call10 = call i64 @strlen(i8* %17)
  %cmp11 = icmp eq i64 %call9, %call10
  br i1 %cmp11, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true7, %lor.lhs.false5
  %18 = load i8*, i8** %p2, align 8, !tbaa !3
  %cmp13 = icmp ne i8* %18, null
  br i1 %cmp13, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %19 = load i8*, i8** %p2, align 8, !tbaa !3
  %20 = load i8*, i8** %p2, align 8, !tbaa !3
  %call15 = call i64 @strlen(i8* %20)
  %conv16 = trunc i64 %call15 to i32
  %21 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %call17 = call i64 @mg_match_prefix(i8* %19, i32 %conv16, i8* %21)
  %cmp18 = icmp ugt i64 %call17, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %22 = phi i1 [ false, %lor.rhs ], [ %cmp18, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.lhs.true7, %lor.lhs.false, %land.lhs.true
  %23 = phi i1 [ true, %land.lhs.true7 ], [ true, %lor.lhs.false ], [ true, %land.lhs.true ], [ %22, %land.end ]
  %lor.ext = zext i1 %23 to i32
  %24 = bitcast i8** %pdir to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %24) #5
  %25 = bitcast i8** %p2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %25) #5
  %26 = bitcast i8** %p1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %26) #5
  ret i32 %lor.ext
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_is_creation_request(%struct.http_message* %hm) #0 {
entry:
  %hm.addr = alloca %struct.http_message*, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %0 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %method = getelementptr inbounds %struct.http_message, %struct.http_message* %0, i32 0, i32 2
  %call = call i32 @mg_vcmp(%struct.mg_str* %method, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.253, i32 0, i32 0))
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %method1 = getelementptr inbounds %struct.http_message, %struct.http_message* %1, i32 0, i32 2
  %call2 = call i32 @mg_vcmp(%struct.mg_str* %method1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0))
  %cmp3 = icmp eq i32 %call2, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp3, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_http_send_options(%struct.mg_connection* %nc, %struct.mg_serve_http_opts* %opts) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %1 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %extra_headers = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %1, i32 0, i32 15
  %2 = load i8*, i8** %extra_headers, align 8, !tbaa !188
  call void @mg_send_response_line(%struct.mg_connection* %0, i32 200, i8* %2)
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %call = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %3, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.254, i32 0, i32 0))
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 21
  %5 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %5, 1024
  store i64 %or, i64* %flags, align 8, !tbaa !41
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_send_directory_listing(%struct.mg_connection* %nc, i8* %dir, %struct.http_message* %hm, %struct.mg_serve_http_opts* %opts) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %dir.addr = alloca i8*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %dir, i8** %dir.addr, align 8, !tbaa !3
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %1 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %extra_headers = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %1, i32 0, i32 15
  %2 = load i8*, i8** %extra_headers, align 8, !tbaa !188
  call void @mg_send_response_line(%struct.mg_connection* %0, i32 200, i8* %2)
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %call = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %3, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.257, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.232, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.258, i32 0, i32 0))
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %5 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri = getelementptr inbounds %struct.http_message, %struct.http_message* %5, i32 0, i32 3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 1
  %6 = load i64, i64* %len, align 8, !tbaa !136
  %conv = trunc i64 %6 to i32
  %7 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri1 = getelementptr inbounds %struct.http_message, %struct.http_message* %7, i32 0, i32 3
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri1, i32 0, i32 0
  %8 = load i8*, i8** %p, align 8, !tbaa !133
  %9 = load i8*, i8** @mg_send_directory_listing.sort_js_code, align 8, !tbaa !3
  %10 = load i8*, i8** @mg_send_directory_listing.sort_js_code2, align 8, !tbaa !3
  %11 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri2 = getelementptr inbounds %struct.http_message, %struct.http_message* %11, i32 0, i32 3
  %len3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri2, i32 0, i32 1
  %12 = load i64, i64* %len3, align 8, !tbaa !136
  %conv4 = trunc i64 %12 to i32
  %13 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri5 = getelementptr inbounds %struct.http_message, %struct.http_message* %13, i32 0, i32 3
  %p6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri5, i32 0, i32 0
  %14 = load i8*, i8** %p6, align 8, !tbaa !133
  call void (%struct.mg_connection*, i8*, ...) @mg_printf_http_chunk(%struct.mg_connection* %4, i8* getelementptr inbounds ([391 x i8], [391 x i8]* @.str.259, i32 0, i32 0), i32 %conv, i8* %8, i8* %9, i8* %10, i32 %conv4, i8* %14)
  %15 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %16 = load i8*, i8** %dir.addr, align 8, !tbaa !3
  %17 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  call void @mg_scan_directory(%struct.mg_connection* %15, i8* %16, %struct.mg_serve_http_opts* %17, void (%struct.mg_connection*, i8*, %struct.stat*)* @mg_print_dir_entry)
  %18 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %19 = load i8*, i8** @mg_version_header, align 8, !tbaa !3
  call void (%struct.mg_connection*, i8*, ...) @mg_printf_http_chunk(%struct.mg_connection* %18, i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.260, i32 0, i32 0), i8* %19)
  %20 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_send_http_chunk(%struct.mg_connection* %20, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), i64 0)
  %21 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %21, i32 0, i32 21
  %22 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %22, 1024
  store i64 %or, i64* %flags, align 8, !tbaa !41
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_is_not_modified(%struct.http_message* %hm, %struct.stat* %st) #0 {
entry:
  %retval = alloca i32, align 4
  %hm.addr = alloca %struct.http_message*, align 8
  %st.addr = alloca %struct.stat*, align 8
  %hdr = alloca %struct.mg_str*, align 8
  %etag = alloca [64 x i8], align 16
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  store %struct.stat* %st, %struct.stat** %st.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_str** %hdr to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %call = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.269, i32 0, i32 0))
  store %struct.mg_str* %call, %struct.mg_str** %hdr, align 8, !tbaa !3
  %cmp = icmp ne %struct.mg_str* %call, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = bitcast [64 x i8]* %etag to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* %2) #5
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %etag, i32 0, i32 0
  %3 = load %struct.stat*, %struct.stat** %st.addr, align 8, !tbaa !3
  call void @mg_http_construct_etag(i8* %arraydecay, i64 64, %struct.stat* %3)
  %4 = load %struct.mg_str*, %struct.mg_str** %hdr, align 8, !tbaa !3
  %arraydecay1 = getelementptr inbounds [64 x i8], [64 x i8]* %etag, i32 0, i32 0
  %call2 = call i32 @mg_vcasecmp(%struct.mg_str* %4, i8* %arraydecay1)
  %cmp3 = icmp eq i32 %call2, 0
  %conv = zext i1 %cmp3 to i32
  store i32 %conv, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  %5 = bitcast [64 x i8]* %etag to i8*
  call void @llvm.lifetime.end.p0i8(i64 64, i8* %5) #5
  br label %cleanup

if.else:                                          ; preds = %entry
  %6 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %call4 = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %6, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.270, i32 0, i32 0))
  store %struct.mg_str* %call4, %struct.mg_str** %hdr, align 8, !tbaa !3
  %cmp5 = icmp ne %struct.mg_str* %call4, null
  br i1 %cmp5, label %if.then7, label %if.else11

if.then7:                                         ; preds = %if.else
  %7 = load %struct.stat*, %struct.stat** %st.addr, align 8, !tbaa !3
  %st_mtime = getelementptr inbounds %struct.stat, %struct.stat* %7, i32 0, i32 9
  %8 = load i64, i64* %st_mtime, align 8, !tbaa !168
  %9 = load %struct.mg_str*, %struct.mg_str** %hdr, align 8, !tbaa !3
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %9, i32 0, i32 0
  %10 = load i8*, i8** %p, align 8, !tbaa !16
  %call8 = call i64 @mg_parse_date_string(i8* %10)
  %cmp9 = icmp sle i64 %8, %call8
  %conv10 = zext i1 %cmp9 to i32
  store i32 %conv10, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else11:                                        ; preds = %if.else
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.else11, %if.then7, %if.then
  %11 = bitcast %struct.mg_str** %hdr to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %11) #5
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_http_serve_file2(%struct.mg_connection* %nc, i8* %path, %struct.http_message* %hm, %struct.mg_serve_http_opts* %opts) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %path.addr = alloca i8*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %type = alloca %struct.mg_str, align 8
  %encoding = alloca %struct.mg_str, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  %tmp = alloca %struct.mg_str, align 8
  %agg.tmp9 = alloca %struct.mg_str, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %path, i8** %path.addr, align 8, !tbaa !3
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %0 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %ssi_pattern = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %0, i32 0, i32 6
  %1 = load i8*, i8** %ssi_pattern, align 8, !tbaa !181
  %2 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %ssi_pattern1 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %2, i32 0, i32 6
  %3 = load i8*, i8** %ssi_pattern1, align 8, !tbaa !181
  %call = call i64 @strlen(i8* %3)
  %conv = trunc i64 %call to i32
  %4 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %call2 = call i64 @mg_match_prefix(i8* %1, i32 %conv, i8* %4)
  %cmp = icmp ugt i64 %call2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %6 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %7 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %8 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  call void @mg_handle_ssi_request(%struct.mg_connection* %5, %struct.http_message* %6, i8* %7, %struct.mg_serve_http_opts* %8)
  br label %return

if.end:                                           ; preds = %entry
  %9 = bitcast %struct.mg_str* %type to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %9) #5
  %10 = bitcast %struct.mg_str* %type to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false)
  %11 = bitcast %struct.mg_str* %encoding to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %11) #5
  %12 = bitcast %struct.mg_str* %encoding to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 16, i1 false)
  %13 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %call4 = call { i8*, i64 } @mg_mk_str(i8* %13)
  %14 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %15 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %16 = extractvalue { i8*, i64 } %call4, 0
  store i8* %16, i8** %15, align 8
  %17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %18 = extractvalue { i8*, i64 } %call4, 1
  store i64 %18, i64* %17, align 8
  %19 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %20 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %21 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %20, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %20, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  %call5 = call i32 @mg_get_mime_type_encoding(i8* %22, i64 %24, %struct.mg_str* %type, %struct.mg_str* %encoding, %struct.mg_serve_http_opts* %19)
  %tobool = icmp ne i32 %call5, 0
  br i1 %tobool, label %if.end8, label %if.then6

if.then6:                                         ; preds = %if.end
  %25 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %25) #5
  %call7 = call { i8*, i64 } @mg_mk_str(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.287, i32 0, i32 0))
  %26 = bitcast %struct.mg_str* %tmp to { i8*, i64 }*
  %27 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 0
  %28 = extractvalue { i8*, i64 } %call7, 0
  store i8* %28, i8** %27, align 8
  %29 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 1
  %30 = extractvalue { i8*, i64 } %call7, 1
  store i64 %30, i64* %29, align 8
  %31 = bitcast %struct.mg_str* %type to i8*
  %32 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 16, i1 false), !tbaa.struct !19
  %33 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %33) #5
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.end
  %34 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %35 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %36 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %37 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %extra_headers = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %37, i32 0, i32 15
  %38 = load i8*, i8** %extra_headers, align 8, !tbaa !188
  %call10 = call { i8*, i64 } @mg_mk_str(i8* %38)
  %39 = bitcast %struct.mg_str* %agg.tmp9 to { i8*, i64 }*
  %40 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %39, i32 0, i32 0
  %41 = extractvalue { i8*, i64 } %call10, 0
  store i8* %41, i8** %40, align 8
  %42 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %39, i32 0, i32 1
  %43 = extractvalue { i8*, i64 } %call10, 1
  store i64 %43, i64* %42, align 8
  %44 = bitcast %struct.mg_str* %type to { i8*, i64 }*
  %45 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %44, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %44, i32 0, i32 1
  %48 = load i64, i64* %47, align 8
  call void @mg_http_serve_file_internal(%struct.mg_connection* %34, %struct.http_message* %35, i8* %36, i8* %46, i64 %48, %struct.mg_str* byval align 8 %encoding, %struct.mg_str* byval align 8 %agg.tmp9)
  %49 = bitcast %struct.mg_str* %encoding to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %49) #5
  %50 = bitcast %struct.mg_str* %type to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %50) #5
  br label %return

return:                                           ; preds = %if.end8, %if.then
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_prepare_cgi_environment(%struct.mg_connection* %nc, i8* %prog, %struct.mg_str* %path_info, %struct.http_message* %hm, %struct.mg_serve_http_opts* %opts, %struct.mg_cgi_env_block* %blk) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %prog.addr = alloca i8*, align 8
  %path_info.addr = alloca %struct.mg_str*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %blk.addr = alloca %struct.mg_cgi_env_block*, align 8
  %s = alloca i8*, align 8
  %h = alloca %struct.mg_str*, align 8
  %p = alloca i8*, align 8
  %i = alloca i64, align 8
  %buf = alloca [100 x i8], align 16
  %path_info_len = alloca i64, align 8
  %base_name = alloca i8*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %prog, i8** %prog.addr, align 8, !tbaa !3
  store %struct.mg_str* %path_info, %struct.mg_str** %path_info.addr, align 8, !tbaa !3
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  store %struct.mg_cgi_env_block* %blk, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %0 = bitcast i8** %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = bitcast %struct.mg_str** %h to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %2 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  %3 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  %4 = bitcast [100 x i8]* %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 100, i8* %4) #5
  %5 = bitcast i64* %path_info_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #5
  %6 = load %struct.mg_str*, %struct.mg_str** %path_info.addr, align 8, !tbaa !3
  %cmp = icmp ne %struct.mg_str* %6, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %7 = load %struct.mg_str*, %struct.mg_str** %path_info.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %7, i32 0, i32 1
  %8 = load i64, i64* %len, align 8, !tbaa !18
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %8, %cond.true ], [ 0, %cond.false ]
  store i64 %cond, i64* %path_info_len, align 8, !tbaa !12
  %9 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %nvars = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %9, i32 0, i32 4
  store i32 0, i32* %nvars, align 4, !tbaa !245
  %10 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %len1 = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %10, i32 0, i32 3
  store i32 0, i32* %len1, align 8, !tbaa !247
  %11 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %12 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %nc2 = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %12, i32 0, i32 0
  store %struct.mg_connection* %11, %struct.mg_connection** %nc2, align 8, !tbaa !248
  %call = call i8* @getenv(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.212, i32 0, i32 0))
  store i8* %call, i8** %s, align 8, !tbaa !3
  %cmp3 = icmp ne i8* %call, null
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %13 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %14 = load i8*, i8** %s, align 8, !tbaa !3
  %call4 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %13, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.213, i32 0, i32 0), i8* %14)
  br label %if.end

if.else:                                          ; preds = %cond.end
  %15 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %15, i32 0, i32 4
  %16 = load i32, i32* %sock, align 8, !tbaa !45
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i32 0, i32 0
  call void @mg_sock_to_str(i32 %16, i8* %arraydecay, i64 100, i32 3)
  %17 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %arraydecay5 = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i32 0, i32 0
  %call6 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %17, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.213, i32 0, i32 0), i8* %arraydecay5)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %18 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %19 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %document_root = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %19, i32 0, i32 0
  %20 = load i8*, i8** %document_root, align 8, !tbaa !177
  %call7 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %18, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.214, i32 0, i32 0), i8* %20)
  %21 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %22 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %document_root8 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %22, i32 0, i32 0
  %23 = load i8*, i8** %document_root8, align 8, !tbaa !177
  %call9 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %21, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.215, i32 0, i32 0), i8* %23)
  %24 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %call10 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %24, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.216, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.217, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.218, i32 0, i32 0))
  %25 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %call11 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %25, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.219, i32 0, i32 0))
  %26 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %call12 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %26, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.220, i32 0, i32 0))
  %27 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %call13 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %27, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.221, i32 0, i32 0))
  %28 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %29 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %method = getelementptr inbounds %struct.http_message, %struct.http_message* %29, i32 0, i32 2
  %len14 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %method, i32 0, i32 1
  %30 = load i64, i64* %len14, align 8, !tbaa !157
  %conv = trunc i64 %30 to i32
  %31 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %method15 = getelementptr inbounds %struct.http_message, %struct.http_message* %31, i32 0, i32 2
  %p16 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %method15, i32 0, i32 0
  %32 = load i8*, i8** %p16, align 8, !tbaa !134
  %call17 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %28, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.222, i32 0, i32 0), i32 %conv, i8* %32)
  %33 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %34 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri = getelementptr inbounds %struct.http_message, %struct.http_message* %34, i32 0, i32 3
  %len18 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 1
  %35 = load i64, i64* %len18, align 8, !tbaa !136
  %conv19 = trunc i64 %35 to i32
  %36 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri20 = getelementptr inbounds %struct.http_message, %struct.http_message* %36, i32 0, i32 3
  %p21 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri20, i32 0, i32 0
  %37 = load i8*, i8** %p21, align 8, !tbaa !133
  %38 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %query_string = getelementptr inbounds %struct.http_message, %struct.http_message* %38, i32 0, i32 7
  %len22 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %query_string, i32 0, i32 1
  %39 = load i64, i64* %len22, align 8, !tbaa !138
  %cmp23 = icmp eq i64 %39, 0
  %40 = zext i1 %cmp23 to i64
  %cond25 = select i1 %cmp23, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i32 0, i32 0)
  %41 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %query_string26 = getelementptr inbounds %struct.http_message, %struct.http_message* %41, i32 0, i32 7
  %len27 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %query_string26, i32 0, i32 1
  %42 = load i64, i64* %len27, align 8, !tbaa !138
  %conv28 = trunc i64 %42 to i32
  %43 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %query_string29 = getelementptr inbounds %struct.http_message, %struct.http_message* %43, i32 0, i32 7
  %p30 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %query_string29, i32 0, i32 0
  %44 = load i8*, i8** %p30, align 8, !tbaa !137
  %call31 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %33, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.223, i32 0, i32 0), i32 %conv19, i8* %37, i8* %cond25, i32 %conv28, i8* %44)
  %45 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %arraydecay32 = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i32 0, i32 0
  %call33 = call i32 @mg_conn_addr_to_str(%struct.mg_connection* %45, i8* %arraydecay32, i64 100, i32 5)
  %46 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %arraydecay34 = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i32 0, i32 0
  %call35 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %46, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.224, i32 0, i32 0), i8* %arraydecay34)
  %47 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %arraydecay36 = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i32 0, i32 0
  %call37 = call i32 @mg_conn_addr_to_str(%struct.mg_connection* %47, i8* %arraydecay36, i64 100, i32 2)
  %48 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %arraydecay38 = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i32 0, i32 0
  %call39 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %48, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.225, i32 0, i32 0), i8* %arraydecay38)
  %49 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri40 = getelementptr inbounds %struct.http_message, %struct.http_message* %49, i32 0, i32 3
  %p41 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri40, i32 0, i32 0
  %50 = load i8*, i8** %p41, align 8, !tbaa !133
  %51 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri42 = getelementptr inbounds %struct.http_message, %struct.http_message* %51, i32 0, i32 3
  %len43 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri42, i32 0, i32 1
  %52 = load i64, i64* %len43, align 8, !tbaa !136
  %add.ptr = getelementptr inbounds i8, i8* %50, i64 %52
  %53 = load i64, i64* %path_info_len, align 8, !tbaa !12
  %idx.neg = sub i64 0, %53
  %add.ptr44 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.neg
  %add.ptr45 = getelementptr inbounds i8, i8* %add.ptr44, i64 -1
  store i8* %add.ptr45, i8** %s, align 8, !tbaa !3
  %54 = load i8*, i8** %s, align 8, !tbaa !3
  %55 = load i8, i8* %54, align 1, !tbaa !14
  %conv46 = sext i8 %55 to i32
  %cmp47 = icmp eq i32 %conv46, 47
  br i1 %cmp47, label %if.then49, label %if.else64

if.then49:                                        ; preds = %if.end
  %56 = bitcast i8** %base_name to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %56) #5
  %57 = load i8*, i8** %prog.addr, align 8, !tbaa !3
  %call50 = call i8* @strrchr(i8* %57, i32 47)
  store i8* %call50, i8** %base_name, align 8, !tbaa !3
  %58 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %59 = load i8*, i8** %s, align 8, !tbaa !3
  %60 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri51 = getelementptr inbounds %struct.http_message, %struct.http_message* %60, i32 0, i32 3
  %p52 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri51, i32 0, i32 0
  %61 = load i8*, i8** %p52, align 8, !tbaa !133
  %sub.ptr.lhs.cast = ptrtoint i8* %59 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %61 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv53 = trunc i64 %sub.ptr.sub to i32
  %62 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri54 = getelementptr inbounds %struct.http_message, %struct.http_message* %62, i32 0, i32 3
  %p55 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri54, i32 0, i32 0
  %63 = load i8*, i8** %p55, align 8, !tbaa !133
  %64 = load i8*, i8** %base_name, align 8, !tbaa !3
  %cmp56 = icmp ne i8* %64, null
  br i1 %cmp56, label %cond.true58, label %cond.false60

cond.true58:                                      ; preds = %if.then49
  %65 = load i8*, i8** %base_name, align 8, !tbaa !3
  %add.ptr59 = getelementptr inbounds i8, i8* %65, i64 1
  br label %cond.end61

cond.false60:                                     ; preds = %if.then49
  %66 = load i8*, i8** %prog.addr, align 8, !tbaa !3
  br label %cond.end61

cond.end61:                                       ; preds = %cond.false60, %cond.true58
  %cond62 = phi i8* [ %add.ptr59, %cond.true58 ], [ %66, %cond.false60 ]
  %call63 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %58, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.226, i32 0, i32 0), i32 %conv53, i8* %63, i8* %cond62)
  %67 = bitcast i8** %base_name to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %67) #5
  br label %if.end74

if.else64:                                        ; preds = %if.end
  %68 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %69 = load i8*, i8** %s, align 8, !tbaa !3
  %70 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri65 = getelementptr inbounds %struct.http_message, %struct.http_message* %70, i32 0, i32 3
  %p66 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri65, i32 0, i32 0
  %71 = load i8*, i8** %p66, align 8, !tbaa !133
  %sub.ptr.lhs.cast67 = ptrtoint i8* %69 to i64
  %sub.ptr.rhs.cast68 = ptrtoint i8* %71 to i64
  %sub.ptr.sub69 = sub i64 %sub.ptr.lhs.cast67, %sub.ptr.rhs.cast68
  %add = add nsw i64 %sub.ptr.sub69, 1
  %conv70 = trunc i64 %add to i32
  %72 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %uri71 = getelementptr inbounds %struct.http_message, %struct.http_message* %72, i32 0, i32 3
  %p72 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri71, i32 0, i32 0
  %73 = load i8*, i8** %p72, align 8, !tbaa !133
  %call73 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %68, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.227, i32 0, i32 0), i32 %conv70, i8* %73)
  br label %if.end74

if.end74:                                         ; preds = %if.else64, %cond.end61
  %74 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %75 = load i8*, i8** %prog.addr, align 8, !tbaa !3
  %call75 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %74, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.228, i32 0, i32 0), i8* %75)
  %76 = load %struct.mg_str*, %struct.mg_str** %path_info.addr, align 8, !tbaa !3
  %cmp76 = icmp ne %struct.mg_str* %76, null
  br i1 %cmp76, label %land.lhs.true, label %if.end90

land.lhs.true:                                    ; preds = %if.end74
  %77 = load %struct.mg_str*, %struct.mg_str** %path_info.addr, align 8, !tbaa !3
  %len78 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %77, i32 0, i32 1
  %78 = load i64, i64* %len78, align 8, !tbaa !18
  %cmp79 = icmp ugt i64 %78, 0
  br i1 %cmp79, label %if.then81, label %if.end90

if.then81:                                        ; preds = %land.lhs.true
  %79 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %80 = load %struct.mg_str*, %struct.mg_str** %path_info.addr, align 8, !tbaa !3
  %len82 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %80, i32 0, i32 1
  %81 = load i64, i64* %len82, align 8, !tbaa !18
  %conv83 = trunc i64 %81 to i32
  %82 = load %struct.mg_str*, %struct.mg_str** %path_info.addr, align 8, !tbaa !3
  %p84 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %82, i32 0, i32 0
  %83 = load i8*, i8** %p84, align 8, !tbaa !16
  %call85 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %79, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.229, i32 0, i32 0), i32 %conv83, i8* %83)
  %84 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %85 = load %struct.mg_str*, %struct.mg_str** %path_info.addr, align 8, !tbaa !3
  %len86 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %85, i32 0, i32 1
  %86 = load i64, i64* %len86, align 8, !tbaa !18
  %conv87 = trunc i64 %86 to i32
  %87 = load %struct.mg_str*, %struct.mg_str** %path_info.addr, align 8, !tbaa !3
  %p88 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %87, i32 0, i32 0
  %88 = load i8*, i8** %p88, align 8, !tbaa !16
  %call89 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %84, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.230, i32 0, i32 0), i32 %conv87, i8* %88)
  br label %if.end90

if.end90:                                         ; preds = %if.then81, %land.lhs.true, %if.end74
  %89 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %call91 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %89, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.231, i32 0, i32 0))
  %90 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %call92 = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %90, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.232, i32 0, i32 0))
  store %struct.mg_str* %call92, %struct.mg_str** %h, align 8, !tbaa !3
  %cmp93 = icmp ne %struct.mg_str* %call92, null
  br i1 %cmp93, label %if.then95, label %if.end100

if.then95:                                        ; preds = %if.end90
  %91 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %92 = load %struct.mg_str*, %struct.mg_str** %h, align 8, !tbaa !3
  %len96 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %92, i32 0, i32 1
  %93 = load i64, i64* %len96, align 8, !tbaa !18
  %conv97 = trunc i64 %93 to i32
  %94 = load %struct.mg_str*, %struct.mg_str** %h, align 8, !tbaa !3
  %p98 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %94, i32 0, i32 0
  %95 = load i8*, i8** %p98, align 8, !tbaa !16
  %call99 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %91, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.233, i32 0, i32 0), i32 %conv97, i8* %95)
  br label %if.end100

if.end100:                                        ; preds = %if.then95, %if.end90
  %96 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %query_string101 = getelementptr inbounds %struct.http_message, %struct.http_message* %96, i32 0, i32 7
  %len102 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %query_string101, i32 0, i32 1
  %97 = load i64, i64* %len102, align 8, !tbaa !138
  %cmp103 = icmp ugt i64 %97, 0
  br i1 %cmp103, label %if.then105, label %if.end112

if.then105:                                       ; preds = %if.end100
  %98 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %99 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %query_string106 = getelementptr inbounds %struct.http_message, %struct.http_message* %99, i32 0, i32 7
  %len107 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %query_string106, i32 0, i32 1
  %100 = load i64, i64* %len107, align 8, !tbaa !138
  %conv108 = trunc i64 %100 to i32
  %101 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %query_string109 = getelementptr inbounds %struct.http_message, %struct.http_message* %101, i32 0, i32 7
  %p110 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %query_string109, i32 0, i32 0
  %102 = load i8*, i8** %p110, align 8, !tbaa !137
  %call111 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %98, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.234, i32 0, i32 0), i32 %conv108, i8* %102)
  br label %if.end112

if.end112:                                        ; preds = %if.then105, %if.end100
  %103 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %call113 = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %103, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.190, i32 0, i32 0))
  store %struct.mg_str* %call113, %struct.mg_str** %h, align 8, !tbaa !3
  %cmp114 = icmp ne %struct.mg_str* %call113, null
  br i1 %cmp114, label %if.then116, label %if.end121

if.then116:                                       ; preds = %if.end112
  %104 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %105 = load %struct.mg_str*, %struct.mg_str** %h, align 8, !tbaa !3
  %len117 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %105, i32 0, i32 1
  %106 = load i64, i64* %len117, align 8, !tbaa !18
  %conv118 = trunc i64 %106 to i32
  %107 = load %struct.mg_str*, %struct.mg_str** %h, align 8, !tbaa !3
  %p119 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %107, i32 0, i32 0
  %108 = load i8*, i8** %p119, align 8, !tbaa !16
  %call120 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %104, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.235, i32 0, i32 0), i32 %conv118, i8* %108)
  br label %if.end121

if.end121:                                        ; preds = %if.then116, %if.end112
  %109 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  call void @mg_addenv2(%struct.mg_cgi_env_block* %109, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.236, i32 0, i32 0))
  %110 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  call void @mg_addenv2(%struct.mg_cgi_env_block* %110, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.237, i32 0, i32 0))
  %111 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  call void @mg_addenv2(%struct.mg_cgi_env_block* %111, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.238, i32 0, i32 0))
  %112 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  call void @mg_addenv2(%struct.mg_cgi_env_block* %112, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.239, i32 0, i32 0))
  %113 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  call void @mg_addenv2(%struct.mg_cgi_env_block* %113, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.240, i32 0, i32 0))
  %114 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  call void @mg_addenv2(%struct.mg_cgi_env_block* %114, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.241, i32 0, i32 0))
  %115 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  call void @mg_addenv2(%struct.mg_cgi_env_block* %115, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.242, i32 0, i32 0))
  store i64 0, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.cond:                                         ; preds = %for.inc155, %if.end121
  %116 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %header_names = getelementptr inbounds %struct.http_message, %struct.http_message* %116, i32 0, i32 8
  %117 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_names, i64 0, i64 %117
  %len122 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %arrayidx, i32 0, i32 1
  %118 = load i64, i64* %len122, align 8, !tbaa !18
  %cmp123 = icmp ugt i64 %118, 0
  br i1 %cmp123, label %for.body, label %for.end156

for.body:                                         ; preds = %for.cond
  %119 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %120 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %header_names125 = getelementptr inbounds %struct.http_message, %struct.http_message* %120, i32 0, i32 8
  %121 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx126 = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_names125, i64 0, i64 %121
  %len127 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %arrayidx126, i32 0, i32 1
  %122 = load i64, i64* %len127, align 8, !tbaa !18
  %conv128 = trunc i64 %122 to i32
  %123 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %header_names129 = getelementptr inbounds %struct.http_message, %struct.http_message* %123, i32 0, i32 8
  %124 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx130 = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_names129, i64 0, i64 %124
  %p131 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %arrayidx130, i32 0, i32 0
  %125 = load i8*, i8** %p131, align 8, !tbaa !16
  %126 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %header_values = getelementptr inbounds %struct.http_message, %struct.http_message* %126, i32 0, i32 9
  %127 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx132 = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_values, i64 0, i64 %127
  %len133 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %arrayidx132, i32 0, i32 1
  %128 = load i64, i64* %len133, align 8, !tbaa !18
  %conv134 = trunc i64 %128 to i32
  %129 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %header_values135 = getelementptr inbounds %struct.http_message, %struct.http_message* %129, i32 0, i32 9
  %130 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx136 = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_values135, i64 0, i64 %130
  %p137 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %arrayidx136, i32 0, i32 0
  %131 = load i8*, i8** %p137, align 8, !tbaa !16
  %call138 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %119, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.243, i32 0, i32 0), i32 %conv128, i8* %125, i32 %conv134, i8* %131)
  store i8* %call138, i8** %p, align 8, !tbaa !3
  br label %for.cond139

for.cond139:                                      ; preds = %for.inc, %for.body
  %132 = load i8*, i8** %p, align 8, !tbaa !3
  %133 = load i8, i8* %132, align 1, !tbaa !14
  %conv140 = sext i8 %133 to i32
  %cmp141 = icmp ne i32 %conv140, 61
  br i1 %cmp141, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond139
  %134 = load i8*, i8** %p, align 8, !tbaa !3
  %135 = load i8, i8* %134, align 1, !tbaa !14
  %conv143 = sext i8 %135 to i32
  %cmp144 = icmp ne i32 %conv143, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond139
  %136 = phi i1 [ false, %for.cond139 ], [ %cmp144, %land.rhs ]
  br i1 %136, label %for.body146, label %for.end

for.body146:                                      ; preds = %land.end
  %137 = load i8*, i8** %p, align 8, !tbaa !3
  %138 = load i8, i8* %137, align 1, !tbaa !14
  %conv147 = sext i8 %138 to i32
  %cmp148 = icmp eq i32 %conv147, 45
  br i1 %cmp148, label %if.then150, label %if.end151

if.then150:                                       ; preds = %for.body146
  %139 = load i8*, i8** %p, align 8, !tbaa !3
  store i8 95, i8* %139, align 1, !tbaa !14
  br label %if.end151

if.end151:                                        ; preds = %if.then150, %for.body146
  %140 = load i8*, i8** %p, align 8, !tbaa !3
  %141 = load i8, i8* %140, align 1, !tbaa !14
  %conv152 = zext i8 %141 to i32
  %call153 = call i32 @toupper(i32 %conv152) #19
  %conv154 = trunc i32 %call153 to i8
  %142 = load i8*, i8** %p, align 8, !tbaa !3
  store i8 %conv154, i8* %142, align 1, !tbaa !14
  br label %for.inc

for.inc:                                          ; preds = %if.end151
  %143 = load i8*, i8** %p, align 8, !tbaa !3
  %incdec.ptr = getelementptr inbounds i8, i8* %143, i32 1
  store i8* %incdec.ptr, i8** %p, align 8, !tbaa !3
  br label %for.cond139

for.end:                                          ; preds = %land.end
  br label %for.inc155

for.inc155:                                       ; preds = %for.end
  %144 = load i64, i64* %i, align 8, !tbaa !12
  %inc = add i64 %144, 1
  store i64 %inc, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.end156:                                       ; preds = %for.cond
  %145 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %vars = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %145, i32 0, i32 2
  %146 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %nvars157 = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %146, i32 0, i32 4
  %147 = load i32, i32* %nvars157, align 4, !tbaa !245
  %inc158 = add nsw i32 %147, 1
  store i32 %inc158, i32* %nvars157, align 4, !tbaa !245
  %idxprom = sext i32 %147 to i64
  %arrayidx159 = getelementptr inbounds [64 x i8*], [64 x i8*]* %vars, i64 0, i64 %idxprom
  store i8* null, i8** %arrayidx159, align 8, !tbaa !3
  %148 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %buf160 = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %148, i32 0, i32 1
  %149 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %len161 = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %149, i32 0, i32 3
  %150 = load i32, i32* %len161, align 8, !tbaa !247
  %inc162 = add nsw i32 %150, 1
  store i32 %inc162, i32* %len161, align 8, !tbaa !247
  %idxprom163 = sext i32 %150 to i64
  %arrayidx164 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf160, i64 0, i64 %idxprom163
  store i8 0, i8* %arrayidx164, align 1, !tbaa !14
  %151 = bitcast i64* %path_info_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %151) #5
  %152 = bitcast [100 x i8]* %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 100, i8* %152) #5
  %153 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %153) #5
  %154 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %154) #5
  %155 = bitcast %struct.mg_str** %h to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %155) #5
  %156 = bitcast i8** %s to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %156) #5
  ret void
}

declare i32 @sigaction(i32, %struct.sigaction*, %struct.sigaction*) #4

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_start_process(i8* %interp, i8* %cmd, i8* %env, i8** %envp, i8* %dir, i32 %sock) #0 {
entry:
  %interp.addr = alloca i8*, align 8
  %cmd.addr = alloca i8*, align 8
  %env.addr = alloca i8*, align 8
  %envp.addr = alloca i8**, align 8
  %dir.addr = alloca i8*, align 8
  %sock.addr = alloca i32, align 4
  %buf = alloca [500 x i8], align 16
  %pid = alloca i32, align 4
  %tmp = alloca i32, align 4
  store i8* %interp, i8** %interp.addr, align 8, !tbaa !3
  store i8* %cmd, i8** %cmd.addr, align 8, !tbaa !3
  store i8* %env, i8** %env.addr, align 8, !tbaa !3
  store i8** %envp, i8*** %envp.addr, align 8, !tbaa !3
  store i8* %dir, i8** %dir.addr, align 8, !tbaa !3
  store i32 %sock, i32* %sock.addr, align 4, !tbaa !15
  %0 = bitcast [500 x i8]* %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 500, i8* %0) #5
  %1 = bitcast i32* %pid to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  %call = call i32 @fork()
  store i32 %call, i32* %pid, align 4, !tbaa !15
  %2 = load i8*, i8** %env.addr, align 8, !tbaa !3
  %3 = load i32, i32* %pid, align 4, !tbaa !15
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %if.then, label %if.end20

if.then:                                          ; preds = %entry
  %4 = bitcast i32* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #5
  %5 = load i8*, i8** %dir.addr, align 8, !tbaa !3
  %call1 = call i32 @chdir(i8* %5)
  store i32 %call1, i32* %tmp, align 4, !tbaa !15
  %6 = load i32, i32* %tmp, align 4, !tbaa !15
  %7 = load i32, i32* %sock.addr, align 4, !tbaa !15
  %call2 = call i32 @dup2(i32 %7, i32 0)
  %8 = load i32, i32* %sock.addr, align 4, !tbaa !15
  %call3 = call i32 @dup2(i32 %8, i32 1)
  %9 = load i32, i32* %sock.addr, align 4, !tbaa !15
  %call4 = call i32 @"\01_close"(i32 %9)
  %call5 = call void (i32)* @signal(i32 20, void (i32)* null)
  %10 = load i8*, i8** %interp.addr, align 8, !tbaa !3
  %cmp6 = icmp eq i8* %10, null
  br i1 %cmp6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.then
  %11 = load i8*, i8** %cmd.addr, align 8, !tbaa !3
  %12 = load i8*, i8** %cmd.addr, align 8, !tbaa !3
  %13 = load i8**, i8*** %envp.addr, align 8, !tbaa !3
  %call8 = call i32 (i8*, i8*, ...) @execle(i8* %11, i8* %12, i8* null, i8** %13)
  br label %if.end

if.else:                                          ; preds = %if.then
  %14 = load i8*, i8** %interp.addr, align 8, !tbaa !3
  %15 = load i8*, i8** %interp.addr, align 8, !tbaa !3
  %16 = load i8*, i8** %cmd.addr, align 8, !tbaa !3
  %17 = load i8**, i8*** %envp.addr, align 8, !tbaa !3
  %call9 = call i32 (i8*, i8*, ...) @execle(i8* %14, i8* %15, i8* %16, i8* null, i8** %17)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then7
  %arraydecay = getelementptr inbounds [500 x i8], [500 x i8]* %buf, i32 0, i32 0
  %18 = load i8*, i8** %interp.addr, align 8, !tbaa !3
  %cmp10 = icmp eq i8* %18, null
  br i1 %cmp10, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %19 = load i8*, i8** %interp.addr, align 8, !tbaa !3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), %cond.true ], [ %19, %cond.false ]
  %20 = load i8*, i8** %interp.addr, align 8, !tbaa !3
  %cmp11 = icmp eq i8* %20, null
  %21 = zext i1 %cmp11 to i64
  %cond12 = select i1 %cmp11, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.39, i32 0, i32 0)
  %22 = load i8*, i8** %cmd.addr, align 8, !tbaa !3
  %call13 = call i32* @__error()
  %23 = load i32, i32* %call13, align 4, !tbaa !15
  %call14 = call i8* @"\01_strerror"(i32 %23)
  %call15 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay, i64 500, i32 0, i64 500, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.245, i32 0, i32 0), i8* %cond, i8* %cond12, i8* %22, i8* %call14)
  %arraydecay16 = getelementptr inbounds [500 x i8], [500 x i8]* %buf, i32 0, i32 0
  %arraydecay17 = getelementptr inbounds [500 x i8], [500 x i8]* %buf, i32 0, i32 0
  %call18 = call i64 @strlen(i8* %arraydecay17)
  %call19 = call i64 @"\01_send"(i32 1, i8* %arraydecay16, i64 %call18, i32 0)
  call void @_exit(i32 1) #21
  unreachable

if.end20:                                         ; preds = %entry
  %24 = load i32, i32* %pid, align 4, !tbaa !15
  %cmp21 = icmp ne i32 %24, 0
  %conv = zext i1 %cmp21 to i32
  %25 = bitcast i32* %pid to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %25) #5
  %26 = bitcast [500 x i8]* %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 500, i8* %26) #5
  ret i32 %conv
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_cgi_ev_handler(%struct.mg_connection* %cgi_nc, i32 %ev, i8* %ev_data) #0 {
entry:
  %cgi_nc.addr = alloca %struct.mg_connection*, align 8
  %ev.addr = alloca i32, align 4
  %ev_data.addr = alloca i8*, align 8
  %user_data = alloca i8*, align 8
  %nc = alloca %struct.mg_connection*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %io = alloca %struct.mbuf*, align 8
  %len = alloca i32, align 4
  %hm = alloca %struct.http_message, align 8
  %h = alloca %struct.mg_str*, align 8
  store %struct.mg_connection* %cgi_nc, %struct.mg_connection** %cgi_nc.addr, align 8, !tbaa !3
  store i32 %ev, i32* %ev.addr, align 4, !tbaa !15
  store i8* %ev_data, i8** %ev_data.addr, align 8, !tbaa !3
  %0 = bitcast i8** %user_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc.addr, align 8, !tbaa !3
  %user_data1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 16
  %2 = load i8*, i8** %user_data1, align 8, !tbaa !44
  store i8* %2, i8** %user_data, align 8, !tbaa !3
  %3 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  %4 = load i8*, i8** %user_data, align 8, !tbaa !3
  %5 = bitcast i8* %4 to %struct.mg_connection*
  store %struct.mg_connection* %5, %struct.mg_connection** %nc, align 8, !tbaa !3
  %6 = load i8*, i8** %ev_data.addr, align 8, !tbaa !3
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %cmp = icmp eq %struct.mg_connection* %7, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %8, i32 0, i32 21
  %9 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %9, 2048
  store i64 %or, i64* %flags, align 8, !tbaa !41
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup58

if.end:                                           ; preds = %entry
  %10 = load i32, i32* %ev.addr, align 4, !tbaa !15
  switch i32 %10, label %sw.epilog [
    i32 3, label %sw.bb
    i32 5, label %sw.bb50
  ]

sw.bb:                                            ; preds = %if.end
  %11 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %flags2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %11, i32 0, i32 21
  %12 = load i64, i64* %flags2, align 8, !tbaa !41
  %and = and i64 %12, 1048576
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then3, label %if.end44

if.then3:                                         ; preds = %sw.bb
  %13 = bitcast %struct.mbuf** %io to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %13) #5
  %14 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc.addr, align 8, !tbaa !3
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 8
  store %struct.mbuf* %recv_mbuf, %struct.mbuf** %io, align 8, !tbaa !3
  %15 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %15) #5
  %16 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %16, i32 0, i32 0
  %17 = load i8*, i8** %buf, align 8, !tbaa !40
  %18 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %len4 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %18, i32 0, i32 1
  %19 = load i64, i64* %len4, align 8, !tbaa !39
  %conv = trunc i64 %19 to i32
  %call = call i32 @mg_http_get_request_len(i8* %17, i32 %conv)
  store i32 %call, i32* %len, align 4, !tbaa !15
  %20 = load i32, i32* %len, align 4, !tbaa !15
  %cmp5 = icmp eq i32 %20, 0
  br i1 %cmp5, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.then3
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end8:                                          ; preds = %if.then3
  %21 = load i32, i32* %len, align 4, !tbaa !15
  %cmp9 = icmp slt i32 %21, 0
  br i1 %cmp9, label %if.then14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end8
  %22 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %len11 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %22, i32 0, i32 1
  %23 = load i64, i64* %len11, align 8, !tbaa !39
  %cmp12 = icmp ugt i64 %23, 8192
  br i1 %cmp12, label %if.then14, label %if.else

if.then14:                                        ; preds = %lor.lhs.false, %if.end8
  %24 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc.addr, align 8, !tbaa !3
  %flags15 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %24, i32 0, i32 21
  %25 = load i64, i64* %flags15, align 8, !tbaa !41
  %or16 = or i64 %25, 2048
  store i64 %or16, i64* %flags15, align 8, !tbaa !41
  %26 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  call void @mg_http_send_error(%struct.mg_connection* %26, i32 500, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.246, i32 0, i32 0))
  br label %if.end40

if.else:                                          ; preds = %lor.lhs.false
  %27 = bitcast %struct.http_message* %hm to i8*
  call void @llvm.lifetime.start.p0i8(i64 1408, i8* %27) #5
  %28 = bitcast %struct.mg_str** %h to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %28) #5
  %29 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %buf17 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %29, i32 0, i32 0
  %30 = load i8*, i8** %buf17, align 8, !tbaa !40
  %31 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %buf18 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %31, i32 0, i32 0
  %32 = load i8*, i8** %buf18, align 8, !tbaa !40
  %33 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %len19 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %33, i32 0, i32 1
  %34 = load i64, i64* %len19, align 8, !tbaa !39
  %add.ptr = getelementptr inbounds i8, i8* %32, i64 %34
  %35 = load %struct.mbuf*, %struct.mbuf** %io, align 8, !tbaa !3
  %len20 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %35, i32 0, i32 1
  %36 = load i64, i64* %len20, align 8, !tbaa !39
  %conv21 = trunc i64 %36 to i32
  %call22 = call i8* @mg_http_parse_headers(i8* %30, i8* %add.ptr, i32 %conv21, %struct.http_message* %hm)
  %call23 = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %hm, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.247, i32 0, i32 0))
  %cmp24 = icmp ne %struct.mg_str* %call23, null
  br i1 %cmp24, label %if.then26, label %if.else28

if.then26:                                        ; preds = %if.else
  %37 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %call27 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %37, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.248, i32 0, i32 0))
  br label %if.end39

if.else28:                                        ; preds = %if.else
  %call29 = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %hm, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.249, i32 0, i32 0))
  store %struct.mg_str* %call29, %struct.mg_str** %h, align 8, !tbaa !3
  %cmp30 = icmp ne %struct.mg_str* %call29, null
  br i1 %cmp30, label %if.then32, label %if.else36

if.then32:                                        ; preds = %if.else28
  %38 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %39 = load %struct.mg_str*, %struct.mg_str** %h, align 8, !tbaa !3
  %len33 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %39, i32 0, i32 1
  %40 = load i64, i64* %len33, align 8, !tbaa !18
  %conv34 = trunc i64 %40 to i32
  %41 = load %struct.mg_str*, %struct.mg_str** %h, align 8, !tbaa !3
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %41, i32 0, i32 0
  %42 = load i8*, i8** %p, align 8, !tbaa !16
  %call35 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %38, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.250, i32 0, i32 0), i32 %conv34, i8* %42)
  br label %if.end38

if.else36:                                        ; preds = %if.else28
  %43 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %call37 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %43, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.251, i32 0, i32 0))
  br label %if.end38

if.end38:                                         ; preds = %if.else36, %if.then32
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %if.then26
  %44 = bitcast %struct.mg_str** %h to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %44) #5
  %45 = bitcast %struct.http_message* %hm to i8*
  call void @llvm.lifetime.end.p0i8(i64 1408, i8* %45) #5
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.then14
  %46 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %flags41 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %46, i32 0, i32 21
  %47 = load i64, i64* %flags41, align 8, !tbaa !41
  %and42 = and i64 %47, -1048577
  store i64 %and42, i64* %flags41, align 8, !tbaa !41
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end40, %if.then7
  %48 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %48) #5
  %49 = bitcast %struct.mbuf** %io to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %49) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 2, label %sw.epilog
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end44

if.end44:                                         ; preds = %cleanup.cont, %sw.bb
  %50 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %flags45 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %50, i32 0, i32 21
  %51 = load i64, i64* %flags45, align 8, !tbaa !41
  %and46 = and i64 %51, 1048576
  %tobool47 = icmp ne i64 %and46, 0
  br i1 %tobool47, label %if.end49, label %if.then48

if.then48:                                        ; preds = %if.end44
  %52 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc.addr, align 8, !tbaa !3
  %53 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  call void @mg_forward(%struct.mg_connection* %52, %struct.mg_connection* %53)
  br label %if.end49

if.end49:                                         ; preds = %if.then48, %if.end44
  br label %sw.epilog

sw.bb50:                                          ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %sw.bb50
  %call51 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 9271)
  %tobool52 = icmp ne i32 %call51, 0
  br i1 %tobool52, label %if.then53, label %if.end54

if.then53:                                        ; preds = %do.body
  %54 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc.addr, align 8, !tbaa !3
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.252, i32 0, i32 0), %struct.mg_connection* %54)
  br label %if.end54

if.end54:                                         ; preds = %if.then53, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end54
  br label %do.end

do.end:                                           ; preds = %do.cond
  %55 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %call55 = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %55)
  %cgi = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %call55, i32 0, i32 1
  call void @mg_http_free_proto_data_cgi(%struct.mg_http_proto_data_cgi* %cgi)
  %56 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8, !tbaa !3
  %flags56 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %56, i32 0, i32 21
  %57 = load i64, i64* %flags56, align 8, !tbaa !41
  %or57 = or i64 %57, 1024
  store i64 %or57, i64* %flags56, align 8, !tbaa !41
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end, %do.end, %if.end49, %cleanup
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup58

cleanup58:                                        ; preds = %sw.epilog, %if.then
  %58 = bitcast %struct.mg_connection** %nc to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %58) #5
  %59 = bitcast i8** %user_data to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %59) #5
  %cleanup.dest60 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest60, label %unreachable [
    i32 0, label %cleanup.cont61
    i32 1, label %cleanup.cont61
  ]

cleanup.cont61:                                   ; preds = %cleanup58, %cleanup58
  ret void

unreachable:                                      ; preds = %cleanup58, %cleanup
  unreachable
}

declare i8* @getenv(i8*) #4

; Function Attrs: nounwind ssp uwtable
define internal i8* @mg_addenv(%struct.mg_cgi_env_block* %block, i8* %fmt, ...) #0 {
entry:
  %block.addr = alloca %struct.mg_cgi_env_block*, align 8
  %fmt.addr = alloca i8*, align 8
  %n = alloca i32, align 4
  %space = alloca i32, align 4
  %added = alloca i8*, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store %struct.mg_cgi_env_block* %block, %struct.mg_cgi_env_block** %block.addr, align 8, !tbaa !3
  store i8* %fmt, i8** %fmt.addr, align 8, !tbaa !3
  %0 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = bitcast i32* %space to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  %2 = bitcast i8** %added to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  %3 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %block.addr, align 8, !tbaa !3
  %buf = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %3, i32 0, i32 1
  %arraydecay = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0
  %4 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %block.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %4, i32 0, i32 3
  %5 = load i32, i32* %len, align 8, !tbaa !247
  %idx.ext = sext i32 %5 to i64
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 %idx.ext
  store i8* %add.ptr, i8** %added, align 8, !tbaa !3
  %6 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %6) #5
  %7 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %block.addr, align 8, !tbaa !3
  %len1 = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %7, i32 0, i32 3
  %8 = load i32, i32* %len1, align 8, !tbaa !247
  %add = add nsw i32 %8, 2
  %conv = sext i32 %add to i64
  %sub = sub i64 8192, %conv
  %conv2 = trunc i64 %sub to i32
  store i32 %conv2, i32* %space, align 4, !tbaa !15
  %9 = load i32, i32* %space, align 4, !tbaa !15
  %cmp = icmp sgt i32 %9, 0
  br i1 %cmp, label %if.then, label %if.end23

if.then:                                          ; preds = %entry
  %arraydecay4 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay45 = bitcast %struct.__va_list_tag* %arraydecay4 to i8*
  call void @llvm.va_start(i8* %arraydecay45)
  %10 = load i8*, i8** %added, align 8, !tbaa !3
  %11 = load i32, i32* %space, align 4, !tbaa !15
  %conv6 = sext i32 %11 to i64
  %12 = load i8*, i8** %added, align 8, !tbaa !3
  %13 = call i64 @llvm.objectsize.i64.p0i8(i8* %12, i1 false, i1 true)
  %14 = load i8*, i8** %fmt.addr, align 8, !tbaa !3
  %arraydecay7 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %call = call i32 @__vsnprintf_chk(i8* %10, i64 %conv6, i32 0, i64 %13, i8* %14, %struct.__va_list_tag* %arraydecay7)
  store i32 %call, i32* %n, align 4, !tbaa !15
  %arraydecay8 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay89 = bitcast %struct.__va_list_tag* %arraydecay8 to i8*
  call void @llvm.va_end(i8* %arraydecay89)
  %15 = load i32, i32* %n, align 4, !tbaa !15
  %cmp10 = icmp sgt i32 %15, 0
  br i1 %cmp10, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %16 = load i32, i32* %n, align 4, !tbaa !15
  %add12 = add nsw i32 %16, 1
  %17 = load i32, i32* %space, align 4, !tbaa !15
  %cmp13 = icmp slt i32 %add12, %17
  br i1 %cmp13, label %land.lhs.true15, label %if.end

land.lhs.true15:                                  ; preds = %land.lhs.true
  %18 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %block.addr, align 8, !tbaa !3
  %nvars = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %18, i32 0, i32 4
  %19 = load i32, i32* %nvars, align 4, !tbaa !245
  %cmp16 = icmp slt i32 %19, 62
  br i1 %cmp16, label %if.then18, label %if.end

if.then18:                                        ; preds = %land.lhs.true15
  %20 = load i8*, i8** %added, align 8, !tbaa !3
  %21 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %block.addr, align 8, !tbaa !3
  %vars = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %21, i32 0, i32 2
  %22 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %block.addr, align 8, !tbaa !3
  %nvars19 = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %22, i32 0, i32 4
  %23 = load i32, i32* %nvars19, align 4, !tbaa !245
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %nvars19, align 4, !tbaa !245
  %idxprom = sext i32 %23 to i64
  %arrayidx = getelementptr inbounds [64 x i8*], [64 x i8*]* %vars, i64 0, i64 %idxprom
  store i8* %20, i8** %arrayidx, align 8, !tbaa !3
  %24 = load i32, i32* %n, align 4, !tbaa !15
  %add20 = add nsw i32 %24, 1
  %25 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %block.addr, align 8, !tbaa !3
  %len21 = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %25, i32 0, i32 3
  %26 = load i32, i32* %len21, align 8, !tbaa !247
  %add22 = add nsw i32 %26, %add20
  store i32 %add22, i32* %len21, align 8, !tbaa !247
  br label %if.end

if.end:                                           ; preds = %if.then18, %land.lhs.true15, %land.lhs.true, %if.then
  br label %if.end23

if.end23:                                         ; preds = %if.end, %entry
  %27 = load i8*, i8** %added, align 8, !tbaa !3
  %28 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %28) #5
  %29 = bitcast i8** %added to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %29) #5
  %30 = bitcast i32* %space to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %30) #5
  %31 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %31) #5
  ret i8* %27
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_addenv2(%struct.mg_cgi_env_block* %blk, i8* %name) #0 {
entry:
  %blk.addr = alloca %struct.mg_cgi_env_block*, align 8
  %name.addr = alloca i8*, align 8
  %s = alloca i8*, align 8
  store %struct.mg_cgi_env_block* %blk, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  store i8* %name, i8** %name.addr, align 8, !tbaa !3
  %0 = bitcast i8** %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load i8*, i8** %name.addr, align 8, !tbaa !3
  %call = call i8* @getenv(i8* %1)
  store i8* %call, i8** %s, align 8, !tbaa !3
  %cmp = icmp ne i8* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8, !tbaa !3
  %3 = load i8*, i8** %name.addr, align 8, !tbaa !3
  %4 = load i8*, i8** %s, align 8, !tbaa !3
  %call1 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.244, i32 0, i32 0), i8* %3, i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = bitcast i8** %s to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %5) #5
  ret void
}

; Function Attrs: inlinehint nounwind readonly ssp uwtable
define available_externally i32 @toupper(i32 %_c) #9 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4, !tbaa !15
  %0 = load i32, i32* %_c.addr, align 4, !tbaa !15
  %call = call i32 @__toupper(i32 %0)
  ret i32 %call
}

declare i32 @__toupper(i32) #4

declare i32 @fork() #4

declare i32 @chdir(i8*) #4

declare i32 @dup2(i32, i32) #4

declare void (i32)* @signal(i32, void (i32)*) #4

declare i32 @execle(i8*, i8*, ...) #4

declare i8* @"\01_strerror"(i32) #4

; Function Attrs: noreturn
declare void @_exit(i32) #15

; Function Attrs: nounwind ssp uwtable
define internal void @mg_scan_directory(%struct.mg_connection* %nc, i8* %dir, %struct.mg_serve_http_opts* %opts, void (%struct.mg_connection*, i8*, %struct.stat*)* %func) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %dir.addr = alloca i8*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %func.addr = alloca void (%struct.mg_connection*, i8*, %struct.stat*)*, align 8
  %path = alloca [1025 x i8], align 16
  %st = alloca %struct.stat, align 8
  %dp = alloca %struct.dirent*, align 8
  %dirp = alloca %struct.DIR*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %dir, i8** %dir.addr, align 8, !tbaa !3
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  store void (%struct.mg_connection*, i8*, %struct.stat*)* %func, void (%struct.mg_connection*, i8*, %struct.stat*)** %func.addr, align 8, !tbaa !3
  %0 = bitcast [1025 x i8]* %path to i8*
  call void @llvm.lifetime.start.p0i8(i64 1025, i8* %0) #5
  %1 = bitcast %struct.stat* %st to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* %1) #5
  %2 = bitcast %struct.dirent** %dp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  %3 = bitcast %struct.DIR** %dirp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 7796)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %5 = load i8*, i8** %dir.addr, align 8, !tbaa !3
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.210, i32 0, i32 0), %struct.mg_connection* %4, i8* %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %do.cond
  %6 = load i8*, i8** %dir.addr, align 8, !tbaa !3
  %call1 = call %struct.DIR* @"\01_opendir$INODE64"(i8* %6)
  store %struct.DIR* %call1, %struct.DIR** %dirp, align 8, !tbaa !3
  %cmp = icmp ne %struct.DIR* %call1, null
  br i1 %cmp, label %if.then2, label %if.else

if.then2:                                         ; preds = %do.end
  br label %while.cond

while.cond:                                       ; preds = %if.end19, %if.then7, %if.then2
  %7 = load %struct.DIR*, %struct.DIR** %dirp, align 8, !tbaa !3
  %call3 = call %struct.dirent* @"\01_readdir$INODE64"(%struct.DIR* %7)
  store %struct.dirent* %call3, %struct.dirent** %dp, align 8, !tbaa !3
  %cmp4 = icmp ne %struct.dirent* %call3, null
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load %struct.dirent*, %struct.dirent** %dp, align 8, !tbaa !3
  %d_name = getelementptr inbounds %struct.dirent, %struct.dirent* %8, i32 0, i32 5
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %d_name, i32 0, i32 0
  %9 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %call5 = call i32 @mg_is_file_hidden(i8* %arraydecay, %struct.mg_serve_http_opts* %9, i32 1)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %while.body
  br label %while.cond

if.end8:                                          ; preds = %while.body
  %arraydecay9 = getelementptr inbounds [1025 x i8], [1025 x i8]* %path, i32 0, i32 0
  %10 = load i8*, i8** %dir.addr, align 8, !tbaa !3
  %11 = load %struct.dirent*, %struct.dirent** %dp, align 8, !tbaa !3
  %d_name10 = getelementptr inbounds %struct.dirent, %struct.dirent* %11, i32 0, i32 5
  %arraydecay11 = getelementptr inbounds [1024 x i8], [1024 x i8]* %d_name10, i32 0, i32 0
  %call12 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay9, i64 1025, i32 0, i64 1025, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.261, i32 0, i32 0), i8* %10, i8* %arraydecay11)
  %arraydecay13 = getelementptr inbounds [1025 x i8], [1025 x i8]* %path, i32 0, i32 0
  %call14 = call i32 @mg_stat(i8* %arraydecay13, %struct.stat* %st)
  %cmp15 = icmp eq i32 %call14, 0
  br i1 %cmp15, label %if.then16, label %if.end19

if.then16:                                        ; preds = %if.end8
  %12 = load void (%struct.mg_connection*, i8*, %struct.stat*)*, void (%struct.mg_connection*, i8*, %struct.stat*)** %func.addr, align 8, !tbaa !3
  %13 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %14 = load %struct.dirent*, %struct.dirent** %dp, align 8, !tbaa !3
  %d_name17 = getelementptr inbounds %struct.dirent, %struct.dirent* %14, i32 0, i32 5
  %arraydecay18 = getelementptr inbounds [1024 x i8], [1024 x i8]* %d_name17, i32 0, i32 0
  call void %12(%struct.mg_connection* %13, i8* %arraydecay18, %struct.stat* %st)
  br label %if.end19

if.end19:                                         ; preds = %if.then16, %if.end8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %15 = load %struct.DIR*, %struct.DIR** %dirp, align 8, !tbaa !3
  %call20 = call i32 @"\01_closedir"(%struct.DIR* %15)
  br label %if.end29

if.else:                                          ; preds = %do.end
  br label %do.body21

do.body21:                                        ; preds = %if.else
  %call22 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 7810)
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %do.body21
  %16 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %17 = load i8*, i8** %dir.addr, align 8, !tbaa !3
  %call25 = call i32 @mg_get_errno()
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.262, i32 0, i32 0), %struct.mg_connection* %16, i8* %17, i32 %call25)
  br label %if.end26

if.end26:                                         ; preds = %if.then24, %do.body21
  br label %do.cond27

do.cond27:                                        ; preds = %if.end26
  br label %do.end28

do.end28:                                         ; preds = %do.cond27
  br label %if.end29

if.end29:                                         ; preds = %do.end28, %while.end
  %18 = bitcast %struct.DIR** %dirp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %18) #5
  %19 = bitcast %struct.dirent** %dp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %19) #5
  %20 = bitcast %struct.stat* %st to i8*
  call void @llvm.lifetime.end.p0i8(i64 144, i8* %20) #5
  %21 = bitcast [1025 x i8]* %path to i8*
  call void @llvm.lifetime.end.p0i8(i64 1025, i8* %21) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_print_dir_entry(%struct.mg_connection* %nc, i8* %file_name, %struct.stat* %stp) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %file_name.addr = alloca i8*, align 8
  %stp.addr = alloca %struct.stat*, align 8
  %size = alloca [64 x i8], align 16
  %mod = alloca [64 x i8], align 16
  %path = alloca [1024 x i8], align 16
  %fsize = alloca i64, align 8
  %is_dir = alloca i32, align 4
  %slash = alloca i8*, align 8
  %href = alloca %struct.mg_str, align 8
  %tmp = alloca %struct.mg_str, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %file_name, i8** %file_name.addr, align 8, !tbaa !3
  store %struct.stat* %stp, %struct.stat** %stp.addr, align 8, !tbaa !3
  %0 = bitcast [64 x i8]* %size to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* %0) #5
  %1 = bitcast [64 x i8]* %mod to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* %1) #5
  %2 = bitcast [1024 x i8]* %path to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* %2) #5
  %3 = bitcast i64* %fsize to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  %4 = load %struct.stat*, %struct.stat** %stp.addr, align 8, !tbaa !3
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %4, i32 0, i32 15
  %5 = load i64, i64* %st_size, align 8, !tbaa !166
  store i64 %5, i64* %fsize, align 8, !tbaa !35
  %6 = bitcast i32* %is_dir to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #5
  %7 = load %struct.stat*, %struct.stat** %stp.addr, align 8, !tbaa !3
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %7, i32 0, i32 1
  %8 = load i16, i16* %st_mode, align 4, !tbaa !184
  %conv = zext i16 %8 to i32
  %and = and i32 %conv, 61440
  %cmp = icmp eq i32 %and, 16384
  %conv1 = zext i1 %cmp to i32
  store i32 %conv1, i32* %is_dir, align 4, !tbaa !15
  %9 = bitcast i8** %slash to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #5
  %10 = load i32, i32* %is_dir, align 4, !tbaa !15
  %tobool = icmp ne i32 %10, 0
  %11 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0)
  store i8* %cond, i8** %slash, align 8, !tbaa !3
  %12 = bitcast %struct.mg_str* %href to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %12) #5
  %13 = load i32, i32* %is_dir, align 4, !tbaa !15
  %tobool2 = icmp ne i32 %13, 0
  br i1 %tobool2, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %size, i32 0, i32 0
  %call = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay, i64 64, i32 0, i64 64, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.263, i32 0, i32 0))
  br label %if.end31

if.else:                                          ; preds = %entry
  %14 = load i64, i64* %fsize, align 8, !tbaa !35
  %cmp3 = icmp slt i64 %14, 1024
  br i1 %cmp3, label %if.then5, label %if.else9

if.then5:                                         ; preds = %if.else
  %arraydecay6 = getelementptr inbounds [64 x i8], [64 x i8]* %size, i32 0, i32 0
  %15 = load i64, i64* %fsize, align 8, !tbaa !35
  %conv7 = trunc i64 %15 to i32
  %call8 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay6, i64 64, i32 0, i64 64, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.143, i32 0, i32 0), i32 %conv7)
  br label %if.end30

if.else9:                                         ; preds = %if.else
  %16 = load i64, i64* %fsize, align 8, !tbaa !35
  %cmp10 = icmp slt i64 %16, 1048576
  br i1 %cmp10, label %if.then12, label %if.else16

if.then12:                                        ; preds = %if.else9
  %arraydecay13 = getelementptr inbounds [64 x i8], [64 x i8]* %size, i32 0, i32 0
  %17 = load i64, i64* %fsize, align 8, !tbaa !35
  %conv14 = sitofp i64 %17 to double
  %div = fdiv double %conv14, 1.024000e+03
  %call15 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay13, i64 64, i32 0, i64 64, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.264, i32 0, i32 0), double %div)
  br label %if.end29

if.else16:                                        ; preds = %if.else9
  %18 = load i64, i64* %fsize, align 8, !tbaa !35
  %cmp17 = icmp slt i64 %18, 1073741824
  br i1 %cmp17, label %if.then19, label %if.else24

if.then19:                                        ; preds = %if.else16
  %arraydecay20 = getelementptr inbounds [64 x i8], [64 x i8]* %size, i32 0, i32 0
  %19 = load i64, i64* %fsize, align 8, !tbaa !35
  %conv21 = sitofp i64 %19 to double
  %div22 = fdiv double %conv21, 0x4130000000000000
  %call23 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay20, i64 64, i32 0, i64 64, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.265, i32 0, i32 0), double %div22)
  br label %if.end

if.else24:                                        ; preds = %if.else16
  %arraydecay25 = getelementptr inbounds [64 x i8], [64 x i8]* %size, i32 0, i32 0
  %20 = load i64, i64* %fsize, align 8, !tbaa !35
  %conv26 = sitofp i64 %20 to double
  %div27 = fdiv double %conv26, 0x41D0000000000000
  %call28 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay25, i64 64, i32 0, i64 64, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.266, i32 0, i32 0), double %div27)
  br label %if.end

if.end:                                           ; preds = %if.else24, %if.then19
  br label %if.end29

if.end29:                                         ; preds = %if.end, %if.then12
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.then5
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %if.then
  %arraydecay32 = getelementptr inbounds [64 x i8], [64 x i8]* %mod, i32 0, i32 0
  %21 = load %struct.stat*, %struct.stat** %stp.addr, align 8, !tbaa !3
  %st_mtime = getelementptr inbounds %struct.stat, %struct.stat* %21, i32 0, i32 9
  %call33 = call %struct.tm* @localtime(i64* %st_mtime)
  %call34 = call i64 @"\01_strftime"(i8* %arraydecay32, i64 64, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.267, i32 0, i32 0), %struct.tm* %call33)
  %22 = load i8*, i8** %file_name.addr, align 8, !tbaa !3
  %arraydecay35 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  call void @mg_escape(i8* %22, i8* %arraydecay35, i64 1024)
  %23 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %23) #5
  %24 = load i8*, i8** %file_name.addr, align 8, !tbaa !3
  %call36 = call { i8*, i64 } @mg_mk_str(i8* %24)
  %25 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %26 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %25, i32 0, i32 0
  %27 = extractvalue { i8*, i64 } %call36, 0
  store i8* %27, i8** %26, align 8
  %28 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %25, i32 0, i32 1
  %29 = extractvalue { i8*, i64 } %call36, 1
  store i64 %29, i64* %28, align 8
  %30 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %31 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %30, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %30, i32 0, i32 1
  %34 = load i64, i64* %33, align 8
  %call37 = call { i8*, i64 } @mg_url_encode(i8* %32, i64 %34)
  %35 = bitcast %struct.mg_str* %tmp to { i8*, i64 }*
  %36 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %35, i32 0, i32 0
  %37 = extractvalue { i8*, i64 } %call37, 0
  store i8* %37, i8** %36, align 8
  %38 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %35, i32 0, i32 1
  %39 = extractvalue { i8*, i64 } %call37, 1
  store i64 %39, i64* %38, align 8
  %40 = bitcast %struct.mg_str* %href to i8*
  %41 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 16, i1 false), !tbaa.struct !19
  %42 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %42) #5
  %43 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %href, i32 0, i32 0
  %44 = load i8*, i8** %p, align 8, !tbaa !16
  %45 = load i8*, i8** %slash, align 8, !tbaa !3
  %arraydecay38 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %46 = load i8*, i8** %slash, align 8, !tbaa !3
  %arraydecay39 = getelementptr inbounds [64 x i8], [64 x i8]* %mod, i32 0, i32 0
  %47 = load i32, i32* %is_dir, align 4, !tbaa !15
  %tobool40 = icmp ne i32 %47, 0
  br i1 %tobool40, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end31
  br label %cond.end

cond.false:                                       ; preds = %if.end31
  %48 = load i64, i64* %fsize, align 8, !tbaa !35
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond41 = phi i64 [ -1, %cond.true ], [ %48, %cond.false ]
  %arraydecay42 = getelementptr inbounds [64 x i8], [64 x i8]* %size, i32 0, i32 0
  call void (%struct.mg_connection*, i8*, ...) @mg_printf_http_chunk(%struct.mg_connection* %43, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.268, i32 0, i32 0), i8* %44, i8* %45, i8* %arraydecay38, i8* %46, i8* %arraydecay39, i64 %cond41, i8* %arraydecay42)
  %p43 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %href, i32 0, i32 0
  %49 = load i8*, i8** %p43, align 8, !tbaa !16
  call void @free(i8* %49)
  %50 = bitcast %struct.mg_str* %href to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %50) #5
  %51 = bitcast i8** %slash to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %51) #5
  %52 = bitcast i32* %is_dir to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %52) #5
  %53 = bitcast i64* %fsize to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %53) #5
  %54 = bitcast [1024 x i8]* %path to i8*
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* %54) #5
  %55 = bitcast [64 x i8]* %mod to i8*
  call void @llvm.lifetime.end.p0i8(i64 64, i8* %55) #5
  %56 = bitcast [64 x i8]* %size to i8*
  call void @llvm.lifetime.end.p0i8(i64 64, i8* %56) #5
  ret void
}

declare %struct.DIR* @"\01_opendir$INODE64"(i8*) #4

declare %struct.dirent* @"\01_readdir$INODE64"(%struct.DIR*) #4

declare i32 @"\01_closedir"(%struct.DIR*) #4

declare %struct.tm* @localtime(i64*) #4

; Function Attrs: nounwind ssp uwtable
define internal void @mg_escape(i8* %src, i8* %dst, i64 %dst_len) #0 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %dst_len.addr = alloca i64, align 8
  %n = alloca i64, align 8
  %ch = alloca i8, align 1
  store i8* %src, i8** %src.addr, align 8, !tbaa !3
  store i8* %dst, i8** %dst.addr, align 8, !tbaa !3
  store i64 %dst_len, i64* %dst_len.addr, align 8, !tbaa !12
  %0 = bitcast i64* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  store i64 0, i64* %n, align 8, !tbaa !12
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %1 = load i8*, i8** %src.addr, align 8, !tbaa !3
  %2 = load i8, i8* %1, align 1, !tbaa !14
  %conv = sext i8 %2 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load i64, i64* %n, align 8, !tbaa !12
  %add = add i64 %3, 5
  %4 = load i64, i64* %dst_len.addr, align 8, !tbaa !12
  %cmp2 = icmp ult i64 %add, %4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %5 = phi i1 [ false, %while.cond ], [ %cmp2, %land.rhs ]
  br i1 %5, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %ch) #5
  %6 = load i8*, i8** %src.addr, align 8, !tbaa !3
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %src.addr, align 8, !tbaa !3
  %7 = load i8, i8* %6, align 1, !tbaa !14
  store i8 %7, i8* %ch, align 1, !tbaa !14
  %8 = load i8, i8* %ch, align 1, !tbaa !14
  %conv4 = zext i8 %8 to i32
  %cmp5 = icmp eq i32 %conv4, 60
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %9 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %10 = load i64, i64* %n, align 8, !tbaa !12
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 %10
  %11 = load i64, i64* %dst_len.addr, align 8, !tbaa !12
  %12 = load i64, i64* %n, align 8, !tbaa !12
  %sub = sub i64 %11, %12
  %13 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %14 = load i64, i64* %n, align 8, !tbaa !12
  %add.ptr7 = getelementptr inbounds i8, i8* %13, i64 %14
  %15 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr7, i1 false, i1 true)
  %call = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %add.ptr, i64 %sub, i32 0, i64 %15, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.88, i32 0, i32 0))
  %conv8 = sext i32 %call to i64
  %16 = load i64, i64* %n, align 8, !tbaa !12
  %add9 = add i64 %16, %conv8
  store i64 %add9, i64* %n, align 8, !tbaa !12
  br label %if.end

if.else:                                          ; preds = %while.body
  %17 = load i8, i8* %ch, align 1, !tbaa !14
  %18 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %19 = load i64, i64* %n, align 8, !tbaa !12
  %inc = add i64 %19, 1
  store i64 %inc, i64* %n, align 8, !tbaa !12
  %arrayidx = getelementptr inbounds i8, i8* %18, i64 %19
  store i8 %17, i8* %arrayidx, align 1, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ch) #5
  br label %while.cond

while.end:                                        ; preds = %land.end
  %20 = load i8*, i8** %dst.addr, align 8, !tbaa !3
  %21 = load i64, i64* %n, align 8, !tbaa !12
  %arrayidx10 = getelementptr inbounds i8, i8* %20, i64 %21
  store i8 0, i8* %arrayidx10, align 1, !tbaa !14
  %22 = bitcast i64* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %22) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @mg_parse_date_string(i8* %datetime) #0 {
entry:
  %datetime.addr = alloca i8*, align 8
  %month_str = alloca [32 x i8], align 16
  %second = alloca i32, align 4
  %minute = alloca i32, align 4
  %hour = alloca i32, align 4
  %day = alloca i32, align 4
  %month = alloca i32, align 4
  %year = alloca i32, align 4
  %leap_days = alloca i32, align 4
  %days = alloca i32, align 4
  %result = alloca i64, align 8
  store i8* %datetime, i8** %datetime.addr, align 8, !tbaa !3
  %0 = bitcast [32 x i8]* %month_str to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %0) #5
  %1 = bitcast i32* %second to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  %2 = bitcast i32* %minute to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #5
  %3 = bitcast i32* %hour to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  %4 = bitcast i32* %day to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #5
  %5 = bitcast i32* %month to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #5
  %6 = bitcast i32* %year to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #5
  %7 = bitcast i32* %leap_days to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %7) #5
  %8 = bitcast i32* %days to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %8) #5
  %9 = bitcast i64* %result to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #5
  store i64 0, i64* %result, align 8, !tbaa !12
  %10 = load i8*, i8** %datetime.addr, align 8, !tbaa !3
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %month_str, i32 0, i32 0
  %call = call i32 (i8*, i8*, ...) @sscanf(i8* %10, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.271, i32 0, i32 0), i32* %day, i8* %arraydecay, i32* %year, i32* %hour, i32* %minute, i32* %second)
  %cmp = icmp eq i32 %call, 6
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %11 = load i8*, i8** %datetime.addr, align 8, !tbaa !3
  %arraydecay1 = getelementptr inbounds [32 x i8], [32 x i8]* %month_str, i32 0, i32 0
  %call2 = call i32 (i8*, i8*, ...) @sscanf(i8* %11, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.272, i32 0, i32 0), i32* %day, i8* %arraydecay1, i32* %year, i32* %hour, i32* %minute, i32* %second)
  %cmp3 = icmp eq i32 %call2, 6
  br i1 %cmp3, label %land.lhs.true, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %12 = load i8*, i8** %datetime.addr, align 8, !tbaa !3
  %arraydecay5 = getelementptr inbounds [32 x i8], [32 x i8]* %month_str, i32 0, i32 0
  %call6 = call i32 (i8*, i8*, ...) @sscanf(i8* %12, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.273, i32 0, i32 0), i32* %day, i8* %arraydecay5, i32* %year, i32* %hour, i32* %minute, i32* %second)
  %cmp7 = icmp eq i32 %call6, 6
  br i1 %cmp7, label %land.lhs.true, label %lor.lhs.false8

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %13 = load i8*, i8** %datetime.addr, align 8, !tbaa !3
  %arraydecay9 = getelementptr inbounds [32 x i8], [32 x i8]* %month_str, i32 0, i32 0
  %call10 = call i32 (i8*, i8*, ...) @sscanf(i8* %13, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.274, i32 0, i32 0), i32* %day, i8* %arraydecay9, i32* %year, i32* %hour, i32* %minute, i32* %second)
  %cmp11 = icmp eq i32 %call10, 6
  br i1 %cmp11, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %14 = load i32, i32* %year, align 4, !tbaa !15
  %cmp12 = icmp sgt i32 %14, 1970
  br i1 %cmp12, label %land.lhs.true13, label %if.end

land.lhs.true13:                                  ; preds = %land.lhs.true
  %arraydecay14 = getelementptr inbounds [32 x i8], [32 x i8]* %month_str, i32 0, i32 0
  %call15 = call i32 @mg_get_month_index(i8* %arraydecay14)
  store i32 %call15, i32* %month, align 4, !tbaa !15
  %cmp16 = icmp ne i32 %call15, -1
  br i1 %cmp16, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true13
  %15 = load i32, i32* %year, align 4, !tbaa !15
  %call17 = call i32 @mg_num_leap_years(i32 %15)
  %call18 = call i32 @mg_num_leap_years(i32 1970)
  %sub = sub nsw i32 %call17, %call18
  store i32 %sub, i32* %leap_days, align 4, !tbaa !15
  %16 = load i32, i32* %year, align 4, !tbaa !15
  %sub19 = sub nsw i32 %16, 1970
  store i32 %sub19, i32* %year, align 4, !tbaa !15
  %17 = load i32, i32* %year, align 4, !tbaa !15
  %mul = mul nsw i32 %17, 365
  %18 = load i32, i32* %month, align 4, !tbaa !15
  %idxprom = sext i32 %18 to i64
  %arrayidx = getelementptr inbounds [12 x i16], [12 x i16]* @mg_parse_date_string.days_before_month, i64 0, i64 %idxprom
  %19 = load i16, i16* %arrayidx, align 2, !tbaa !86
  %conv = zext i16 %19 to i32
  %add = add nsw i32 %mul, %conv
  %20 = load i32, i32* %day, align 4, !tbaa !15
  %sub20 = sub nsw i32 %20, 1
  %add21 = add nsw i32 %add, %sub20
  %21 = load i32, i32* %leap_days, align 4, !tbaa !15
  %add22 = add nsw i32 %add21, %21
  store i32 %add22, i32* %days, align 4, !tbaa !15
  %22 = load i32, i32* %days, align 4, !tbaa !15
  %mul23 = mul nsw i32 %22, 24
  %mul24 = mul nsw i32 %mul23, 3600
  %23 = load i32, i32* %hour, align 4, !tbaa !15
  %mul25 = mul nsw i32 %23, 3600
  %add26 = add nsw i32 %mul24, %mul25
  %24 = load i32, i32* %minute, align 4, !tbaa !15
  %mul27 = mul nsw i32 %24, 60
  %add28 = add nsw i32 %add26, %mul27
  %25 = load i32, i32* %second, align 4, !tbaa !15
  %add29 = add nsw i32 %add28, %25
  %conv30 = sext i32 %add29 to i64
  store i64 %conv30, i64* %result, align 8, !tbaa !12
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true13, %land.lhs.true, %lor.lhs.false8
  %26 = load i64, i64* %result, align 8, !tbaa !12
  %27 = bitcast i64* %result to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %27) #5
  %28 = bitcast i32* %days to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %28) #5
  %29 = bitcast i32* %leap_days to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %29) #5
  %30 = bitcast i32* %year to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %30) #5
  %31 = bitcast i32* %month to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %31) #5
  %32 = bitcast i32* %day to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %32) #5
  %33 = bitcast i32* %hour to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %33) #5
  %34 = bitcast i32* %minute to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %34) #5
  %35 = bitcast i32* %second to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %35) #5
  %36 = bitcast [32 x i8]* %month_str to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %36) #5
  ret i64 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_get_month_index(i8* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 8
  %i = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 8, !tbaa !3
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  store i64 0, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i, align 8, !tbaa !12
  %cmp = icmp ult i64 %1, 12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %s.addr, align 8, !tbaa !3
  %3 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx = getelementptr inbounds [12 x i8*], [12 x i8*]* @mg_get_month_index.month_names, i64 0, i64 %3
  %4 = load i8*, i8** %arrayidx, align 8, !tbaa !3
  %call = call i32 @strcmp(i8* %2, i8* %4)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %5 = load i64, i64* %i, align 8, !tbaa !12
  %conv = trunc i64 %5 to i32
  store i32 %conv, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i64, i64* %i, align 8, !tbaa !12
  %inc = add i64 %6, 1
  store i64 %inc, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then
  %7 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %7) #5
  %8 = load i32, i32* %retval, align 4
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_num_leap_years(i32 %year) #0 {
entry:
  %year.addr = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4, !tbaa !15
  %0 = load i32, i32* %year.addr, align 4, !tbaa !15
  %div = sdiv i32 %0, 4
  %1 = load i32, i32* %year.addr, align 4, !tbaa !15
  %div1 = sdiv i32 %1, 100
  %sub = sub nsw i32 %div, %div1
  %2 = load i32, i32* %year.addr, align 4, !tbaa !15
  %div2 = sdiv i32 %2, 400
  %add = add nsw i32 %sub, %div2
  ret i32 %add
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_handle_ssi_request(%struct.mg_connection* %nc, %struct.http_message* %hm, i8* %path, %struct.mg_serve_http_opts* %opts) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %path.addr = alloca i8*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %fp = alloca %struct.__sFILE*, align 8
  %mime_type = alloca %struct.mg_str, align 8
  %encoding = alloca %struct.mg_str, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  %tmp = alloca %struct.mg_str, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  store i8* %path, i8** %path.addr, align 8, !tbaa !3
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %0 = bitcast %struct.__sFILE** %fp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = bitcast %struct.mg_str* %mime_type to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %1) #5
  %2 = bitcast %struct.mg_str* %mime_type to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 16, i1 false)
  %3 = bitcast %struct.mg_str* %encoding to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %3) #5
  %4 = bitcast %struct.mg_str* %encoding to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 16, i1 false)
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 9524)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %6 = load i8*, i8** %path.addr, align 8, !tbaa !3
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.288, i32 0, i32 0), %struct.mg_connection* %5, i8* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %do.cond
  %7 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %call1 = call %struct.__sFILE* @mg_fopen(i8* %7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.76, i32 0, i32 0))
  store %struct.__sFILE* %call1, %struct.__sFILE** %fp, align 8, !tbaa !3
  %cmp = icmp eq %struct.__sFILE* %call1, null
  br i1 %cmp, label %if.then2, label %if.else

if.then2:                                         ; preds = %do.end
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_http_send_error(%struct.mg_connection* %8, i32 404, i8* null)
  br label %if.end21

if.else:                                          ; preds = %do.end
  %9 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !tbaa !3
  %call3 = call i32 @fileno(%struct.__sFILE* %9)
  call void @mg_set_close_on_exec(i32 %call3)
  %10 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %call4 = call { i8*, i64 } @mg_mk_str(i8* %10)
  %11 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %12 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 0
  %13 = extractvalue { i8*, i64 } %call4, 0
  store i8* %13, i8** %12, align 8
  %14 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 1
  %15 = extractvalue { i8*, i64 } %call4, 1
  store i64 %15, i64* %14, align 8
  %16 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %17 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %18 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %17, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %17, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %call5 = call i32 @mg_get_mime_type_encoding(i8* %19, i64 %21, %struct.mg_str* %mime_type, %struct.mg_str* %encoding, %struct.mg_serve_http_opts* %16)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end9, label %if.then7

if.then7:                                         ; preds = %if.else
  %22 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %22) #5
  %call8 = call { i8*, i64 } @mg_mk_str(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.287, i32 0, i32 0))
  %23 = bitcast %struct.mg_str* %tmp to { i8*, i64 }*
  %24 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %23, i32 0, i32 0
  %25 = extractvalue { i8*, i64 } %call8, 0
  store i8* %25, i8** %24, align 8
  %26 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %23, i32 0, i32 1
  %27 = extractvalue { i8*, i64 } %call8, 1
  store i64 %27, i64* %26, align 8
  %28 = bitcast %struct.mg_str* %mime_type to i8*
  %29 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %29, i64 16, i1 false), !tbaa.struct !19
  %30 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %30) #5
  br label %if.end9

if.end9:                                          ; preds = %if.then7, %if.else
  %31 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %32 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %extra_headers = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %32, i32 0, i32 15
  %33 = load i8*, i8** %extra_headers, align 8, !tbaa !188
  call void @mg_send_response_line(%struct.mg_connection* %31, i32 200, i8* %33)
  %34 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %mime_type, i32 0, i32 1
  %35 = load i64, i64* %len, align 8, !tbaa !18
  %conv = trunc i64 %35 to i32
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %mime_type, i32 0, i32 0
  %36 = load i8*, i8** %p, align 8, !tbaa !16
  %call10 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %34, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.289, i32 0, i32 0), i32 %conv, i8* %36)
  %len11 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %encoding, i32 0, i32 1
  %37 = load i64, i64* %len11, align 8, !tbaa !18
  %cmp12 = icmp ugt i64 %37, 0
  br i1 %cmp12, label %if.then14, label %if.end19

if.then14:                                        ; preds = %if.end9
  %38 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %len15 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %encoding, i32 0, i32 1
  %39 = load i64, i64* %len15, align 8, !tbaa !18
  %conv16 = trunc i64 %39 to i32
  %p17 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %encoding, i32 0, i32 0
  %40 = load i8*, i8** %p17, align 8, !tbaa !16
  %call18 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %38, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.86, i32 0, i32 0), i32 %conv16, i8* %40)
  br label %if.end19

if.end19:                                         ; preds = %if.then14, %if.end9
  %41 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_send(%struct.mg_connection* %41, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i32 2)
  %42 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %43 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %44 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %45 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !tbaa !3
  %46 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  call void @mg_send_ssi_file(%struct.mg_connection* %42, %struct.http_message* %43, i8* %44, %struct.__sFILE* %45, i32 0, %struct.mg_serve_http_opts* %46)
  %47 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !tbaa !3
  %call20 = call i32 @fclose(%struct.__sFILE* %47)
  %48 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %48, i32 0, i32 21
  %49 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %49, 1024
  store i64 %or, i64* %flags, align 8, !tbaa !41
  br label %if.end21

if.end21:                                         ; preds = %if.end19, %if.then2
  %50 = bitcast %struct.mg_str* %encoding to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %50) #5
  %51 = bitcast %struct.mg_str* %mime_type to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %51) #5
  %52 = bitcast %struct.__sFILE** %fp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %52) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_get_mime_type_encoding(i8* %path.coerce0, i64 %path.coerce1, %struct.mg_str* %type, %struct.mg_str* %encoding, %struct.mg_serve_http_opts* %opts) #0 {
entry:
  %retval = alloca i32, align 4
  %path = alloca %struct.mg_str, align 8
  %type.addr = alloca %struct.mg_str*, align 8
  %encoding.addr = alloca %struct.mg_str*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %ext = alloca i8*, align 8
  %overrides = alloca i8*, align 8
  %k = alloca %struct.mg_str, align 8
  %v = alloca %struct.mg_str, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %tmp = alloca %struct.mg_str, align 8
  %path2 = alloca %struct.mg_str, align 8
  %type2 = alloca %struct.mg_str, align 8
  %tmp31 = alloca %struct.mg_str, align 8
  %0 = bitcast %struct.mg_str* %path to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %path.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %path.coerce1, i64* %2, align 8
  store %struct.mg_str* %type, %struct.mg_str** %type.addr, align 8, !tbaa !3
  store %struct.mg_str* %encoding, %struct.mg_str** %encoding.addr, align 8, !tbaa !3
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %3 = bitcast i8** %ext to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  %4 = bitcast i8** %overrides to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #5
  %5 = bitcast %struct.mg_str* %k to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %5) #5
  %6 = bitcast %struct.mg_str* %v to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %6) #5
  %7 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %custom_mime_types = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %7, i32 0, i32 14
  %8 = load i8*, i8** %custom_mime_types, align 8, !tbaa !249
  store i8* %8, i8** %overrides, align 8, !tbaa !3
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %9 = load i8*, i8** %overrides, align 8, !tbaa !3
  %call = call i8* @mg_next_comma_list_entry(i8* %9, %struct.mg_str* %k, %struct.mg_str* %v)
  store i8* %call, i8** %overrides, align 8, !tbaa !3
  %cmp = icmp ne i8* %call, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %10 = load i8*, i8** %p, align 8, !tbaa !16
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 1
  %11 = load i64, i64* %len, align 8, !tbaa !18
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %k, i32 0, i32 1
  %12 = load i64, i64* %len1, align 8, !tbaa !18
  %sub = sub i64 %11, %12
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %sub
  store i8* %add.ptr, i8** %ext, align 8, !tbaa !3
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 1
  %13 = load i64, i64* %len2, align 8, !tbaa !18
  %len3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %k, i32 0, i32 1
  %14 = load i64, i64* %len3, align 8, !tbaa !18
  %cmp4 = icmp ugt i64 %13, %14
  br i1 %cmp4, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.body
  %15 = load i8*, i8** %ext, align 8, !tbaa !3
  %call5 = call i32 @mg_vcasecmp(%struct.mg_str* %k, i8* %15)
  %cmp6 = icmp eq i32 %call5, 0
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %16 = load %struct.mg_str*, %struct.mg_str** %type.addr, align 8, !tbaa !3
  %17 = bitcast %struct.mg_str* %16 to i8*
  %18 = bitcast %struct.mg_str* %v to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 16, i1 false), !tbaa.struct !19
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %19 = load %struct.mg_str*, %struct.mg_str** %type.addr, align 8, !tbaa !3
  %20 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %20) #5
  %21 = bitcast %struct.mg_str* %path to { i8*, i64 }*
  %22 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %21, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %21, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %call7 = call { i8*, i64 } @mg_get_mime_types_entry(i8* %23, i64 %25)
  %26 = bitcast %struct.mg_str* %tmp to { i8*, i64 }*
  %27 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 0
  %28 = extractvalue { i8*, i64 } %call7, 0
  store i8* %28, i8** %27, align 8
  %29 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 1
  %30 = extractvalue { i8*, i64 } %call7, 1
  store i64 %30, i64* %29, align 8
  %31 = bitcast %struct.mg_str* %19 to i8*
  %32 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 16, i1 false), !tbaa.struct !19
  %33 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %33) #5
  %34 = load %struct.mg_str*, %struct.mg_str** %type.addr, align 8, !tbaa !3
  %call8 = call i32 @mg_vcmp(%struct.mg_str* %34, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.301, i32 0, i32 0))
  %cmp9 = icmp eq i32 %call8, 0
  br i1 %cmp9, label %if.then10, label %if.end34

if.then10:                                        ; preds = %while.end
  %35 = bitcast %struct.mg_str* %path2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %35) #5
  %p11 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %36 = load i8*, i8** %p11, align 8, !tbaa !16
  %len12 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 1
  %37 = load i64, i64* %len12, align 8, !tbaa !18
  %sub13 = sub i64 %37, 3
  %call14 = call { i8*, i64 } @mg_mk_str_n(i8* %36, i64 %sub13)
  %38 = bitcast %struct.mg_str* %path2 to { i8*, i64 }*
  %39 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %38, i32 0, i32 0
  %40 = extractvalue { i8*, i64 } %call14, 0
  store i8* %40, i8** %39, align 8
  %41 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %38, i32 0, i32 1
  %42 = extractvalue { i8*, i64 } %call14, 1
  store i64 %42, i64* %41, align 8
  %43 = bitcast %struct.mg_str* %type2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %43) #5
  %44 = bitcast %struct.mg_str* %path2 to { i8*, i64 }*
  %45 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %44, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %44, i32 0, i32 1
  %48 = load i64, i64* %47, align 8
  %call15 = call { i8*, i64 } @mg_get_mime_types_entry(i8* %46, i64 %48)
  %49 = bitcast %struct.mg_str* %type2 to { i8*, i64 }*
  %50 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %49, i32 0, i32 0
  %51 = extractvalue { i8*, i64 } %call15, 0
  store i8* %51, i8** %50, align 8
  %52 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %49, i32 0, i32 1
  %53 = extractvalue { i8*, i64 } %call15, 1
  store i64 %53, i64* %52, align 8
  br label %do.body

do.body:                                          ; preds = %if.then10
  %call16 = call i32 @cs_log_print_prefix(i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 6020)
  %tobool = icmp ne i32 %call16, 0
  br i1 %tobool, label %if.then17, label %if.end26

if.then17:                                        ; preds = %do.body
  %len18 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 1
  %54 = load i64, i64* %len18, align 8, !tbaa !18
  %conv = trunc i64 %54 to i32
  %p19 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %55 = load i8*, i8** %p19, align 8, !tbaa !16
  %len20 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path2, i32 0, i32 1
  %56 = load i64, i64* %len20, align 8, !tbaa !18
  %conv21 = trunc i64 %56 to i32
  %p22 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path2, i32 0, i32 0
  %57 = load i8*, i8** %p22, align 8, !tbaa !16
  %len23 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %type2, i32 0, i32 1
  %58 = load i64, i64* %len23, align 8, !tbaa !18
  %conv24 = trunc i64 %58 to i32
  %p25 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %type2, i32 0, i32 0
  %59 = load i8*, i8** %p25, align 8, !tbaa !16
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.302, i32 0, i32 0), i32 %conv, i8* %55, i32 %conv21, i8* %57, i32 %conv24, i8* %59)
  br label %if.end26

if.end26:                                         ; preds = %if.then17, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end26
  br label %do.end

do.end:                                           ; preds = %do.cond
  %len27 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %type2, i32 0, i32 1
  %60 = load i64, i64* %len27, align 8, !tbaa !18
  %cmp28 = icmp ugt i64 %60, 0
  br i1 %cmp28, label %if.then30, label %if.end33

if.then30:                                        ; preds = %do.end
  %61 = load %struct.mg_str*, %struct.mg_str** %type.addr, align 8, !tbaa !3
  %62 = bitcast %struct.mg_str* %61 to i8*
  %63 = bitcast %struct.mg_str* %type2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %62, i8* align 8 %63, i64 16, i1 false), !tbaa.struct !19
  %64 = load %struct.mg_str*, %struct.mg_str** %encoding.addr, align 8, !tbaa !3
  %65 = bitcast %struct.mg_str* %tmp31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %65) #5
  %call32 = call { i8*, i64 } @mg_mk_str(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.303, i32 0, i32 0))
  %66 = bitcast %struct.mg_str* %tmp31 to { i8*, i64 }*
  %67 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %66, i32 0, i32 0
  %68 = extractvalue { i8*, i64 } %call32, 0
  store i8* %68, i8** %67, align 8
  %69 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %66, i32 0, i32 1
  %70 = extractvalue { i8*, i64 } %call32, 1
  store i64 %70, i64* %69, align 8
  %71 = bitcast %struct.mg_str* %64 to i8*
  %72 = bitcast %struct.mg_str* %tmp31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %71, i8* align 8 %72, i64 16, i1 false), !tbaa.struct !19
  %73 = bitcast %struct.mg_str* %tmp31 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %73) #5
  br label %if.end33

if.end33:                                         ; preds = %if.then30, %do.end
  %74 = bitcast %struct.mg_str* %type2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %74) #5
  %75 = bitcast %struct.mg_str* %path2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %75) #5
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %while.end
  %76 = load %struct.mg_str*, %struct.mg_str** %type.addr, align 8, !tbaa !3
  %len35 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %76, i32 0, i32 1
  %77 = load i64, i64* %len35, align 8, !tbaa !18
  %cmp36 = icmp ugt i64 %77, 0
  %conv37 = zext i1 %cmp36 to i32
  store i32 %conv37, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end34, %if.then
  %78 = bitcast %struct.mg_str* %v to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %78) #5
  %79 = bitcast %struct.mg_str* %k to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %79) #5
  %80 = bitcast i8** %overrides to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %80) #5
  %81 = bitcast i8** %ext to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %81) #5
  %82 = load i32, i32* %retval, align 4
  ret i32 %82
}

declare i32 @fileno(%struct.__sFILE*) #4

; Function Attrs: nounwind ssp uwtable
define internal void @mg_send_ssi_file(%struct.mg_connection* %nc, %struct.http_message* %hm, i8* %path, %struct.__sFILE* %fp, i32 %include_level, %struct.mg_serve_http_opts* %opts) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %path.addr = alloca i8*, align 8
  %fp.addr = alloca %struct.__sFILE*, align 8
  %include_level.addr = alloca i32, align 4
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %buf = alloca [1024 x i8], align 16
  %p = alloca i8*, align 8
  %ch = alloca i32, align 4
  %len = alloca i32, align 4
  %in_ssi_tag = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %i = alloca i64, align 8
  %cctx = alloca %struct.mg_ssi_call_ctx, align 8
  %tmp = alloca %struct.mg_str, align 8
  %tmp39 = alloca %struct.mg_str, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  store i8* %path, i8** %path.addr, align 8, !tbaa !3
  store %struct.__sFILE* %fp, %struct.__sFILE** %fp.addr, align 8, !tbaa !3
  store i32 %include_level, i32* %include_level.addr, align 4, !tbaa !15
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %0 = bitcast [1024 x i8]* %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* %0) #5
  %1 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i32 0, i32 0
  %2 = load i64, i64* getelementptr inbounds (%struct.mg_str, %struct.mg_str* @mg_send_ssi_file.btag, i32 0, i32 1), align 8, !tbaa !18
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 %2
  store i8* %add.ptr, i8** %p, align 8, !tbaa !3
  %3 = bitcast i32* %ch to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #5
  %4 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #5
  %5 = bitcast i32* %in_ssi_tag to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #5
  %6 = load i32, i32* %include_level.addr, align 4, !tbaa !15
  %cmp = icmp sgt i32 %6, 10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %8 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %call = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %7, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.293, i32 0, i32 0), i8* %8)
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  store i32 0, i32* %len, align 4, !tbaa !15
  store i32 0, i32* %in_ssi_tag, align 4, !tbaa !15
  br label %while.cond

while.cond:                                       ; preds = %if.end102, %if.end
  %9 = load %struct.__sFILE*, %struct.__sFILE** %fp.addr, align 8, !tbaa !3
  %call1 = call i32 @fgetc(%struct.__sFILE* %9)
  store i32 %call1, i32* %ch, align 4, !tbaa !15
  %cmp2 = icmp ne i32 %call1, -1
  br i1 %cmp2, label %while.body, label %while.end103

while.body:                                       ; preds = %while.cond
  %10 = load i32, i32* %in_ssi_tag, align 4, !tbaa !15
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %land.lhs.true, label %if.else49

land.lhs.true:                                    ; preds = %while.body
  %11 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp3 = icmp eq i32 %11, 62
  br i1 %cmp3, label %land.lhs.true4, label %if.else49

land.lhs.true4:                                   ; preds = %land.lhs.true
  %12 = load i32, i32* %len, align 4, !tbaa !15
  %sub = sub nsw i32 %12, 1
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %idxprom
  %13 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = sext i8 %13 to i32
  %cmp5 = icmp eq i32 %conv, 45
  br i1 %cmp5, label %land.lhs.true7, label %if.else49

land.lhs.true7:                                   ; preds = %land.lhs.true4
  %14 = load i32, i32* %len, align 4, !tbaa !15
  %sub8 = sub nsw i32 %14, 2
  %idxprom9 = sext i32 %sub8 to i64
  %arrayidx10 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %idxprom9
  %15 = load i8, i8* %arrayidx10, align 1, !tbaa !14
  %conv11 = sext i8 %15 to i32
  %cmp12 = icmp eq i32 %conv11, 45
  br i1 %cmp12, label %if.then14, label %if.else49

if.then14:                                        ; preds = %land.lhs.true7
  %16 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %16) #5
  %17 = load i32, i32* %len, align 4, !tbaa !15
  %sub15 = sub nsw i32 %17, 2
  %conv16 = sext i32 %sub15 to i64
  store i64 %conv16, i64* %i, align 8, !tbaa !12
  store i32 0, i32* %in_ssi_tag, align 4, !tbaa !15
  %18 = load i64, i64* %i, align 8, !tbaa !12
  %dec = add i64 %18, -1
  store i64 %dec, i64* %i, align 8, !tbaa !12
  %arrayidx17 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %18
  store i8 0, i8* %arrayidx17, align 1, !tbaa !14
  br label %while.cond18

while.cond18:                                     ; preds = %while.body25, %if.then14
  %19 = load i64, i64* %i, align 8, !tbaa !12
  %cmp19 = icmp ugt i64 %19, 0
  br i1 %cmp19, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond18
  %20 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx21 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %20
  %21 = load i8, i8* %arrayidx21, align 1, !tbaa !14
  %conv22 = sext i8 %21 to i32
  %cmp23 = icmp eq i32 %conv22, 32
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond18
  %22 = phi i1 [ false, %while.cond18 ], [ %cmp23, %land.rhs ]
  br i1 %22, label %while.body25, label %while.end

while.body25:                                     ; preds = %land.end
  %23 = load i64, i64* %i, align 8, !tbaa !12
  %dec26 = add i64 %23, -1
  store i64 %dec26, i64* %i, align 8, !tbaa !12
  %arrayidx27 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %23
  store i8 0, i8* %arrayidx27, align 1, !tbaa !14
  br label %while.cond18

while.end:                                        ; preds = %land.end
  %24 = load i8*, i8** %p, align 8, !tbaa !3
  %25 = load i8*, i8** getelementptr inbounds (%struct.mg_str, %struct.mg_str* @mg_send_ssi_file.d_include, i32 0, i32 0), align 8, !tbaa !16
  %26 = load i64, i64* getelementptr inbounds (%struct.mg_str, %struct.mg_str* @mg_send_ssi_file.d_include, i32 0, i32 1), align 8, !tbaa !18
  %call28 = call i32 @strncmp(i8* %24, i8* %25, i64 %26)
  %cmp29 = icmp eq i32 %call28, 0
  br i1 %cmp29, label %if.then31, label %if.else

if.then31:                                        ; preds = %while.end
  %27 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %28 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %29 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %30 = load i8*, i8** %p, align 8, !tbaa !3
  %31 = load i64, i64* getelementptr inbounds (%struct.mg_str, %struct.mg_str* @mg_send_ssi_file.d_include, i32 0, i32 1), align 8, !tbaa !18
  %add.ptr32 = getelementptr inbounds i8, i8* %30, i64 %31
  %add.ptr33 = getelementptr inbounds i8, i8* %add.ptr32, i64 1
  %32 = load i32, i32* %include_level.addr, align 4, !tbaa !15
  %33 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  call void @mg_do_ssi_include(%struct.mg_connection* %27, %struct.http_message* %28, i8* %29, i8* %add.ptr33, i32 %32, %struct.mg_serve_http_opts* %33)
  br label %if.end48

if.else:                                          ; preds = %while.end
  %34 = load i8*, i8** %p, align 8, !tbaa !3
  %35 = load i8*, i8** getelementptr inbounds (%struct.mg_str, %struct.mg_str* @mg_send_ssi_file.d_call, i32 0, i32 0), align 8, !tbaa !16
  %36 = load i64, i64* getelementptr inbounds (%struct.mg_str, %struct.mg_str* @mg_send_ssi_file.d_call, i32 0, i32 1), align 8, !tbaa !18
  %call34 = call i32 @strncmp(i8* %34, i8* %35, i64 %36)
  %cmp35 = icmp eq i32 %call34, 0
  br i1 %cmp35, label %if.then37, label %if.else46

if.then37:                                        ; preds = %if.else
  %37 = bitcast %struct.mg_ssi_call_ctx* %cctx to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* %37) #5
  %38 = bitcast %struct.mg_ssi_call_ctx* %cctx to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 40, i1 false)
  %39 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %req = getelementptr inbounds %struct.mg_ssi_call_ctx, %struct.mg_ssi_call_ctx* %cctx, i32 0, i32 0
  store %struct.http_message* %39, %struct.http_message** %req, align 8, !tbaa !250
  %file = getelementptr inbounds %struct.mg_ssi_call_ctx, %struct.mg_ssi_call_ctx* %cctx, i32 0, i32 1
  %40 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %40) #5
  %41 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %call38 = call { i8*, i64 } @mg_mk_str(i8* %41)
  %42 = bitcast %struct.mg_str* %tmp to { i8*, i64 }*
  %43 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %42, i32 0, i32 0
  %44 = extractvalue { i8*, i64 } %call38, 0
  store i8* %44, i8** %43, align 8
  %45 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %42, i32 0, i32 1
  %46 = extractvalue { i8*, i64 } %call38, 1
  store i64 %46, i64* %45, align 8
  %47 = bitcast %struct.mg_str* %file to i8*
  %48 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* align 8 %48, i64 16, i1 false), !tbaa.struct !19
  %49 = bitcast %struct.mg_str* %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %49) #5
  %arg = getelementptr inbounds %struct.mg_ssi_call_ctx, %struct.mg_ssi_call_ctx* %cctx, i32 0, i32 2
  %50 = bitcast %struct.mg_str* %tmp39 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %50) #5
  %51 = load i8*, i8** %p, align 8, !tbaa !3
  %52 = load i64, i64* getelementptr inbounds (%struct.mg_str, %struct.mg_str* @mg_send_ssi_file.d_call, i32 0, i32 1), align 8, !tbaa !18
  %add.ptr40 = getelementptr inbounds i8, i8* %51, i64 %52
  %add.ptr41 = getelementptr inbounds i8, i8* %add.ptr40, i64 1
  %call42 = call { i8*, i64 } @mg_mk_str(i8* %add.ptr41)
  %53 = bitcast %struct.mg_str* %tmp39 to { i8*, i64 }*
  %54 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %53, i32 0, i32 0
  %55 = extractvalue { i8*, i64 } %call42, 0
  store i8* %55, i8** %54, align 8
  %56 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %53, i32 0, i32 1
  %57 = extractvalue { i8*, i64 } %call42, 1
  store i64 %57, i64* %56, align 8
  %58 = bitcast %struct.mg_str* %arg to i8*
  %59 = bitcast %struct.mg_str* %tmp39 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %58, i8* align 8 %59, i64 16, i1 false), !tbaa.struct !19
  %60 = bitcast %struct.mg_str* %tmp39 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %60) #5
  %61 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %62 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %62, i32 0, i32 16
  %63 = load i8*, i8** %user_data, align 8, !tbaa !44
  %arg43 = getelementptr inbounds %struct.mg_ssi_call_ctx, %struct.mg_ssi_call_ctx* %cctx, i32 0, i32 2
  %p44 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %arg43, i32 0, i32 0
  %64 = load i8*, i8** %p44, align 8, !tbaa !252
  call void @mg_call(%struct.mg_connection* %61, void (%struct.mg_connection*, i32, i8*)* null, i8* %63, i32 105, i8* %64)
  %65 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %66 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %user_data45 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %66, i32 0, i32 16
  %67 = load i8*, i8** %user_data45, align 8, !tbaa !44
  %68 = bitcast %struct.mg_ssi_call_ctx* %cctx to i8*
  call void @mg_call(%struct.mg_connection* %65, void (%struct.mg_connection*, i32, i8*)* null, i8* %67, i32 106, i8* %68)
  %69 = bitcast %struct.mg_ssi_call_ctx* %cctx to i8*
  call void @llvm.lifetime.end.p0i8(i64 40, i8* %69) #5
  br label %if.end47

if.else46:                                        ; preds = %if.else
  br label %if.end47

if.end47:                                         ; preds = %if.else46, %if.then37
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then31
  store i32 0, i32* %len, align 4, !tbaa !15
  %70 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %70) #5
  br label %if.end102

if.else49:                                        ; preds = %land.lhs.true7, %land.lhs.true4, %land.lhs.true, %while.body
  %71 = load i32, i32* %ch, align 4, !tbaa !15
  %cmp50 = icmp eq i32 %71, 60
  br i1 %cmp50, label %if.then52, label %if.else63

if.then52:                                        ; preds = %if.else49
  store i32 1, i32* %in_ssi_tag, align 4, !tbaa !15
  %72 = load i32, i32* %len, align 4, !tbaa !15
  %cmp53 = icmp sgt i32 %72, 0
  br i1 %cmp53, label %if.then55, label %if.end59

if.then55:                                        ; preds = %if.then52
  %73 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %arraydecay56 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i32 0, i32 0
  %74 = load i32, i32* %len, align 4, !tbaa !15
  %conv57 = sext i32 %74 to i64
  %conv58 = trunc i64 %conv57 to i32
  call void @mg_send(%struct.mg_connection* %73, i8* %arraydecay56, i32 %conv58)
  br label %if.end59

if.end59:                                         ; preds = %if.then55, %if.then52
  store i32 0, i32* %len, align 4, !tbaa !15
  %75 = load i32, i32* %ch, align 4, !tbaa !15
  %and = and i32 %75, 255
  %conv60 = trunc i32 %and to i8
  %76 = load i32, i32* %len, align 4, !tbaa !15
  %inc = add nsw i32 %76, 1
  store i32 %inc, i32* %len, align 4, !tbaa !15
  %idxprom61 = sext i32 %76 to i64
  %arrayidx62 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %idxprom61
  store i8 %conv60, i8* %arrayidx62, align 1, !tbaa !14
  br label %if.end101

if.else63:                                        ; preds = %if.else49
  %77 = load i32, i32* %in_ssi_tag, align 4, !tbaa !15
  %tobool64 = icmp ne i32 %77, 0
  br i1 %tobool64, label %if.then65, label %if.else87

if.then65:                                        ; preds = %if.else63
  %78 = load i32, i32* %len, align 4, !tbaa !15
  %79 = load i64, i64* getelementptr inbounds (%struct.mg_str, %struct.mg_str* @mg_send_ssi_file.btag, i32 0, i32 1), align 8, !tbaa !18
  %conv66 = trunc i64 %79 to i32
  %cmp67 = icmp eq i32 %78, %conv66
  br i1 %cmp67, label %land.lhs.true69, label %if.else75

land.lhs.true69:                                  ; preds = %if.then65
  %arraydecay70 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i32 0, i32 0
  %80 = load i8*, i8** getelementptr inbounds (%struct.mg_str, %struct.mg_str* @mg_send_ssi_file.btag, i32 0, i32 0), align 8, !tbaa !16
  %81 = load i64, i64* getelementptr inbounds (%struct.mg_str, %struct.mg_str* @mg_send_ssi_file.btag, i32 0, i32 1), align 8, !tbaa !18
  %call71 = call i32 @strncmp(i8* %arraydecay70, i8* %80, i64 %81)
  %cmp72 = icmp ne i32 %call71, 0
  br i1 %cmp72, label %if.then74, label %if.else75

if.then74:                                        ; preds = %land.lhs.true69
  store i32 0, i32* %in_ssi_tag, align 4, !tbaa !15
  br label %if.end81

if.else75:                                        ; preds = %land.lhs.true69, %if.then65
  %82 = load i32, i32* %len, align 4, !tbaa !15
  %cmp76 = icmp eq i32 %82, 1022
  br i1 %cmp76, label %if.then78, label %if.end80

if.then78:                                        ; preds = %if.else75
  %83 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %84 = load i8*, i8** %path.addr, align 8, !tbaa !3
  %call79 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %83, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.294, i32 0, i32 0), i8* %84)
  store i32 0, i32* %len, align 4, !tbaa !15
  br label %if.end80

if.end80:                                         ; preds = %if.then78, %if.else75
  br label %if.end81

if.end81:                                         ; preds = %if.end80, %if.then74
  %85 = load i32, i32* %ch, align 4, !tbaa !15
  %and82 = and i32 %85, 255
  %conv83 = trunc i32 %and82 to i8
  %86 = load i32, i32* %len, align 4, !tbaa !15
  %inc84 = add nsw i32 %86, 1
  store i32 %inc84, i32* %len, align 4, !tbaa !15
  %idxprom85 = sext i32 %86 to i64
  %arrayidx86 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %idxprom85
  store i8 %conv83, i8* %arrayidx86, align 1, !tbaa !14
  br label %if.end100

if.else87:                                        ; preds = %if.else63
  %87 = load i32, i32* %ch, align 4, !tbaa !15
  %and88 = and i32 %87, 255
  %conv89 = trunc i32 %and88 to i8
  %88 = load i32, i32* %len, align 4, !tbaa !15
  %inc90 = add nsw i32 %88, 1
  store i32 %inc90, i32* %len, align 4, !tbaa !15
  %idxprom91 = sext i32 %88 to i64
  %arrayidx92 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %idxprom91
  store i8 %conv89, i8* %arrayidx92, align 1, !tbaa !14
  %89 = load i32, i32* %len, align 4, !tbaa !15
  %cmp93 = icmp eq i32 %89, 1024
  br i1 %cmp93, label %if.then95, label %if.end99

if.then95:                                        ; preds = %if.else87
  %90 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %arraydecay96 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i32 0, i32 0
  %91 = load i32, i32* %len, align 4, !tbaa !15
  %conv97 = sext i32 %91 to i64
  %conv98 = trunc i64 %conv97 to i32
  call void @mg_send(%struct.mg_connection* %90, i8* %arraydecay96, i32 %conv98)
  store i32 0, i32* %len, align 4, !tbaa !15
  br label %if.end99

if.end99:                                         ; preds = %if.then95, %if.else87
  br label %if.end100

if.end100:                                        ; preds = %if.end99, %if.end81
  br label %if.end101

if.end101:                                        ; preds = %if.end100, %if.end59
  br label %if.end102

if.end102:                                        ; preds = %if.end101, %if.end48
  br label %while.cond

while.end103:                                     ; preds = %while.cond
  %92 = load i32, i32* %len, align 4, !tbaa !15
  %cmp104 = icmp sgt i32 %92, 0
  br i1 %cmp104, label %if.then106, label %if.end110

if.then106:                                       ; preds = %while.end103
  %93 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %arraydecay107 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i32 0, i32 0
  %94 = load i32, i32* %len, align 4, !tbaa !15
  %conv108 = sext i32 %94 to i64
  %conv109 = trunc i64 %conv108 to i32
  call void @mg_send(%struct.mg_connection* %93, i8* %arraydecay107, i32 %conv109)
  br label %if.end110

if.end110:                                        ; preds = %if.then106, %while.end103
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end110, %if.then
  %95 = bitcast i32* %in_ssi_tag to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %95) #5
  %96 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %96) #5
  %97 = bitcast i32* %ch to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %97) #5
  %98 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %98) #5
  %99 = bitcast [1024 x i8]* %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* %99) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup, %cleanup
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

declare i32 @fgetc(%struct.__sFILE*) #4

; Function Attrs: nounwind ssp uwtable
define internal void @mg_do_ssi_include(%struct.mg_connection* %nc, %struct.http_message* %hm, i8* %ssi, i8* %tag, i32 %include_level, %struct.mg_serve_http_opts* %opts) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %ssi.addr = alloca i8*, align 8
  %tag.addr = alloca i8*, align 8
  %include_level.addr = alloca i32, align 4
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %file_name = alloca [1024 x i8], align 16
  %path = alloca [1024 x i8], align 16
  %p = alloca i8*, align 8
  %fp = alloca %struct.__sFILE*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8, !tbaa !3
  store i8* %ssi, i8** %ssi.addr, align 8, !tbaa !3
  store i8* %tag, i8** %tag.addr, align 8, !tbaa !3
  store i32 %include_level, i32* %include_level.addr, align 4, !tbaa !15
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %0 = bitcast [1024 x i8]* %file_name to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* %0) #5
  %1 = bitcast [1024 x i8]* %path to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* %1) #5
  %2 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  %3 = bitcast %struct.__sFILE** %fp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  %4 = load i8*, i8** %tag.addr, align 8, !tbaa !3
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %file_name, i32 0, i32 0
  %call = call i32 (i8*, i8*, ...) @sscanf(i8* %4, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.295, i32 0, i32 0), i8* %arraydecay)
  %cmp = icmp eq i32 %call, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arraydecay1 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %5 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %document_root = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %5, i32 0, i32 0
  %6 = load i8*, i8** %document_root, align 8, !tbaa !177
  %arraydecay2 = getelementptr inbounds [1024 x i8], [1024 x i8]* %file_name, i32 0, i32 0
  %call3 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay1, i64 1024, i32 0, i64 1024, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.261, i32 0, i32 0), i8* %6, i8* %arraydecay2)
  %cmp4 = icmp slt i32 %call3, 0
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %if.then
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %if.then
  br label %if.end42

if.else:                                          ; preds = %entry
  %7 = load i8*, i8** %tag.addr, align 8, !tbaa !3
  %arraydecay6 = getelementptr inbounds [1024 x i8], [1024 x i8]* %file_name, i32 0, i32 0
  %call7 = call i32 (i8*, i8*, ...) @sscanf(i8* %7, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.296, i32 0, i32 0), i8* %arraydecay6)
  %cmp8 = icmp eq i32 %call7, 1
  br i1 %cmp8, label %if.then9, label %if.else16

if.then9:                                         ; preds = %if.else
  %arraydecay10 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %arraydecay11 = getelementptr inbounds [1024 x i8], [1024 x i8]* %file_name, i32 0, i32 0
  %call12 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay10, i64 1024, i32 0, i64 1024, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* %arraydecay11)
  %cmp13 = icmp slt i32 %call12, 0
  br i1 %cmp13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.then9
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end15:                                         ; preds = %if.then9
  br label %if.end41

if.else16:                                        ; preds = %if.else
  %8 = load i8*, i8** %tag.addr, align 8, !tbaa !3
  %arraydecay17 = getelementptr inbounds [1024 x i8], [1024 x i8]* %file_name, i32 0, i32 0
  %call18 = call i32 (i8*, i8*, ...) @sscanf(i8* %8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.297, i32 0, i32 0), i8* %arraydecay17)
  %cmp19 = icmp eq i32 %call18, 1
  br i1 %cmp19, label %if.then23, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else16
  %9 = load i8*, i8** %tag.addr, align 8, !tbaa !3
  %arraydecay20 = getelementptr inbounds [1024 x i8], [1024 x i8]* %file_name, i32 0, i32 0
  %call21 = call i32 (i8*, i8*, ...) @sscanf(i8* %9, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.298, i32 0, i32 0), i8* %arraydecay20)
  %cmp22 = icmp eq i32 %call21, 1
  br i1 %cmp22, label %if.then23, label %if.else38

if.then23:                                        ; preds = %lor.lhs.false, %if.else16
  %arraydecay24 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %10 = load i8*, i8** %ssi.addr, align 8, !tbaa !3
  %call25 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay24, i64 1024, i32 0, i64 1024, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* %10)
  %arraydecay26 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %call27 = call i8* @strrchr(i8* %arraydecay26, i32 47)
  store i8* %call27, i8** %p, align 8, !tbaa !3
  %cmp28 = icmp ne i8* %call27, null
  br i1 %cmp28, label %if.then29, label %if.end30

if.then29:                                        ; preds = %if.then23
  %11 = load i8*, i8** %p, align 8, !tbaa !3
  %arrayidx = getelementptr inbounds i8, i8* %11, i64 1
  store i8 0, i8* %arrayidx, align 1, !tbaa !14
  br label %if.end30

if.end30:                                         ; preds = %if.then29, %if.then23
  %arraydecay31 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %arraydecay32 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %call33 = call i64 @strlen(i8* %arraydecay32)
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay31, i64 %call33
  %arraydecay34 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %call35 = call i64 @strlen(i8* %arraydecay34)
  %sub = sub i64 1024, %call35
  %arraydecay36 = getelementptr inbounds [1024 x i8], [1024 x i8]* %file_name, i32 0, i32 0
  %call37 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %add.ptr, i64 %sub, i32 0, i64 -1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* %arraydecay36)
  br label %if.end40

if.else38:                                        ; preds = %lor.lhs.false
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %13 = load i8*, i8** %tag.addr, align 8, !tbaa !3
  %call39 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %12, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.299, i32 0, i32 0), i8* %13)
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end40:                                         ; preds = %if.end30
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.end15
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %if.end
  %arraydecay43 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %call44 = call %struct.__sFILE* @mg_fopen(i8* %arraydecay43, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.76, i32 0, i32 0))
  store %struct.__sFILE* %call44, %struct.__sFILE** %fp, align 8, !tbaa !3
  %cmp45 = icmp eq %struct.__sFILE* %call44, null
  br i1 %cmp45, label %if.then46, label %if.else51

if.then46:                                        ; preds = %if.end42
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %arraydecay47 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %call48 = call i32 @mg_get_errno()
  %call49 = call i8* @"\01_strerror"(i32 %call48)
  %call50 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %14, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.300, i32 0, i32 0), i8* %arraydecay47, i8* %call49)
  br label %if.end64

if.else51:                                        ; preds = %if.end42
  %15 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !tbaa !3
  %call52 = call i32 @fileno(%struct.__sFILE* %15)
  call void @mg_set_close_on_exec(i32 %call52)
  %16 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %ssi_pattern = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %16, i32 0, i32 6
  %17 = load i8*, i8** %ssi_pattern, align 8, !tbaa !181
  %18 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  %ssi_pattern53 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %18, i32 0, i32 6
  %19 = load i8*, i8** %ssi_pattern53, align 8, !tbaa !181
  %call54 = call i64 @strlen(i8* %19)
  %conv = trunc i64 %call54 to i32
  %arraydecay55 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %call56 = call i64 @mg_match_prefix(i8* %17, i32 %conv, i8* %arraydecay55)
  %cmp57 = icmp ugt i64 %call56, 0
  br i1 %cmp57, label %if.then59, label %if.else61

if.then59:                                        ; preds = %if.else51
  %20 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %21 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8, !tbaa !3
  %arraydecay60 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %22 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !tbaa !3
  %23 = load i32, i32* %include_level.addr, align 4, !tbaa !15
  %add = add nsw i32 %23, 1
  %24 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8, !tbaa !3
  call void @mg_send_ssi_file(%struct.mg_connection* %20, %struct.http_message* %21, i8* %arraydecay60, %struct.__sFILE* %22, i32 %add, %struct.mg_serve_http_opts* %24)
  br label %if.end62

if.else61:                                        ; preds = %if.else51
  %25 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %26 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !tbaa !3
  call void @mg_send_file_data(%struct.mg_connection* %25, %struct.__sFILE* %26)
  br label %if.end62

if.end62:                                         ; preds = %if.else61, %if.then59
  %27 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !tbaa !3
  %call63 = call i32 @fclose(%struct.__sFILE* %27)
  br label %if.end64

if.end64:                                         ; preds = %if.end62, %if.then46
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end64, %if.else38, %if.then14, %if.then5
  %28 = bitcast %struct.__sFILE** %fp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %28) #5
  %29 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %29) #5
  %30 = bitcast [1024 x i8]* %path to i8*
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* %30) #5
  %31 = bitcast [1024 x i8]* %file_name to i8*
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* %31) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup, %cleanup
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_send_file_data(%struct.mg_connection* %nc, %struct.__sFILE* %fp) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %fp.addr = alloca %struct.__sFILE*, align 8
  %buf = alloca [1024 x i8], align 16
  %n = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store %struct.__sFILE* %fp, %struct.__sFILE** %fp.addr, align 8, !tbaa !3
  %0 = bitcast [1024 x i8]* %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* %0) #5
  %1 = bitcast i64* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i32 0, i32 0
  %2 = load %struct.__sFILE*, %struct.__sFILE** %fp.addr, align 8, !tbaa !3
  %call = call i64 @mg_fread(i8* %arraydecay, i64 1, i64 1024, %struct.__sFILE* %2)
  store i64 %call, i64* %n, align 8, !tbaa !12
  %cmp = icmp ugt i64 %call, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %arraydecay1 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i32 0, i32 0
  %4 = load i64, i64* %n, align 8, !tbaa !12
  %conv = trunc i64 %4 to i32
  call void @mg_send(%struct.mg_connection* %3, i8* %arraydecay1, i32 %conv)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = bitcast i64* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %5) #5
  %6 = bitcast [1024 x i8]* %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* %6) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal { i8*, i64 } @mg_get_mime_types_entry(i8* %path.coerce0, i64 %path.coerce1) #0 {
entry:
  %retval = alloca %struct.mg_str, align 8
  %path = alloca %struct.mg_str, align 8
  %i = alloca i64, align 8
  %ext = alloca %struct.mg_str, align 8
  %pext = alloca %struct.mg_str, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %0 = bitcast %struct.mg_str* %path to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %path.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %path.coerce1, i64* %2, align 8
  %3 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  store i64 0, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx = getelementptr inbounds [49 x %struct.anon], [49 x %struct.anon]* @mg_static_builtin_mime_types, i64 0, i64 %4
  %extension = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx, i32 0, i32 0
  %5 = load i8*, i8** %extension, align 8, !tbaa !253
  %cmp = icmp ne i8* %5, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 1
  %6 = load i64, i64* %len, align 8, !tbaa !18
  %7 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx1 = getelementptr inbounds [49 x %struct.anon], [49 x %struct.anon]* @mg_static_builtin_mime_types, i64 0, i64 %7
  %ext_len = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx1, i32 0, i32 1
  %8 = load i64, i64* %ext_len, align 8, !tbaa !255
  %add = add i64 %8, 1
  %cmp2 = icmp ult i64 %6, %add
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %9 = bitcast %struct.mg_str* %ext to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %9) #5
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ext, i32 0, i32 0
  %10 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx3 = getelementptr inbounds [49 x %struct.anon], [49 x %struct.anon]* @mg_static_builtin_mime_types, i64 0, i64 %10
  %extension4 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx3, i32 0, i32 0
  %11 = load i8*, i8** %extension4, align 8, !tbaa !253
  store i8* %11, i8** %p, align 8, !tbaa !16
  %len5 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ext, i32 0, i32 1
  %12 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx6 = getelementptr inbounds [49 x %struct.anon], [49 x %struct.anon]* @mg_static_builtin_mime_types, i64 0, i64 %12
  %ext_len7 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx6, i32 0, i32 1
  %13 = load i64, i64* %ext_len7, align 8, !tbaa !255
  store i64 %13, i64* %len5, align 8, !tbaa !18
  %14 = bitcast %struct.mg_str* %pext to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %14) #5
  %p8 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pext, i32 0, i32 0
  %p9 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %15 = load i8*, i8** %p9, align 8, !tbaa !16
  %len10 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 1
  %16 = load i64, i64* %len10, align 8, !tbaa !18
  %len11 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ext, i32 0, i32 1
  %17 = load i64, i64* %len11, align 8, !tbaa !18
  %sub = sub i64 %16, %17
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 %sub
  store i8* %add.ptr, i8** %p8, align 8, !tbaa !16
  %len12 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pext, i32 0, i32 1
  %len13 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ext, i32 0, i32 1
  %18 = load i64, i64* %len13, align 8, !tbaa !18
  store i64 %18, i64* %len12, align 8, !tbaa !18
  %p14 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pext, i32 0, i32 0
  %19 = load i8*, i8** %p14, align 8, !tbaa !16
  %arrayidx15 = getelementptr inbounds i8, i8* %19, i64 -1
  %20 = load i8, i8* %arrayidx15, align 1, !tbaa !14
  %conv = sext i8 %20 to i32
  %cmp16 = icmp eq i32 %conv, 46
  br i1 %cmp16, label %land.lhs.true, label %if.end23

land.lhs.true:                                    ; preds = %if.end
  %21 = bitcast %struct.mg_str* %ext to { i8*, i64 }*
  %22 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %21, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %21, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %struct.mg_str* %pext to { i8*, i64 }*
  %27 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %call = call i32 @mg_strcasecmp(i8* %23, i64 %25, i8* %28, i64 %30)
  %cmp18 = icmp eq i32 %call, 0
  br i1 %cmp18, label %if.then20, label %if.end23

if.then20:                                        ; preds = %land.lhs.true
  %31 = load i64, i64* %i, align 8, !tbaa !12
  %arrayidx21 = getelementptr inbounds [49 x %struct.anon], [49 x %struct.anon]* @mg_static_builtin_mime_types, i64 0, i64 %31
  %mime_type = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx21, i32 0, i32 2
  %32 = load i8*, i8** %mime_type, align 8, !tbaa !256
  %call22 = call { i8*, i64 } @mg_mk_str(i8* %32)
  %33 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %34 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %33, i32 0, i32 0
  %35 = extractvalue { i8*, i64 } %call22, 0
  store i8* %35, i8** %34, align 8
  %36 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %33, i32 0, i32 1
  %37 = extractvalue { i8*, i64 } %call22, 1
  store i64 %37, i64* %36, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end23:                                         ; preds = %land.lhs.true, %if.end
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end23, %if.then20
  %38 = bitcast %struct.mg_str* %pext to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %38) #5
  %39 = bitcast %struct.mg_str* %ext to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %39) #5
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup26 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc

for.inc:                                          ; preds = %cleanup.cont, %if.then
  %40 = load i64, i64* %i, align 8, !tbaa !12
  %inc = add i64 %40, 1
  store i64 %inc, i64* %i, align 8, !tbaa !12
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call25 = call { i8*, i64 } @mg_mk_str(i8* null)
  %41 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %42 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %41, i32 0, i32 0
  %43 = extractvalue { i8*, i64 } %call25, 0
  store i8* %43, i8** %42, align 8
  %44 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %41, i32 0, i32 1
  %45 = extractvalue { i8*, i64 } %call25, 1
  store i64 %45, i64* %44, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup26

cleanup26:                                        ; preds = %for.end, %cleanup
  %46 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %46) #5
  %47 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %48 = load { i8*, i64 }, { i8*, i64 }* %47, align 8
  ret { i8*, i64 } %48
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_deliver_websocket_data(%struct.mg_connection* %nc) #0 {
entry:
  %retval = alloca i32, align 4
  %nc.addr = alloca %struct.mg_connection*, align 8
  %i = alloca i64, align 8
  %data_len = alloca i64, align 8
  %frame_len = alloca i64, align 8
  %new_data_len = alloca i64, align 8
  %len1 = alloca i64, align 8
  %mask_len = alloca i64, align 8
  %header_len = alloca i64, align 8
  %wsd = alloca %struct.mg_ws_proto_data*, align 8
  %new_data = alloca i8*, align 8
  %e = alloca i8*, align 8
  %flags = alloca i8, align 1
  %ok = alloca i32, align 4
  %reass = alloca i32, align 4
  %existing_len = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %cleanup_len = alloca i64, align 8
  %wsm = alloca %struct.websocket_message, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = bitcast i64* %data_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #5
  store i64 0, i64* %data_len, align 8, !tbaa !35
  %2 = bitcast i64* %frame_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  store i64 0, i64* %frame_len, align 8, !tbaa !35
  %3 = bitcast i64* %new_data_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf, i32 0, i32 1
  %5 = load i64, i64* %len, align 8, !tbaa !54
  store i64 %5, i64* %new_data_len, align 8, !tbaa !35
  %6 = bitcast i64* %len1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #5
  %7 = bitcast i64* %mask_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #5
  store i64 0, i64* %mask_len, align 8, !tbaa !35
  %8 = bitcast i64* %header_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #5
  store i64 0, i64* %header_len, align 8, !tbaa !35
  %9 = bitcast %struct.mg_ws_proto_data** %wsd to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #5
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %call = call %struct.mg_ws_proto_data* @mg_ws_get_proto_data(%struct.mg_connection* %10)
  store %struct.mg_ws_proto_data* %call, %struct.mg_ws_proto_data** %wsd, align 8, !tbaa !3
  %11 = bitcast i8** %new_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %11) #5
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %12, i32 0, i32 8
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf2, i32 0, i32 0
  %13 = load i8*, i8** %buf, align 8, !tbaa !89
  store i8* %13, i8** %new_data, align 8, !tbaa !3
  %14 = bitcast i8** %e to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %14) #5
  %15 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf3 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %15, i32 0, i32 8
  %buf4 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf3, i32 0, i32 0
  %16 = load i8*, i8** %buf4, align 8, !tbaa !89
  %17 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf5 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %17, i32 0, i32 8
  %len6 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf5, i32 0, i32 1
  %18 = load i64, i64* %len6, align 8, !tbaa !54
  %add.ptr = getelementptr inbounds i8, i8* %16, i64 %18
  store i8* %add.ptr, i8** %e, align 8, !tbaa !3
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %flags) #5
  %19 = bitcast i32* %ok to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %19) #5
  %20 = bitcast i32* %reass to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %20) #5
  %21 = load %struct.mg_ws_proto_data*, %struct.mg_ws_proto_data** %wsd, align 8, !tbaa !3
  %reass_len = getelementptr inbounds %struct.mg_ws_proto_data, %struct.mg_ws_proto_data* %21, i32 0, i32 0
  %22 = load i64, i64* %reass_len, align 8, !tbaa !257
  %cmp = icmp ugt i64 %22, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %23 = bitcast i64* %existing_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %23) #5
  %24 = load %struct.mg_ws_proto_data*, %struct.mg_ws_proto_data** %wsd, align 8, !tbaa !3
  %reass_len7 = getelementptr inbounds %struct.mg_ws_proto_data, %struct.mg_ws_proto_data* %24, i32 0, i32 0
  %25 = load i64, i64* %reass_len7, align 8, !tbaa !257
  store i64 %25, i64* %existing_len, align 8, !tbaa !12
  %26 = load i64, i64* %new_data_len, align 8, !tbaa !35
  %27 = load i64, i64* %existing_len, align 8, !tbaa !12
  %cmp8 = icmp uge i64 %26, %27
  %lnot = xor i1 %cmp8, true
  %lnot.ext = zext i1 %lnot to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  call void @__assert_rtn(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.mg_deliver_websocket_data, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 9900, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.389, i32 0, i32 0)) #17
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %28
  %29 = load i64, i64* %existing_len, align 8, !tbaa !12
  %30 = load i8*, i8** %new_data, align 8, !tbaa !3
  %add.ptr9 = getelementptr inbounds i8, i8* %30, i64 %29
  store i8* %add.ptr9, i8** %new_data, align 8, !tbaa !3
  %31 = load i64, i64* %existing_len, align 8, !tbaa !12
  %32 = load i64, i64* %new_data_len, align 8, !tbaa !35
  %sub = sub i64 %32, %31
  store i64 %sub, i64* %new_data_len, align 8, !tbaa !35
  %33 = bitcast i64* %existing_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %33) #5
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %34 = load i8*, i8** %new_data, align 8, !tbaa !3
  %arrayidx = getelementptr inbounds i8, i8* %34, i64 0
  %35 = load i8, i8* %arrayidx, align 1, !tbaa !14
  store i8 %35, i8* %flags, align 1, !tbaa !14
  %36 = load i64, i64* %new_data_len, align 8, !tbaa !35
  %cmp10 = icmp ugt i64 %36, 0
  br i1 %cmp10, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %if.end
  %37 = load i8, i8* %flags, align 1, !tbaa !14
  %call12 = call i32 @mg_is_ws_fragment(i8 zeroext %37)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %38 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags14 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %38, i32 0, i32 21
  %39 = load i64, i64* %flags14, align 8, !tbaa !41
  %and = and i64 %39, 4096
  %tobool15 = icmp ne i64 %and, 0
  %lnot16 = xor i1 %tobool15, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %if.end
  %40 = phi i1 [ false, %land.lhs.true ], [ false, %if.end ], [ %lnot16, %land.rhs ]
  %land.ext = zext i1 %40 to i32
  store i32 %land.ext, i32* %reass, align 4, !tbaa !15
  %41 = load i32, i32* %reass, align 4, !tbaa !15
  %tobool18 = icmp ne i32 %41, 0
  br i1 %tobool18, label %land.lhs.true19, label %if.else

land.lhs.true19:                                  ; preds = %land.end
  %42 = load i8, i8* %flags, align 1, !tbaa !14
  %call20 = call i32 @mg_is_ws_control_frame(i8 zeroext %42)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then22, label %if.else

if.then22:                                        ; preds = %land.lhs.true19
  %43 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_ws_close(%struct.mg_connection* %43, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.390, i32 0, i32 0), i64 -1)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %land.lhs.true19, %land.end
  %44 = load i64, i64* %new_data_len, align 8, !tbaa !35
  %cmp23 = icmp ugt i64 %44, 0
  br i1 %cmp23, label %land.lhs.true25, label %if.end35

land.lhs.true25:                                  ; preds = %if.else
  %45 = load i32, i32* %reass, align 4, !tbaa !15
  %tobool26 = icmp ne i32 %45, 0
  br i1 %tobool26, label %if.end35, label %land.lhs.true27

land.lhs.true27:                                  ; preds = %land.lhs.true25
  %46 = load i8, i8* %flags, align 1, !tbaa !14
  %call28 = call i32 @mg_is_ws_control_frame(i8 zeroext %46)
  %tobool29 = icmp ne i32 %call28, 0
  br i1 %tobool29, label %if.end35, label %land.lhs.true30

land.lhs.true30:                                  ; preds = %land.lhs.true27
  %47 = load %struct.mg_ws_proto_data*, %struct.mg_ws_proto_data** %wsd, align 8, !tbaa !3
  %reass_len31 = getelementptr inbounds %struct.mg_ws_proto_data, %struct.mg_ws_proto_data* %47, i32 0, i32 0
  %48 = load i64, i64* %reass_len31, align 8, !tbaa !257
  %cmp32 = icmp ugt i64 %48, 0
  br i1 %cmp32, label %if.then34, label %if.end35

if.then34:                                        ; preds = %land.lhs.true30
  %49 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_ws_close(%struct.mg_connection* %49, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.391, i32 0, i32 0), i64 -1)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end35:                                         ; preds = %land.lhs.true30, %land.lhs.true27, %land.lhs.true25, %if.else
  br label %if.end36

if.end36:                                         ; preds = %if.end35
  %50 = load i64, i64* %new_data_len, align 8, !tbaa !35
  %cmp37 = icmp uge i64 %50, 2
  br i1 %cmp37, label %if.then39, label %if.end85

if.then39:                                        ; preds = %if.end36
  %51 = load i8*, i8** %new_data, align 8, !tbaa !3
  %arrayidx40 = getelementptr inbounds i8, i8* %51, i64 1
  %52 = load i8, i8* %arrayidx40, align 1, !tbaa !14
  %conv41 = zext i8 %52 to i32
  %and42 = and i32 %conv41, 127
  %conv43 = sext i32 %and42 to i64
  store i64 %conv43, i64* %len1, align 8, !tbaa !35
  %53 = load i8*, i8** %new_data, align 8, !tbaa !3
  %arrayidx44 = getelementptr inbounds i8, i8* %53, i64 1
  %54 = load i8, i8* %arrayidx44, align 1, !tbaa !14
  %conv45 = zext i8 %54 to i32
  %and46 = and i32 %conv45, 128
  %tobool47 = icmp ne i32 %and46, 0
  %55 = zext i1 %tobool47 to i64
  %cond = select i1 %tobool47, i32 4, i32 0
  %conv48 = sext i32 %cond to i64
  store i64 %conv48, i64* %mask_len, align 8, !tbaa !35
  %56 = load i64, i64* %len1, align 8, !tbaa !35
  %cmp49 = icmp ult i64 %56, 126
  br i1 %cmp49, label %land.lhs.true51, label %if.else55

land.lhs.true51:                                  ; preds = %if.then39
  %57 = load i64, i64* %new_data_len, align 8, !tbaa !35
  %58 = load i64, i64* %mask_len, align 8, !tbaa !35
  %cmp52 = icmp uge i64 %57, %58
  br i1 %cmp52, label %if.then54, label %if.else55

if.then54:                                        ; preds = %land.lhs.true51
  %59 = load i64, i64* %len1, align 8, !tbaa !35
  store i64 %59, i64* %data_len, align 8, !tbaa !35
  %60 = load i64, i64* %mask_len, align 8, !tbaa !35
  %add = add i64 2, %60
  store i64 %add, i64* %header_len, align 8, !tbaa !35
  br label %if.end84

if.else55:                                        ; preds = %land.lhs.true51, %if.then39
  %61 = load i64, i64* %len1, align 8, !tbaa !35
  %cmp56 = icmp eq i64 %61, 126
  br i1 %cmp56, label %land.lhs.true58, label %if.else69

land.lhs.true58:                                  ; preds = %if.else55
  %62 = load i64, i64* %new_data_len, align 8, !tbaa !35
  %63 = load i64, i64* %mask_len, align 8, !tbaa !35
  %add59 = add i64 4, %63
  %cmp60 = icmp uge i64 %62, %add59
  br i1 %cmp60, label %if.then62, label %if.else69

if.then62:                                        ; preds = %land.lhs.true58
  %64 = load i64, i64* %mask_len, align 8, !tbaa !35
  %add63 = add i64 4, %64
  store i64 %add63, i64* %header_len, align 8, !tbaa !35
  %65 = load i8*, i8** %new_data, align 8, !tbaa !3
  %arrayidx64 = getelementptr inbounds i8, i8* %65, i64 2
  %66 = bitcast i8* %arrayidx64 to i16*
  %67 = load i16, i16* %66, align 2, !tbaa !86
  %call65 = call zeroext i16 @_OSSwapInt16(i16 zeroext %67)
  %conv66 = zext i16 %call65 to i32
  %conv67 = trunc i32 %conv66 to i16
  %conv68 = zext i16 %conv67 to i64
  store i64 %conv68, i64* %data_len, align 8, !tbaa !35
  br label %if.end83

if.else69:                                        ; preds = %land.lhs.true58, %if.else55
  %68 = load i64, i64* %new_data_len, align 8, !tbaa !35
  %69 = load i64, i64* %mask_len, align 8, !tbaa !35
  %add70 = add i64 10, %69
  %cmp71 = icmp uge i64 %68, %add70
  br i1 %cmp71, label %if.then73, label %if.end82

if.then73:                                        ; preds = %if.else69
  %70 = load i64, i64* %mask_len, align 8, !tbaa !35
  %add74 = add i64 10, %70
  store i64 %add74, i64* %header_len, align 8, !tbaa !35
  %71 = load i8*, i8** %new_data, align 8, !tbaa !3
  %arrayidx75 = getelementptr inbounds i8, i8* %71, i64 2
  %72 = bitcast i8* %arrayidx75 to i32*
  %73 = load i32, i32* %72, align 4, !tbaa !15
  %call76 = call i32 @_OSSwapInt32(i32 %73)
  %conv77 = zext i32 %call76 to i64
  %shl = shl i64 %conv77, 32
  %74 = load i8*, i8** %new_data, align 8, !tbaa !3
  %arrayidx78 = getelementptr inbounds i8, i8* %74, i64 6
  %75 = bitcast i8* %arrayidx78 to i32*
  %76 = load i32, i32* %75, align 4, !tbaa !15
  %call79 = call i32 @_OSSwapInt32(i32 %76)
  %conv80 = zext i32 %call79 to i64
  %add81 = add i64 %shl, %conv80
  store i64 %add81, i64* %data_len, align 8, !tbaa !35
  br label %if.end82

if.end82:                                         ; preds = %if.then73, %if.else69
  br label %if.end83

if.end83:                                         ; preds = %if.end82, %if.then62
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %if.then54
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %if.end36
  %77 = load i64, i64* %header_len, align 8, !tbaa !35
  %78 = load i64, i64* %data_len, align 8, !tbaa !35
  %add86 = add i64 %77, %78
  store i64 %add86, i64* %frame_len, align 8, !tbaa !35
  %79 = load i64, i64* %frame_len, align 8, !tbaa !35
  %cmp87 = icmp ugt i64 %79, 0
  br i1 %cmp87, label %land.rhs89, label %land.end92

land.rhs89:                                       ; preds = %if.end85
  %80 = load i64, i64* %frame_len, align 8, !tbaa !35
  %81 = load i64, i64* %new_data_len, align 8, !tbaa !35
  %cmp90 = icmp ule i64 %80, %81
  br label %land.end92

land.end92:                                       ; preds = %land.rhs89, %if.end85
  %82 = phi i1 [ false, %if.end85 ], [ %cmp90, %land.rhs89 ]
  %land.ext93 = zext i1 %82 to i32
  store i32 %land.ext93, i32* %ok, align 4, !tbaa !15
  %83 = load i64, i64* %frame_len, align 8, !tbaa !35
  %84 = load i64, i64* %header_len, align 8, !tbaa !35
  %cmp94 = icmp ult i64 %83, %84
  br i1 %cmp94, label %if.then98, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.end92
  %85 = load i64, i64* %frame_len, align 8, !tbaa !35
  %86 = load i64, i64* %data_len, align 8, !tbaa !35
  %cmp96 = icmp ult i64 %85, %86
  br i1 %cmp96, label %if.then98, label %if.end99

if.then98:                                        ; preds = %lor.lhs.false, %land.end92
  store i32 0, i32* %ok, align 4, !tbaa !15
  %87 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_ws_close(%struct.mg_connection* %87, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.392, i32 0, i32 0), i64 -1)
  br label %if.end99

if.end99:                                         ; preds = %if.then98, %lor.lhs.false
  %88 = load i32, i32* %ok, align 4, !tbaa !15
  %tobool100 = icmp ne i32 %88, 0
  br i1 %tobool100, label %if.then101, label %if.end191

if.then101:                                       ; preds = %if.end99
  %89 = bitcast i64* %cleanup_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %89) #5
  store i64 0, i64* %cleanup_len, align 8, !tbaa !12
  %90 = bitcast %struct.websocket_message* %wsm to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %90) #5
  %91 = load i64, i64* %data_len, align 8, !tbaa !35
  %size = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 1
  store i64 %91, i64* %size, align 8, !tbaa !258
  %92 = load i8*, i8** %new_data, align 8, !tbaa !3
  %93 = load i64, i64* %header_len, align 8, !tbaa !35
  %add.ptr102 = getelementptr inbounds i8, i8* %92, i64 %93
  %data = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 0
  store i8* %add.ptr102, i8** %data, align 8, !tbaa !260
  %94 = load i8, i8* %flags, align 1, !tbaa !14
  %flags103 = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 2
  store i8 %94, i8* %flags103, align 8, !tbaa !261
  %95 = load i64, i64* %mask_len, align 8, !tbaa !35
  %cmp104 = icmp ugt i64 %95, 0
  br i1 %cmp104, label %if.then106, label %if.end117

if.then106:                                       ; preds = %if.then101
  store i64 0, i64* %i, align 8, !tbaa !35
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then106
  %96 = load i64, i64* %i, align 8, !tbaa !35
  %97 = load i64, i64* %data_len, align 8, !tbaa !35
  %cmp107 = icmp ult i64 %96, %97
  br i1 %cmp107, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %98 = load i8*, i8** %new_data, align 8, !tbaa !3
  %99 = load i64, i64* %header_len, align 8, !tbaa !35
  %add.ptr109 = getelementptr inbounds i8, i8* %98, i64 %99
  %100 = load i64, i64* %mask_len, align 8, !tbaa !35
  %idx.neg = sub i64 0, %100
  %add.ptr110 = getelementptr inbounds i8, i8* %add.ptr109, i64 %idx.neg
  %101 = load i64, i64* %i, align 8, !tbaa !35
  %rem = urem i64 %101, 4
  %arrayidx111 = getelementptr inbounds i8, i8* %add.ptr110, i64 %rem
  %102 = load i8, i8* %arrayidx111, align 1, !tbaa !14
  %conv112 = zext i8 %102 to i32
  %103 = load i8*, i8** %new_data, align 8, !tbaa !3
  %104 = load i64, i64* %i, align 8, !tbaa !35
  %105 = load i64, i64* %header_len, align 8, !tbaa !35
  %add113 = add i64 %104, %105
  %arrayidx114 = getelementptr inbounds i8, i8* %103, i64 %add113
  %106 = load i8, i8* %arrayidx114, align 1, !tbaa !14
  %conv115 = zext i8 %106 to i32
  %xor = xor i32 %conv115, %conv112
  %conv116 = trunc i32 %xor to i8
  store i8 %conv116, i8* %arrayidx114, align 1, !tbaa !14
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %107 = load i64, i64* %i, align 8, !tbaa !35
  %inc = add i64 %107, 1
  store i64 %inc, i64* %i, align 8, !tbaa !35
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end117

if.end117:                                        ; preds = %for.end, %if.then101
  %108 = load i32, i32* %reass, align 4, !tbaa !15
  %tobool118 = icmp ne i32 %108, 0
  br i1 %tobool118, label %if.then119, label %if.else160

if.then119:                                       ; preds = %if.end117
  %109 = load i8, i8* %flags, align 1, !tbaa !14
  %call120 = call i32 @mg_is_ws_first_fragment(i8 zeroext %109)
  %tobool121 = icmp ne i32 %call120, 0
  br i1 %tobool121, label %if.then122, label %if.end125

if.then122:                                       ; preds = %if.then119
  %110 = load i8*, i8** %new_data, align 8, !tbaa !3
  %add.ptr123 = getelementptr inbounds i8, i8* %110, i64 1
  store i8* %add.ptr123, i8** %new_data, align 8, !tbaa !3
  %111 = load %struct.mg_ws_proto_data*, %struct.mg_ws_proto_data** %wsd, align 8, !tbaa !3
  %reass_len124 = getelementptr inbounds %struct.mg_ws_proto_data, %struct.mg_ws_proto_data* %111, i32 0, i32 0
  store i64 1, i64* %reass_len124, align 8, !tbaa !257
  br label %if.end125

if.end125:                                        ; preds = %if.then122, %if.then119
  %112 = load i8*, i8** %new_data, align 8, !tbaa !3
  %data126 = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 0
  %113 = load i8*, i8** %data126, align 8, !tbaa !260
  %114 = load i8*, i8** %e, align 8, !tbaa !3
  %data127 = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 0
  %115 = load i8*, i8** %data127, align 8, !tbaa !260
  %sub.ptr.lhs.cast = ptrtoint i8* %114 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %115 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %116 = load i8*, i8** %new_data, align 8, !tbaa !3
  %117 = call i64 @llvm.objectsize.i64.p0i8(i8* %116, i1 false, i1 true)
  %call128 = call i8* @__memmove_chk(i8* %112, i8* %113, i64 %sub.ptr.sub, i64 %117) #5
  %size129 = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 1
  %118 = load i64, i64* %size129, align 8, !tbaa !258
  %119 = load %struct.mg_ws_proto_data*, %struct.mg_ws_proto_data** %wsd, align 8, !tbaa !3
  %reass_len130 = getelementptr inbounds %struct.mg_ws_proto_data, %struct.mg_ws_proto_data* %119, i32 0, i32 0
  %120 = load i64, i64* %reass_len130, align 8, !tbaa !257
  %add131 = add i64 %120, %118
  store i64 %add131, i64* %reass_len130, align 8, !tbaa !257
  %data132 = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 0
  %121 = load i8*, i8** %data132, align 8, !tbaa !260
  %122 = load i8*, i8** %new_data, align 8, !tbaa !3
  %sub.ptr.lhs.cast133 = ptrtoint i8* %121 to i64
  %sub.ptr.rhs.cast134 = ptrtoint i8* %122 to i64
  %sub.ptr.sub135 = sub i64 %sub.ptr.lhs.cast133, %sub.ptr.rhs.cast134
  %123 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf136 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %123, i32 0, i32 8
  %len137 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf136, i32 0, i32 1
  %124 = load i64, i64* %len137, align 8, !tbaa !54
  %sub138 = sub i64 %124, %sub.ptr.sub135
  store i64 %sub138, i64* %len137, align 8, !tbaa !54
  %125 = load i8, i8* %flags, align 1, !tbaa !14
  %conv139 = zext i8 %125 to i32
  %and140 = and i32 %conv139, 128
  %tobool141 = icmp ne i32 %and140, 0
  br i1 %tobool141, label %if.then142, label %if.end159

if.then142:                                       ; preds = %if.end125
  %126 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf143 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %126, i32 0, i32 8
  %buf144 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf143, i32 0, i32 0
  %127 = load i8*, i8** %buf144, align 8, !tbaa !89
  %arrayidx145 = getelementptr inbounds i8, i8* %127, i64 0
  %128 = load i8, i8* %arrayidx145, align 1, !tbaa !14
  %conv146 = sext i8 %128 to i32
  %or = or i32 128, %conv146
  %conv147 = trunc i32 %or to i8
  %flags148 = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 2
  store i8 %conv147, i8* %flags148, align 8, !tbaa !261
  %129 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf149 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %129, i32 0, i32 8
  %buf150 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf149, i32 0, i32 0
  %130 = load i8*, i8** %buf150, align 8, !tbaa !89
  %add.ptr151 = getelementptr inbounds i8, i8* %130, i64 1
  %data152 = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 0
  store i8* %add.ptr151, i8** %data152, align 8, !tbaa !260
  %131 = load %struct.mg_ws_proto_data*, %struct.mg_ws_proto_data** %wsd, align 8, !tbaa !3
  %reass_len153 = getelementptr inbounds %struct.mg_ws_proto_data, %struct.mg_ws_proto_data* %131, i32 0, i32 0
  %132 = load i64, i64* %reass_len153, align 8, !tbaa !257
  %sub154 = sub i64 %132, 1
  %size155 = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 1
  store i64 %sub154, i64* %size155, align 8, !tbaa !258
  %133 = load %struct.mg_ws_proto_data*, %struct.mg_ws_proto_data** %wsd, align 8, !tbaa !3
  %reass_len156 = getelementptr inbounds %struct.mg_ws_proto_data, %struct.mg_ws_proto_data* %133, i32 0, i32 0
  %134 = load i64, i64* %reass_len156, align 8, !tbaa !257
  store i64 %134, i64* %cleanup_len, align 8, !tbaa !12
  %135 = load %struct.mg_ws_proto_data*, %struct.mg_ws_proto_data** %wsd, align 8, !tbaa !3
  %reass_len157 = getelementptr inbounds %struct.mg_ws_proto_data, %struct.mg_ws_proto_data* %135, i32 0, i32 0
  store i64 0, i64* %reass_len157, align 8, !tbaa !257
  %136 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_handle_incoming_websocket_frame(%struct.mg_connection* %136, %struct.websocket_message* %wsm)
  %137 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf158 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %137, i32 0, i32 8
  %138 = load i64, i64* %cleanup_len, align 8, !tbaa !12
  call void @mbuf_remove(%struct.mbuf* %recv_mbuf158, i64 %138)
  br label %if.end159

if.end159:                                        ; preds = %if.then142, %if.end125
  br label %if.end190

if.else160:                                       ; preds = %if.end117
  %139 = load i64, i64* %frame_len, align 8, !tbaa !35
  store i64 %139, i64* %cleanup_len, align 8, !tbaa !12
  %140 = load i8, i8* %flags, align 1, !tbaa !14
  %conv161 = zext i8 %140 to i32
  %and162 = and i32 %conv161, 15
  switch i32 %and162, label %sw.epilog [
    i32 9, label %sw.bb
    i32 8, label %sw.bb165
  ]

sw.bb:                                            ; preds = %if.else160
  %141 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %data163 = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 0
  %142 = load i8*, i8** %data163, align 8, !tbaa !260
  %size164 = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 1
  %143 = load i64, i64* %size164, align 8, !tbaa !258
  call void @mg_send_websocket_frame(%struct.mg_connection* %141, i32 10, i8* %142, i64 %143)
  br label %sw.epilog

sw.bb165:                                         ; preds = %if.else160
  %144 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %data166 = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 0
  %145 = load i8*, i8** %data166, align 8, !tbaa !260
  %size167 = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 1
  %146 = load i64, i64* %size167, align 8, !tbaa !258
  call void @mg_ws_close(%struct.mg_connection* %144, i8* %145, i64 %146)
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.else160, %sw.bb165, %sw.bb
  %147 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  call void @mg_handle_incoming_websocket_frame(%struct.mg_connection* %147, %struct.websocket_message* %wsm)
  %148 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf168 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %148, i32 0, i32 8
  %buf169 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf168, i32 0, i32 0
  %149 = load i8*, i8** %buf169, align 8, !tbaa !89
  %150 = load %struct.mg_ws_proto_data*, %struct.mg_ws_proto_data** %wsd, align 8, !tbaa !3
  %reass_len170 = getelementptr inbounds %struct.mg_ws_proto_data, %struct.mg_ws_proto_data* %150, i32 0, i32 0
  %151 = load i64, i64* %reass_len170, align 8, !tbaa !257
  %add.ptr171 = getelementptr inbounds i8, i8* %149, i64 %151
  %152 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf172 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %152, i32 0, i32 8
  %buf173 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf172, i32 0, i32 0
  %153 = load i8*, i8** %buf173, align 8, !tbaa !89
  %154 = load %struct.mg_ws_proto_data*, %struct.mg_ws_proto_data** %wsd, align 8, !tbaa !3
  %reass_len174 = getelementptr inbounds %struct.mg_ws_proto_data, %struct.mg_ws_proto_data* %154, i32 0, i32 0
  %155 = load i64, i64* %reass_len174, align 8, !tbaa !257
  %add.ptr175 = getelementptr inbounds i8, i8* %153, i64 %155
  %156 = load i64, i64* %cleanup_len, align 8, !tbaa !12
  %add.ptr176 = getelementptr inbounds i8, i8* %add.ptr175, i64 %156
  %157 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf177 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %157, i32 0, i32 8
  %len178 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf177, i32 0, i32 1
  %158 = load i64, i64* %len178, align 8, !tbaa !54
  %159 = load %struct.mg_ws_proto_data*, %struct.mg_ws_proto_data** %wsd, align 8, !tbaa !3
  %reass_len179 = getelementptr inbounds %struct.mg_ws_proto_data, %struct.mg_ws_proto_data* %159, i32 0, i32 0
  %160 = load i64, i64* %reass_len179, align 8, !tbaa !257
  %sub180 = sub i64 %158, %160
  %161 = load i64, i64* %cleanup_len, align 8, !tbaa !12
  %sub181 = sub i64 %sub180, %161
  %162 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf182 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %162, i32 0, i32 8
  %buf183 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf182, i32 0, i32 0
  %163 = load i8*, i8** %buf183, align 8, !tbaa !89
  %164 = load %struct.mg_ws_proto_data*, %struct.mg_ws_proto_data** %wsd, align 8, !tbaa !3
  %reass_len184 = getelementptr inbounds %struct.mg_ws_proto_data, %struct.mg_ws_proto_data* %164, i32 0, i32 0
  %165 = load i64, i64* %reass_len184, align 8, !tbaa !257
  %add.ptr185 = getelementptr inbounds i8, i8* %163, i64 %165
  %166 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr185, i1 false, i1 true)
  %call186 = call i8* @__memmove_chk(i8* %add.ptr171, i8* %add.ptr176, i64 %sub181, i64 %166) #5
  %167 = load i64, i64* %cleanup_len, align 8, !tbaa !12
  %168 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %recv_mbuf187 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %168, i32 0, i32 8
  %len188 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf187, i32 0, i32 1
  %169 = load i64, i64* %len188, align 8, !tbaa !54
  %sub189 = sub i64 %169, %167
  store i64 %sub189, i64* %len188, align 8, !tbaa !54
  br label %if.end190

if.end190:                                        ; preds = %sw.epilog, %if.end159
  %170 = bitcast %struct.websocket_message* %wsm to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %170) #5
  %171 = bitcast i64* %cleanup_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %171) #5
  br label %if.end191

if.end191:                                        ; preds = %if.end190, %if.end99
  %172 = load i32, i32* %ok, align 4, !tbaa !15
  store i32 %172, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end191, %if.then34, %if.then22
  %173 = bitcast i32* %reass to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %173) #5
  %174 = bitcast i32* %ok to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %174) #5
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %flags) #5
  %175 = bitcast i8** %e to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %175) #5
  %176 = bitcast i8** %new_data to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %176) #5
  %177 = bitcast %struct.mg_ws_proto_data** %wsd to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %177) #5
  %178 = bitcast i64* %header_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %178) #5
  %179 = bitcast i64* %mask_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %179) #5
  %180 = bitcast i64* %len1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %180) #5
  %181 = bitcast i64* %new_data_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %181) #5
  %182 = bitcast i64* %frame_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %182) #5
  %183 = bitcast i64* %data_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %183) #5
  %184 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %184) #5
  %185 = load i32, i32* %retval, align 4
  ret i32 %185
}

; Function Attrs: nounwind ssp uwtable
define internal %struct.mg_ws_proto_data* @mg_ws_get_proto_data(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %htd = alloca %struct.mg_http_proto_data*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %0 = bitcast %struct.mg_http_proto_data** %htd to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %call = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %1)
  store %struct.mg_http_proto_data* %call, %struct.mg_http_proto_data** %htd, align 8, !tbaa !3
  %2 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %htd, align 8, !tbaa !3
  %cmp = icmp ne %struct.mg_http_proto_data* %2, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %htd, align 8, !tbaa !3
  %ws_data = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %3, i32 0, i32 2
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.mg_ws_proto_data* [ %ws_data, %cond.true ], [ null, %cond.false ]
  %4 = bitcast %struct.mg_http_proto_data** %htd to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %4) #5
  ret %struct.mg_ws_proto_data* %cond
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_is_ws_fragment(i8 zeroext %flags) #0 {
entry:
  %flags.addr = alloca i8, align 1
  store i8 %flags, i8* %flags.addr, align 1, !tbaa !14
  %0 = load i8, i8* %flags.addr, align 1, !tbaa !14
  %conv = zext i8 %0 to i32
  %and = and i32 %conv, 128
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i8, i8* %flags.addr, align 1, !tbaa !14
  %conv2 = zext i8 %1 to i32
  %and3 = and i32 %conv2, 15
  %cmp4 = icmp eq i32 %and3, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp4, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_is_ws_control_frame(i8 zeroext %flags) #0 {
entry:
  %flags.addr = alloca i8, align 1
  %op = alloca i8, align 1
  store i8 %flags, i8* %flags.addr, align 1, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %op) #5
  %0 = load i8, i8* %flags.addr, align 1, !tbaa !14
  %conv = zext i8 %0 to i32
  %and = and i32 %conv, 15
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %op, align 1, !tbaa !14
  %1 = load i8, i8* %op, align 1, !tbaa !14
  %conv2 = zext i8 %1 to i32
  %cmp = icmp eq i32 %conv2, 8
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i8, i8* %op, align 1, !tbaa !14
  %conv4 = zext i8 %2 to i32
  %cmp5 = icmp eq i32 %conv4, 9
  br i1 %cmp5, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %3 = load i8, i8* %op, align 1, !tbaa !14
  %conv7 = zext i8 %3 to i32
  %cmp8 = icmp eq i32 %conv7, 10
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %4 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp8, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %op) #5
  ret i32 %lor.ext
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_ws_close(%struct.mg_connection* %nc, i8* %data, i64 %len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %data.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store i8* %data, i8** %data.addr, align 8, !tbaa !3
  store i64 %len, i64* %len.addr, align 8, !tbaa !12
  %0 = load i64, i64* %len.addr, align 8, !tbaa !12
  %conv = trunc i64 %0 to i32
  %cmp = icmp eq i32 %conv, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %call = call i64 @strlen(i8* %1)
  store i64 %call, i64* %len.addr, align 8, !tbaa !12
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %3 = load i8*, i8** %data.addr, align 8, !tbaa !3
  %4 = load i64, i64* %len.addr, align 8, !tbaa !12
  call void @mg_send_websocket_frame(%struct.mg_connection* %2, i32 8, i8* %3, i64 %4)
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 21
  %6 = load i64, i64* %flags, align 8, !tbaa !41
  %or = or i64 %6, 1024
  store i64 %or, i64* %flags, align 8, !tbaa !41
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mg_is_ws_first_fragment(i8 zeroext %flags) #0 {
entry:
  %flags.addr = alloca i8, align 1
  store i8 %flags, i8* %flags.addr, align 1, !tbaa !14
  %0 = load i8, i8* %flags.addr, align 1, !tbaa !14
  %conv = zext i8 %0 to i32
  %and = and i32 %conv, 128
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %1 = load i8, i8* %flags.addr, align 1, !tbaa !14
  %conv2 = zext i8 %1 to i32
  %and3 = and i32 %conv2, 15
  %cmp4 = icmp ne i32 %and3, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp4, %land.rhs ]
  %land.ext = zext i1 %2 to i32
  ret i32 %land.ext
}

; Function Attrs: nounwind ssp uwtable
define internal void @mg_handle_incoming_websocket_frame(%struct.mg_connection* %nc, %struct.websocket_message* %wsm) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %wsm.addr = alloca %struct.websocket_message*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  store %struct.websocket_message* %wsm, %struct.websocket_message** %wsm.addr, align 8, !tbaa !3
  %0 = load %struct.websocket_message*, %struct.websocket_message** %wsm.addr, align 8, !tbaa !3
  %flags = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %0, i32 0, i32 2
  %1 = load i8, i8* %flags, align 8, !tbaa !261
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 8
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 15
  %4 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler, align 8, !tbaa !53
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 16
  %6 = load i8*, i8** %user_data, align 8, !tbaa !44
  %7 = load %struct.websocket_message*, %struct.websocket_message** %wsm.addr, align 8, !tbaa !3
  %8 = bitcast %struct.websocket_message* %7 to i8*
  call void @mg_call(%struct.mg_connection* %2, void (%struct.mg_connection*, i32, i8*)* %4, i8* %6, i32 114, i8* %8)
  br label %if.end

if.else:                                          ; preds = %entry
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %handler1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 15
  %11 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler1, align 8, !tbaa !53
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8, !tbaa !3
  %user_data2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %12, i32 0, i32 16
  %13 = load i8*, i8** %user_data2, align 8, !tbaa !44
  %14 = load %struct.websocket_message*, %struct.websocket_message** %wsm.addr, align 8, !tbaa !3
  %15 = bitcast %struct.websocket_message* %14 to i8*
  call void @mg_call(%struct.mg_connection* %9, void (%struct.mg_connection*, i32, i8*)* %11, i8* %13, i32 113, i8* %15)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare i32 @rand() #4

; Function Attrs: nounwind ssp uwtable
define internal i32 @parse_mqtt(%struct.mbuf* %io, %struct.mg_mqtt_message* %mm) #0 {
entry:
  %retval = alloca i32, align 4
  %io.addr = alloca %struct.mbuf*, align 8
  %mm.addr = alloca %struct.mg_mqtt_message*, align 8
  %header = alloca i8, align 1
  %len = alloca i32, align 4
  %len_len = alloca i32, align 4
  %p = alloca i8*, align 8
  %end = alloca i8*, align 8
  %eop = alloca i8*, align 8
  %lc = alloca i8, align 1
  %cmd = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mbuf* %io, %struct.mbuf** %io.addr, align 8, !tbaa !3
  store %struct.mg_mqtt_message* %mm, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %header) #5
  %0 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  %1 = bitcast i32* %len_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  %2 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #5
  %3 = bitcast i8** %end to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  %4 = bitcast i8** %eop to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #5
  %5 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %5, i32 0, i32 0
  %6 = load i8*, i8** %buf, align 8, !tbaa !40
  %7 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %len1 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %7, i32 0, i32 1
  %8 = load i64, i64* %len1, align 8, !tbaa !39
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %8
  store i8* %arrayidx, i8** %eop, align 8, !tbaa !3
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %lc) #5
  store i8 0, i8* %lc, align 1, !tbaa !14
  %9 = bitcast i32* %cmd to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %9) #5
  %10 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %len2 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %10, i32 0, i32 1
  %11 = load i64, i64* %len2, align 8, !tbaa !39
  %cmp = icmp ult i64 %11, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %12 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %buf3 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %12, i32 0, i32 0
  %13 = load i8*, i8** %buf3, align 8, !tbaa !40
  %arrayidx4 = getelementptr inbounds i8, i8* %13, i64 0
  %14 = load i8, i8* %arrayidx4, align 1, !tbaa !14
  store i8 %14, i8* %header, align 1, !tbaa !14
  %15 = load i8, i8* %header, align 1, !tbaa !14
  %conv = zext i8 %15 to i32
  %shr = ashr i32 %conv, 4
  store i32 %shr, i32* %cmd, align 4, !tbaa !15
  store i32 0, i32* %len_len, align 4, !tbaa !15
  store i32 0, i32* %len, align 4, !tbaa !15
  %16 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %buf5 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %16, i32 0, i32 0
  %17 = load i8*, i8** %buf5, align 8, !tbaa !40
  %add.ptr = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %add.ptr, i8** %p, align 8, !tbaa !3
  br label %while.cond

while.cond:                                       ; preds = %if.end17, %if.end
  %18 = load i8*, i8** %p, align 8, !tbaa !3
  %19 = load i8*, i8** %eop, align 8, !tbaa !3
  %cmp6 = icmp ult i8* %18, %19
  br i1 %cmp6, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %20 = load i8*, i8** %p, align 8, !tbaa !3
  %incdec.ptr = getelementptr inbounds i8, i8* %20, i32 1
  store i8* %incdec.ptr, i8** %p, align 8, !tbaa !3
  %21 = load i8, i8* %20, align 1, !tbaa !14
  store i8 %21, i8* %lc, align 1, !tbaa !14
  %22 = load i8, i8* %lc, align 1, !tbaa !14
  %conv8 = zext i8 %22 to i32
  %and = and i32 %conv8, 127
  %23 = load i32, i32* %len_len, align 4, !tbaa !15
  %mul = mul i32 7, %23
  %shl = shl i32 %and, %mul
  %24 = load i32, i32* %len, align 4, !tbaa !15
  %add = add i32 %24, %shl
  store i32 %add, i32* %len, align 4, !tbaa !15
  %25 = load i32, i32* %len_len, align 4, !tbaa !15
  %inc = add i32 %25, 1
  store i32 %inc, i32* %len_len, align 4, !tbaa !15
  %26 = load i8, i8* %lc, align 1, !tbaa !14
  %conv9 = zext i8 %26 to i32
  %and10 = and i32 %conv9, 128
  %tobool = icmp ne i32 %and10, 0
  br i1 %tobool, label %if.end12, label %if.then11

if.then11:                                        ; preds = %while.body
  br label %while.end

if.end12:                                         ; preds = %while.body
  %27 = load i32, i32* %len_len, align 4, !tbaa !15
  %conv13 = zext i32 %27 to i64
  %cmp14 = icmp ugt i64 %conv13, 4
  br i1 %cmp14, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.end12
  store i32 -2, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end17:                                         ; preds = %if.end12
  br label %while.cond

while.end:                                        ; preds = %if.then11, %while.cond
  %28 = load i8*, i8** %p, align 8, !tbaa !3
  %29 = load i32, i32* %len, align 4, !tbaa !15
  %idx.ext = zext i32 %29 to i64
  %add.ptr18 = getelementptr inbounds i8, i8* %28, i64 %idx.ext
  store i8* %add.ptr18, i8** %end, align 8, !tbaa !3
  %30 = load i8, i8* %lc, align 1, !tbaa !14
  %conv19 = zext i8 %30 to i32
  %and20 = and i32 %conv19, 128
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %if.then24, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.end
  %31 = load i8*, i8** %end, align 8, !tbaa !3
  %32 = load i8*, i8** %eop, align 8, !tbaa !3
  %cmp22 = icmp ugt i8* %31, %32
  br i1 %cmp22, label %if.then24, label %if.end25

if.then24:                                        ; preds = %lor.lhs.false, %while.end
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end25:                                         ; preds = %lor.lhs.false
  %33 = load i32, i32* %cmd, align 4, !tbaa !15
  %34 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %cmd26 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %34, i32 0, i32 0
  store i32 %33, i32* %cmd26, align 8, !tbaa !195
  %35 = load i8, i8* %header, align 1, !tbaa !14
  %conv27 = zext i8 %35 to i32
  %and28 = and i32 %conv27, 6
  %shr29 = ashr i32 %and28, 1
  %36 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %qos = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %36, i32 0, i32 1
  store i32 %shr29, i32* %qos, align 4, !tbaa !262
  %37 = load i32, i32* %cmd, align 4, !tbaa !15
  switch i32 %37, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb134
    i32 4, label %sw.bb140
    i32 5, label %sw.bb140
    i32 6, label %sw.bb140
    i32 7, label %sw.bb140
    i32 9, label %sw.bb140
    i32 3, label %sw.bb150
    i32 8, label %sw.bb177
  ]

sw.bb:                                            ; preds = %if.end25
  %38 = load i8*, i8** %p, align 8, !tbaa !3
  %39 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %protocol_name = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %39, i32 0, i32 10
  %call = call i8* @scanto(i8* %38, %struct.mg_str* %protocol_name)
  store i8* %call, i8** %p, align 8, !tbaa !3
  %40 = load i8*, i8** %p, align 8, !tbaa !3
  %41 = load i8*, i8** %end, align 8, !tbaa !3
  %add.ptr30 = getelementptr inbounds i8, i8* %41, i64 -4
  %cmp31 = icmp ugt i8* %40, %add.ptr30
  br i1 %cmp31, label %if.then33, label %if.end34

if.then33:                                        ; preds = %sw.bb
  store i32 -2, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end34:                                         ; preds = %sw.bb
  %42 = load i8*, i8** %p, align 8, !tbaa !3
  %incdec.ptr35 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr35, i8** %p, align 8, !tbaa !3
  %43 = load i8, i8* %42, align 1, !tbaa !14
  %44 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %protocol_version = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %44, i32 0, i32 7
  store i8 %43, i8* %protocol_version, align 4, !tbaa !263
  %45 = load i8*, i8** %p, align 8, !tbaa !3
  %incdec.ptr36 = getelementptr inbounds i8, i8* %45, i32 1
  store i8* %incdec.ptr36, i8** %p, align 8, !tbaa !3
  %46 = load i8, i8* %45, align 1, !tbaa !14
  %47 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %connect_flags = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %47, i32 0, i32 8
  store i8 %46, i8* %connect_flags, align 1, !tbaa !264
  %48 = load i8*, i8** %p, align 8, !tbaa !3
  %call37 = call zeroext i16 @getu16(i8* %48)
  %49 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %keep_alive_timer = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %49, i32 0, i32 9
  store i16 %call37, i16* %keep_alive_timer, align 2, !tbaa !265
  %50 = load i8*, i8** %p, align 8, !tbaa !3
  %add.ptr38 = getelementptr inbounds i8, i8* %50, i64 2
  store i8* %add.ptr38, i8** %p, align 8, !tbaa !3
  %51 = load i8*, i8** %p, align 8, !tbaa !3
  %52 = load i8*, i8** %end, align 8, !tbaa !3
  %cmp39 = icmp uge i8* %51, %52
  br i1 %cmp39, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end34
  store i32 -2, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end42:                                         ; preds = %if.end34
  %53 = load i8*, i8** %p, align 8, !tbaa !3
  %54 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %client_id = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %54, i32 0, i32 11
  %call43 = call i8* @scanto(i8* %53, %struct.mg_str* %client_id)
  store i8* %call43, i8** %p, align 8, !tbaa !3
  %55 = load i8*, i8** %p, align 8, !tbaa !3
  %56 = load i8*, i8** %end, align 8, !tbaa !3
  %cmp44 = icmp ugt i8* %55, %56
  br i1 %cmp44, label %if.then46, label %if.end47

if.then46:                                        ; preds = %if.end42
  store i32 -2, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end47:                                         ; preds = %if.end42
  %57 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %connect_flags48 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %57, i32 0, i32 8
  %58 = load i8, i8* %connect_flags48, align 1, !tbaa !264
  %conv49 = zext i8 %58 to i32
  %and50 = and i32 %conv49, 4
  %tobool51 = icmp ne i32 %and50, 0
  br i1 %tobool51, label %if.then52, label %if.end58

if.then52:                                        ; preds = %if.end47
  %59 = load i8*, i8** %p, align 8, !tbaa !3
  %60 = load i8*, i8** %end, align 8, !tbaa !3
  %cmp53 = icmp uge i8* %59, %60
  br i1 %cmp53, label %if.then55, label %if.end56

if.then55:                                        ; preds = %if.then52
  store i32 -2, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end56:                                         ; preds = %if.then52
  %61 = load i8*, i8** %p, align 8, !tbaa !3
  %62 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %will_topic = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %62, i32 0, i32 12
  %call57 = call i8* @scanto(i8* %61, %struct.mg_str* %will_topic)
  store i8* %call57, i8** %p, align 8, !tbaa !3
  br label %if.end58

if.end58:                                         ; preds = %if.end56, %if.end47
  %63 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %connect_flags59 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %63, i32 0, i32 8
  %64 = load i8, i8* %connect_flags59, align 1, !tbaa !264
  %conv60 = zext i8 %64 to i32
  %and61 = and i32 %conv60, 4
  %tobool62 = icmp ne i32 %and61, 0
  br i1 %tobool62, label %if.then63, label %if.end69

if.then63:                                        ; preds = %if.end58
  %65 = load i8*, i8** %p, align 8, !tbaa !3
  %66 = load i8*, i8** %end, align 8, !tbaa !3
  %cmp64 = icmp uge i8* %65, %66
  br i1 %cmp64, label %if.then66, label %if.end67

if.then66:                                        ; preds = %if.then63
  store i32 -2, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end67:                                         ; preds = %if.then63
  %67 = load i8*, i8** %p, align 8, !tbaa !3
  %68 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %will_message = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %68, i32 0, i32 13
  %call68 = call i8* @scanto(i8* %67, %struct.mg_str* %will_message)
  store i8* %call68, i8** %p, align 8, !tbaa !3
  br label %if.end69

if.end69:                                         ; preds = %if.end67, %if.end58
  %69 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %connect_flags70 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %69, i32 0, i32 8
  %70 = load i8, i8* %connect_flags70, align 1, !tbaa !264
  %conv71 = zext i8 %70 to i32
  %and72 = and i32 %conv71, 128
  %tobool73 = icmp ne i32 %and72, 0
  br i1 %tobool73, label %if.then74, label %if.end80

if.then74:                                        ; preds = %if.end69
  %71 = load i8*, i8** %p, align 8, !tbaa !3
  %72 = load i8*, i8** %end, align 8, !tbaa !3
  %cmp75 = icmp uge i8* %71, %72
  br i1 %cmp75, label %if.then77, label %if.end78

if.then77:                                        ; preds = %if.then74
  store i32 -2, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end78:                                         ; preds = %if.then74
  %73 = load i8*, i8** %p, align 8, !tbaa !3
  %74 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %user_name = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %74, i32 0, i32 14
  %call79 = call i8* @scanto(i8* %73, %struct.mg_str* %user_name)
  store i8* %call79, i8** %p, align 8, !tbaa !3
  br label %if.end80

if.end80:                                         ; preds = %if.end78, %if.end69
  %75 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %connect_flags81 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %75, i32 0, i32 8
  %76 = load i8, i8* %connect_flags81, align 1, !tbaa !264
  %conv82 = zext i8 %76 to i32
  %and83 = and i32 %conv82, 64
  %tobool84 = icmp ne i32 %and83, 0
  br i1 %tobool84, label %if.then85, label %if.end91

if.then85:                                        ; preds = %if.end80
  %77 = load i8*, i8** %p, align 8, !tbaa !3
  %78 = load i8*, i8** %end, align 8, !tbaa !3
  %cmp86 = icmp uge i8* %77, %78
  br i1 %cmp86, label %if.then88, label %if.end89

if.then88:                                        ; preds = %if.then85
  store i32 -2, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end89:                                         ; preds = %if.then85
  %79 = load i8*, i8** %p, align 8, !tbaa !3
  %80 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %password = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %80, i32 0, i32 15
  %call90 = call i8* @scanto(i8* %79, %struct.mg_str* %password)
  store i8* %call90, i8** %p, align 8, !tbaa !3
  br label %if.end91

if.end91:                                         ; preds = %if.end89, %if.end80
  %81 = load i8*, i8** %p, align 8, !tbaa !3
  %82 = load i8*, i8** %end, align 8, !tbaa !3
  %cmp92 = icmp ne i8* %81, %82
  br i1 %cmp92, label %if.then94, label %if.end95

if.then94:                                        ; preds = %if.end91
  store i32 -2, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end95:                                         ; preds = %if.end91
  br label %do.body

do.body:                                          ; preds = %if.end95
  %call96 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 10770)
  %tobool97 = icmp ne i32 %call96, 0
  br i1 %tobool97, label %if.then98, label %if.end133

if.then98:                                        ; preds = %do.body
  %83 = load i32, i32* %len, align 4, !tbaa !15
  %84 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %connect_flags99 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %84, i32 0, i32 8
  %85 = load i8, i8* %connect_flags99, align 1, !tbaa !264
  %conv100 = zext i8 %85 to i32
  %86 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %keep_alive_timer101 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %86, i32 0, i32 9
  %87 = load i16, i16* %keep_alive_timer101, align 2, !tbaa !265
  %conv102 = zext i16 %87 to i32
  %88 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %protocol_name103 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %88, i32 0, i32 10
  %len104 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %protocol_name103, i32 0, i32 1
  %89 = load i64, i64* %len104, align 8, !tbaa !266
  %conv105 = trunc i64 %89 to i32
  %90 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %protocol_name106 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %90, i32 0, i32 10
  %p107 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %protocol_name106, i32 0, i32 0
  %91 = load i8*, i8** %p107, align 8, !tbaa !267
  %92 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %client_id108 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %92, i32 0, i32 11
  %len109 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %client_id108, i32 0, i32 1
  %93 = load i64, i64* %len109, align 8, !tbaa !268
  %conv110 = trunc i64 %93 to i32
  %94 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %client_id111 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %94, i32 0, i32 11
  %p112 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %client_id111, i32 0, i32 0
  %95 = load i8*, i8** %p112, align 8, !tbaa !269
  %96 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %will_topic113 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %96, i32 0, i32 12
  %len114 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %will_topic113, i32 0, i32 1
  %97 = load i64, i64* %len114, align 8, !tbaa !270
  %conv115 = trunc i64 %97 to i32
  %98 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %will_topic116 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %98, i32 0, i32 12
  %p117 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %will_topic116, i32 0, i32 0
  %99 = load i8*, i8** %p117, align 8, !tbaa !271
  %100 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %will_message118 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %100, i32 0, i32 13
  %len119 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %will_message118, i32 0, i32 1
  %101 = load i64, i64* %len119, align 8, !tbaa !272
  %conv120 = trunc i64 %101 to i32
  %102 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %will_message121 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %102, i32 0, i32 13
  %p122 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %will_message121, i32 0, i32 0
  %103 = load i8*, i8** %p122, align 8, !tbaa !273
  %104 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %user_name123 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %104, i32 0, i32 14
  %len124 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %user_name123, i32 0, i32 1
  %105 = load i64, i64* %len124, align 8, !tbaa !274
  %conv125 = trunc i64 %105 to i32
  %106 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %user_name126 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %106, i32 0, i32 14
  %p127 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %user_name126, i32 0, i32 0
  %107 = load i8*, i8** %p127, align 8, !tbaa !275
  %108 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %password128 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %108, i32 0, i32 15
  %len129 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %password128, i32 0, i32 1
  %109 = load i64, i64* %len129, align 8, !tbaa !276
  %conv130 = trunc i64 %109 to i32
  %110 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %password131 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %110, i32 0, i32 15
  %p132 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %password131, i32 0, i32 0
  %111 = load i8*, i8** %p132, align 8, !tbaa !277
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.407, i32 0, i32 0), i32 %83, i32 %conv100, i32 %conv102, i32 %conv105, i8* %91, i32 %conv110, i8* %95, i32 %conv115, i8* %99, i32 %conv120, i8* %103, i32 %conv125, i8* %107, i32 %conv130, i8* %111)
  br label %if.end133

if.end133:                                        ; preds = %if.then98, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end133
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %sw.epilog

sw.bb134:                                         ; preds = %if.end25
  %112 = load i8*, i8** %end, align 8, !tbaa !3
  %113 = load i8*, i8** %p, align 8, !tbaa !3
  %sub.ptr.lhs.cast = ptrtoint i8* %112 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %113 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp135 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp135, label %if.then137, label %if.end138

if.then137:                                       ; preds = %sw.bb134
  store i32 -2, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end138:                                        ; preds = %sw.bb134
  %114 = load i8*, i8** %p, align 8, !tbaa !3
  %arrayidx139 = getelementptr inbounds i8, i8* %114, i64 1
  %115 = load i8, i8* %arrayidx139, align 1, !tbaa !14
  %116 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %connack_ret_code = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %116, i32 0, i32 5
  store i8 %115, i8* %connack_ret_code, align 8, !tbaa !278
  br label %sw.epilog

sw.bb140:                                         ; preds = %if.end25, %if.end25, %if.end25, %if.end25, %if.end25
  %117 = load i8*, i8** %end, align 8, !tbaa !3
  %118 = load i8*, i8** %p, align 8, !tbaa !3
  %sub.ptr.lhs.cast141 = ptrtoint i8* %117 to i64
  %sub.ptr.rhs.cast142 = ptrtoint i8* %118 to i64
  %sub.ptr.sub143 = sub i64 %sub.ptr.lhs.cast141, %sub.ptr.rhs.cast142
  %cmp144 = icmp slt i64 %sub.ptr.sub143, 2
  br i1 %cmp144, label %if.then146, label %if.end147

if.then146:                                       ; preds = %sw.bb140
  store i32 -2, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end147:                                        ; preds = %sw.bb140
  %119 = load i8*, i8** %p, align 8, !tbaa !3
  %call148 = call zeroext i16 @getu16(i8* %119)
  %120 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %message_id = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %120, i32 0, i32 6
  store i16 %call148, i16* %message_id, align 2, !tbaa !279
  %121 = load i8*, i8** %p, align 8, !tbaa !3
  %add.ptr149 = getelementptr inbounds i8, i8* %121, i64 2
  store i8* %add.ptr149, i8** %p, align 8, !tbaa !3
  br label %sw.epilog

sw.bb150:                                         ; preds = %if.end25
  %122 = load i8*, i8** %p, align 8, !tbaa !3
  %123 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %topic = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %123, i32 0, i32 3
  %call151 = call i8* @scanto(i8* %122, %struct.mg_str* %topic)
  store i8* %call151, i8** %p, align 8, !tbaa !3
  %124 = load i8*, i8** %p, align 8, !tbaa !3
  %125 = load i8*, i8** %end, align 8, !tbaa !3
  %cmp152 = icmp ugt i8* %124, %125
  br i1 %cmp152, label %if.then154, label %if.end155

if.then154:                                       ; preds = %sw.bb150
  store i32 -2, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end155:                                        ; preds = %sw.bb150
  %126 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %qos156 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %126, i32 0, i32 1
  %127 = load i32, i32* %qos156, align 4, !tbaa !262
  %cmp157 = icmp sgt i32 %127, 0
  br i1 %cmp157, label %if.then159, label %if.end170

if.then159:                                       ; preds = %if.end155
  %128 = load i8*, i8** %end, align 8, !tbaa !3
  %129 = load i8*, i8** %p, align 8, !tbaa !3
  %sub.ptr.lhs.cast160 = ptrtoint i8* %128 to i64
  %sub.ptr.rhs.cast161 = ptrtoint i8* %129 to i64
  %sub.ptr.sub162 = sub i64 %sub.ptr.lhs.cast160, %sub.ptr.rhs.cast161
  %cmp163 = icmp slt i64 %sub.ptr.sub162, 2
  br i1 %cmp163, label %if.then165, label %if.end166

if.then165:                                       ; preds = %if.then159
  store i32 -2, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end166:                                        ; preds = %if.then159
  %130 = load i8*, i8** %p, align 8, !tbaa !3
  %call167 = call zeroext i16 @getu16(i8* %130)
  %131 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %message_id168 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %131, i32 0, i32 6
  store i16 %call167, i16* %message_id168, align 2, !tbaa !279
  %132 = load i8*, i8** %p, align 8, !tbaa !3
  %add.ptr169 = getelementptr inbounds i8, i8* %132, i64 2
  store i8* %add.ptr169, i8** %p, align 8, !tbaa !3
  br label %if.end170

if.end170:                                        ; preds = %if.end166, %if.end155
  %133 = load i8*, i8** %p, align 8, !tbaa !3
  %134 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %payload = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %134, i32 0, i32 4
  %p171 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %payload, i32 0, i32 0
  store i8* %133, i8** %p171, align 8, !tbaa !209
  %135 = load i8*, i8** %end, align 8, !tbaa !3
  %136 = load i8*, i8** %p, align 8, !tbaa !3
  %sub.ptr.lhs.cast172 = ptrtoint i8* %135 to i64
  %sub.ptr.rhs.cast173 = ptrtoint i8* %136 to i64
  %sub.ptr.sub174 = sub i64 %sub.ptr.lhs.cast172, %sub.ptr.rhs.cast173
  %137 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %payload175 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %137, i32 0, i32 4
  %len176 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %payload175, i32 0, i32 1
  store i64 %sub.ptr.sub174, i64* %len176, align 8, !tbaa !210
  br label %sw.epilog

sw.bb177:                                         ; preds = %if.end25
  %138 = load i8*, i8** %end, align 8, !tbaa !3
  %139 = load i8*, i8** %p, align 8, !tbaa !3
  %sub.ptr.lhs.cast178 = ptrtoint i8* %138 to i64
  %sub.ptr.rhs.cast179 = ptrtoint i8* %139 to i64
  %sub.ptr.sub180 = sub i64 %sub.ptr.lhs.cast178, %sub.ptr.rhs.cast179
  %cmp181 = icmp slt i64 %sub.ptr.sub180, 2
  br i1 %cmp181, label %if.then183, label %if.end184

if.then183:                                       ; preds = %sw.bb177
  store i32 -2, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end184:                                        ; preds = %sw.bb177
  %140 = load i8*, i8** %p, align 8, !tbaa !3
  %call185 = call zeroext i16 @getu16(i8* %140)
  %141 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %message_id186 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %141, i32 0, i32 6
  store i16 %call185, i16* %message_id186, align 2, !tbaa !279
  %142 = load i8*, i8** %p, align 8, !tbaa !3
  %add.ptr187 = getelementptr inbounds i8, i8* %142, i64 2
  store i8* %add.ptr187, i8** %p, align 8, !tbaa !3
  %143 = load i8*, i8** %p, align 8, !tbaa !3
  %144 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %payload188 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %144, i32 0, i32 4
  %p189 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %payload188, i32 0, i32 0
  store i8* %143, i8** %p189, align 8, !tbaa !209
  %145 = load i8*, i8** %end, align 8, !tbaa !3
  %146 = load i8*, i8** %p, align 8, !tbaa !3
  %sub.ptr.lhs.cast190 = ptrtoint i8* %145 to i64
  %sub.ptr.rhs.cast191 = ptrtoint i8* %146 to i64
  %sub.ptr.sub192 = sub i64 %sub.ptr.lhs.cast190, %sub.ptr.rhs.cast191
  %147 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %payload193 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %147, i32 0, i32 4
  %len194 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %payload193, i32 0, i32 1
  store i64 %sub.ptr.sub192, i64* %len194, align 8, !tbaa !210
  br label %sw.epilog

sw.default:                                       ; preds = %if.end25
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end184, %if.end170, %if.end147, %if.end138, %do.end
  %148 = load i8*, i8** %end, align 8, !tbaa !3
  %149 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8, !tbaa !3
  %buf195 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %149, i32 0, i32 0
  %150 = load i8*, i8** %buf195, align 8, !tbaa !40
  %sub.ptr.lhs.cast196 = ptrtoint i8* %148 to i64
  %sub.ptr.rhs.cast197 = ptrtoint i8* %150 to i64
  %sub.ptr.sub198 = sub i64 %sub.ptr.lhs.cast196, %sub.ptr.rhs.cast197
  %conv199 = trunc i64 %sub.ptr.sub198 to i32
  %151 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %len200 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %151, i32 0, i32 2
  store i32 %conv199, i32* %len200, align 8, !tbaa !280
  %152 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8, !tbaa !3
  %len201 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %152, i32 0, i32 2
  %153 = load i32, i32* %len201, align 8, !tbaa !280
  store i32 %153, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %sw.epilog, %if.then183, %if.then165, %if.then154, %if.then146, %if.then137, %if.then94, %if.then88, %if.then77, %if.then66, %if.then55, %if.then46, %if.then41, %if.then33, %if.then24, %if.then16, %if.then
  %154 = bitcast i32* %cmd to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %154) #5
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %lc) #5
  %155 = bitcast i8** %eop to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %155) #5
  %156 = bitcast i8** %end to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %156) #5
  %157 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %157) #5
  %158 = bitcast i32* %len_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %158) #5
  %159 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %159) #5
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %header) #5
  %160 = load i32, i32* %retval, align 4
  ret i32 %160
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @scanto(i8* %p, %struct.mg_str* %s) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %s.addr = alloca %struct.mg_str*, align 8
  store i8* %p, i8** %p.addr, align 8, !tbaa !3
  store %struct.mg_str* %s, %struct.mg_str** %s.addr, align 8, !tbaa !3
  %0 = load i8*, i8** %p.addr, align 8, !tbaa !3
  %call = call zeroext i16 @getu16(i8* %0)
  %conv = zext i16 %call to i64
  %1 = load %struct.mg_str*, %struct.mg_str** %s.addr, align 8, !tbaa !3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %1, i32 0, i32 1
  store i64 %conv, i64* %len, align 8, !tbaa !18
  %2 = load i8*, i8** %p.addr, align 8, !tbaa !3
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 2
  %3 = load %struct.mg_str*, %struct.mg_str** %s.addr, align 8, !tbaa !3
  %p1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %3, i32 0, i32 0
  store i8* %add.ptr, i8** %p1, align 8, !tbaa !16
  %4 = load %struct.mg_str*, %struct.mg_str** %s.addr, align 8, !tbaa !3
  %p2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %4, i32 0, i32 0
  %5 = load i8*, i8** %p2, align 8, !tbaa !16
  %6 = load %struct.mg_str*, %struct.mg_str** %s.addr, align 8, !tbaa !3
  %len3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %6, i32 0, i32 1
  %7 = load i64, i64* %len3, align 8, !tbaa !18
  %add.ptr4 = getelementptr inbounds i8, i8* %5, i64 %7
  ret i8* %add.ptr4
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i16 @getu16(i8* %p) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %up = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8, !tbaa !3
  %0 = bitcast i8** %up to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load i8*, i8** %p.addr, align 8, !tbaa !3
  store i8* %1, i8** %up, align 8, !tbaa !3
  %2 = load i8*, i8** %up, align 8, !tbaa !3
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = zext i8 %3 to i32
  %shl = shl i32 %conv, 8
  %4 = load i8*, i8** %up, align 8, !tbaa !3
  %arrayidx1 = getelementptr inbounds i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx1, align 1, !tbaa !14
  %conv2 = zext i8 %5 to i32
  %add = add nsw i32 %shl, %conv2
  %conv3 = trunc i32 %add to i16
  %6 = bitcast i8** %up to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %6) #5
  ret i16 %conv3
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { allocsize(1) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone }
attributes #8 = { cold noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="true" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { inlinehint nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { cold noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { allocsize(0,1) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { alwaysinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { allocsize(1) }
attributes #17 = { cold noreturn }
attributes #18 = { allocsize(0) }
attributes #19 = { nounwind readonly }
attributes #20 = { allocsize(0,1) }
attributes #21 = { noreturn }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 7.1.0 (https://github.com/llvm-mirror/clang.git 4519e2637fcc4bf6e3049a0a80e6a5e7b97667cb) (https://github.com/llvm-mirror/llvm.git dd3329aeb25d87d4ac6429c0af220f92e1ba5f26)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8, !9, i64 12}
!8 = !{!"cs_base64_ctx", !4, i64 0, !5, i64 8, !9, i64 12, !4, i64 16}
!9 = !{!"int", !5, i64 0}
!10 = !{!8, !4, i64 0}
!11 = !{!8, !4, i64 16}
!12 = !{!13, !13, i64 0}
!13 = !{!"long", !5, i64 0}
!14 = !{!5, !5, i64 0}
!15 = !{!9, !9, i64 0}
!16 = !{!17, !4, i64 0}
!17 = !{!"mg_str", !4, i64 0, !13, i64 8}
!18 = !{!17, !13, i64 8}
!19 = !{i64 0, i64 8, !3, i64 8, i64 8, !12}
!20 = !{!21, !21, i64 0}
!21 = !{!"_Bool", !5, i64 0}
!22 = !{i8 0, i8 2}
!23 = !{!24, !13, i64 0}
!24 = !{!"timeval", !13, i64 0, !9, i64 8}
!25 = !{!24, !9, i64 8}
!26 = !{!27, !27, i64 0}
!27 = !{!"double", !5, i64 0}
!28 = !{!29, !9, i64 16}
!29 = !{!"tm", !9, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24, !9, i64 28, !9, i64 32, !13, i64 40, !4, i64 48}
!30 = !{!29, !9, i64 20}
!31 = !{!29, !9, i64 0}
!32 = !{!29, !9, i64 4}
!33 = !{!29, !9, i64 8}
!34 = !{!29, !9, i64 12}
!35 = !{!36, !36, i64 0}
!36 = !{!"long long", !5, i64 0}
!37 = !{!38, !13, i64 16}
!38 = !{!"mbuf", !4, i64 0, !13, i64 8, !13, i64 16}
!39 = !{!38, !13, i64 8}
!40 = !{!38, !4, i64 0}
!41 = !{!42, !13, i64 200}
!42 = !{!"mg_connection", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !9, i64 32, !9, i64 36, !5, i64 40, !13, i64 56, !38, i64 64, !38, i64 88, !13, i64 112, !27, i64 120, !4, i64 128, !4, i64 136, !4, i64 144, !4, i64 152, !4, i64 160, !5, i64 168, !4, i64 176, !4, i64 184, !4, i64 192, !13, i64 200, !4, i64 208}
!43 = !{!42, !13, i64 96}
!44 = !{!42, !4, i64 160}
!45 = !{!42, !9, i64 32}
!46 = !{!42, !4, i64 192}
!47 = !{!48, !4, i64 16}
!48 = !{!"mg_iface", !4, i64 0, !4, i64 8, !4, i64 16}
!49 = !{!50, !4, i64 112}
!50 = !{!"mg_iface_vtable", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !4, i64 40, !4, i64 48, !4, i64 56, !4, i64 64, !4, i64 72, !4, i64 80, !4, i64 88, !4, i64 96, !4, i64 104, !4, i64 112, !4, i64 120, !4, i64 128}
!51 = !{!42, !27, i64 120}
!52 = !{!42, !4, i64 128}
!53 = !{!42, !4, i64 152}
!54 = !{!42, !13, i64 72}
!55 = !{!42, !4, i64 24}
!56 = !{!57, !4, i64 8}
!57 = !{!"mg_mgr", !4, i64 0, !4, i64 8, !5, i64 16, !4, i64 24, !9, i64 32, !9, i64 36, !4, i64 40, !4, i64 48}
!58 = !{!57, !9, i64 36}
!59 = !{!42, !4, i64 136}
!60 = !{!42, !4, i64 144}
!61 = !{!57, !4, i64 24}
!62 = !{!63, !9, i64 8}
!63 = !{!"mg_mgr_init_opts", !4, i64 0, !9, i64 8, !4, i64 16, !4, i64 24}
!64 = !{!63, !4, i64 16}
!65 = !{!63, !4, i64 0}
!66 = !{!57, !9, i64 32}
!67 = !{!57, !4, i64 40}
!68 = !{!50, !4, i64 0}
!69 = !{!63, !4, i64 24}
!70 = !{!57, !4, i64 48}
!71 = !{!48, !4, i64 0}
!72 = !{!48, !4, i64 8}
!73 = !{!57, !4, i64 0}
!74 = !{!42, !4, i64 0}
!75 = !{!50, !4, i64 8}
!76 = !{!50, !4, i64 32}
!77 = !{!42, !13, i64 112}
!78 = !{!42, !4, i64 16}
!79 = !{!42, !13, i64 56}
!80 = !{!50, !4, i64 104}
!81 = !{!82, !4, i64 16}
!82 = !{!"mg_add_sock_opts", !4, i64 0, !9, i64 8, !4, i64 16, !4, i64 24}
!83 = !{!42, !4, i64 8}
!84 = !{!50, !4, i64 16}
!85 = !{i64 0, i64 1, !14, i64 1, i64 1, !14, i64 2, i64 14, !14, i64 0, i64 1, !14, i64 1, i64 1, !14, i64 2, i64 2, !86, i64 4, i64 4, !15, i64 8, i64 8, !14, i64 0, i64 1, !14, i64 1, i64 1, !14, i64 2, i64 14, !14}
!86 = !{!87, !87, i64 0}
!87 = !{!"short", !5, i64 0}
!88 = !{!42, !13, i64 80}
!89 = !{!42, !4, i64 64}
!90 = !{!42, !4, i64 88}
!91 = !{!50, !4, i64 80}
!92 = !{!50, !4, i64 72}
!93 = !{!94, !4, i64 16}
!94 = !{!"mg_connect_opts", !4, i64 0, !9, i64 8, !4, i64 16, !4, i64 24, !4, i64 32}
!95 = !{!94, !9, i64 8}
!96 = !{!94, !4, i64 0}
!97 = !{!98, !4, i64 24}
!98 = !{!"mg_resolve_async_opts", !4, i64 0, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !4, i64 24}
!99 = !{!94, !4, i64 32}
!100 = !{!98, !4, i64 0}
!101 = !{!42, !4, i64 176}
!102 = !{!103, !9, i64 1024}
!103 = !{!"mg_resolve_async_request", !5, i64 0, !9, i64 1024, !4, i64 1032, !4, i64 1040, !13, i64 1048, !9, i64 1056, !5, i64 1060, !13, i64 1064, !9, i64 1072}
!104 = !{!103, !4, i64 1032}
!105 = !{!103, !4, i64 1040}
!106 = !{!98, !9, i64 8}
!107 = !{!103, !9, i64 1056}
!108 = !{!98, !9, i64 12}
!109 = !{!103, !13, i64 1048}
!110 = !{!111, !9, i64 24}
!111 = !{!"mg_dns_message", !17, i64 0, !87, i64 16, !87, i64 18, !9, i64 20, !9, i64 24, !5, i64 32, !5, i64 1568}
!112 = !{!113, !9, i64 16}
!113 = !{!"mg_dns_resource_record", !17, i64 0, !9, i64 16, !9, i64 20, !9, i64 24, !5, i64 28, !17, i64 32}
!114 = !{!50, !4, i64 64}
!115 = !{!50, !4, i64 56}
!116 = !{!117, !4, i64 16}
!117 = !{!"mg_bind_opts", !4, i64 0, !9, i64 8, !4, i64 16, !4, i64 24}
!118 = !{!50, !4, i64 48}
!119 = !{!50, !4, i64 40}
!120 = !{!121, !4, i64 0}
!121 = !{!"ctl_msg", !4, i64 0, !5, i64 8}
!122 = !{!50, !4, i64 120}
!123 = !{!50, !4, i64 128}
!124 = !{!82, !4, i64 24}
!125 = !{!82, !9, i64 8}
!126 = !{!82, !4, i64 0}
!127 = !{!42, !9, i64 36}
!128 = !{!129, !4, i64 0}
!129 = !{!"http_message", !17, i64 0, !17, i64 16, !17, i64 32, !17, i64 48, !17, i64 64, !9, i64 80, !17, i64 88, !17, i64 104, !5, i64 120, !5, i64 760, !13, i64 1400}
!130 = !{!129, !4, i64 16}
!131 = !{!129, !13, i64 24}
!132 = !{!129, !13, i64 8}
!133 = !{!129, !4, i64 48}
!134 = !{!129, !4, i64 32}
!135 = !{!129, !4, i64 64}
!136 = !{!129, !13, i64 56}
!137 = !{!129, !4, i64 104}
!138 = !{!129, !13, i64 112}
!139 = !{!129, !9, i64 80}
!140 = !{!129, !13, i64 1400}
!141 = !{!142, !4, i64 56}
!142 = !{!"mg_http_proto_data", !143, i64 0, !144, i64 32, !145, i64 40, !146, i64 48, !4, i64 56, !4, i64 64, !147, i64 72, !13, i64 80, !13, i64 88, !13, i64 96, !9, i64 104}
!143 = !{!"mg_http_proto_data_file", !4, i64 0, !36, i64 8, !36, i64 16, !9, i64 24, !5, i64 28}
!144 = !{!"mg_http_proto_data_cgi", !4, i64 0}
!145 = !{!"mg_ws_proto_data", !13, i64 0}
!146 = !{!"mg_http_proto_data_chuncked", !36, i64 0}
!147 = !{!"mg_reverse_proxy_data", !4, i64 0}
!148 = !{!149, !4, i64 0}
!149 = !{!"mg_http_endpoint", !4, i64 0, !17, i64 8, !4, i64 24, !4, i64 32, !4, i64 40}
!150 = !{!142, !4, i64 32}
!151 = !{!142, !4, i64 64}
!152 = !{!142, !4, i64 0}
!153 = !{!142, !9, i64 104}
!154 = !{!142, !13, i64 80}
!155 = !{!149, !4, i64 40}
!156 = !{!142, !13, i64 88}
!157 = !{!129, !13, i64 40}
!158 = !{!142, !13, i64 96}
!159 = !{!149, !4, i64 24}
!160 = !{!149, !4, i64 32}
!161 = !{!142, !36, i64 8}
!162 = !{!142, !36, i64 16}
!163 = !{!142, !5, i64 28}
!164 = !{!142, !9, i64 24}
!165 = !{!142, !36, i64 48}
!166 = !{!167, !36, i64 96}
!167 = !{!"stat", !9, i64 0, !87, i64 4, !87, i64 6, !36, i64 8, !9, i64 16, !9, i64 20, !9, i64 24, !13, i64 32, !13, i64 40, !13, i64 48, !13, i64 56, !13, i64 64, !13, i64 72, !13, i64 80, !13, i64 88, !36, i64 96, !36, i64 104, !9, i64 112, !9, i64 116, !9, i64 120, !9, i64 124, !5, i64 128}
!168 = !{!167, !13, i64 48}
!169 = !{!170, !13, i64 32}
!170 = !{!"altbuf", !38, i64 0, !4, i64 24, !13, i64 32, !13, i64 40}
!171 = !{!170, !4, i64 24}
!172 = !{!170, !13, i64 40}
!173 = !{!170, !4, i64 0}
!174 = !{!142, !4, i64 72}
!175 = !{!176, !4, i64 56}
!176 = !{!"mg_serve_http_opts", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !4, i64 40, !4, i64 48, !4, i64 56, !4, i64 64, !4, i64 72, !4, i64 80, !4, i64 88, !4, i64 96, !4, i64 104, !4, i64 112, !4, i64 120}
!177 = !{!176, !4, i64 0}
!178 = !{!176, !4, i64 16}
!179 = !{!176, !4, i64 40}
!180 = !{!176, !4, i64 96}
!181 = !{!176, !4, i64 48}
!182 = !{!176, !4, i64 8}
!183 = !{!176, !4, i64 64}
!184 = !{!167, !87, i64 4}
!185 = !{!176, !4, i64 72}
!186 = !{!176, !4, i64 24}
!187 = !{!176, !4, i64 32}
!188 = !{!176, !4, i64 120}
!189 = !{!190, !4, i64 8}
!190 = !{!"mg_http_endpoint_opts", !4, i64 0, !4, i64 8, !4, i64 16}
!191 = !{!190, !4, i64 16}
!192 = !{!193, !9, i64 8}
!193 = !{!"ws_mask_ctx", !13, i64 0, !9, i64 8}
!194 = !{!193, !13, i64 0}
!195 = !{!196, !9, i64 0}
!196 = !{!"mg_mqtt_message", !9, i64 0, !9, i64 4, !9, i64 8, !17, i64 16, !17, i64 32, !5, i64 48, !87, i64 50, !5, i64 52, !5, i64 53, !87, i64 54, !17, i64 56, !17, i64 72, !17, i64 88, !17, i64 104, !17, i64 120, !17, i64 136}
!197 = !{!198, !87, i64 0}
!198 = !{!"mg_mqtt_proto_data", !87, i64 0, !27, i64 8}
!199 = !{!198, !27, i64 8}
!200 = !{!201, !4, i64 24}
!201 = !{!"mg_send_mqtt_handshake_opts", !5, i64 0, !87, i64 2, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32}
!202 = !{!201, !5, i64 0}
!203 = !{!201, !4, i64 32}
!204 = !{!201, !4, i64 8}
!205 = !{!201, !4, i64 16}
!206 = !{!201, !87, i64 2}
!207 = !{!208, !4, i64 0}
!208 = !{!"mg_mqtt_topic_expression", !4, i64 0, !5, i64 8}
!209 = !{!196, !4, i64 32}
!210 = !{!196, !13, i64 40}
!211 = !{!113, !4, i64 32}
!212 = !{!111, !4, i64 0}
!213 = !{!111, !13, i64 8}
!214 = !{!111, !87, i64 18}
!215 = !{!216, !87, i64 0}
!216 = !{!"mg_dns_header", !87, i64 0, !87, i64 2, !87, i64 4, !87, i64 6, !87, i64 8, !87, i64 10}
!217 = !{!111, !87, i64 16}
!218 = !{!216, !87, i64 2}
!219 = !{!111, !9, i64 20}
!220 = !{!216, !87, i64 4}
!221 = !{!216, !87, i64 6}
!222 = !{!113, !4, i64 0}
!223 = !{!113, !13, i64 8}
!224 = !{!113, !5, i64 28}
!225 = !{!113, !9, i64 20}
!226 = !{!113, !9, i64 24}
!227 = !{!113, !13, i64 40}
!228 = !{!103, !9, i64 1072}
!229 = !{!103, !5, i64 1060}
!230 = !{!103, !13, i64 1064}
!231 = !{!50, !4, i64 24}
!232 = !{!50, !4, i64 96}
!233 = !{!50, !4, i64 88}
!234 = !{!143, !4, i64 0}
!235 = !{!144, !4, i64 0}
!236 = !{!149, !4, i64 8}
!237 = !{!147, !4, i64 0}
!238 = !{!170, !13, i64 8}
!239 = !{i64 0, i64 4, !15, i64 4, i64 2, !86, i64 6, i64 2, !86, i64 8, i64 8, !35, i64 16, i64 4, !15, i64 20, i64 4, !15, i64 24, i64 4, !15, i64 32, i64 8, !12, i64 40, i64 8, !12, i64 48, i64 8, !12, i64 56, i64 8, !12, i64 64, i64 8, !12, i64 72, i64 8, !12, i64 80, i64 8, !12, i64 88, i64 8, !12, i64 96, i64 8, !35, i64 104, i64 8, !35, i64 112, i64 4, !15, i64 116, i64 4, !15, i64 120, i64 4, !15, i64 124, i64 4, !15, i64 128, i64 16, !14}
!240 = !{!241, !9, i64 8}
!241 = !{!"sigaction", !5, i64 0, !9, i64 8, !9, i64 12}
!242 = !{!241, !9, i64 12}
!243 = !{!176, !4, i64 104}
!244 = !{!176, !4, i64 88}
!245 = !{!246, !9, i64 8716}
!246 = !{!"mg_cgi_env_block", !4, i64 0, !5, i64 8, !5, i64 8200, !9, i64 8712, !9, i64 8716}
!247 = !{!246, !9, i64 8712}
!248 = !{!246, !4, i64 0}
!249 = !{!176, !4, i64 112}
!250 = !{!251, !4, i64 0}
!251 = !{!"mg_ssi_call_ctx", !4, i64 0, !17, i64 8, !17, i64 24}
!252 = !{!251, !4, i64 24}
!253 = !{!254, !4, i64 0}
!254 = !{!"", !4, i64 0, !13, i64 8, !4, i64 16}
!255 = !{!254, !13, i64 8}
!256 = !{!254, !4, i64 16}
!257 = !{!145, !13, i64 0}
!258 = !{!259, !13, i64 8}
!259 = !{!"websocket_message", !4, i64 0, !13, i64 8, !5, i64 16}
!260 = !{!259, !4, i64 0}
!261 = !{!259, !5, i64 16}
!262 = !{!196, !9, i64 4}
!263 = !{!196, !5, i64 52}
!264 = !{!196, !5, i64 53}
!265 = !{!196, !87, i64 54}
!266 = !{!196, !13, i64 64}
!267 = !{!196, !4, i64 56}
!268 = !{!196, !13, i64 80}
!269 = !{!196, !4, i64 72}
!270 = !{!196, !13, i64 96}
!271 = !{!196, !4, i64 88}
!272 = !{!196, !13, i64 112}
!273 = !{!196, !4, i64 104}
!274 = !{!196, !13, i64 128}
!275 = !{!196, !4, i64 120}
!276 = !{!196, !13, i64 144}
!277 = !{!196, !4, i64 136}
!278 = !{!196, !5, i64 48}
!279 = !{!196, !87, i64 50}
!280 = !{!196, !9, i64 8}
