; ModuleID = 'ini.c'
source_filename = "ini.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

%struct._RuneLocale = type { [8 x i8], [32 x i8], i32 (i8*, i64, i8**)*, i32 (i32, i8*, i64, i8**)*, i32, [256 x i32], [256 x i32], [256 x i32], %struct._RuneRange, %struct._RuneRange, %struct._RuneRange, i8*, i32, i32, %struct._RuneCharClass* }
%struct._RuneRange = type { i32, %struct._RuneEntry* }
%struct._RuneEntry = type { i32, i32, i32, i32* }
%struct._RuneCharClass = type { [14 x i8], i32 }
%struct.__sFILE = type { i8*, i32, i32, i16, i16, %struct.__sbuf, i32, i8*, i32 (i8*)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i32 (i8*, i8*, i32)*, %struct.__sbuf, %struct.__sFILEX*, i32, [3 x i8], [1 x i8], %struct.__sbuf, i32, i64 }
%struct.__sFILEX = type opaque
%struct.__sbuf = type { i8*, i32 }
%struct.ini_parse_string_ctx = type { i8*, i64 }

@.str = private unnamed_addr constant [3 x i8] c";#\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"=:\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@_DefaultRuneLocale = external global %struct._RuneLocale, align 8
@.str.4 = private unnamed_addr constant [2 x i8] c";\00", align 1

; Function Attrs: nounwind ssp uwtable
define i32 @ini_parse_stream(i8* (i8*, i32, i8*)* %reader, i8* %stream, i32 (i8*, i8*, i8*, i8*)* %handler, i8* %user) #0 {
entry:
  %reader.addr = alloca i8* (i8*, i32, i8*)*, align 8
  %stream.addr = alloca i8*, align 8
  %handler.addr = alloca i32 (i8*, i8*, i8*, i8*)*, align 8
  %user.addr = alloca i8*, align 8
  %line = alloca [200 x i8], align 16
  %max_line = alloca i32, align 4
  %section = alloca [50 x i8], align 16
  %prev_name = alloca [50 x i8], align 16
  %start = alloca i8*, align 8
  %end = alloca i8*, align 8
  %name = alloca i8*, align 8
  %value = alloca i8*, align 8
  %lineno = alloca i32, align 4
  %error = alloca i32, align 4
  store i8* (i8*, i32, i8*)* %reader, i8* (i8*, i32, i8*)** %reader.addr, align 8, !tbaa !4
  store i8* %stream, i8** %stream.addr, align 8, !tbaa !4
  store i32 (i8*, i8*, i8*, i8*)* %handler, i32 (i8*, i8*, i8*, i8*)** %handler.addr, align 8, !tbaa !4
  store i8* %user, i8** %user.addr, align 8, !tbaa !4
  %0 = bitcast [200 x i8]* %line to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* %0) #5
  %1 = bitcast i32* %max_line to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  store i32 200, i32* %max_line, align 4, !tbaa !8
  %2 = bitcast [50 x i8]* %section to i8*
  call void @llvm.lifetime.start.p0i8(i64 50, i8* %2) #5
  %3 = bitcast [50 x i8]* %section to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %3, i8 0, i64 50, i1 false)
  %4 = bitcast [50 x i8]* %prev_name to i8*
  call void @llvm.lifetime.start.p0i8(i64 50, i8* %4) #5
  %5 = bitcast [50 x i8]* %prev_name to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %5, i8 0, i64 50, i1 false)
  %6 = bitcast i8** %start to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #5
  %7 = bitcast i8** %end to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #5
  %8 = bitcast i8** %name to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #5
  %9 = bitcast i8** %value to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #5
  %10 = bitcast i32* %lineno to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %10) #5
  store i32 0, i32* %lineno, align 4, !tbaa !8
  %11 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %11) #5
  store i32 0, i32* %error, align 4, !tbaa !8
  br label %while.cond

while.cond:                                       ; preds = %if.end95, %entry
  %12 = load i8* (i8*, i32, i8*)*, i8* (i8*, i32, i8*)** %reader.addr, align 8, !tbaa !4
  %arraydecay = getelementptr inbounds [200 x i8], [200 x i8]* %line, i32 0, i32 0
  %13 = load i32, i32* %max_line, align 4, !tbaa !8
  %14 = load i8*, i8** %stream.addr, align 8, !tbaa !4
  %call = call i8* %12(i8* %arraydecay, i32 %13, i8* %14)
  %cmp = icmp ne i8* %call, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %15 = load i32, i32* %lineno, align 4, !tbaa !8
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %lineno, align 4, !tbaa !8
  %arraydecay1 = getelementptr inbounds [200 x i8], [200 x i8]* %line, i32 0, i32 0
  store i8* %arraydecay1, i8** %start, align 8, !tbaa !4
  %16 = load i32, i32* %lineno, align 4, !tbaa !8
  %cmp2 = icmp eq i32 %16, 1
  br i1 %cmp2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.body
  %17 = load i8*, i8** %start, align 8, !tbaa !4
  %arrayidx = getelementptr inbounds i8, i8* %17, i64 0
  %18 = load i8, i8* %arrayidx, align 1, !tbaa !10
  %conv = zext i8 %18 to i32
  %cmp3 = icmp eq i32 %conv, 239
  br i1 %cmp3, label %land.lhs.true5, label %if.end

land.lhs.true5:                                   ; preds = %land.lhs.true
  %19 = load i8*, i8** %start, align 8, !tbaa !4
  %arrayidx6 = getelementptr inbounds i8, i8* %19, i64 1
  %20 = load i8, i8* %arrayidx6, align 1, !tbaa !10
  %conv7 = zext i8 %20 to i32
  %cmp8 = icmp eq i32 %conv7, 187
  br i1 %cmp8, label %land.lhs.true10, label %if.end

land.lhs.true10:                                  ; preds = %land.lhs.true5
  %21 = load i8*, i8** %start, align 8, !tbaa !4
  %arrayidx11 = getelementptr inbounds i8, i8* %21, i64 2
  %22 = load i8, i8* %arrayidx11, align 1, !tbaa !10
  %conv12 = zext i8 %22 to i32
  %cmp13 = icmp eq i32 %conv12, 191
  br i1 %cmp13, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true10
  %23 = load i8*, i8** %start, align 8, !tbaa !4
  %add.ptr = getelementptr inbounds i8, i8* %23, i64 3
  store i8* %add.ptr, i8** %start, align 8, !tbaa !4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true10, %land.lhs.true5, %land.lhs.true, %while.body
  %24 = load i8*, i8** %start, align 8, !tbaa !4
  %call15 = call i8* @rstrip(i8* %24)
  %call16 = call i8* @lskip(i8* %call15)
  store i8* %call16, i8** %start, align 8, !tbaa !4
  %25 = load i8*, i8** %start, align 8, !tbaa !4
  %26 = load i8, i8* %25, align 1, !tbaa !10
  %conv17 = sext i8 %26 to i32
  %call18 = call i8* @strchr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %conv17)
  %tobool = icmp ne i8* %call18, null
  br i1 %tobool, label %if.then19, label %if.else

if.then19:                                        ; preds = %if.end
  br label %if.end95

if.else:                                          ; preds = %if.end
  %arraydecay20 = getelementptr inbounds [50 x i8], [50 x i8]* %prev_name, i32 0, i32 0
  %27 = load i8, i8* %arraydecay20, align 16, !tbaa !10
  %conv21 = sext i8 %27 to i32
  %tobool22 = icmp ne i32 %conv21, 0
  br i1 %tobool22, label %land.lhs.true23, label %if.else39

land.lhs.true23:                                  ; preds = %if.else
  %28 = load i8*, i8** %start, align 8, !tbaa !4
  %29 = load i8, i8* %28, align 1, !tbaa !10
  %conv24 = sext i8 %29 to i32
  %tobool25 = icmp ne i32 %conv24, 0
  br i1 %tobool25, label %land.lhs.true26, label %if.else39

land.lhs.true26:                                  ; preds = %land.lhs.true23
  %30 = load i8*, i8** %start, align 8, !tbaa !4
  %arraydecay27 = getelementptr inbounds [200 x i8], [200 x i8]* %line, i32 0, i32 0
  %cmp28 = icmp ugt i8* %30, %arraydecay27
  br i1 %cmp28, label %if.then30, label %if.else39

if.then30:                                        ; preds = %land.lhs.true26
  %31 = load i32 (i8*, i8*, i8*, i8*)*, i32 (i8*, i8*, i8*, i8*)** %handler.addr, align 8, !tbaa !4
  %32 = load i8*, i8** %user.addr, align 8, !tbaa !4
  %arraydecay31 = getelementptr inbounds [50 x i8], [50 x i8]* %section, i32 0, i32 0
  %arraydecay32 = getelementptr inbounds [50 x i8], [50 x i8]* %prev_name, i32 0, i32 0
  %33 = load i8*, i8** %start, align 8, !tbaa !4
  %call33 = call i32 %31(i8* %32, i8* %arraydecay31, i8* %arraydecay32, i8* %33)
  %tobool34 = icmp ne i32 %call33, 0
  br i1 %tobool34, label %if.end38, label %land.lhs.true35

land.lhs.true35:                                  ; preds = %if.then30
  %34 = load i32, i32* %error, align 4, !tbaa !8
  %tobool36 = icmp ne i32 %34, 0
  br i1 %tobool36, label %if.end38, label %if.then37

if.then37:                                        ; preds = %land.lhs.true35
  %35 = load i32, i32* %lineno, align 4, !tbaa !8
  store i32 %35, i32* %error, align 4, !tbaa !8
  br label %if.end38

if.end38:                                         ; preds = %if.then37, %land.lhs.true35, %if.then30
  br label %if.end94

if.else39:                                        ; preds = %land.lhs.true26, %land.lhs.true23, %if.else
  %36 = load i8*, i8** %start, align 8, !tbaa !4
  %37 = load i8, i8* %36, align 1, !tbaa !10
  %conv40 = sext i8 %37 to i32
  %cmp41 = icmp eq i32 %conv40, 91
  br i1 %cmp41, label %if.then43, label %if.else59

if.then43:                                        ; preds = %if.else39
  %38 = load i8*, i8** %start, align 8, !tbaa !4
  %add.ptr44 = getelementptr inbounds i8, i8* %38, i64 1
  %call45 = call i8* @find_chars_or_comment(i8* %add.ptr44, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  store i8* %call45, i8** %end, align 8, !tbaa !4
  %39 = load i8*, i8** %end, align 8, !tbaa !4
  %40 = load i8, i8* %39, align 1, !tbaa !10
  %conv46 = sext i8 %40 to i32
  %cmp47 = icmp eq i32 %conv46, 93
  br i1 %cmp47, label %if.then49, label %if.else54

if.then49:                                        ; preds = %if.then43
  %41 = load i8*, i8** %end, align 8, !tbaa !4
  store i8 0, i8* %41, align 1, !tbaa !10
  %arraydecay50 = getelementptr inbounds [50 x i8], [50 x i8]* %section, i32 0, i32 0
  %42 = load i8*, i8** %start, align 8, !tbaa !4
  %add.ptr51 = getelementptr inbounds i8, i8* %42, i64 1
  %call52 = call i8* @strncpy0(i8* %arraydecay50, i8* %add.ptr51, i64 50)
  %arraydecay53 = getelementptr inbounds [50 x i8], [50 x i8]* %prev_name, i32 0, i32 0
  store i8 0, i8* %arraydecay53, align 16, !tbaa !10
  br label %if.end58

if.else54:                                        ; preds = %if.then43
  %43 = load i32, i32* %error, align 4, !tbaa !8
  %tobool55 = icmp ne i32 %43, 0
  br i1 %tobool55, label %if.end57, label %if.then56

if.then56:                                        ; preds = %if.else54
  %44 = load i32, i32* %lineno, align 4, !tbaa !8
  store i32 %44, i32* %error, align 4, !tbaa !8
  br label %if.end57

if.end57:                                         ; preds = %if.then56, %if.else54
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.then49
  br label %if.end93

if.else59:                                        ; preds = %if.else39
  %45 = load i8*, i8** %start, align 8, !tbaa !4
  %46 = load i8, i8* %45, align 1, !tbaa !10
  %tobool60 = icmp ne i8 %46, 0
  br i1 %tobool60, label %if.then61, label %if.end92

if.then61:                                        ; preds = %if.else59
  %47 = load i8*, i8** %start, align 8, !tbaa !4
  %call62 = call i8* @find_chars_or_comment(i8* %47, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  store i8* %call62, i8** %end, align 8, !tbaa !4
  %48 = load i8*, i8** %end, align 8, !tbaa !4
  %49 = load i8, i8* %48, align 1, !tbaa !10
  %conv63 = sext i8 %49 to i32
  %cmp64 = icmp eq i32 %conv63, 61
  br i1 %cmp64, label %if.then69, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then61
  %50 = load i8*, i8** %end, align 8, !tbaa !4
  %51 = load i8, i8* %50, align 1, !tbaa !10
  %conv66 = sext i8 %51 to i32
  %cmp67 = icmp eq i32 %conv66, 58
  br i1 %cmp67, label %if.then69, label %if.else87

if.then69:                                        ; preds = %lor.lhs.false, %if.then61
  %52 = load i8*, i8** %end, align 8, !tbaa !4
  store i8 0, i8* %52, align 1, !tbaa !10
  %53 = load i8*, i8** %start, align 8, !tbaa !4
  %call70 = call i8* @rstrip(i8* %53)
  store i8* %call70, i8** %name, align 8, !tbaa !4
  %54 = load i8*, i8** %end, align 8, !tbaa !4
  %add.ptr71 = getelementptr inbounds i8, i8* %54, i64 1
  store i8* %add.ptr71, i8** %value, align 8, !tbaa !4
  %55 = load i8*, i8** %value, align 8, !tbaa !4
  %call72 = call i8* @find_chars_or_comment(i8* %55, i8* null)
  store i8* %call72, i8** %end, align 8, !tbaa !4
  %56 = load i8*, i8** %end, align 8, !tbaa !4
  %57 = load i8, i8* %56, align 1, !tbaa !10
  %tobool73 = icmp ne i8 %57, 0
  br i1 %tobool73, label %if.then74, label %if.end75

if.then74:                                        ; preds = %if.then69
  %58 = load i8*, i8** %end, align 8, !tbaa !4
  store i8 0, i8* %58, align 1, !tbaa !10
  br label %if.end75

if.end75:                                         ; preds = %if.then74, %if.then69
  %59 = load i8*, i8** %value, align 8, !tbaa !4
  %call76 = call i8* @lskip(i8* %59)
  store i8* %call76, i8** %value, align 8, !tbaa !4
  %60 = load i8*, i8** %value, align 8, !tbaa !4
  %call77 = call i8* @rstrip(i8* %60)
  %arraydecay78 = getelementptr inbounds [50 x i8], [50 x i8]* %prev_name, i32 0, i32 0
  %61 = load i8*, i8** %name, align 8, !tbaa !4
  %call79 = call i8* @strncpy0(i8* %arraydecay78, i8* %61, i64 50)
  %62 = load i32 (i8*, i8*, i8*, i8*)*, i32 (i8*, i8*, i8*, i8*)** %handler.addr, align 8, !tbaa !4
  %63 = load i8*, i8** %user.addr, align 8, !tbaa !4
  %arraydecay80 = getelementptr inbounds [50 x i8], [50 x i8]* %section, i32 0, i32 0
  %64 = load i8*, i8** %name, align 8, !tbaa !4
  %65 = load i8*, i8** %value, align 8, !tbaa !4
  %call81 = call i32 %62(i8* %63, i8* %arraydecay80, i8* %64, i8* %65)
  %tobool82 = icmp ne i32 %call81, 0
  br i1 %tobool82, label %if.end86, label %land.lhs.true83

land.lhs.true83:                                  ; preds = %if.end75
  %66 = load i32, i32* %error, align 4, !tbaa !8
  %tobool84 = icmp ne i32 %66, 0
  br i1 %tobool84, label %if.end86, label %if.then85

if.then85:                                        ; preds = %land.lhs.true83
  %67 = load i32, i32* %lineno, align 4, !tbaa !8
  store i32 %67, i32* %error, align 4, !tbaa !8
  br label %if.end86

if.end86:                                         ; preds = %if.then85, %land.lhs.true83, %if.end75
  br label %if.end91

if.else87:                                        ; preds = %lor.lhs.false
  %68 = load i32, i32* %error, align 4, !tbaa !8
  %tobool88 = icmp ne i32 %68, 0
  br i1 %tobool88, label %if.end90, label %if.then89

if.then89:                                        ; preds = %if.else87
  %69 = load i32, i32* %lineno, align 4, !tbaa !8
  store i32 %69, i32* %error, align 4, !tbaa !8
  br label %if.end90

if.end90:                                         ; preds = %if.then89, %if.else87
  br label %if.end91

if.end91:                                         ; preds = %if.end90, %if.end86
  br label %if.end92

if.end92:                                         ; preds = %if.end91, %if.else59
  br label %if.end93

if.end93:                                         ; preds = %if.end92, %if.end58
  br label %if.end94

if.end94:                                         ; preds = %if.end93, %if.end38
  br label %if.end95

if.end95:                                         ; preds = %if.end94, %if.then19
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %70 = load i32, i32* %error, align 4, !tbaa !8
  %71 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %71) #5
  %72 = bitcast i32* %lineno to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %72) #5
  %73 = bitcast i8** %value to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %73) #5
  %74 = bitcast i8** %name to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %74) #5
  %75 = bitcast i8** %end to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %75) #5
  %76 = bitcast i8** %start to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %76) #5
  %77 = bitcast [50 x i8]* %prev_name to i8*
  call void @llvm.lifetime.end.p0i8(i64 50, i8* %77) #5
  %78 = bitcast [50 x i8]* %section to i8*
  call void @llvm.lifetime.end.p0i8(i64 50, i8* %78) #5
  %79 = bitcast i32* %max_line to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %79) #5
  %80 = bitcast [200 x i8]* %line to i8*
  call void @llvm.lifetime.end.p0i8(i64 200, i8* %80) #5
  ret i32 %70
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #1

; Function Attrs: nounwind ssp uwtable
define internal i8* @lskip(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 8
  store i8* %s, i8** %s.addr, align 8, !tbaa !4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %s.addr, align 8, !tbaa !4
  %1 = load i8, i8* %0, align 1, !tbaa !10
  %conv = sext i8 %1 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %2 = load i8*, i8** %s.addr, align 8, !tbaa !4
  %3 = load i8, i8* %2, align 1, !tbaa !10
  %conv1 = zext i8 %3 to i32
  %call = call i32 @isspace(i32 %conv1) #6
  %tobool2 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %4 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ]
  br i1 %4, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %5 = load i8*, i8** %s.addr, align 8, !tbaa !4
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 8, !tbaa !4
  br label %while.cond

while.end:                                        ; preds = %land.end
  %6 = load i8*, i8** %s.addr, align 8, !tbaa !4
  ret i8* %6
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @rstrip(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %p = alloca i8*, align 8
  store i8* %s, i8** %s.addr, align 8, !tbaa !4
  %0 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load i8*, i8** %s.addr, align 8, !tbaa !4
  %2 = load i8*, i8** %s.addr, align 8, !tbaa !4
  %call = call i64 @strlen(i8* %2)
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %call
  store i8* %add.ptr, i8** %p, align 8, !tbaa !4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i8*, i8** %p, align 8, !tbaa !4
  %4 = load i8*, i8** %s.addr, align 8, !tbaa !4
  %cmp = icmp ugt i8* %3, %4
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %5 = load i8*, i8** %p, align 8, !tbaa !4
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 -1
  store i8* %incdec.ptr, i8** %p, align 8, !tbaa !4
  %6 = load i8, i8* %incdec.ptr, align 1, !tbaa !10
  %conv = zext i8 %6 to i32
  %call1 = call i32 @isspace(i32 %conv) #6
  %tobool = icmp ne i32 %call1, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %8 = load i8*, i8** %p, align 8, !tbaa !4
  store i8 0, i8* %8, align 1, !tbaa !10
  br label %while.cond

while.end:                                        ; preds = %land.end
  %9 = load i8*, i8** %s.addr, align 8, !tbaa !4
  %10 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %10) #5
  ret i8* %9
}

declare i8* @strchr(i8*, i32) #2

; Function Attrs: nounwind ssp uwtable
define internal i8* @find_chars_or_comment(i8* %s, i8* %chars) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %chars.addr = alloca i8*, align 8
  %was_space = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 8, !tbaa !4
  store i8* %chars, i8** %chars.addr, align 8, !tbaa !4
  %0 = bitcast i32* %was_space to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #5
  store i32 0, i32* %was_space, align 4, !tbaa !8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i8*, i8** %s.addr, align 8, !tbaa !4
  %2 = load i8, i8* %1, align 1, !tbaa !10
  %conv = sext i8 %2 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %land.lhs.true, label %land.end9

land.lhs.true:                                    ; preds = %while.cond
  %3 = load i8*, i8** %chars.addr, align 8, !tbaa !4
  %tobool1 = icmp ne i8* %3, null
  br i1 %tobool1, label %lor.lhs.false, label %land.rhs

lor.lhs.false:                                    ; preds = %land.lhs.true
  %4 = load i8*, i8** %chars.addr, align 8, !tbaa !4
  %5 = load i8*, i8** %s.addr, align 8, !tbaa !4
  %6 = load i8, i8* %5, align 1, !tbaa !10
  %conv2 = sext i8 %6 to i32
  %call = call i8* @strchr(i8* %4, i32 %conv2)
  %tobool3 = icmp ne i8* %call, null
  br i1 %tobool3, label %land.end9, label %land.rhs

land.rhs:                                         ; preds = %lor.lhs.false, %land.lhs.true
  %7 = load i32, i32* %was_space, align 4, !tbaa !8
  %tobool4 = icmp ne i32 %7, 0
  br i1 %tobool4, label %land.rhs5, label %land.end

land.rhs5:                                        ; preds = %land.rhs
  %8 = load i8*, i8** %s.addr, align 8, !tbaa !4
  %9 = load i8, i8* %8, align 1, !tbaa !10
  %conv6 = sext i8 %9 to i32
  %call7 = call i8* @strchr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0), i32 %conv6)
  %tobool8 = icmp ne i8* %call7, null
  br label %land.end

land.end:                                         ; preds = %land.rhs5, %land.rhs
  %10 = phi i1 [ false, %land.rhs ], [ %tobool8, %land.rhs5 ]
  %lnot = xor i1 %10, true
  br label %land.end9

land.end9:                                        ; preds = %land.end, %lor.lhs.false, %while.cond
  %11 = phi i1 [ false, %lor.lhs.false ], [ false, %while.cond ], [ %lnot, %land.end ]
  br i1 %11, label %while.body, label %while.end

while.body:                                       ; preds = %land.end9
  %12 = load i8*, i8** %s.addr, align 8, !tbaa !4
  %13 = load i8, i8* %12, align 1, !tbaa !10
  %conv10 = zext i8 %13 to i32
  %call11 = call i32 @isspace(i32 %conv10) #6
  store i32 %call11, i32* %was_space, align 4, !tbaa !8
  %14 = load i8*, i8** %s.addr, align 8, !tbaa !4
  %incdec.ptr = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 8, !tbaa !4
  br label %while.cond

while.end:                                        ; preds = %land.end9
  %15 = load i8*, i8** %s.addr, align 8, !tbaa !4
  %16 = bitcast i32* %was_space to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %16) #5
  ret i8* %15
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @strncpy0(i8* %dest, i8* %src, i64 %size) #0 {
entry:
  %dest.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %i = alloca i64, align 8
  store i8* %dest, i8** %dest.addr, align 8, !tbaa !4
  store i8* %src, i8** %src.addr, align 8, !tbaa !4
  store i64 %size, i64* %size.addr, align 8, !tbaa !11
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  store i64 0, i64* %i, align 8, !tbaa !11
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i, align 8, !tbaa !11
  %2 = load i64, i64* %size.addr, align 8, !tbaa !11
  %sub = sub i64 %2, 1
  %cmp = icmp ult i64 %1, %sub
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %3 = load i8*, i8** %src.addr, align 8, !tbaa !4
  %4 = load i64, i64* %i, align 8, !tbaa !11
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %4
  %5 = load i8, i8* %arrayidx, align 1, !tbaa !10
  %conv = sext i8 %5 to i32
  %tobool = icmp ne i32 %conv, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %6 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %7 = load i8*, i8** %src.addr, align 8, !tbaa !4
  %8 = load i64, i64* %i, align 8, !tbaa !11
  %arrayidx1 = getelementptr inbounds i8, i8* %7, i64 %8
  %9 = load i8, i8* %arrayidx1, align 1, !tbaa !10
  %10 = load i8*, i8** %dest.addr, align 8, !tbaa !4
  %11 = load i64, i64* %i, align 8, !tbaa !11
  %arrayidx2 = getelementptr inbounds i8, i8* %10, i64 %11
  store i8 %9, i8* %arrayidx2, align 1, !tbaa !10
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i64, i64* %i, align 8, !tbaa !11
  %inc = add i64 %12, 1
  store i64 %inc, i64* %i, align 8, !tbaa !11
  br label %for.cond

for.end:                                          ; preds = %land.end
  %13 = load i8*, i8** %dest.addr, align 8, !tbaa !4
  %14 = load i64, i64* %i, align 8, !tbaa !11
  %arrayidx3 = getelementptr inbounds i8, i8* %13, i64 %14
  store i8 0, i8* %arrayidx3, align 1, !tbaa !10
  %15 = load i8*, i8** %dest.addr, align 8, !tbaa !4
  %16 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %16) #5
  ret i8* %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define i32 @ini_parse_file(%struct.__sFILE* %file, i32 (i8*, i8*, i8*, i8*)* %handler, i8* %user) #0 {
entry:
  %file.addr = alloca %struct.__sFILE*, align 8
  %handler.addr = alloca i32 (i8*, i8*, i8*, i8*)*, align 8
  %user.addr = alloca i8*, align 8
  store %struct.__sFILE* %file, %struct.__sFILE** %file.addr, align 8, !tbaa !4
  store i32 (i8*, i8*, i8*, i8*)* %handler, i32 (i8*, i8*, i8*, i8*)** %handler.addr, align 8, !tbaa !4
  store i8* %user, i8** %user.addr, align 8, !tbaa !4
  %0 = load %struct.__sFILE*, %struct.__sFILE** %file.addr, align 8, !tbaa !4
  %1 = bitcast %struct.__sFILE* %0 to i8*
  %2 = load i32 (i8*, i8*, i8*, i8*)*, i32 (i8*, i8*, i8*, i8*)** %handler.addr, align 8, !tbaa !4
  %3 = load i8*, i8** %user.addr, align 8, !tbaa !4
  %call = call i32 @ini_parse_stream(i8* (i8*, i32, i8*)* bitcast (i8* (i8*, i32, %struct.__sFILE*)* @fgets to i8* (i8*, i32, i8*)*), i8* %1, i32 (i8*, i8*, i8*, i8*)* %2, i8* %3)
  ret i32 %call
}

declare i8* @fgets(i8*, i32, %struct.__sFILE*) #2

; Function Attrs: nounwind ssp uwtable
define i32 @ini_parse(i8* %filename, i32 (i8*, i8*, i8*, i8*)* %handler, i8* %user) #0 {
entry:
  %retval = alloca i32, align 4
  %filename.addr = alloca i8*, align 8
  %handler.addr = alloca i32 (i8*, i8*, i8*, i8*)*, align 8
  %user.addr = alloca i8*, align 8
  %file = alloca %struct.__sFILE*, align 8
  %error = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %filename, i8** %filename.addr, align 8, !tbaa !4
  store i32 (i8*, i8*, i8*, i8*)* %handler, i32 (i8*, i8*, i8*, i8*)** %handler.addr, align 8, !tbaa !4
  store i8* %user, i8** %user.addr, align 8, !tbaa !4
  %0 = bitcast %struct.__sFILE** %file to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #5
  %2 = load i8*, i8** %filename.addr, align 8, !tbaa !4
  %call = call %struct.__sFILE* @"\01_fopen"(i8* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  store %struct.__sFILE* %call, %struct.__sFILE** %file, align 8, !tbaa !4
  %3 = load %struct.__sFILE*, %struct.__sFILE** %file, align 8, !tbaa !4
  %tobool = icmp ne %struct.__sFILE* %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %4 = load %struct.__sFILE*, %struct.__sFILE** %file, align 8, !tbaa !4
  %5 = load i32 (i8*, i8*, i8*, i8*)*, i32 (i8*, i8*, i8*, i8*)** %handler.addr, align 8, !tbaa !4
  %6 = load i8*, i8** %user.addr, align 8, !tbaa !4
  %call1 = call i32 @ini_parse_file(%struct.__sFILE* %4, i32 (i8*, i8*, i8*, i8*)* %5, i8* %6)
  store i32 %call1, i32* %error, align 4, !tbaa !8
  %7 = load %struct.__sFILE*, %struct.__sFILE** %file, align 8, !tbaa !4
  %call2 = call i32 @fclose(%struct.__sFILE* %7)
  %8 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %8, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %9 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %9) #5
  %10 = bitcast %struct.__sFILE** %file to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %10) #5
  %11 = load i32, i32* %retval, align 4
  ret i32 %11
}

declare %struct.__sFILE* @"\01_fopen"(i8*, i8*) #2

declare i32 @fclose(%struct.__sFILE*) #2

; Function Attrs: nounwind ssp uwtable
define i32 @ini_parse_string(i8* %string, i32 (i8*, i8*, i8*, i8*)* %handler, i8* %user) #0 {
entry:
  %string.addr = alloca i8*, align 8
  %handler.addr = alloca i32 (i8*, i8*, i8*, i8*)*, align 8
  %user.addr = alloca i8*, align 8
  %ctx = alloca %struct.ini_parse_string_ctx, align 8
  store i8* %string, i8** %string.addr, align 8, !tbaa !4
  store i32 (i8*, i8*, i8*, i8*)* %handler, i32 (i8*, i8*, i8*, i8*)** %handler.addr, align 8, !tbaa !4
  store i8* %user, i8** %user.addr, align 8, !tbaa !4
  %0 = bitcast %struct.ini_parse_string_ctx* %ctx to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %0) #5
  %1 = load i8*, i8** %string.addr, align 8, !tbaa !4
  %ptr = getelementptr inbounds %struct.ini_parse_string_ctx, %struct.ini_parse_string_ctx* %ctx, i32 0, i32 0
  store i8* %1, i8** %ptr, align 8, !tbaa !13
  %2 = load i8*, i8** %string.addr, align 8, !tbaa !4
  %call = call i64 @strlen(i8* %2)
  %num_left = getelementptr inbounds %struct.ini_parse_string_ctx, %struct.ini_parse_string_ctx* %ctx, i32 0, i32 1
  store i64 %call, i64* %num_left, align 8, !tbaa !15
  %3 = bitcast %struct.ini_parse_string_ctx* %ctx to i8*
  %4 = load i32 (i8*, i8*, i8*, i8*)*, i32 (i8*, i8*, i8*, i8*)** %handler.addr, align 8, !tbaa !4
  %5 = load i8*, i8** %user.addr, align 8, !tbaa !4
  %call1 = call i32 @ini_parse_stream(i8* (i8*, i32, i8*)* @ini_reader_string, i8* %3, i32 (i8*, i8*, i8*, i8*)* %4, i8* %5)
  %6 = bitcast %struct.ini_parse_string_ctx* %ctx to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %6) #5
  ret i32 %call1
}

declare i64 @strlen(i8*) #2

; Function Attrs: nounwind ssp uwtable
define internal i8* @ini_reader_string(i8* %str, i32 %num, i8* %stream) #0 {
entry:
  %retval = alloca i8*, align 8
  %str.addr = alloca i8*, align 8
  %num.addr = alloca i32, align 4
  %stream.addr = alloca i8*, align 8
  %ctx = alloca %struct.ini_parse_string_ctx*, align 8
  %ctx_ptr = alloca i8*, align 8
  %ctx_num_left = alloca i64, align 8
  %strp = alloca i8*, align 8
  %c = alloca i8, align 1
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 8, !tbaa !4
  store i32 %num, i32* %num.addr, align 4, !tbaa !8
  store i8* %stream, i8** %stream.addr, align 8, !tbaa !4
  %0 = bitcast %struct.ini_parse_string_ctx** %ctx to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load i8*, i8** %stream.addr, align 8, !tbaa !4
  %2 = bitcast i8* %1 to %struct.ini_parse_string_ctx*
  store %struct.ini_parse_string_ctx* %2, %struct.ini_parse_string_ctx** %ctx, align 8, !tbaa !4
  %3 = bitcast i8** %ctx_ptr to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  %4 = load %struct.ini_parse_string_ctx*, %struct.ini_parse_string_ctx** %ctx, align 8, !tbaa !4
  %ptr = getelementptr inbounds %struct.ini_parse_string_ctx, %struct.ini_parse_string_ctx* %4, i32 0, i32 0
  %5 = load i8*, i8** %ptr, align 8, !tbaa !13
  store i8* %5, i8** %ctx_ptr, align 8, !tbaa !4
  %6 = bitcast i64* %ctx_num_left to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #5
  %7 = load %struct.ini_parse_string_ctx*, %struct.ini_parse_string_ctx** %ctx, align 8, !tbaa !4
  %num_left = getelementptr inbounds %struct.ini_parse_string_ctx, %struct.ini_parse_string_ctx* %7, i32 0, i32 1
  %8 = load i64, i64* %num_left, align 8, !tbaa !15
  store i64 %8, i64* %ctx_num_left, align 8, !tbaa !11
  %9 = bitcast i8** %strp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #5
  %10 = load i8*, i8** %str.addr, align 8, !tbaa !4
  store i8* %10, i8** %strp, align 8, !tbaa !4
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %c) #5
  %11 = load i64, i64* %ctx_num_left, align 8, !tbaa !11
  %cmp = icmp eq i64 %11, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %12 = load i32, i32* %num.addr, align 4, !tbaa !8
  %cmp1 = icmp slt i32 %12, 2
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond

while.cond:                                       ; preds = %if.end8, %if.end
  %13 = load i32, i32* %num.addr, align 4, !tbaa !8
  %cmp2 = icmp sgt i32 %13, 1
  br i1 %cmp2, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %14 = load i64, i64* %ctx_num_left, align 8, !tbaa !11
  %cmp3 = icmp ne i64 %14, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %15 = phi i1 [ false, %while.cond ], [ %cmp3, %land.rhs ]
  br i1 %15, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %16 = load i8*, i8** %ctx_ptr, align 8, !tbaa !4
  %incdec.ptr = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr, i8** %ctx_ptr, align 8, !tbaa !4
  %17 = load i8, i8* %16, align 1, !tbaa !10
  store i8 %17, i8* %c, align 1, !tbaa !10
  %18 = load i64, i64* %ctx_num_left, align 8, !tbaa !11
  %dec = add i64 %18, -1
  store i64 %dec, i64* %ctx_num_left, align 8, !tbaa !11
  %19 = load i8, i8* %c, align 1, !tbaa !10
  %20 = load i8*, i8** %strp, align 8, !tbaa !4
  %incdec.ptr4 = getelementptr inbounds i8, i8* %20, i32 1
  store i8* %incdec.ptr4, i8** %strp, align 8, !tbaa !4
  store i8 %19, i8* %20, align 1, !tbaa !10
  %21 = load i8, i8* %c, align 1, !tbaa !10
  %conv = sext i8 %21 to i32
  %cmp5 = icmp eq i32 %conv, 10
  br i1 %cmp5, label %if.then7, label %if.end8

if.then7:                                         ; preds = %while.body
  br label %while.end

if.end8:                                          ; preds = %while.body
  %22 = load i32, i32* %num.addr, align 4, !tbaa !8
  %dec9 = add nsw i32 %22, -1
  store i32 %dec9, i32* %num.addr, align 4, !tbaa !8
  br label %while.cond

while.end:                                        ; preds = %if.then7, %land.end
  %23 = load i8*, i8** %strp, align 8, !tbaa !4
  store i8 0, i8* %23, align 1, !tbaa !10
  %24 = load i8*, i8** %ctx_ptr, align 8, !tbaa !4
  %25 = load %struct.ini_parse_string_ctx*, %struct.ini_parse_string_ctx** %ctx, align 8, !tbaa !4
  %ptr10 = getelementptr inbounds %struct.ini_parse_string_ctx, %struct.ini_parse_string_ctx* %25, i32 0, i32 0
  store i8* %24, i8** %ptr10, align 8, !tbaa !13
  %26 = load i64, i64* %ctx_num_left, align 8, !tbaa !11
  %27 = load %struct.ini_parse_string_ctx*, %struct.ini_parse_string_ctx** %ctx, align 8, !tbaa !4
  %num_left11 = getelementptr inbounds %struct.ini_parse_string_ctx, %struct.ini_parse_string_ctx* %27, i32 0, i32 1
  store i64 %26, i64* %num_left11, align 8, !tbaa !15
  %28 = load i8*, i8** %str.addr, align 8, !tbaa !4
  store i8* %28, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %c) #5
  %29 = bitcast i8** %strp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %29) #5
  %30 = bitcast i64* %ctx_num_left to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %30) #5
  %31 = bitcast i8** %ctx_ptr to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %31) #5
  %32 = bitcast %struct.ini_parse_string_ctx** %ctx to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %32) #5
  %33 = load i8*, i8** %retval, align 8
  ret i8* %33
}

; Function Attrs: inlinehint nounwind readonly ssp uwtable
define available_externally i32 @isspace(i32 %_c) #3 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4, !tbaa !8
  %0 = load i32, i32* %_c.addr, align 4, !tbaa !8
  %call = call i32 @__istype(i32 %0, i64 16384)
  ret i32 %call
}

; Function Attrs: inlinehint nounwind ssp uwtable
define available_externally i32 @__istype(i32 %_c, i64 %_f) #4 {
entry:
  %_c.addr = alloca i32, align 4
  %_f.addr = alloca i64, align 8
  store i32 %_c, i32* %_c.addr, align 4, !tbaa !8
  store i64 %_f, i64* %_f.addr, align 8, !tbaa !11
  %0 = load i32, i32* %_c.addr, align 4, !tbaa !8
  %call = call i32 @isascii(i32 %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4, !tbaa !8
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds (%struct._RuneLocale, %struct._RuneLocale* @_DefaultRuneLocale, i32 0, i32 5), i64 0, i64 %idxprom
  %2 = load i32, i32* %arrayidx, align 4, !tbaa !8
  %conv = zext i32 %2 to i64
  %3 = load i64, i64* %_f.addr, align 8, !tbaa !11
  %and = and i64 %conv, %3
  %tobool1 = icmp ne i64 %and, 0
  %lnot = xor i1 %tobool1, true
  %lnot2 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot2 to i32
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load i32, i32* %_c.addr, align 4, !tbaa !8
  %5 = load i64, i64* %_f.addr, align 8, !tbaa !11
  %call3 = call i32 @__maskrune(i32 %4, i64 %5)
  %tobool4 = icmp ne i32 %call3, 0
  %lnot5 = xor i1 %tobool4, true
  %lnot7 = xor i1 %lnot5, true
  %lnot.ext8 = zext i1 %lnot7 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %lnot.ext, %cond.true ], [ %lnot.ext8, %cond.false ]
  ret i32 %cond
}

; Function Attrs: inlinehint nounwind ssp uwtable
define available_externally i32 @isascii(i32 %_c) #4 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4, !tbaa !8
  %0 = load i32, i32* %_c.addr, align 4, !tbaa !8
  %and = and i32 %0, -128
  %cmp = icmp eq i32 %and, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

declare i32 @__maskrune(i32, i64) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 2, !"SDK Version", [3 x i32] [i32 10, i32 15, i32 4]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 7, !"PIC Level", i32 2}
!3 = !{!"clang version 8.0.1 (https://github.com/llvm-mirror/clang.git 2e4c9c5fc864c2c432e4c262a67c42d824b265c6) (https://github.com/llvm-mirror/llvm.git ea28a67e47fd87c6b78597d90eba543bad4d7468)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !6, i64 0}
!10 = !{!6, !6, i64 0}
!11 = !{!12, !12, i64 0}
!12 = !{!"long", !6, i64 0}
!13 = !{!14, !5, i64 0}
!14 = !{!"", !5, i64 0, !12, i64 8}
!15 = !{!14, !12, i64 8}
