; ModuleID = 'src/avl.c'
source_filename = "src/avl.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

%struct.avl_tree_t = type { %struct.avl_tree_node_t*, i32 (i8*, i8*)*, void (i8*)* }
%struct.avl_tree_node_t = type { %struct.avl_tree_node_t*, %struct.avl_tree_node_t*, i32, i8*, i8* }

; Function Attrs: nounwind ssp uwtable
define void @avl_initialize(%struct.avl_tree_t* %tree, i32 (i8*, i8*)* %comparator, void (i8*)* %destructor) #0 {
entry:
  %tree.addr = alloca %struct.avl_tree_t*, align 8
  %comparator.addr = alloca i32 (i8*, i8*)*, align 8
  %destructor.addr = alloca void (i8*)*, align 8
  store %struct.avl_tree_t* %tree, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  store i32 (i8*, i8*)* %comparator, i32 (i8*, i8*)** %comparator.addr, align 8, !tbaa !2
  store void (i8*)* %destructor, void (i8*)** %destructor.addr, align 8, !tbaa !2
  %0 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %comparator.addr, align 8, !tbaa !2
  %1 = load %struct.avl_tree_t*, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %comparator1 = getelementptr inbounds %struct.avl_tree_t, %struct.avl_tree_t* %1, i32 0, i32 1
  store i32 (i8*, i8*)* %0, i32 (i8*, i8*)** %comparator1, align 8, !tbaa !6
  %2 = load void (i8*)*, void (i8*)** %destructor.addr, align 8, !tbaa !2
  %3 = load %struct.avl_tree_t*, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %destructor2 = getelementptr inbounds %struct.avl_tree_t, %struct.avl_tree_t* %3, i32 0, i32 2
  store void (i8*)* %2, void (i8*)** %destructor2, align 8, !tbaa !8
  %4 = load %struct.avl_tree_t*, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %root = getelementptr inbounds %struct.avl_tree_t, %struct.avl_tree_t* %4, i32 0, i32 0
  store %struct.avl_tree_node_t* null, %struct.avl_tree_node_t** %root, align 8, !tbaa !9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @avl_destroy(%struct.avl_tree_t* %tree, void (i8*, i8*)* %visitor) #0 {
entry:
  %tree.addr = alloca %struct.avl_tree_t*, align 8
  %visitor.addr = alloca void (i8*, i8*)*, align 8
  store %struct.avl_tree_t* %tree, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  store void (i8*, i8*)* %visitor, void (i8*, i8*)** %visitor.addr, align 8, !tbaa !2
  %0 = load %struct.avl_tree_t*, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %1 = load %struct.avl_tree_t*, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %root = getelementptr inbounds %struct.avl_tree_t, %struct.avl_tree_t* %1, i32 0, i32 0
  %2 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %root, align 8, !tbaa !9
  %3 = load void (i8*, i8*)*, void (i8*, i8*)** %visitor.addr, align 8, !tbaa !2
  call void @avl_destroy_helper(%struct.avl_tree_t* %0, %struct.avl_tree_node_t* %2, void (i8*, i8*)* %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @avl_destroy_helper(%struct.avl_tree_t* %tree, %struct.avl_tree_node_t* %node, void (i8*, i8*)* %visitor) #0 {
entry:
  %tree.addr = alloca %struct.avl_tree_t*, align 8
  %node.addr = alloca %struct.avl_tree_node_t*, align 8
  %visitor.addr = alloca void (i8*, i8*)*, align 8
  store %struct.avl_tree_t* %tree, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  store %struct.avl_tree_node_t* %node, %struct.avl_tree_node_t** %node.addr, align 8, !tbaa !2
  store void (i8*, i8*)* %visitor, void (i8*, i8*)** %visitor.addr, align 8, !tbaa !2
  %0 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %node.addr, align 8, !tbaa !2
  %cmp = icmp eq %struct.avl_tree_node_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load void (i8*, i8*)*, void (i8*, i8*)** %visitor.addr, align 8, !tbaa !2
  %2 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %node.addr, align 8, !tbaa !2
  %key = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %2, i32 0, i32 3
  %3 = load i8*, i8** %key, align 8, !tbaa !10
  %4 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %node.addr, align 8, !tbaa !2
  %data = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %4, i32 0, i32 4
  %5 = load i8*, i8** %data, align 8, !tbaa !13
  call void %1(i8* %3, i8* %5)
  %6 = load %struct.avl_tree_t*, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %7 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %node.addr, align 8, !tbaa !2
  %left = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %7, i32 0, i32 0
  %8 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %left, align 8, !tbaa !14
  %9 = load void (i8*, i8*)*, void (i8*, i8*)** %visitor.addr, align 8, !tbaa !2
  call void @avl_destroy_helper(%struct.avl_tree_t* %6, %struct.avl_tree_node_t* %8, void (i8*, i8*)* %9)
  %10 = load %struct.avl_tree_t*, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %11 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %node.addr, align 8, !tbaa !2
  %right = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %11, i32 0, i32 1
  %12 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %right, align 8, !tbaa !15
  %13 = load void (i8*, i8*)*, void (i8*, i8*)** %visitor.addr, align 8, !tbaa !2
  call void @avl_destroy_helper(%struct.avl_tree_t* %10, %struct.avl_tree_node_t* %12, void (i8*, i8*)* %13)
  %14 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %node.addr, align 8, !tbaa !2
  %15 = bitcast %struct.avl_tree_node_t* %14 to i8*
  call void @free(i8* %15)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i8* @avl_search(%struct.avl_tree_t* %tree, i8* %key) #0 {
entry:
  %retval = alloca i8*, align 8
  %tree.addr = alloca %struct.avl_tree_t*, align 8
  %key.addr = alloca i8*, align 8
  %node = alloca %struct.avl_tree_node_t*, align 8
  %cmp = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.avl_tree_t* %tree, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  store i8* %key, i8** %key.addr, align 8, !tbaa !2
  %0 = bitcast %struct.avl_tree_node_t** %node to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #4
  %1 = load %struct.avl_tree_t*, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %root = getelementptr inbounds %struct.avl_tree_t, %struct.avl_tree_t* %1, i32 0, i32 0
  %2 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %root, align 8, !tbaa !9
  store %struct.avl_tree_node_t* %2, %struct.avl_tree_node_t** %node, align 8, !tbaa !2
  %3 = bitcast i32* %cmp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #4
  br label %while.cond

while.cond:                                       ; preds = %if.end6, %entry
  %4 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %node, align 8, !tbaa !2
  %tobool = icmp ne %struct.avl_tree_node_t* %4, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct.avl_tree_t*, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %comparator = getelementptr inbounds %struct.avl_tree_t, %struct.avl_tree_t* %5, i32 0, i32 1
  %6 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %comparator, align 8, !tbaa !6
  %7 = load i8*, i8** %key.addr, align 8, !tbaa !2
  %8 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %node, align 8, !tbaa !2
  %key1 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %8, i32 0, i32 3
  %9 = load i8*, i8** %key1, align 8, !tbaa !10
  %call = call i32 %6(i8* %7, i8* %9)
  store i32 %call, i32* %cmp, align 4, !tbaa !16
  %10 = load i32, i32* %cmp, align 4, !tbaa !16
  %cmp2 = icmp eq i32 %10, 0
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %11 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %node, align 8, !tbaa !2
  %data = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %11, i32 0, i32 4
  %12 = load i8*, i8** %data, align 8, !tbaa !13
  store i8* %12, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %while.body
  %13 = load i32, i32* %cmp, align 4, !tbaa !16
  %cmp3 = icmp slt i32 %13, 0
  br i1 %cmp3, label %if.then4, label %if.else5

if.then4:                                         ; preds = %if.else
  %14 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %node, align 8, !tbaa !2
  %left = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %14, i32 0, i32 0
  %15 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %left, align 8, !tbaa !14
  store %struct.avl_tree_node_t* %15, %struct.avl_tree_node_t** %node, align 8, !tbaa !2
  br label %if.end

if.else5:                                         ; preds = %if.else
  %16 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %node, align 8, !tbaa !2
  %right = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %16, i32 0, i32 1
  %17 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %right, align 8, !tbaa !15
  store %struct.avl_tree_node_t* %17, %struct.avl_tree_node_t** %node, align 8, !tbaa !2
  br label %if.end

if.end:                                           ; preds = %if.else5, %if.then4
  br label %if.end6

if.end6:                                          ; preds = %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then
  %18 = bitcast i32* %cmp to i8*
  call void @llvm.lifetime.end(i64 4, i8* %18) #4
  %19 = bitcast %struct.avl_tree_node_t** %node to i8*
  call void @llvm.lifetime.end(i64 8, i8* %19) #4
  %20 = load i8*, i8** %retval, align 8
  ret i8* %20
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define i8* @avl_insert(%struct.avl_tree_t* %tree, i8* %key, i8* %data) #0 {
entry:
  %tree.addr = alloca %struct.avl_tree_t*, align 8
  %key.addr = alloca i8*, align 8
  %data.addr = alloca i8*, align 8
  store %struct.avl_tree_t* %tree, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  store i8* %key, i8** %key.addr, align 8, !tbaa !2
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  %0 = load %struct.avl_tree_t*, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %1 = load %struct.avl_tree_t*, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %root = getelementptr inbounds %struct.avl_tree_t, %struct.avl_tree_t* %1, i32 0, i32 0
  %2 = load i8*, i8** %key.addr, align 8, !tbaa !2
  %3 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %call = call i8* @avl_insert_helper(%struct.avl_tree_t* %0, %struct.avl_tree_node_t** %root, i8* %2, i8* %3)
  ret i8* %call
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @avl_insert_helper(%struct.avl_tree_t* %tree, %struct.avl_tree_node_t** %node, i8* %key, i8* %data) #0 {
entry:
  %retval = alloca i8*, align 8
  %tree.addr = alloca %struct.avl_tree_t*, align 8
  %node.addr = alloca %struct.avl_tree_node_t**, align 8
  %key.addr = alloca i8*, align 8
  %data.addr = alloca i8*, align 8
  %cmp = alloca i32, align 4
  %ret = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  %old = alloca i8*, align 8
  store %struct.avl_tree_t* %tree, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  store %struct.avl_tree_node_t** %node, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  store i8* %key, i8** %key.addr, align 8, !tbaa !2
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  %0 = bitcast i32* %cmp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #4
  %1 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #4
  %2 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %3 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %2, align 8, !tbaa !2
  %tobool = icmp ne %struct.avl_tree_node_t* %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call i8* @malloc(i64 40) #5
  %4 = bitcast i8* %call to %struct.avl_tree_node_t*
  %5 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  store %struct.avl_tree_node_t* %4, %struct.avl_tree_node_t** %5, align 8, !tbaa !2
  %6 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %7 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %6, align 8, !tbaa !2
  %depth = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %7, i32 0, i32 2
  store i32 1, i32* %depth, align 8, !tbaa !17
  %8 = load i8*, i8** %key.addr, align 8, !tbaa !2
  %9 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %10 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %9, align 8, !tbaa !2
  %key1 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %10, i32 0, i32 3
  store i8* %8, i8** %key1, align 8, !tbaa !10
  %11 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %12 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %13 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %12, align 8, !tbaa !2
  %data2 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %13, i32 0, i32 4
  store i8* %11, i8** %data2, align 8, !tbaa !13
  %14 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %15 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %14, align 8, !tbaa !2
  %right = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %15, i32 0, i32 1
  store %struct.avl_tree_node_t* null, %struct.avl_tree_node_t** %right, align 8, !tbaa !15
  %16 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %17 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %16, align 8, !tbaa !2
  %left = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %17, i32 0, i32 0
  store %struct.avl_tree_node_t* null, %struct.avl_tree_node_t** %left, align 8, !tbaa !14
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %18 = load %struct.avl_tree_t*, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %comparator = getelementptr inbounds %struct.avl_tree_t, %struct.avl_tree_t* %18, i32 0, i32 1
  %19 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %comparator, align 8, !tbaa !6
  %20 = load i8*, i8** %key.addr, align 8, !tbaa !2
  %21 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %22 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %21, align 8, !tbaa !2
  %key3 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %22, i32 0, i32 3
  %23 = load i8*, i8** %key3, align 8, !tbaa !10
  %call4 = call i32 %19(i8* %20, i8* %23)
  store i32 %call4, i32* %cmp, align 4, !tbaa !16
  %24 = load i32, i32* %cmp, align 4, !tbaa !16
  %cmp5 = icmp eq i32 %24, 0
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end
  %25 = bitcast i8** %old to i8*
  call void @llvm.lifetime.start(i64 8, i8* %25) #4
  %26 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %27 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %26, align 8, !tbaa !2
  %data7 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %27, i32 0, i32 4
  %28 = load i8*, i8** %data7, align 8, !tbaa !13
  store i8* %28, i8** %old, align 8, !tbaa !2
  %29 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %30 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %31 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %30, align 8, !tbaa !2
  %data8 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %31, i32 0, i32 4
  store i8* %29, i8** %data8, align 8, !tbaa !13
  %32 = load %struct.avl_tree_t*, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %destructor = getelementptr inbounds %struct.avl_tree_t, %struct.avl_tree_t* %32, i32 0, i32 2
  %33 = load void (i8*)*, void (i8*)** %destructor, align 8, !tbaa !8
  %tobool9 = icmp ne void (i8*)* %33, null
  br i1 %tobool9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.then6
  %34 = load %struct.avl_tree_t*, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %destructor11 = getelementptr inbounds %struct.avl_tree_t, %struct.avl_tree_t* %34, i32 0, i32 2
  %35 = load void (i8*)*, void (i8*)** %destructor11, align 8, !tbaa !8
  %36 = load i8*, i8** %key.addr, align 8, !tbaa !2
  call void %35(i8* %36)
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.then6
  %37 = load i8*, i8** %old, align 8, !tbaa !2
  store i8* %37, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  %38 = bitcast i8** %old to i8*
  call void @llvm.lifetime.end(i64 8, i8* %38) #4
  br label %cleanup

if.else:                                          ; preds = %if.end
  %39 = load i32, i32* %cmp, align 4, !tbaa !16
  %cmp13 = icmp slt i32 %39, 0
  br i1 %cmp13, label %if.then14, label %if.else17

if.then14:                                        ; preds = %if.else
  %40 = load %struct.avl_tree_t*, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %41 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %42 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %41, align 8, !tbaa !2
  %left15 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %42, i32 0, i32 0
  %43 = load i8*, i8** %key.addr, align 8, !tbaa !2
  %44 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %call16 = call i8* @avl_insert_helper(%struct.avl_tree_t* %40, %struct.avl_tree_node_t** %left15, i8* %43, i8* %44)
  store i8* %call16, i8** %ret, align 8, !tbaa !2
  br label %if.end20

if.else17:                                        ; preds = %if.else
  %45 = load %struct.avl_tree_t*, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %46 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %47 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %46, align 8, !tbaa !2
  %right18 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %47, i32 0, i32 1
  %48 = load i8*, i8** %key.addr, align 8, !tbaa !2
  %49 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %call19 = call i8* @avl_insert_helper(%struct.avl_tree_t* %45, %struct.avl_tree_node_t** %right18, i8* %48, i8* %49)
  store i8* %call19, i8** %ret, align 8, !tbaa !2
  br label %if.end20

if.end20:                                         ; preds = %if.else17, %if.then14
  br label %if.end21

if.end21:                                         ; preds = %if.end20
  %50 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  call void @avl_rebalance(%struct.avl_tree_node_t** %50)
  %51 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %52 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %51, align 8, !tbaa !2
  call void @avl_update_depth(%struct.avl_tree_node_t* %52)
  %53 = load i8*, i8** %ret, align 8, !tbaa !2
  store i8* %53, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end21, %if.end12, %if.then
  %54 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.end(i64 8, i8* %54) #4
  %55 = bitcast i32* %cmp to i8*
  call void @llvm.lifetime.end(i64 4, i8* %55) #4
  %56 = load i8*, i8** %retval, align 8
  ret i8* %56
}

; Function Attrs: nounwind ssp uwtable
define i8* @avl_remove(%struct.avl_tree_t* %tree, i8* %key) #0 {
entry:
  %tree.addr = alloca %struct.avl_tree_t*, align 8
  %key.addr = alloca i8*, align 8
  store %struct.avl_tree_t* %tree, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  store i8* %key, i8** %key.addr, align 8, !tbaa !2
  %0 = load %struct.avl_tree_t*, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %1 = load %struct.avl_tree_t*, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %root = getelementptr inbounds %struct.avl_tree_t, %struct.avl_tree_t* %1, i32 0, i32 0
  %2 = load i8*, i8** %key.addr, align 8, !tbaa !2
  %call = call i8* @avl_remove_helper(%struct.avl_tree_t* %0, %struct.avl_tree_node_t** %root, i8* %2)
  ret i8* %call
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @avl_remove_helper(%struct.avl_tree_t* %tree, %struct.avl_tree_node_t** %node, i8* %key) #0 {
entry:
  %retval = alloca i8*, align 8
  %tree.addr = alloca %struct.avl_tree_t*, align 8
  %node.addr = alloca %struct.avl_tree_node_t**, align 8
  %key.addr = alloca i8*, align 8
  %cmp = alloca i32, align 4
  %ret = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  %y = alloca %struct.avl_tree_node_t**, align 8
  %p = alloca %struct.avl_tree_node_t*, align 8
  store %struct.avl_tree_t* %tree, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  store %struct.avl_tree_node_t** %node, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  store i8* %key, i8** %key.addr, align 8, !tbaa !2
  %0 = bitcast i32* %cmp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #4
  %1 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #4
  %2 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %3 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %2, align 8, !tbaa !2
  %tobool = icmp ne %struct.avl_tree_node_t* %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %4 = load %struct.avl_tree_t*, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %comparator = getelementptr inbounds %struct.avl_tree_t, %struct.avl_tree_t* %4, i32 0, i32 1
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %comparator, align 8, !tbaa !6
  %6 = load i8*, i8** %key.addr, align 8, !tbaa !2
  %7 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %8 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %7, align 8, !tbaa !2
  %key1 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %8, i32 0, i32 3
  %9 = load i8*, i8** %key1, align 8, !tbaa !10
  %call = call i32 %5(i8* %6, i8* %9)
  store i32 %call, i32* %cmp, align 4, !tbaa !16
  %10 = load i32, i32* %cmp, align 4, !tbaa !16
  %cmp2 = icmp slt i32 %10, 0
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %11 = load %struct.avl_tree_t*, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %12 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %13 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %12, align 8, !tbaa !2
  %left = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %13, i32 0, i32 0
  %14 = load i8*, i8** %key.addr, align 8, !tbaa !2
  %call4 = call i8* @avl_remove_helper(%struct.avl_tree_t* %11, %struct.avl_tree_node_t** %left, i8* %14)
  store i8* %call4, i8** %ret, align 8, !tbaa !2
  br label %if.end44

if.else:                                          ; preds = %if.end
  %15 = load i32, i32* %cmp, align 4, !tbaa !16
  %cmp5 = icmp sgt i32 %15, 0
  br i1 %cmp5, label %if.then6, label %if.else8

if.then6:                                         ; preds = %if.else
  %16 = load %struct.avl_tree_t*, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %17 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %18 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %17, align 8, !tbaa !2
  %right = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %18, i32 0, i32 1
  %19 = load i8*, i8** %key.addr, align 8, !tbaa !2
  %call7 = call i8* @avl_remove_helper(%struct.avl_tree_t* %16, %struct.avl_tree_node_t** %right, i8* %19)
  store i8* %call7, i8** %ret, align 8, !tbaa !2
  br label %if.end43

if.else8:                                         ; preds = %if.else
  %20 = bitcast %struct.avl_tree_node_t*** %y to i8*
  call void @llvm.lifetime.start(i64 8, i8* %20) #4
  %21 = bitcast %struct.avl_tree_node_t** %p to i8*
  call void @llvm.lifetime.start(i64 8, i8* %21) #4
  store %struct.avl_tree_node_t* null, %struct.avl_tree_node_t** %p, align 8, !tbaa !2
  %22 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %23 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %22, align 8, !tbaa !2
  %data = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %23, i32 0, i32 4
  %24 = load i8*, i8** %data, align 8, !tbaa !13
  store i8* %24, i8** %ret, align 8, !tbaa !2
  %25 = load %struct.avl_tree_t*, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %destructor = getelementptr inbounds %struct.avl_tree_t, %struct.avl_tree_t* %25, i32 0, i32 2
  %26 = load void (i8*)*, void (i8*)** %destructor, align 8, !tbaa !8
  %tobool9 = icmp ne void (i8*)* %26, null
  br i1 %tobool9, label %if.then10, label %if.end13

if.then10:                                        ; preds = %if.else8
  %27 = load %struct.avl_tree_t*, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %destructor11 = getelementptr inbounds %struct.avl_tree_t, %struct.avl_tree_t* %27, i32 0, i32 2
  %28 = load void (i8*)*, void (i8*)** %destructor11, align 8, !tbaa !8
  %29 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %30 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %29, align 8, !tbaa !2
  %key12 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %30, i32 0, i32 3
  %31 = load i8*, i8** %key12, align 8, !tbaa !10
  call void %28(i8* %31)
  br label %if.end13

if.end13:                                         ; preds = %if.then10, %if.else8
  %32 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %33 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %32, align 8, !tbaa !2
  %left14 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %33, i32 0, i32 0
  %34 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %left14, align 8, !tbaa !14
  %tobool15 = icmp ne %struct.avl_tree_node_t* %34, null
  br i1 %tobool15, label %land.lhs.true, label %if.else29

land.lhs.true:                                    ; preds = %if.end13
  %35 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %36 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %35, align 8, !tbaa !2
  %right16 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %36, i32 0, i32 1
  %37 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %right16, align 8, !tbaa !15
  %tobool17 = icmp ne %struct.avl_tree_node_t* %37, null
  br i1 %tobool17, label %if.then18, label %if.else29

if.then18:                                        ; preds = %land.lhs.true
  %38 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %39 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %38, align 8, !tbaa !2
  %left19 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %39, i32 0, i32 0
  store %struct.avl_tree_node_t** %left19, %struct.avl_tree_node_t*** %y, align 8, !tbaa !2
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then18
  %40 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %y, align 8, !tbaa !2
  %41 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %40, align 8, !tbaa !2
  %right20 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %41, i32 0, i32 1
  %42 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %right20, align 8, !tbaa !15
  %tobool21 = icmp ne %struct.avl_tree_node_t* %42, null
  br i1 %tobool21, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %43 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %y, align 8, !tbaa !2
  %44 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %43, align 8, !tbaa !2
  %right22 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %44, i32 0, i32 1
  store %struct.avl_tree_node_t** %right22, %struct.avl_tree_node_t*** %y, align 8, !tbaa !2
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %45 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %y, align 8, !tbaa !2
  %46 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %45, align 8, !tbaa !2
  %key23 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %46, i32 0, i32 3
  %47 = load i8*, i8** %key23, align 8, !tbaa !10
  %48 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %49 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %48, align 8, !tbaa !2
  %key24 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %49, i32 0, i32 3
  store i8* %47, i8** %key24, align 8, !tbaa !10
  %50 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %y, align 8, !tbaa !2
  %51 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %50, align 8, !tbaa !2
  %data25 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %51, i32 0, i32 4
  %52 = load i8*, i8** %data25, align 8, !tbaa !13
  %53 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %54 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %53, align 8, !tbaa !2
  %data26 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %54, i32 0, i32 4
  store i8* %52, i8** %data26, align 8, !tbaa !13
  %55 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %y, align 8, !tbaa !2
  %56 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %55, align 8, !tbaa !2
  %left27 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %56, i32 0, i32 0
  %57 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %left27, align 8, !tbaa !14
  store %struct.avl_tree_node_t* %57, %struct.avl_tree_node_t** %p, align 8, !tbaa !2
  %58 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %y, align 8, !tbaa !2
  %59 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %58, align 8, !tbaa !2
  %60 = bitcast %struct.avl_tree_node_t* %59 to i8*
  call void @free(i8* %60)
  %61 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %p, align 8, !tbaa !2
  %62 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %y, align 8, !tbaa !2
  store %struct.avl_tree_node_t* %61, %struct.avl_tree_node_t** %62, align 8, !tbaa !2
  %63 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %64 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %63, align 8, !tbaa !2
  %left28 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %64, i32 0, i32 0
  %65 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %left28, align 8, !tbaa !14
  call void @avl_remove_depth_helper(%struct.avl_tree_node_t* %65)
  br label %if.end42

if.else29:                                        ; preds = %land.lhs.true, %if.end13
  %66 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %67 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %66, align 8, !tbaa !2
  %left30 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %67, i32 0, i32 0
  %68 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %left30, align 8, !tbaa !14
  %tobool31 = icmp ne %struct.avl_tree_node_t* %68, null
  br i1 %tobool31, label %if.then32, label %if.else34

if.then32:                                        ; preds = %if.else29
  %69 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %70 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %69, align 8, !tbaa !2
  %left33 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %70, i32 0, i32 0
  %71 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %left33, align 8, !tbaa !14
  store %struct.avl_tree_node_t* %71, %struct.avl_tree_node_t** %p, align 8, !tbaa !2
  %72 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %73 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %72, align 8, !tbaa !2
  %74 = bitcast %struct.avl_tree_node_t* %73 to i8*
  call void @free(i8* %74)
  %75 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %p, align 8, !tbaa !2
  %76 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  store %struct.avl_tree_node_t* %75, %struct.avl_tree_node_t** %76, align 8, !tbaa !2
  br label %if.end41

if.else34:                                        ; preds = %if.else29
  %77 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %78 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %77, align 8, !tbaa !2
  %right35 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %78, i32 0, i32 1
  %79 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %right35, align 8, !tbaa !15
  %tobool36 = icmp ne %struct.avl_tree_node_t* %79, null
  br i1 %tobool36, label %if.then37, label %if.else39

if.then37:                                        ; preds = %if.else34
  %80 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %81 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %80, align 8, !tbaa !2
  %right38 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %81, i32 0, i32 1
  %82 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %right38, align 8, !tbaa !15
  store %struct.avl_tree_node_t* %82, %struct.avl_tree_node_t** %p, align 8, !tbaa !2
  %83 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %84 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %83, align 8, !tbaa !2
  %85 = bitcast %struct.avl_tree_node_t* %84 to i8*
  call void @free(i8* %85)
  %86 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %p, align 8, !tbaa !2
  %87 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  store %struct.avl_tree_node_t* %86, %struct.avl_tree_node_t** %87, align 8, !tbaa !2
  br label %if.end40

if.else39:                                        ; preds = %if.else34
  %88 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %89 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %88, align 8, !tbaa !2
  %90 = bitcast %struct.avl_tree_node_t* %89 to i8*
  call void @free(i8* %90)
  %91 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  store %struct.avl_tree_node_t* null, %struct.avl_tree_node_t** %91, align 8, !tbaa !2
  br label %if.end40

if.end40:                                         ; preds = %if.else39, %if.then37
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.then32
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %while.end
  %92 = bitcast %struct.avl_tree_node_t** %p to i8*
  call void @llvm.lifetime.end(i64 8, i8* %92) #4
  %93 = bitcast %struct.avl_tree_node_t*** %y to i8*
  call void @llvm.lifetime.end(i64 8, i8* %93) #4
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.then6
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.then3
  %94 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %95 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %94, align 8, !tbaa !2
  %tobool45 = icmp ne %struct.avl_tree_node_t* %95, null
  br i1 %tobool45, label %if.then46, label %if.end47

if.then46:                                        ; preds = %if.end44
  %96 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %97 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %96, align 8, !tbaa !2
  call void @avl_update_depth(%struct.avl_tree_node_t* %97)
  %98 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  call void @avl_rebalance(%struct.avl_tree_node_t** %98)
  br label %if.end47

if.end47:                                         ; preds = %if.then46, %if.end44
  %99 = load i8*, i8** %ret, align 8, !tbaa !2
  store i8* %99, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end47, %if.then
  %100 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.end(i64 8, i8* %100) #4
  %101 = bitcast i32* %cmp to i8*
  call void @llvm.lifetime.end(i64 4, i8* %101) #4
  %102 = load i8*, i8** %retval, align 8
  ret i8* %102
}

; Function Attrs: nounwind ssp uwtable
define i32 @avl_tree_depth(%struct.avl_tree_t* %tree) #0 {
entry:
  %retval = alloca i32, align 4
  %tree.addr = alloca %struct.avl_tree_t*, align 8
  store %struct.avl_tree_t* %tree, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %0 = load %struct.avl_tree_t*, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %root = getelementptr inbounds %struct.avl_tree_t, %struct.avl_tree_t* %0, i32 0, i32 0
  %1 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %root, align 8, !tbaa !9
  %tobool = icmp ne %struct.avl_tree_node_t* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.avl_tree_t*, %struct.avl_tree_t** %tree.addr, align 8, !tbaa !2
  %root1 = getelementptr inbounds %struct.avl_tree_t, %struct.avl_tree_t* %2, i32 0, i32 0
  %3 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %root1, align 8, !tbaa !9
  %depth = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %3, i32 0, i32 2
  %4 = load i32, i32* %depth, align 8, !tbaa !17
  store i32 %4, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define i32 @avl_ptrcmp(i8* %key1, i8* %key2) #0 {
entry:
  %retval = alloca i32, align 4
  %key1.addr = alloca i8*, align 8
  %key2.addr = alloca i8*, align 8
  store i8* %key1, i8** %key1.addr, align 8, !tbaa !2
  store i8* %key2, i8** %key2.addr, align 8, !tbaa !2
  %0 = load i8*, i8** %key1.addr, align 8, !tbaa !2
  %1 = load i8*, i8** %key2.addr, align 8, !tbaa !2
  %cmp = icmp ult i8* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %2 = load i8*, i8** %key1.addr, align 8, !tbaa !2
  %3 = load i8*, i8** %key2.addr, align 8, !tbaa !2
  %cmp1 = icmp ugt i8* %2, %3
  br i1 %cmp1, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.else
  store i32 1, i32* %retval, align 4
  br label %return

if.else3:                                         ; preds = %if.else
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else3, %if.then2, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define i32 @avl_intcmp(i8* %key1, i8* %key2) #0 {
entry:
  %retval = alloca i32, align 4
  %key1.addr = alloca i8*, align 8
  %key2.addr = alloca i8*, align 8
  %val1 = alloca i32, align 4
  %val2 = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store i8* %key1, i8** %key1.addr, align 8, !tbaa !2
  store i8* %key2, i8** %key2.addr, align 8, !tbaa !2
  %0 = bitcast i32* %val1 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #4
  %1 = load i8*, i8** %key1.addr, align 8, !tbaa !2
  %2 = bitcast i8* %1 to i32*
  %3 = load i32, i32* %2, align 4, !tbaa !16
  store i32 %3, i32* %val1, align 4, !tbaa !16
  %4 = bitcast i32* %val2 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #4
  %5 = load i8*, i8** %key2.addr, align 8, !tbaa !2
  %6 = bitcast i8* %5 to i32*
  %7 = load i32, i32* %6, align 4, !tbaa !16
  store i32 %7, i32* %val2, align 4, !tbaa !16
  %8 = load i32, i32* %val1, align 4, !tbaa !16
  %9 = load i32, i32* %val2, align 4, !tbaa !16
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %entry
  %10 = load i32, i32* %val1, align 4, !tbaa !16
  %11 = load i32, i32* %val2, align 4, !tbaa !16
  %cmp1 = icmp sgt i32 %10, %11
  br i1 %cmp1, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.else
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else3:                                         ; preds = %if.else
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.else3, %if.then2, %if.then
  %12 = bitcast i32* %val2 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %12) #4
  %13 = bitcast i32* %val1 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %13) #4
  %14 = load i32, i32* %retval, align 4
  ret i32 %14
}

; Function Attrs: nounwind ssp uwtable
define i32 @avl_ulongcmp(i8* %key1, i8* %key2) #0 {
entry:
  %retval = alloca i32, align 4
  %key1.addr = alloca i8*, align 8
  %key2.addr = alloca i8*, align 8
  %val1 = alloca i64, align 8
  %val2 = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store i8* %key1, i8** %key1.addr, align 8, !tbaa !2
  store i8* %key2, i8** %key2.addr, align 8, !tbaa !2
  %0 = bitcast i64* %val1 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #4
  %1 = load i8*, i8** %key1.addr, align 8, !tbaa !2
  %2 = bitcast i8* %1 to i32*
  %3 = load i32, i32* %2, align 4, !tbaa !16
  %conv = sext i32 %3 to i64
  store i64 %conv, i64* %val1, align 8, !tbaa !18
  %4 = bitcast i64* %val2 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #4
  %5 = load i8*, i8** %key2.addr, align 8, !tbaa !2
  %6 = bitcast i8* %5 to i32*
  %7 = load i32, i32* %6, align 4, !tbaa !16
  %conv1 = sext i32 %7 to i64
  store i64 %conv1, i64* %val2, align 8, !tbaa !18
  %8 = load i64, i64* %val1, align 8, !tbaa !18
  %9 = load i64, i64* %val2, align 8, !tbaa !18
  %cmp = icmp ult i64 %8, %9
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %entry
  %10 = load i64, i64* %val1, align 8, !tbaa !18
  %11 = load i64, i64* %val2, align 8, !tbaa !18
  %cmp3 = icmp ugt i64 %10, %11
  br i1 %cmp3, label %if.then5, label %if.else6

if.then5:                                         ; preds = %if.else
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else6:                                         ; preds = %if.else
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.else6, %if.then5, %if.then
  %12 = bitcast i64* %val2 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %12) #4
  %13 = bitcast i64* %val1 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %13) #4
  %14 = load i32, i32* %retval, align 4
  ret i32 %14
}

; Function Attrs: nounwind ssp uwtable
define void @avl_free_data(i8* %key, i8* %data) #0 {
entry:
  %key.addr = alloca i8*, align 8
  %data.addr = alloca i8*, align 8
  store i8* %key, i8** %key.addr, align 8, !tbaa !2
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  %0 = load i8*, i8** %key.addr, align 8, !tbaa !2
  call void @free(i8* %0)
  %1 = load i8*, i8** %data.addr, align 8, !tbaa !2
  call void @free(i8* %1)
  ret void
}

declare void @free(i8*) #2

; Function Attrs: allocsize(0)
declare i8* @malloc(i64) #3

; Function Attrs: nounwind ssp uwtable
define internal void @avl_rebalance(%struct.avl_tree_node_t** %node) #0 {
entry:
  %node.addr = alloca %struct.avl_tree_node_t**, align 8
  %delta = alloca i32, align 4
  store %struct.avl_tree_node_t** %node, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %0 = bitcast i32* %delta to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #4
  %1 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %2 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %1, align 8, !tbaa !2
  %call = call i32 @avl_balance_factor(%struct.avl_tree_node_t* %2)
  store i32 %call, i32* %delta, align 4, !tbaa !16
  %3 = load i32, i32* %delta, align 4, !tbaa !16
  %cmp = icmp eq i32 %3, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %5 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %4, align 8, !tbaa !2
  %left = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %5, i32 0, i32 0
  %6 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %left, align 8, !tbaa !14
  %call1 = call i32 @avl_balance_factor(%struct.avl_tree_node_t* %6)
  %cmp2 = icmp slt i32 %call1, 0
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  %7 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %8 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %7, align 8, !tbaa !2
  %left4 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %8, i32 0, i32 0
  call void @avl_rotate(%struct.avl_tree_node_t** %left4, i32 0)
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.then
  %9 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  call void @avl_rotate(%struct.avl_tree_node_t** %9, i32 1)
  br label %if.end13

if.else:                                          ; preds = %entry
  %10 = load i32, i32* %delta, align 4, !tbaa !16
  %cmp5 = icmp eq i32 %10, -2
  br i1 %cmp5, label %if.then6, label %if.end12

if.then6:                                         ; preds = %if.else
  %11 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %12 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %11, align 8, !tbaa !2
  %right = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %12, i32 0, i32 1
  %13 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %right, align 8, !tbaa !15
  %call7 = call i32 @avl_balance_factor(%struct.avl_tree_node_t* %13)
  %cmp8 = icmp sgt i32 %call7, 0
  br i1 %cmp8, label %if.then9, label %if.end11

if.then9:                                         ; preds = %if.then6
  %14 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %15 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %14, align 8, !tbaa !2
  %right10 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %15, i32 0, i32 1
  call void @avl_rotate(%struct.avl_tree_node_t** %right10, i32 1)
  br label %if.end11

if.end11:                                         ; preds = %if.then9, %if.then6
  %16 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  call void @avl_rotate(%struct.avl_tree_node_t** %16, i32 0)
  br label %if.end12

if.end12:                                         ; preds = %if.end11, %if.else
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.end
  %17 = bitcast i32* %delta to i8*
  call void @llvm.lifetime.end(i64 4, i8* %17) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @avl_update_depth(%struct.avl_tree_node_t* %ptr) #0 {
entry:
  %ptr.addr = alloca %struct.avl_tree_node_t*, align 8
  store %struct.avl_tree_node_t* %ptr, %struct.avl_tree_node_t** %ptr.addr, align 8, !tbaa !2
  %0 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %ptr.addr, align 8, !tbaa !2
  %depth = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %0, i32 0, i32 2
  store i32 1, i32* %depth, align 8, !tbaa !17
  %1 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %ptr.addr, align 8, !tbaa !2
  %left = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %1, i32 0, i32 0
  %2 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %left, align 8, !tbaa !14
  %tobool = icmp ne %struct.avl_tree_node_t* %2, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %ptr.addr, align 8, !tbaa !2
  %left1 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %3, i32 0, i32 0
  %4 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %left1, align 8, !tbaa !14
  %depth2 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %4, i32 0, i32 2
  %5 = load i32, i32* %depth2, align 8, !tbaa !17
  %6 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %ptr.addr, align 8, !tbaa !2
  %depth3 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %6, i32 0, i32 2
  store i32 %5, i32* %depth3, align 8, !tbaa !17
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %ptr.addr, align 8, !tbaa !2
  %right = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %7, i32 0, i32 1
  %8 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %right, align 8, !tbaa !15
  %tobool4 = icmp ne %struct.avl_tree_node_t* %8, null
  br i1 %tobool4, label %land.lhs.true, label %if.end12

land.lhs.true:                                    ; preds = %if.end
  %9 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %ptr.addr, align 8, !tbaa !2
  %depth5 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %9, i32 0, i32 2
  %10 = load i32, i32* %depth5, align 8, !tbaa !17
  %11 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %ptr.addr, align 8, !tbaa !2
  %right6 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %11, i32 0, i32 1
  %12 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %right6, align 8, !tbaa !15
  %depth7 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %12, i32 0, i32 2
  %13 = load i32, i32* %depth7, align 8, !tbaa !17
  %cmp = icmp slt i32 %10, %13
  br i1 %cmp, label %if.then8, label %if.end12

if.then8:                                         ; preds = %land.lhs.true
  %14 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %ptr.addr, align 8, !tbaa !2
  %right9 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %14, i32 0, i32 1
  %15 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %right9, align 8, !tbaa !15
  %depth10 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %15, i32 0, i32 2
  %16 = load i32, i32* %depth10, align 8, !tbaa !17
  %17 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %ptr.addr, align 8, !tbaa !2
  %depth11 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %17, i32 0, i32 2
  store i32 %16, i32* %depth11, align 8, !tbaa !17
  br label %if.end12

if.end12:                                         ; preds = %if.then8, %land.lhs.true, %if.end
  %18 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %ptr.addr, align 8, !tbaa !2
  %depth13 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %18, i32 0, i32 2
  %19 = load i32, i32* %depth13, align 8, !tbaa !17
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %depth13, align 8, !tbaa !17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @avl_balance_factor(%struct.avl_tree_node_t* %ptr) #0 {
entry:
  %ptr.addr = alloca %struct.avl_tree_node_t*, align 8
  %delta = alloca i32, align 4
  store %struct.avl_tree_node_t* %ptr, %struct.avl_tree_node_t** %ptr.addr, align 8, !tbaa !2
  %0 = bitcast i32* %delta to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #4
  store i32 0, i32* %delta, align 4, !tbaa !16
  %1 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %ptr.addr, align 8, !tbaa !2
  %left = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %1, i32 0, i32 0
  %2 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %left, align 8, !tbaa !14
  %tobool = icmp ne %struct.avl_tree_node_t* %2, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %ptr.addr, align 8, !tbaa !2
  %left1 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %3, i32 0, i32 0
  %4 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %left1, align 8, !tbaa !14
  %depth = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %4, i32 0, i32 2
  %5 = load i32, i32* %depth, align 8, !tbaa !17
  store i32 %5, i32* %delta, align 4, !tbaa !16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %ptr.addr, align 8, !tbaa !2
  %right = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %6, i32 0, i32 1
  %7 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %right, align 8, !tbaa !15
  %tobool2 = icmp ne %struct.avl_tree_node_t* %7, null
  br i1 %tobool2, label %if.then3, label %if.end6

if.then3:                                         ; preds = %if.end
  %8 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %ptr.addr, align 8, !tbaa !2
  %right4 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %8, i32 0, i32 1
  %9 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %right4, align 8, !tbaa !15
  %depth5 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %9, i32 0, i32 2
  %10 = load i32, i32* %depth5, align 8, !tbaa !17
  %11 = load i32, i32* %delta, align 4, !tbaa !16
  %sub = sub nsw i32 %11, %10
  store i32 %sub, i32* %delta, align 4, !tbaa !16
  br label %if.end6

if.end6:                                          ; preds = %if.then3, %if.end
  %12 = load i32, i32* %delta, align 4, !tbaa !16
  %13 = bitcast i32* %delta to i8*
  call void @llvm.lifetime.end(i64 4, i8* %13) #4
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define internal void @avl_rotate(%struct.avl_tree_node_t** %node, i32 %dir) #0 {
entry:
  %node.addr = alloca %struct.avl_tree_node_t**, align 8
  %dir.addr = alloca i32, align 4
  %ch = alloca %struct.avl_tree_node_t*, align 8
  store %struct.avl_tree_node_t** %node, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  store i32 %dir, i32* %dir.addr, align 4, !tbaa !16
  %0 = bitcast %struct.avl_tree_node_t** %ch to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #4
  %1 = load i32, i32* %dir.addr, align 4, !tbaa !16
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %3 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %2, align 8, !tbaa !2
  %right = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %3, i32 0, i32 1
  %4 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %right, align 8, !tbaa !15
  store %struct.avl_tree_node_t* %4, %struct.avl_tree_node_t** %ch, align 8, !tbaa !2
  %5 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %6 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %5, align 8, !tbaa !2
  %right1 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %6, i32 0, i32 1
  %7 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %right1, align 8, !tbaa !15
  %left = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %7, i32 0, i32 0
  %8 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %left, align 8, !tbaa !14
  %9 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %10 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %9, align 8, !tbaa !2
  %right2 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %10, i32 0, i32 1
  store %struct.avl_tree_node_t* %8, %struct.avl_tree_node_t** %right2, align 8, !tbaa !15
  %11 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %12 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %11, align 8, !tbaa !2
  %13 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %ch, align 8, !tbaa !2
  %left3 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %13, i32 0, i32 0
  store %struct.avl_tree_node_t* %12, %struct.avl_tree_node_t** %left3, align 8, !tbaa !14
  %14 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %15 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %14, align 8, !tbaa !2
  call void @avl_update_depth(%struct.avl_tree_node_t* %15)
  %16 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %ch, align 8, !tbaa !2
  %17 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  store %struct.avl_tree_node_t* %16, %struct.avl_tree_node_t** %17, align 8, !tbaa !2
  br label %if.end

if.else:                                          ; preds = %entry
  %18 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %19 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %18, align 8, !tbaa !2
  %left4 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %19, i32 0, i32 0
  %20 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %left4, align 8, !tbaa !14
  store %struct.avl_tree_node_t* %20, %struct.avl_tree_node_t** %ch, align 8, !tbaa !2
  %21 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %22 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %21, align 8, !tbaa !2
  %left5 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %22, i32 0, i32 0
  %23 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %left5, align 8, !tbaa !14
  %right6 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %23, i32 0, i32 1
  %24 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %right6, align 8, !tbaa !15
  %25 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %26 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %25, align 8, !tbaa !2
  %left7 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %26, i32 0, i32 0
  store %struct.avl_tree_node_t* %24, %struct.avl_tree_node_t** %left7, align 8, !tbaa !14
  %27 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %28 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %27, align 8, !tbaa !2
  %29 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %ch, align 8, !tbaa !2
  %right8 = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %29, i32 0, i32 1
  store %struct.avl_tree_node_t* %28, %struct.avl_tree_node_t** %right8, align 8, !tbaa !15
  %30 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %31 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %30, align 8, !tbaa !2
  call void @avl_update_depth(%struct.avl_tree_node_t* %31)
  %32 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %ch, align 8, !tbaa !2
  %33 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  store %struct.avl_tree_node_t* %32, %struct.avl_tree_node_t** %33, align 8, !tbaa !2
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %34 = load %struct.avl_tree_node_t**, %struct.avl_tree_node_t*** %node.addr, align 8, !tbaa !2
  %35 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %34, align 8, !tbaa !2
  call void @avl_update_depth(%struct.avl_tree_node_t* %35)
  %36 = bitcast %struct.avl_tree_node_t** %ch to i8*
  call void @llvm.lifetime.end(i64 8, i8* %36) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @avl_remove_depth_helper(%struct.avl_tree_node_t* %ptr) #0 {
entry:
  %ptr.addr = alloca %struct.avl_tree_node_t*, align 8
  store %struct.avl_tree_node_t* %ptr, %struct.avl_tree_node_t** %ptr.addr, align 8, !tbaa !2
  %0 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %ptr.addr, align 8, !tbaa !2
  %tobool = icmp ne %struct.avl_tree_node_t* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %ptr.addr, align 8, !tbaa !2
  %right = getelementptr inbounds %struct.avl_tree_node_t, %struct.avl_tree_node_t* %1, i32 0, i32 1
  %2 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %right, align 8, !tbaa !15
  call void @avl_remove_depth_helper(%struct.avl_tree_node_t* %2)
  %3 = load %struct.avl_tree_node_t*, %struct.avl_tree_node_t** %ptr.addr, align 8, !tbaa !2
  call void @avl_update_depth(%struct.avl_tree_node_t* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { allocsize(0) }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"clang version 4.0.1 (https://github.com/llvm-mirror/clang.git 3c8961bedc65c9a15cbe67a2ef385a0938f7cfef) (https://github.com/llvm-mirror/llvm.git c8fccc53ed66d505898f8850bcc690c977a7c9a7)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"any pointer", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !3, i64 8}
!7 = !{!"", !3, i64 0, !3, i64 8, !3, i64 16}
!8 = !{!7, !3, i64 16}
!9 = !{!7, !3, i64 0}
!10 = !{!11, !3, i64 24}
!11 = !{!"avl_tree_node_t", !3, i64 0, !3, i64 8, !12, i64 16, !3, i64 24, !3, i64 32}
!12 = !{!"int", !4, i64 0}
!13 = !{!11, !3, i64 32}
!14 = !{!11, !3, i64 0}
!15 = !{!11, !3, i64 8}
!16 = !{!12, !12, i64 0}
!17 = !{!11, !12, i64 16}
!18 = !{!19, !19, i64 0}
!19 = !{!"long", !4, i64 0}
